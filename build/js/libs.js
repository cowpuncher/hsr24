/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./app/components/libs.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./app/components/libs.js":
/*!********************************!*\
  !*** ./app/components/libs.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(/*! ../../bower_components/jquery-ui/jquery-ui.min.js */ "./bower_components/jquery-ui/jquery-ui.min.js");

__webpack_require__(/*! ../../bower_components/slick-carousel/slick/slick.js */ "./bower_components/slick-carousel/slick/slick.js");

__webpack_require__(/*! ../../bower_components/magnific-popup/dist/jquery.magnific-popup.js */ "./bower_components/magnific-popup/dist/jquery.magnific-popup.js");

__webpack_require__(/*! ../../bower_components/jquery.maskedinput/dist/jquery.maskedinput.js */ "./bower_components/jquery.maskedinput/dist/jquery.maskedinput.js");

__webpack_require__(/*! ../../bower_components/jquery-validation/dist/jquery.validate.js */ "./bower_components/jquery-validation/dist/jquery.validate.js");

__webpack_require__(/*! ../../bower_components/jquery-validation/dist/additional-methods.js */ "./bower_components/jquery-validation/dist/additional-methods.js");

__webpack_require__(/*! ../../bower_components/jquery-validation/dist/localization/messages_ru.js */ "./bower_components/jquery-validation/dist/localization/messages_ru.js");

__webpack_require__(/*! ../../bower_components/bootstrap-select/dist/js/bootstrap-select.min.js */ "./bower_components/bootstrap-select/dist/js/bootstrap-select.min.js");

__webpack_require__(/*! ../../bower_components/bootstrap-select/dist/js/i18n/defaults-ru_RU.min.js */ "./bower_components/bootstrap-select/dist/js/i18n/defaults-ru_RU.min.js");

__webpack_require__(/*! ../../bower_components/air-datepicker/dist/js/datepicker.min.js */ "./bower_components/air-datepicker/dist/js/datepicker.min.js");

__webpack_require__(/*! ../../bower_components/svgxuse/svgxuse.min.js */ "./bower_components/svgxuse/svgxuse.min.js");

/***/ }),

/***/ "./bower_components/air-datepicker/dist/js/datepicker.min.js":
/*!*******************************************************************!*\
  !*** ./bower_components/air-datepicker/dist/js/datepicker.min.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

!function (t, e, i) {
  !function () {
    var s,
        a,
        n,
        h = "2.2.3",
        o = "datepicker",
        r = ".datepicker-here",
        c = !1,
        d = '<div class="datepicker"><i class="datepicker--pointer"></i><nav class="datepicker--nav"></nav><div class="datepicker--content"></div></div>',
        l = { classes: "", inline: !1, language: "ru", startDate: new Date(), firstDay: "", weekends: [6, 0], dateFormat: "", altField: "", altFieldDateFormat: "@", toggleSelected: !0, keyboardNav: !0, position: "bottom left", offset: 12, view: "days", minView: "days", showOtherMonths: !0, selectOtherMonths: !0, moveToOtherMonthsOnSelect: !0, showOtherYears: !0, selectOtherYears: !0, moveToOtherYearsOnSelect: !0, minDate: "", maxDate: "", disableNavWhenOutOfRange: !0, multipleDates: !1, multipleDatesSeparator: ",", range: !1, todayButton: !1, clearButton: !1, showEvent: "focus", autoClose: !1, monthsField: "monthsShort", prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>', nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>', navTitles: { days: "MM, <i>yyyy</i>", months: "yyyy", years: "yyyy1 - yyyy2" }, timepicker: !1, onlyTimepicker: !1, dateTimeSeparator: " ", timeFormat: "", minHours: 0, maxHours: 24, minMinutes: 0, maxMinutes: 59, hoursStep: 1, minutesStep: 1, onSelect: "", onShow: "", onHide: "", onChangeMonth: "", onChangeYear: "", onChangeDecade: "", onChangeView: "", onRenderCell: "" },
        u = { ctrlRight: [17, 39], ctrlUp: [17, 38], ctrlLeft: [17, 37], ctrlDown: [17, 40], shiftRight: [16, 39], shiftUp: [16, 38], shiftLeft: [16, 37], shiftDown: [16, 40], altUp: [18, 38], altRight: [18, 39], altLeft: [18, 37], altDown: [18, 40], ctrlShiftUp: [16, 17, 38] },
        m = function m(t, a) {
      this.el = t, this.$el = e(t), this.opts = e.extend(!0, {}, l, a, this.$el.data()), s == i && (s = e("body")), this.opts.startDate || (this.opts.startDate = new Date()), "INPUT" == this.el.nodeName && (this.elIsInput = !0), this.opts.altField && (this.$altField = "string" == typeof this.opts.altField ? e(this.opts.altField) : this.opts.altField), this.inited = !1, this.visible = !1, this.silent = !1, this.currentDate = this.opts.startDate, this.currentView = this.opts.view, this._createShortCuts(), this.selectedDates = [], this.views = {}, this.keys = [], this.minRange = "", this.maxRange = "", this._prevOnSelectValue = "", this.init();
    };n = m, n.prototype = { VERSION: h, viewIndexes: ["days", "months", "years"], init: function init() {
        c || this.opts.inline || !this.elIsInput || this._buildDatepickersContainer(), this._buildBaseHtml(), this._defineLocale(this.opts.language), this._syncWithMinMaxDates(), this.elIsInput && (this.opts.inline || (this._setPositionClasses(this.opts.position), this._bindEvents()), this.opts.keyboardNav && !this.opts.onlyTimepicker && this._bindKeyboardEvents(), this.$datepicker.on("mousedown", this._onMouseDownDatepicker.bind(this)), this.$datepicker.on("mouseup", this._onMouseUpDatepicker.bind(this))), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.opts.timepicker && (this.timepicker = new e.fn.datepicker.Timepicker(this, this.opts), this._bindTimepickerEvents()), this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), this.views[this.currentView] = new e.fn.datepicker.Body(this, this.currentView, this.opts), this.views[this.currentView].show(), this.nav = new e.fn.datepicker.Navigation(this, this.opts), this.view = this.currentView, this.$el.on("clickCell.adp", this._onClickCell.bind(this)), this.$datepicker.on("mouseenter", ".datepicker--cell", this._onMouseEnterCell.bind(this)), this.$datepicker.on("mouseleave", ".datepicker--cell", this._onMouseLeaveCell.bind(this)), this.inited = !0;
      }, _createShortCuts: function _createShortCuts() {
        this.minDate = this.opts.minDate ? this.opts.minDate : new Date(-86399999136e5), this.maxDate = this.opts.maxDate ? this.opts.maxDate : new Date(86399999136e5);
      }, _bindEvents: function _bindEvents() {
        this.$el.on(this.opts.showEvent + ".adp", this._onShowEvent.bind(this)), this.$el.on("mouseup.adp", this._onMouseUpEl.bind(this)), this.$el.on("blur.adp", this._onBlur.bind(this)), this.$el.on("keyup.adp", this._onKeyUpGeneral.bind(this)), e(t).on("resize.adp", this._onResize.bind(this)), e("body").on("mouseup.adp", this._onMouseUpBody.bind(this));
      }, _bindKeyboardEvents: function _bindKeyboardEvents() {
        this.$el.on("keydown.adp", this._onKeyDown.bind(this)), this.$el.on("keyup.adp", this._onKeyUp.bind(this)), this.$el.on("hotKey.adp", this._onHotKey.bind(this));
      }, _bindTimepickerEvents: function _bindTimepickerEvents() {
        this.$el.on("timeChange.adp", this._onTimeChange.bind(this));
      }, isWeekend: function isWeekend(t) {
        return -1 !== this.opts.weekends.indexOf(t);
      }, _defineLocale: function _defineLocale(t) {
        "string" == typeof t ? (this.loc = e.fn.datepicker.language[t], this.loc || (console.warn("Can't find language \"" + t + '" in Datepicker.language, will use "ru" instead'), this.loc = e.extend(!0, {}, e.fn.datepicker.language.ru)), this.loc = e.extend(!0, {}, e.fn.datepicker.language.ru, e.fn.datepicker.language[t])) : this.loc = e.extend(!0, {}, e.fn.datepicker.language.ru, t), this.opts.dateFormat && (this.loc.dateFormat = this.opts.dateFormat), this.opts.timeFormat && (this.loc.timeFormat = this.opts.timeFormat), "" !== this.opts.firstDay && (this.loc.firstDay = this.opts.firstDay), this.opts.timepicker && (this.loc.dateFormat = [this.loc.dateFormat, this.loc.timeFormat].join(this.opts.dateTimeSeparator)), this.opts.onlyTimepicker && (this.loc.dateFormat = this.loc.timeFormat);var i = this._getWordBoundaryRegExp;(this.loc.timeFormat.match(i("aa")) || this.loc.timeFormat.match(i("AA"))) && (this.ampm = !0);
      }, _buildDatepickersContainer: function _buildDatepickersContainer() {
        c = !0, s.append('<div class="datepickers-container" id="datepickers-container"></div>'), a = e("#datepickers-container");
      }, _buildBaseHtml: function _buildBaseHtml() {
        var t,
            i = e('<div class="datepicker-inline">');t = "INPUT" == this.el.nodeName ? this.opts.inline ? i.insertAfter(this.$el) : a : i.appendTo(this.$el), this.$datepicker = e(d).appendTo(t), this.$content = e(".datepicker--content", this.$datepicker), this.$nav = e(".datepicker--nav", this.$datepicker);
      }, _triggerOnChange: function _triggerOnChange() {
        if (!this.selectedDates.length) {
          if ("" === this._prevOnSelectValue) return;return this._prevOnSelectValue = "", this.opts.onSelect("", "", this);
        }var t,
            e = this.selectedDates,
            i = n.getParsedDate(e[0]),
            s = this,
            a = new Date(i.year, i.month, i.date, i.hours, i.minutes);t = e.map(function (t) {
          return s.formatDate(s.loc.dateFormat, t);
        }).join(this.opts.multipleDatesSeparator), (this.opts.multipleDates || this.opts.range) && (a = e.map(function (t) {
          var e = n.getParsedDate(t);return new Date(e.year, e.month, e.date, e.hours, e.minutes);
        })), this._prevOnSelectValue = t, this.opts.onSelect(t, a, this);
      }, next: function next() {
        var t = this.parsedDate,
            e = this.opts;switch (this.view) {case "days":
            this.date = new Date(t.year, t.month + 1, 1), e.onChangeMonth && e.onChangeMonth(this.parsedDate.month, this.parsedDate.year);break;case "months":
            this.date = new Date(t.year + 1, t.month, 1), e.onChangeYear && e.onChangeYear(this.parsedDate.year);break;case "years":
            this.date = new Date(t.year + 10, 0, 1), e.onChangeDecade && e.onChangeDecade(this.curDecade);}
      }, prev: function prev() {
        var t = this.parsedDate,
            e = this.opts;switch (this.view) {case "days":
            this.date = new Date(t.year, t.month - 1, 1), e.onChangeMonth && e.onChangeMonth(this.parsedDate.month, this.parsedDate.year);break;case "months":
            this.date = new Date(t.year - 1, t.month, 1), e.onChangeYear && e.onChangeYear(this.parsedDate.year);break;case "years":
            this.date = new Date(t.year - 10, 0, 1), e.onChangeDecade && e.onChangeDecade(this.curDecade);}
      }, formatDate: function formatDate(t, e) {
        e = e || this.date;var i,
            s = t,
            a = this._getWordBoundaryRegExp,
            h = this.loc,
            o = n.getLeadingZeroNum,
            r = n.getDecade(e),
            c = n.getParsedDate(e),
            d = c.fullHours,
            l = c.hours,
            u = t.match(a("aa")) || t.match(a("AA")),
            m = "am",
            p = this._replacer;switch (this.opts.timepicker && this.timepicker && u && (i = this.timepicker._getValidHoursFromDate(e, u), d = o(i.hours), l = i.hours, m = i.dayPeriod), !0) {case /@/.test(s):
            s = s.replace(/@/, e.getTime());case /aa/.test(s):
            s = p(s, a("aa"), m);case /AA/.test(s):
            s = p(s, a("AA"), m.toUpperCase());case /dd/.test(s):
            s = p(s, a("dd"), c.fullDate);case /d/.test(s):
            s = p(s, a("d"), c.date);case /DD/.test(s):
            s = p(s, a("DD"), h.days[c.day]);case /D/.test(s):
            s = p(s, a("D"), h.daysShort[c.day]);case /mm/.test(s):
            s = p(s, a("mm"), c.fullMonth);case /m/.test(s):
            s = p(s, a("m"), c.month + 1);case /MM/.test(s):
            s = p(s, a("MM"), this.loc.months[c.month]);case /M/.test(s):
            s = p(s, a("M"), h.monthsShort[c.month]);case /ii/.test(s):
            s = p(s, a("ii"), c.fullMinutes);case /i/.test(s):
            s = p(s, a("i"), c.minutes);case /hh/.test(s):
            s = p(s, a("hh"), d);case /h/.test(s):
            s = p(s, a("h"), l);case /yyyy/.test(s):
            s = p(s, a("yyyy"), c.year);case /yyyy1/.test(s):
            s = p(s, a("yyyy1"), r[0]);case /yyyy2/.test(s):
            s = p(s, a("yyyy2"), r[1]);case /yy/.test(s):
            s = p(s, a("yy"), c.year.toString().slice(-2));}return s;
      }, _replacer: function _replacer(t, e, i) {
        return t.replace(e, function (t, e, s, a) {
          return e + i + a;
        });
      }, _getWordBoundaryRegExp: function _getWordBoundaryRegExp(t) {
        var e = "\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";return new RegExp("(^|>|" + e + ")(" + t + ")($|<|" + e + ")", "g");
      }, selectDate: function selectDate(t) {
        var e = this,
            i = e.opts,
            s = e.parsedDate,
            a = e.selectedDates,
            h = a.length,
            o = "";if (Array.isArray(t)) return void t.forEach(function (t) {
          e.selectDate(t);
        });if (t instanceof Date) {
          if (this.lastSelectedDate = t, this.timepicker && this.timepicker._setTime(t), e._trigger("selectDate", t), this.timepicker && (t.setHours(this.timepicker.hours), t.setMinutes(this.timepicker.minutes)), "days" == e.view && t.getMonth() != s.month && i.moveToOtherMonthsOnSelect && (o = new Date(t.getFullYear(), t.getMonth(), 1)), "years" == e.view && t.getFullYear() != s.year && i.moveToOtherYearsOnSelect && (o = new Date(t.getFullYear(), 0, 1)), o && (e.silent = !0, e.date = o, e.silent = !1, e.nav._render()), i.multipleDates && !i.range) {
            if (h === i.multipleDates) return;e._isSelected(t) || e.selectedDates.push(t);
          } else i.range ? 2 == h ? (e.selectedDates = [t], e.minRange = t, e.maxRange = "") : 1 == h ? (e.selectedDates.push(t), e.maxRange ? e.minRange = t : e.maxRange = t, n.bigger(e.maxRange, e.minRange) && (e.maxRange = e.minRange, e.minRange = t), e.selectedDates = [e.minRange, e.maxRange]) : (e.selectedDates = [t], e.minRange = t) : e.selectedDates = [t];e._setInputValue(), i.onSelect && e._triggerOnChange(), i.autoClose && !this.timepickerIsActive && (i.multipleDates || i.range ? i.range && 2 == e.selectedDates.length && e.hide() : e.hide()), e.views[this.currentView]._render();
        }
      }, removeDate: function removeDate(t) {
        var e = this.selectedDates,
            i = this;if (t instanceof Date) return e.some(function (s, a) {
          return n.isSame(s, t) ? (e.splice(a, 1), i.selectedDates.length ? i.lastSelectedDate = i.selectedDates[i.selectedDates.length - 1] : (i.minRange = "", i.maxRange = "", i.lastSelectedDate = ""), i.views[i.currentView]._render(), i._setInputValue(), i.opts.onSelect && i._triggerOnChange(), !0) : void 0;
        });
      }, today: function today() {
        this.silent = !0, this.view = this.opts.minView, this.silent = !1, this.date = new Date(), this.opts.todayButton instanceof Date && this.selectDate(this.opts.todayButton);
      }, clear: function clear() {
        this.selectedDates = [], this.minRange = "", this.maxRange = "", this.views[this.currentView]._render(), this._setInputValue(), this.opts.onSelect && this._triggerOnChange();
      }, update: function update(t, i) {
        var s = arguments.length,
            a = this.lastSelectedDate;return 2 == s ? this.opts[t] = i : 1 == s && "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && (this.opts = e.extend(!0, this.opts, t)), this._createShortCuts(), this._syncWithMinMaxDates(), this._defineLocale(this.opts.language), this.nav._addButtonsIfNeed(), this.opts.onlyTimepicker || this.nav._render(), this.views[this.currentView]._render(), this.elIsInput && !this.opts.inline && (this._setPositionClasses(this.opts.position), this.visible && this.setPosition(this.opts.position)), this.opts.classes && this.$datepicker.addClass(this.opts.classes), this.opts.onlyTimepicker && this.$datepicker.addClass("-only-timepicker-"), this.opts.timepicker && (a && this.timepicker._handleDate(a), this.timepicker._updateRanges(), this.timepicker._updateCurrentTime(), a && (a.setHours(this.timepicker.hours), a.setMinutes(this.timepicker.minutes))), this._setInputValue(), this;
      }, _syncWithMinMaxDates: function _syncWithMinMaxDates() {
        var t = this.date.getTime();this.silent = !0, this.minTime > t && (this.date = this.minDate), this.maxTime < t && (this.date = this.maxDate), this.silent = !1;
      }, _isSelected: function _isSelected(t, e) {
        var i = !1;return this.selectedDates.some(function (s) {
          return n.isSame(s, t, e) ? (i = s, !0) : void 0;
        }), i;
      }, _setInputValue: function _setInputValue() {
        var t,
            e = this,
            i = e.opts,
            s = e.loc.dateFormat,
            a = i.altFieldDateFormat,
            n = e.selectedDates.map(function (t) {
          return e.formatDate(s, t);
        });i.altField && e.$altField.length && (t = this.selectedDates.map(function (t) {
          return e.formatDate(a, t);
        }), t = t.join(this.opts.multipleDatesSeparator), this.$altField.val(t)), n = n.join(this.opts.multipleDatesSeparator), this.$el.val(n);
      }, _isInRange: function _isInRange(t, e) {
        var i = t.getTime(),
            s = n.getParsedDate(t),
            a = n.getParsedDate(this.minDate),
            h = n.getParsedDate(this.maxDate),
            o = new Date(s.year, s.month, a.date).getTime(),
            r = new Date(s.year, s.month, h.date).getTime(),
            c = { day: i >= this.minTime && i <= this.maxTime, month: o >= this.minTime && r <= this.maxTime, year: s.year >= a.year && s.year <= h.year };return e ? c[e] : c.day;
      }, _getDimensions: function _getDimensions(t) {
        var e = t.offset();return { width: t.outerWidth(), height: t.outerHeight(), left: e.left, top: e.top };
      }, _getDateFromCell: function _getDateFromCell(t) {
        var e = this.parsedDate,
            s = t.data("year") || e.year,
            a = t.data("month") == i ? e.month : t.data("month"),
            n = t.data("date") || 1;return new Date(s, a, n);
      }, _setPositionClasses: function _setPositionClasses(t) {
        t = t.split(" ");var e = t[0],
            i = t[1],
            s = "datepicker -" + e + "-" + i + "- -from-" + e + "-";this.visible && (s += " active"), this.$datepicker.removeAttr("class").addClass(s);
      }, setPosition: function setPosition(t) {
        t = t || this.opts.position;var e,
            i,
            s = this._getDimensions(this.$el),
            a = this._getDimensions(this.$datepicker),
            n = t.split(" "),
            h = this.opts.offset,
            o = n[0],
            r = n[1];switch (o) {case "top":
            e = s.top - a.height - h;break;case "right":
            i = s.left + s.width + h;break;case "bottom":
            e = s.top + s.height + h;break;case "left":
            i = s.left - a.width - h;}switch (r) {case "top":
            e = s.top;break;case "right":
            i = s.left + s.width - a.width;break;case "bottom":
            e = s.top + s.height - a.height;break;case "left":
            i = s.left;break;case "center":
            /left|right/.test(o) ? e = s.top + s.height / 2 - a.height / 2 : i = s.left + s.width / 2 - a.width / 2;}this.$datepicker.css({ left: i, top: e });
      }, show: function show() {
        var t = this.opts.onShow;this.setPosition(this.opts.position), this.$datepicker.addClass("active"), this.visible = !0, t && this._bindVisionEvents(t);
      }, hide: function hide() {
        var t = this.opts.onHide;this.$datepicker.removeClass("active").css({ left: "-100000px" }), this.focused = "", this.keys = [], this.inFocus = !1, this.visible = !1, this.$el.blur(), t && this._bindVisionEvents(t);
      }, down: function down(t) {
        this._changeView(t, "down");
      }, up: function up(t) {
        this._changeView(t, "up");
      }, _bindVisionEvents: function _bindVisionEvents(t) {
        this.$datepicker.off("transitionend.dp"), t(this, !1), this.$datepicker.one("transitionend.dp", t.bind(this, this, !0));
      }, _changeView: function _changeView(t, e) {
        t = t || this.focused || this.date;var i = "up" == e ? this.viewIndex + 1 : this.viewIndex - 1;i > 2 && (i = 2), 0 > i && (i = 0), this.silent = !0, this.date = new Date(t.getFullYear(), t.getMonth(), 1), this.silent = !1, this.view = this.viewIndexes[i];
      }, _handleHotKey: function _handleHotKey(t) {
        var e,
            i,
            s,
            a = n.getParsedDate(this._getFocusedDate()),
            h = this.opts,
            o = !1,
            r = !1,
            c = !1,
            d = a.year,
            l = a.month,
            u = a.date;switch (t) {case "ctrlRight":case "ctrlUp":
            l += 1, o = !0;break;case "ctrlLeft":case "ctrlDown":
            l -= 1, o = !0;break;case "shiftRight":case "shiftUp":
            r = !0, d += 1;break;case "shiftLeft":case "shiftDown":
            r = !0, d -= 1;break;case "altRight":case "altUp":
            c = !0, d += 10;break;case "altLeft":case "altDown":
            c = !0, d -= 10;break;case "ctrlShiftUp":
            this.up();}s = n.getDaysCount(new Date(d, l)), i = new Date(d, l, u), u > s && (u = s), i.getTime() < this.minTime ? i = this.minDate : i.getTime() > this.maxTime && (i = this.maxDate), this.focused = i, e = n.getParsedDate(i), o && h.onChangeMonth && h.onChangeMonth(e.month, e.year), r && h.onChangeYear && h.onChangeYear(e.year), c && h.onChangeDecade && h.onChangeDecade(this.curDecade);
      }, _registerKey: function _registerKey(t) {
        var e = this.keys.some(function (e) {
          return e == t;
        });e || this.keys.push(t);
      }, _unRegisterKey: function _unRegisterKey(t) {
        var e = this.keys.indexOf(t);this.keys.splice(e, 1);
      }, _isHotKeyPressed: function _isHotKeyPressed() {
        var t,
            e = !1,
            i = this,
            s = this.keys.sort();for (var a in u) {
          t = u[a], s.length == t.length && t.every(function (t, e) {
            return t == s[e];
          }) && (i._trigger("hotKey", a), e = !0);
        }return e;
      }, _trigger: function _trigger(t, e) {
        this.$el.trigger(t, e);
      }, _focusNextCell: function _focusNextCell(t, e) {
        e = e || this.cellType;var i = n.getParsedDate(this._getFocusedDate()),
            s = i.year,
            a = i.month,
            h = i.date;if (!this._isHotKeyPressed()) {
          switch (t) {case 37:
              "day" == e ? h -= 1 : "", "month" == e ? a -= 1 : "", "year" == e ? s -= 1 : "";break;case 38:
              "day" == e ? h -= 7 : "", "month" == e ? a -= 3 : "", "year" == e ? s -= 4 : "";break;case 39:
              "day" == e ? h += 1 : "", "month" == e ? a += 1 : "", "year" == e ? s += 1 : "";break;case 40:
              "day" == e ? h += 7 : "", "month" == e ? a += 3 : "", "year" == e ? s += 4 : "";}var o = new Date(s, a, h);o.getTime() < this.minTime ? o = this.minDate : o.getTime() > this.maxTime && (o = this.maxDate), this.focused = o;
        }
      }, _getFocusedDate: function _getFocusedDate() {
        var t = this.focused || this.selectedDates[this.selectedDates.length - 1],
            e = this.parsedDate;if (!t) switch (this.view) {case "days":
            t = new Date(e.year, e.month, new Date().getDate());break;case "months":
            t = new Date(e.year, e.month, 1);break;case "years":
            t = new Date(e.year, 0, 1);}return t;
      }, _getCell: function _getCell(t, i) {
        i = i || this.cellType;var s,
            a = n.getParsedDate(t),
            h = '.datepicker--cell[data-year="' + a.year + '"]';switch (i) {case "month":
            h = '[data-month="' + a.month + '"]';break;case "day":
            h += '[data-month="' + a.month + '"][data-date="' + a.date + '"]';}return s = this.views[this.currentView].$el.find(h), s.length ? s : e("");
      }, destroy: function destroy() {
        var t = this;t.$el.off(".adp").data("datepicker", ""), t.selectedDates = [], t.focused = "", t.views = {}, t.keys = [], t.minRange = "", t.maxRange = "", t.opts.inline || !t.elIsInput ? t.$datepicker.closest(".datepicker-inline").remove() : t.$datepicker.remove();
      }, _handleAlreadySelectedDates: function _handleAlreadySelectedDates(t, e) {
        this.opts.range ? this.opts.toggleSelected ? this.removeDate(e) : 2 != this.selectedDates.length && this._trigger("clickCell", e) : this.opts.toggleSelected && this.removeDate(e), this.opts.toggleSelected || (this.lastSelectedDate = t, this.opts.timepicker && (this.timepicker._setTime(t), this.timepicker.update()));
      }, _onShowEvent: function _onShowEvent(t) {
        this.visible || this.show();
      }, _onBlur: function _onBlur() {
        !this.inFocus && this.visible && this.hide();
      }, _onMouseDownDatepicker: function _onMouseDownDatepicker(t) {
        this.inFocus = !0;
      }, _onMouseUpDatepicker: function _onMouseUpDatepicker(t) {
        this.inFocus = !1, t.originalEvent.inFocus = !0, t.originalEvent.timepickerFocus || this.$el.focus();
      }, _onKeyUpGeneral: function _onKeyUpGeneral(t) {
        var e = this.$el.val();e || this.clear();
      }, _onResize: function _onResize() {
        this.visible && this.setPosition();
      }, _onMouseUpBody: function _onMouseUpBody(t) {
        t.originalEvent.inFocus || this.visible && !this.inFocus && this.hide();
      }, _onMouseUpEl: function _onMouseUpEl(t) {
        t.originalEvent.inFocus = !0, setTimeout(this._onKeyUpGeneral.bind(this), 4);
      }, _onKeyDown: function _onKeyDown(t) {
        var e = t.which;if (this._registerKey(e), e >= 37 && 40 >= e && (t.preventDefault(), this._focusNextCell(e)), 13 == e && this.focused) {
          if (this._getCell(this.focused).hasClass("-disabled-")) return;if (this.view != this.opts.minView) this.down();else {
            var i = this._isSelected(this.focused, this.cellType);if (!i) return this.timepicker && (this.focused.setHours(this.timepicker.hours), this.focused.setMinutes(this.timepicker.minutes)), void this.selectDate(this.focused);this._handleAlreadySelectedDates(i, this.focused);
          }
        }27 == e && this.hide();
      }, _onKeyUp: function _onKeyUp(t) {
        var e = t.which;this._unRegisterKey(e);
      }, _onHotKey: function _onHotKey(t, e) {
        this._handleHotKey(e);
      }, _onMouseEnterCell: function _onMouseEnterCell(t) {
        var i = e(t.target).closest(".datepicker--cell"),
            s = this._getDateFromCell(i);this.silent = !0, this.focused && (this.focused = ""), i.addClass("-focus-"), this.focused = s, this.silent = !1, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", n.less(this.minRange, this.focused) && (this.maxRange = this.minRange, this.minRange = ""), this.views[this.currentView]._update());
      }, _onMouseLeaveCell: function _onMouseLeaveCell(t) {
        var i = e(t.target).closest(".datepicker--cell");i.removeClass("-focus-"), this.silent = !0, this.focused = "", this.silent = !1;
      }, _onTimeChange: function _onTimeChange(t, e, i) {
        var s = new Date(),
            a = this.selectedDates,
            n = !1;a.length && (n = !0, s = this.lastSelectedDate), s.setHours(e), s.setMinutes(i), n || this._getCell(s).hasClass("-disabled-") ? (this._setInputValue(), this.opts.onSelect && this._triggerOnChange()) : this.selectDate(s);
      }, _onClickCell: function _onClickCell(t, e) {
        this.timepicker && (e.setHours(this.timepicker.hours), e.setMinutes(this.timepicker.minutes)), this.selectDate(e);
      }, set focused(t) {
        if (!t && this.focused) {
          var e = this._getCell(this.focused);e.length && e.removeClass("-focus-");
        }this._focused = t, this.opts.range && 1 == this.selectedDates.length && (this.minRange = this.selectedDates[0], this.maxRange = "", n.less(this.minRange, this._focused) && (this.maxRange = this.minRange, this.minRange = "")), this.silent || (this.date = t);
      }, get focused() {
        return this._focused;
      }, get parsedDate() {
        return n.getParsedDate(this.date);
      }, set date(t) {
        return t instanceof Date ? (this.currentDate = t, this.inited && !this.silent && (this.views[this.view]._render(), this.nav._render(), this.visible && this.elIsInput && this.setPosition()), t) : void 0;
      }, get date() {
        return this.currentDate;
      }, set view(t) {
        return this.viewIndex = this.viewIndexes.indexOf(t), this.viewIndex < 0 ? void 0 : (this.prevView = this.currentView, this.currentView = t, this.inited && (this.views[t] ? this.views[t]._render() : this.views[t] = new e.fn.datepicker.Body(this, t, this.opts), this.views[this.prevView].hide(), this.views[t].show(), this.nav._render(), this.opts.onChangeView && this.opts.onChangeView(t), this.elIsInput && this.visible && this.setPosition()), t);
      }, get view() {
        return this.currentView;
      }, get cellType() {
        return this.view.substring(0, this.view.length - 1);
      }, get minTime() {
        var t = n.getParsedDate(this.minDate);return new Date(t.year, t.month, t.date).getTime();
      }, get maxTime() {
        var t = n.getParsedDate(this.maxDate);return new Date(t.year, t.month, t.date).getTime();
      }, get curDecade() {
        return n.getDecade(this.date);
      } }, n.getDaysCount = function (t) {
      return new Date(t.getFullYear(), t.getMonth() + 1, 0).getDate();
    }, n.getParsedDate = function (t) {
      return { year: t.getFullYear(), month: t.getMonth(), fullMonth: t.getMonth() + 1 < 10 ? "0" + (t.getMonth() + 1) : t.getMonth() + 1, date: t.getDate(), fullDate: t.getDate() < 10 ? "0" + t.getDate() : t.getDate(), day: t.getDay(), hours: t.getHours(), fullHours: t.getHours() < 10 ? "0" + t.getHours() : t.getHours(), minutes: t.getMinutes(), fullMinutes: t.getMinutes() < 10 ? "0" + t.getMinutes() : t.getMinutes() };
    }, n.getDecade = function (t) {
      var e = 10 * Math.floor(t.getFullYear() / 10);return [e, e + 9];
    }, n.template = function (t, e) {
      return t.replace(/#\{([\w]+)\}/g, function (t, i) {
        return e[i] || 0 === e[i] ? e[i] : void 0;
      });
    }, n.isSame = function (t, e, i) {
      if (!t || !e) return !1;var s = n.getParsedDate(t),
          a = n.getParsedDate(e),
          h = i ? i : "day",
          o = { day: s.date == a.date && s.month == a.month && s.year == a.year, month: s.month == a.month && s.year == a.year, year: s.year == a.year };return o[h];
    }, n.less = function (t, e, i) {
      return t && e ? e.getTime() < t.getTime() : !1;
    }, n.bigger = function (t, e, i) {
      return t && e ? e.getTime() > t.getTime() : !1;
    }, n.getLeadingZeroNum = function (t) {
      return parseInt(t) < 10 ? "0" + t : t;
    }, n.resetTime = function (t) {
      return "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? (t = n.getParsedDate(t), new Date(t.year, t.month, t.date)) : void 0;
    }, e.fn.datepicker = function (t) {
      return this.each(function () {
        if (e.data(this, o)) {
          var i = e.data(this, o);i.opts = e.extend(!0, i.opts, t), i.update();
        } else e.data(this, o, new m(this, t));
      });
    }, e.fn.datepicker.Constructor = m, e.fn.datepicker.language = { ru: { days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"], daysShort: ["Вос", "Пон", "Вто", "Сре", "Чет", "Пят", "Суб"], daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"], today: "Сегодня", clear: "Очистить", dateFormat: "dd.mm.yyyy", timeFormat: "hh:ii", firstDay: 1 } }, e(function () {
      e(r).datepicker();
    });
  }(), function () {
    var t = { days: '<div class="datepicker--days datepicker--body"><div class="datepicker--days-names"></div><div class="datepicker--cells datepicker--cells-days"></div></div>', months: '<div class="datepicker--months datepicker--body"><div class="datepicker--cells datepicker--cells-months"></div></div>', years: '<div class="datepicker--years datepicker--body"><div class="datepicker--cells datepicker--cells-years"></div></div>' },
        s = e.fn.datepicker,
        a = s.Constructor;s.Body = function (t, i, s) {
      this.d = t, this.type = i, this.opts = s, this.$el = e(""), this.opts.onlyTimepicker || this.init();
    }, s.Body.prototype = { init: function init() {
        this._buildBaseHtml(), this._render(), this._bindEvents();
      }, _bindEvents: function _bindEvents() {
        this.$el.on("click", ".datepicker--cell", e.proxy(this._onClickCell, this));
      }, _buildBaseHtml: function _buildBaseHtml() {
        this.$el = e(t[this.type]).appendTo(this.d.$content), this.$names = e(".datepicker--days-names", this.$el), this.$cells = e(".datepicker--cells", this.$el);
      }, _getDayNamesHtml: function _getDayNamesHtml(t, e, s, a) {
        return e = e != i ? e : t, s = s ? s : "", a = a != i ? a : 0, a > 7 ? s : 7 == e ? this._getDayNamesHtml(t, 0, s, ++a) : (s += '<div class="datepicker--day-name' + (this.d.isWeekend(e) ? " -weekend-" : "") + '">' + this.d.loc.daysMin[e] + "</div>", this._getDayNamesHtml(t, ++e, s, ++a));
      }, _getCellContents: function _getCellContents(t, e) {
        var i = "datepicker--cell datepicker--cell-" + e,
            s = new Date(),
            n = this.d,
            h = a.resetTime(n.minRange),
            o = a.resetTime(n.maxRange),
            r = n.opts,
            c = a.getParsedDate(t),
            d = {},
            l = c.date;switch (e) {case "day":
            n.isWeekend(c.day) && (i += " -weekend-"), c.month != this.d.parsedDate.month && (i += " -other-month-", r.selectOtherMonths || (i += " -disabled-"), r.showOtherMonths || (l = ""));break;case "month":
            l = n.loc[n.opts.monthsField][c.month];break;case "year":
            var u = n.curDecade;l = c.year, (c.year < u[0] || c.year > u[1]) && (i += " -other-decade-", r.selectOtherYears || (i += " -disabled-"), r.showOtherYears || (l = ""));}return r.onRenderCell && (d = r.onRenderCell(t, e) || {}, l = d.html ? d.html : l, i += d.classes ? " " + d.classes : ""), r.range && (a.isSame(h, t, e) && (i += " -range-from-"), a.isSame(o, t, e) && (i += " -range-to-"), 1 == n.selectedDates.length && n.focused ? ((a.bigger(h, t) && a.less(n.focused, t) || a.less(o, t) && a.bigger(n.focused, t)) && (i += " -in-range-"), a.less(o, t) && a.isSame(n.focused, t) && (i += " -range-from-"), a.bigger(h, t) && a.isSame(n.focused, t) && (i += " -range-to-")) : 2 == n.selectedDates.length && a.bigger(h, t) && a.less(o, t) && (i += " -in-range-")), a.isSame(s, t, e) && (i += " -current-"), n.focused && a.isSame(t, n.focused, e) && (i += " -focus-"), n._isSelected(t, e) && (i += " -selected-"), (!n._isInRange(t, e) || d.disabled) && (i += " -disabled-"), { html: l, classes: i };
      }, _getDaysHtml: function _getDaysHtml(t) {
        var e = a.getDaysCount(t),
            i = new Date(t.getFullYear(), t.getMonth(), 1).getDay(),
            s = new Date(t.getFullYear(), t.getMonth(), e).getDay(),
            n = i - this.d.loc.firstDay,
            h = 6 - s + this.d.loc.firstDay;n = 0 > n ? n + 7 : n, h = h > 6 ? h - 7 : h;for (var o, r, c = -n + 1, d = "", l = c, u = e + h; u >= l; l++) {
          r = t.getFullYear(), o = t.getMonth(), d += this._getDayHtml(new Date(r, o, l));
        }return d;
      }, _getDayHtml: function _getDayHtml(t) {
        var e = this._getCellContents(t, "day");return '<div class="' + e.classes + '" data-date="' + t.getDate() + '" data-month="' + t.getMonth() + '" data-year="' + t.getFullYear() + '">' + e.html + "</div>";
      }, _getMonthsHtml: function _getMonthsHtml(t) {
        for (var e = "", i = a.getParsedDate(t), s = 0; 12 > s;) {
          e += this._getMonthHtml(new Date(i.year, s)), s++;
        }return e;
      }, _getMonthHtml: function _getMonthHtml(t) {
        var e = this._getCellContents(t, "month");return '<div class="' + e.classes + '" data-month="' + t.getMonth() + '">' + e.html + "</div>";
      }, _getYearsHtml: function _getYearsHtml(t) {
        var e = (a.getParsedDate(t), a.getDecade(t)),
            i = e[0] - 1,
            s = "",
            n = i;for (n; n <= e[1] + 1; n++) {
          s += this._getYearHtml(new Date(n, 0));
        }return s;
      }, _getYearHtml: function _getYearHtml(t) {
        var e = this._getCellContents(t, "year");return '<div class="' + e.classes + '" data-year="' + t.getFullYear() + '">' + e.html + "</div>";
      }, _renderTypes: { days: function days() {
          var t = this._getDayNamesHtml(this.d.loc.firstDay),
              e = this._getDaysHtml(this.d.currentDate);this.$cells.html(e), this.$names.html(t);
        }, months: function months() {
          var t = this._getMonthsHtml(this.d.currentDate);this.$cells.html(t);
        }, years: function years() {
          var t = this._getYearsHtml(this.d.currentDate);this.$cells.html(t);
        } }, _render: function _render() {
        this.opts.onlyTimepicker || this._renderTypes[this.type].bind(this)();
      }, _update: function _update() {
        var t,
            i,
            s,
            a = e(".datepicker--cell", this.$cells),
            n = this;a.each(function (a, h) {
          i = e(this), s = n.d._getDateFromCell(e(this)), t = n._getCellContents(s, n.d.cellType), i.attr("class", t.classes);
        });
      }, show: function show() {
        this.opts.onlyTimepicker || (this.$el.addClass("active"), this.acitve = !0);
      }, hide: function hide() {
        this.$el.removeClass("active"), this.active = !1;
      }, _handleClick: function _handleClick(t) {
        var e = t.data("date") || 1,
            i = t.data("month") || 0,
            s = t.data("year") || this.d.parsedDate.year,
            a = this.d;if (a.view != this.opts.minView) return void a.down(new Date(s, i, e));var n = new Date(s, i, e),
            h = this.d._isSelected(n, this.d.cellType);return h ? void a._handleAlreadySelectedDates.bind(a, h, n)() : void a._trigger("clickCell", n);
      }, _onClickCell: function _onClickCell(t) {
        var i = e(t.target).closest(".datepicker--cell");i.hasClass("-disabled-") || this._handleClick.bind(this)(i);
      } };
  }(), function () {
    var t = '<div class="datepicker--nav-action" data-action="prev">#{prevHtml}</div><div class="datepicker--nav-title">#{title}</div><div class="datepicker--nav-action" data-action="next">#{nextHtml}</div>',
        i = '<div class="datepicker--buttons"></div>',
        s = '<span class="datepicker--button" data-action="#{action}">#{label}</span>',
        a = e.fn.datepicker,
        n = a.Constructor;a.Navigation = function (t, e) {
      this.d = t, this.opts = e, this.$buttonsContainer = "", this.init();
    }, a.Navigation.prototype = { init: function init() {
        this._buildBaseHtml(), this._bindEvents();
      }, _bindEvents: function _bindEvents() {
        this.d.$nav.on("click", ".datepicker--nav-action", e.proxy(this._onClickNavButton, this)), this.d.$nav.on("click", ".datepicker--nav-title", e.proxy(this._onClickNavTitle, this)), this.d.$datepicker.on("click", ".datepicker--button", e.proxy(this._onClickNavButton, this));
      }, _buildBaseHtml: function _buildBaseHtml() {
        this.opts.onlyTimepicker || this._render(), this._addButtonsIfNeed();
      }, _addButtonsIfNeed: function _addButtonsIfNeed() {
        this.opts.todayButton && this._addButton("today"), this.opts.clearButton && this._addButton("clear");
      }, _render: function _render() {
        var i = this._getTitle(this.d.currentDate),
            s = n.template(t, e.extend({ title: i }, this.opts));this.d.$nav.html(s), "years" == this.d.view && e(".datepicker--nav-title", this.d.$nav).addClass("-disabled-"), this.setNavStatus();
      }, _getTitle: function _getTitle(t) {
        return this.d.formatDate(this.opts.navTitles[this.d.view], t);
      }, _addButton: function _addButton(t) {
        this.$buttonsContainer.length || this._addButtonsContainer();var i = { action: t, label: this.d.loc[t] },
            a = n.template(s, i);e("[data-action=" + t + "]", this.$buttonsContainer).length || this.$buttonsContainer.append(a);
      }, _addButtonsContainer: function _addButtonsContainer() {
        this.d.$datepicker.append(i), this.$buttonsContainer = e(".datepicker--buttons", this.d.$datepicker);
      }, setNavStatus: function setNavStatus() {
        if ((this.opts.minDate || this.opts.maxDate) && this.opts.disableNavWhenOutOfRange) {
          var t = this.d.parsedDate,
              e = t.month,
              i = t.year,
              s = t.date;switch (this.d.view) {case "days":
              this.d._isInRange(new Date(i, e - 1, 1), "month") || this._disableNav("prev"), this.d._isInRange(new Date(i, e + 1, 1), "month") || this._disableNav("next");break;case "months":
              this.d._isInRange(new Date(i - 1, e, s), "year") || this._disableNav("prev"), this.d._isInRange(new Date(i + 1, e, s), "year") || this._disableNav("next");break;case "years":
              var a = n.getDecade(this.d.date);this.d._isInRange(new Date(a[0] - 1, 0, 1), "year") || this._disableNav("prev"), this.d._isInRange(new Date(a[1] + 1, 0, 1), "year") || this._disableNav("next");}
        }
      }, _disableNav: function _disableNav(t) {
        e('[data-action="' + t + '"]', this.d.$nav).addClass("-disabled-");
      }, _activateNav: function _activateNav(t) {
        e('[data-action="' + t + '"]', this.d.$nav).removeClass("-disabled-");
      }, _onClickNavButton: function _onClickNavButton(t) {
        var i = e(t.target).closest("[data-action]"),
            s = i.data("action");this.d[s]();
      }, _onClickNavTitle: function _onClickNavTitle(t) {
        return e(t.target).hasClass("-disabled-") ? void 0 : "days" == this.d.view ? this.d.view = "months" : void (this.d.view = "years");
      } };
  }(), function () {
    var t = '<div class="datepicker--time"><div class="datepicker--time-current">   <span class="datepicker--time-current-hours">#{hourVisible}</span>   <span class="datepicker--time-current-colon">:</span>   <span class="datepicker--time-current-minutes">#{minValue}</span></div><div class="datepicker--time-sliders">   <div class="datepicker--time-row">      <input type="range" name="hours" value="#{hourValue}" min="#{hourMin}" max="#{hourMax}" step="#{hourStep}"/>   </div>   <div class="datepicker--time-row">      <input type="range" name="minutes" value="#{minValue}" min="#{minMin}" max="#{minMax}" step="#{minStep}"/>   </div></div></div>',
        i = e.fn.datepicker,
        s = i.Constructor;i.Timepicker = function (t, e) {
      this.d = t, this.opts = e, this.init();
    }, i.Timepicker.prototype = { init: function init() {
        var t = "input";this._setTime(this.d.date), this._buildHTML(), navigator.userAgent.match(/trident/gi) && (t = "change"), this.d.$el.on("selectDate", this._onSelectDate.bind(this)), this.$ranges.on(t, this._onChangeRange.bind(this)), this.$ranges.on("mouseup", this._onMouseUpRange.bind(this)), this.$ranges.on("mousemove focus ", this._onMouseEnterRange.bind(this)), this.$ranges.on("mouseout blur", this._onMouseOutRange.bind(this));
      }, _setTime: function _setTime(t) {
        var e = s.getParsedDate(t);this._handleDate(t), this.hours = e.hours < this.minHours ? this.minHours : e.hours, this.minutes = e.minutes < this.minMinutes ? this.minMinutes : e.minutes;
      }, _setMinTimeFromDate: function _setMinTimeFromDate(t) {
        this.minHours = t.getHours(), this.minMinutes = t.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() > t.getHours() && (this.minMinutes = this.opts.minMinutes);
      }, _setMaxTimeFromDate: function _setMaxTimeFromDate(t) {
        this.maxHours = t.getHours(), this.maxMinutes = t.getMinutes(), this.d.lastSelectedDate && this.d.lastSelectedDate.getHours() < t.getHours() && (this.maxMinutes = this.opts.maxMinutes);
      }, _setDefaultMinMaxTime: function _setDefaultMinMaxTime() {
        var t = 23,
            e = 59,
            i = this.opts;this.minHours = i.minHours < 0 || i.minHours > t ? 0 : i.minHours, this.minMinutes = i.minMinutes < 0 || i.minMinutes > e ? 0 : i.minMinutes, this.maxHours = i.maxHours < 0 || i.maxHours > t ? t : i.maxHours, this.maxMinutes = i.maxMinutes < 0 || i.maxMinutes > e ? e : i.maxMinutes;
      }, _validateHoursMinutes: function _validateHoursMinutes(t) {
        this.hours < this.minHours ? this.hours = this.minHours : this.hours > this.maxHours && (this.hours = this.maxHours), this.minutes < this.minMinutes ? this.minutes = this.minMinutes : this.minutes > this.maxMinutes && (this.minutes = this.maxMinutes);
      }, _buildHTML: function _buildHTML() {
        var i = s.getLeadingZeroNum,
            a = { hourMin: this.minHours, hourMax: i(this.maxHours), hourStep: this.opts.hoursStep, hourValue: this.hours, hourVisible: i(this.displayHours), minMin: this.minMinutes, minMax: i(this.maxMinutes), minStep: this.opts.minutesStep, minValue: i(this.minutes) },
            n = s.template(t, a);this.$timepicker = e(n).appendTo(this.d.$datepicker), this.$ranges = e('[type="range"]', this.$timepicker), this.$hours = e('[name="hours"]', this.$timepicker), this.$minutes = e('[name="minutes"]', this.$timepicker), this.$hoursText = e(".datepicker--time-current-hours", this.$timepicker), this.$minutesText = e(".datepicker--time-current-minutes", this.$timepicker), this.d.ampm && (this.$ampm = e('<span class="datepicker--time-current-ampm">').appendTo(e(".datepicker--time-current", this.$timepicker)).html(this.dayPeriod), this.$timepicker.addClass("-am-pm-"));
      }, _updateCurrentTime: function _updateCurrentTime() {
        var t = s.getLeadingZeroNum(this.displayHours),
            e = s.getLeadingZeroNum(this.minutes);this.$hoursText.html(t), this.$minutesText.html(e), this.d.ampm && this.$ampm.html(this.dayPeriod);
      }, _updateRanges: function _updateRanges() {
        this.$hours.attr({ min: this.minHours, max: this.maxHours }).val(this.hours), this.$minutes.attr({ min: this.minMinutes, max: this.maxMinutes }).val(this.minutes);
      }, _handleDate: function _handleDate(t) {
        this._setDefaultMinMaxTime(), t && (s.isSame(t, this.d.opts.minDate) ? this._setMinTimeFromDate(this.d.opts.minDate) : s.isSame(t, this.d.opts.maxDate) && this._setMaxTimeFromDate(this.d.opts.maxDate)), this._validateHoursMinutes(t);
      }, update: function update() {
        this._updateRanges(), this._updateCurrentTime();
      }, _getValidHoursFromDate: function _getValidHoursFromDate(t, e) {
        var i = t,
            a = t;t instanceof Date && (i = s.getParsedDate(t), a = i.hours);var n = e || this.d.ampm,
            h = "am";if (n) switch (!0) {case 0 == a:
            a = 12;break;case 12 == a:
            h = "pm";break;case a > 11:
            a -= 12, h = "pm";}return { hours: a, dayPeriod: h };
      }, set hours(t) {
        this._hours = t;var e = this._getValidHoursFromDate(t);this.displayHours = e.hours, this.dayPeriod = e.dayPeriod;
      }, get hours() {
        return this._hours;
      }, _onChangeRange: function _onChangeRange(t) {
        var i = e(t.target),
            s = i.attr("name");this.d.timepickerIsActive = !0, this[s] = i.val(), this._updateCurrentTime(), this.d._trigger("timeChange", [this.hours, this.minutes]), this._handleDate(this.d.lastSelectedDate), this.update();
      }, _onSelectDate: function _onSelectDate(t, e) {
        this._handleDate(e), this.update();
      }, _onMouseEnterRange: function _onMouseEnterRange(t) {
        var i = e(t.target).attr("name");e(".datepicker--time-current-" + i, this.$timepicker).addClass("-focus-");
      }, _onMouseOutRange: function _onMouseOutRange(t) {
        var i = e(t.target).attr("name");this.d.inFocus || e(".datepicker--time-current-" + i, this.$timepicker).removeClass("-focus-");
      }, _onMouseUpRange: function _onMouseUpRange(t) {
        this.d.timepickerIsActive = !1;
      } };
  }();
}(window, jQuery);

/***/ }),

/***/ "./bower_components/bootstrap-select/dist/js/bootstrap-select.min.js":
/*!***************************************************************************!*\
  !*** ./bower_components/bootstrap-select/dist/js/bootstrap-select.min.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Bootstrap-select v1.13.10 (https://developer.snapappointments.com/bootstrap-select)
 *
 * Copyright 2012-2019 SnapAppointments, LLC
 * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
 */

!function (e, t) {
  void 0 === e && void 0 !== window && (e = window),  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (e) {
    return t(e);
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(undefined, function (e) {
  !function (z) {
    "use strict";
    var d = ["sanitize", "whiteList", "sanitizeFn"],
        r = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"],
        e = { "*": ["class", "dir", "id", "lang", "role", "tabindex", "style", /^aria-[\w-]*$/i], a: ["target", "href", "title", "rel"], area: [], b: [], br: [], col: [], code: [], div: [], em: [], hr: [], h1: [], h2: [], h3: [], h4: [], h5: [], h6: [], i: [], img: ["src", "alt", "title", "width", "height"], li: [], ol: [], p: [], pre: [], s: [], small: [], span: [], sub: [], sup: [], strong: [], u: [], ul: [] },
        l = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,
        a = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;function v(e, t) {
      var i = e.nodeName.toLowerCase();if (-1 !== z.inArray(i, t)) return -1 === z.inArray(i, r) || Boolean(e.nodeValue.match(l) || e.nodeValue.match(a));for (var s = z(t).filter(function (e, t) {
        return t instanceof RegExp;
      }), n = 0, o = s.length; n < o; n++) {
        if (i.match(s[n])) return !0;
      }return !1;
    }function P(e, t, i) {
      if (i && "function" == typeof i) return i(e);for (var s = Object.keys(t), n = 0, o = e.length; n < o; n++) {
        for (var r = e[n].querySelectorAll("*"), l = 0, a = r.length; l < a; l++) {
          var c = r[l],
              d = c.nodeName.toLowerCase();if (-1 !== s.indexOf(d)) for (var h = [].slice.call(c.attributes), p = [].concat(t["*"] || [], t[d] || []), u = 0, f = h.length; u < f; u++) {
            var m = h[u];v(m, p) || c.removeAttribute(m.nodeName);
          } else c.parentNode.removeChild(c);
        }
      }
    }"classList" in document.createElement("_") || function (e) {
      if ("Element" in e) {
        var t = "classList",
            i = "prototype",
            s = e.Element[i],
            n = Object,
            o = function o() {
          var i = z(this);return { add: function add(e) {
              return e = Array.prototype.slice.call(arguments).join(" "), i.addClass(e);
            }, remove: function remove(e) {
              return e = Array.prototype.slice.call(arguments).join(" "), i.removeClass(e);
            }, toggle: function toggle(e, t) {
              return i.toggleClass(e, t);
            }, contains: function contains(e) {
              return i.hasClass(e);
            } };
        };if (n.defineProperty) {
          var r = { get: o, enumerable: !0, configurable: !0 };try {
            n.defineProperty(s, t, r);
          } catch (e) {
            void 0 !== e.number && -2146823252 !== e.number || (r.enumerable = !1, n.defineProperty(s, t, r));
          }
        } else n[i].__defineGetter__ && s.__defineGetter__(t, o);
      }
    }(window);var t,
        c,
        i,
        s = document.createElement("_");if (s.classList.add("c1", "c2"), !s.classList.contains("c2")) {
      var n = DOMTokenList.prototype.add,
          o = DOMTokenList.prototype.remove;DOMTokenList.prototype.add = function () {
        Array.prototype.forEach.call(arguments, n.bind(this));
      }, DOMTokenList.prototype.remove = function () {
        Array.prototype.forEach.call(arguments, o.bind(this));
      };
    }if (s.classList.toggle("c3", !1), s.classList.contains("c3")) {
      var h = DOMTokenList.prototype.toggle;DOMTokenList.prototype.toggle = function (e, t) {
        return 1 in arguments && !this.contains(e) == !t ? t : h.call(this, e);
      };
    }function O(e, t) {
      for (var i, s = [], n = t || e.selectedOptions, o = 0, r = n.length; o < r; o++) {
        (i = n[o]).disabled || "OPTGROUP" === i.parentNode.tagName && i.parentNode.disabled || s.push(i.value || i.text);
      }return e.multiple ? s : s.length ? s[0] : null;
    }s = null, String.prototype.startsWith || (t = function () {
      try {
        var e = {},
            t = Object.defineProperty,
            i = t(e, e, e) && t;
      } catch (e) {}return i;
    }(), c = {}.toString, i = function i(e) {
      if (null == this) throw new TypeError();var t = String(this);if (e && "[object RegExp]" == c.call(e)) throw new TypeError();var i = t.length,
          s = String(e),
          n = s.length,
          o = 1 < arguments.length ? arguments[1] : void 0,
          r = o ? Number(o) : 0;r != r && (r = 0);var l = Math.min(Math.max(r, 0), i);if (i < n + l) return !1;for (var a = -1; ++a < n;) {
        if (t.charCodeAt(l + a) != s.charCodeAt(a)) return !1;
      }return !0;
    }, t ? t(String.prototype, "startsWith", { value: i, configurable: !0, writable: !0 }) : String.prototype.startsWith = i), Object.keys || (Object.keys = function (e, t, i) {
      for (t in i = [], e) {
        i.hasOwnProperty.call(e, t) && i.push(t);
      }return i;
    }), HTMLSelectElement && !HTMLSelectElement.prototype.hasOwnProperty("selectedOptions") && Object.defineProperty(HTMLSelectElement.prototype, "selectedOptions", { get: function get() {
        return this.querySelectorAll(":checked");
      } });var p = { useDefault: !1, _set: z.valHooks.select.set };z.valHooks.select.set = function (e, t) {
      return t && !p.useDefault && z(e).data("selected", !0), p._set.apply(this, arguments);
    };var T = null,
        u = function () {
      try {
        return new Event("change"), !0;
      } catch (e) {
        return !1;
      }
    }();function k(e, t, i, s) {
      for (var n = ["display", "subtext", "tokens"], o = !1, r = 0; r < n.length; r++) {
        var l = n[r],
            a = e[l];if (a && (a = a.toString(), "display" === l && (a = a.replace(/<[^>]+>/g, "")), s && (a = w(a)), a = a.toUpperCase(), o = "contains" === i ? 0 <= a.indexOf(t) : a.startsWith(t))) break;
      }return o;
    }function A(e) {
      return parseInt(e, 10) || 0;
    }z.fn.triggerNative = function (e) {
      var t,
          i = this[0];i.dispatchEvent ? (u ? t = new Event(e, { bubbles: !0 }) : (t = document.createEvent("Event")).initEvent(e, !0, !1), i.dispatchEvent(t)) : i.fireEvent ? ((t = document.createEventObject()).eventType = e, i.fireEvent("on" + e, t)) : this.trigger(e);
    };var f = { "\xc0": "A", "\xc1": "A", "\xc2": "A", "\xc3": "A", "\xc4": "A", "\xc5": "A", "\xe0": "a", "\xe1": "a", "\xe2": "a", "\xe3": "a", "\xe4": "a", "\xe5": "a", "\xc7": "C", "\xe7": "c", "\xd0": "D", "\xf0": "d", "\xc8": "E", "\xc9": "E", "\xca": "E", "\xcb": "E", "\xe8": "e", "\xe9": "e", "\xea": "e", "\xeb": "e", "\xcc": "I", "\xcd": "I", "\xce": "I", "\xcf": "I", "\xec": "i", "\xed": "i", "\xee": "i", "\xef": "i", "\xd1": "N", "\xf1": "n", "\xd2": "O", "\xd3": "O", "\xd4": "O", "\xd5": "O", "\xd6": "O", "\xd8": "O", "\xf2": "o", "\xf3": "o", "\xf4": "o", "\xf5": "o", "\xf6": "o", "\xf8": "o", "\xd9": "U", "\xda": "U", "\xdb": "U", "\xdc": "U", "\xf9": "u", "\xfa": "u", "\xfb": "u", "\xfc": "u", "\xdd": "Y", "\xfd": "y", "\xff": "y", "\xc6": "Ae", "\xe6": "ae", "\xde": "Th", "\xfe": "th", "\xdf": "ss", "\u0100": "A", "\u0102": "A", "\u0104": "A", "\u0101": "a", "\u0103": "a", "\u0105": "a", "\u0106": "C", "\u0108": "C", "\u010A": "C", "\u010C": "C", "\u0107": "c", "\u0109": "c", "\u010B": "c", "\u010D": "c", "\u010E": "D", "\u0110": "D", "\u010F": "d", "\u0111": "d", "\u0112": "E", "\u0114": "E", "\u0116": "E", "\u0118": "E", "\u011A": "E", "\u0113": "e", "\u0115": "e", "\u0117": "e", "\u0119": "e", "\u011B": "e", "\u011C": "G", "\u011E": "G", "\u0120": "G", "\u0122": "G", "\u011D": "g", "\u011F": "g", "\u0121": "g", "\u0123": "g", "\u0124": "H", "\u0126": "H", "\u0125": "h", "\u0127": "h", "\u0128": "I", "\u012A": "I", "\u012C": "I", "\u012E": "I", "\u0130": "I", "\u0129": "i", "\u012B": "i", "\u012D": "i", "\u012F": "i", "\u0131": "i", "\u0134": "J", "\u0135": "j", "\u0136": "K", "\u0137": "k", "\u0138": "k", "\u0139": "L", "\u013B": "L", "\u013D": "L", "\u013F": "L", "\u0141": "L", "\u013A": "l", "\u013C": "l", "\u013E": "l", "\u0140": "l", "\u0142": "l", "\u0143": "N", "\u0145": "N", "\u0147": "N", "\u014A": "N", "\u0144": "n", "\u0146": "n", "\u0148": "n", "\u014B": "n", "\u014C": "O", "\u014E": "O", "\u0150": "O", "\u014D": "o", "\u014F": "o", "\u0151": "o", "\u0154": "R", "\u0156": "R", "\u0158": "R", "\u0155": "r", "\u0157": "r", "\u0159": "r", "\u015A": "S", "\u015C": "S", "\u015E": "S", "\u0160": "S", "\u015B": "s", "\u015D": "s", "\u015F": "s", "\u0161": "s", "\u0162": "T", "\u0164": "T", "\u0166": "T", "\u0163": "t", "\u0165": "t", "\u0167": "t", "\u0168": "U", "\u016A": "U", "\u016C": "U", "\u016E": "U", "\u0170": "U", "\u0172": "U", "\u0169": "u", "\u016B": "u", "\u016D": "u", "\u016F": "u", "\u0171": "u", "\u0173": "u", "\u0174": "W", "\u0175": "w", "\u0176": "Y", "\u0177": "y", "\u0178": "Y", "\u0179": "Z", "\u017B": "Z", "\u017D": "Z", "\u017A": "z", "\u017C": "z", "\u017E": "z", "\u0132": "IJ", "\u0133": "ij", "\u0152": "Oe", "\u0153": "oe", "\u0149": "'n", "\u017F": "s" },
        m = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
        g = RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\u1ab0-\\u1aff\\u1dc0-\\u1dff]", "g");function b(e) {
      return f[e];
    }function w(e) {
      return (e = e.toString()) && e.replace(m, b).replace(g, "");
    }var I,
        x,
        $,
        y,
        S,
        E = (I = { "&": "&amp;", "<": "&lt;", ">": "&gt;", '"': "&quot;", "'": "&#x27;", "`": "&#x60;" }, x = function x(e) {
      return I[e];
    }, $ = "(?:" + Object.keys(I).join("|") + ")", y = RegExp($), S = RegExp($, "g"), function (e) {
      return e = null == e ? "" : "" + e, y.test(e) ? e.replace(S, x) : e;
    }),
        C = { 32: " ", 48: "0", 49: "1", 50: "2", 51: "3", 52: "4", 53: "5", 54: "6", 55: "7", 56: "8", 57: "9", 59: ";", 65: "A", 66: "B", 67: "C", 68: "D", 69: "E", 70: "F", 71: "G", 72: "H", 73: "I", 74: "J", 75: "K", 76: "L", 77: "M", 78: "N", 79: "O", 80: "P", 81: "Q", 82: "R", 83: "S", 84: "T", 85: "U", 86: "V", 87: "W", 88: "X", 89: "Y", 90: "Z", 96: "0", 97: "1", 98: "2", 99: "3", 100: "4", 101: "5", 102: "6", 103: "7", 104: "8", 105: "9" },
        L = 27,
        N = 13,
        D = 32,
        H = 9,
        B = 38,
        W = 40,
        M = { success: !1, major: "3" };try {
      M.full = (z.fn.dropdown.Constructor.VERSION || "").split(" ")[0].split("."), M.major = M.full[0], M.success = !0;
    } catch (e) {}var R = 0,
        U = ".bs.select",
        j = { DISABLED: "disabled", DIVIDER: "divider", SHOW: "open", DROPUP: "dropup", MENU: "dropdown-menu", MENURIGHT: "dropdown-menu-right", MENULEFT: "dropdown-menu-left", BUTTONCLASS: "btn-default", POPOVERHEADER: "popover-title", ICONBASE: "glyphicon", TICKICON: "glyphicon-ok" },
        V = { MENU: "." + j.MENU },
        F = { span: document.createElement("span"), i: document.createElement("i"), subtext: document.createElement("small"), a: document.createElement("a"), li: document.createElement("li"), whitespace: document.createTextNode("\xa0"), fragment: document.createDocumentFragment() };F.a.setAttribute("role", "option"), F.subtext.className = "text-muted", F.text = F.span.cloneNode(!1), F.text.className = "text", F.checkMark = F.span.cloneNode(!1);var _ = new RegExp(B + "|" + W),
        G = new RegExp("^" + H + "$|" + L),
        q = function q(e, t, i) {
      var s = F.li.cloneNode(!1);return e && (1 === e.nodeType || 11 === e.nodeType ? s.appendChild(e) : s.innerHTML = e), void 0 !== t && "" !== t && (s.className = t), null != i && s.classList.add("optgroup-" + i), s;
    },
        K = function K(e, t, i) {
      var s = F.a.cloneNode(!0);return e && (11 === e.nodeType ? s.appendChild(e) : s.insertAdjacentHTML("beforeend", e)), void 0 !== t && "" !== t && (s.className = t), "4" === M.major && s.classList.add("dropdown-item"), i && s.setAttribute("style", i), s;
    },
        Y = function Y(e, t) {
      var i,
          s,
          n = F.text.cloneNode(!1);if (e.content) n.innerHTML = e.content;else {
        if (n.textContent = e.text, e.icon) {
          var o = F.whitespace.cloneNode(!1);(s = (!0 === t ? F.i : F.span).cloneNode(!1)).className = e.iconBase + " " + e.icon, F.fragment.appendChild(s), F.fragment.appendChild(o);
        }e.subtext && ((i = F.subtext.cloneNode(!1)).textContent = e.subtext, n.appendChild(i));
      }if (!0 === t) for (; 0 < n.childNodes.length;) {
        F.fragment.appendChild(n.childNodes[0]);
      } else F.fragment.appendChild(n);return F.fragment;
    },
        Z = function Z(e) {
      var t,
          i,
          s = F.text.cloneNode(!1);if (s.innerHTML = e.label, e.icon) {
        var n = F.whitespace.cloneNode(!1);(i = F.span.cloneNode(!1)).className = e.iconBase + " " + e.icon, F.fragment.appendChild(i), F.fragment.appendChild(n);
      }return e.subtext && ((t = F.subtext.cloneNode(!1)).textContent = e.subtext, s.appendChild(t)), F.fragment.appendChild(s), F.fragment;
    },
        J = function J(e, t) {
      var i = this;p.useDefault || (z.valHooks.select.set = p._set, p.useDefault = !0), this.$element = z(e), this.$newElement = null, this.$button = null, this.$menu = null, this.options = t, this.selectpicker = { main: {}, search: {}, current: {}, view: {}, keydown: { keyHistory: "", resetKeyHistory: { start: function start() {
              return setTimeout(function () {
                i.selectpicker.keydown.keyHistory = "";
              }, 800);
            } } } }, null === this.options.title && (this.options.title = this.$element.attr("title"));var s = this.options.windowPadding;"number" == typeof s && (this.options.windowPadding = [s, s, s, s]), this.val = J.prototype.val, this.render = J.prototype.render, this.refresh = J.prototype.refresh, this.setStyle = J.prototype.setStyle, this.selectAll = J.prototype.selectAll, this.deselectAll = J.prototype.deselectAll, this.destroy = J.prototype.destroy, this.remove = J.prototype.remove, this.show = J.prototype.show, this.hide = J.prototype.hide, this.init();
    };function Q(e) {
      var l,
          a = arguments,
          c = e;if ([].shift.apply(a), !M.success) {
        try {
          M.full = (z.fn.dropdown.Constructor.VERSION || "").split(" ")[0].split(".");
        } catch (e) {
          J.BootstrapVersion ? M.full = J.BootstrapVersion.split(" ")[0].split(".") : (M.full = [M.major, "0", "0"], console.warn("There was an issue retrieving Bootstrap's version. Ensure Bootstrap is being loaded before bootstrap-select and there is no namespace collision. If loading Bootstrap asynchronously, the version may need to be manually specified via $.fn.selectpicker.Constructor.BootstrapVersion.", e));
        }M.major = M.full[0], M.success = !0;
      }if ("4" === M.major) {
        var t = [];J.DEFAULTS.style === j.BUTTONCLASS && t.push({ name: "style", className: "BUTTONCLASS" }), J.DEFAULTS.iconBase === j.ICONBASE && t.push({ name: "iconBase", className: "ICONBASE" }), J.DEFAULTS.tickIcon === j.TICKICON && t.push({ name: "tickIcon", className: "TICKICON" }), j.DIVIDER = "dropdown-divider", j.SHOW = "show", j.BUTTONCLASS = "btn-light", j.POPOVERHEADER = "popover-header", j.ICONBASE = "", j.TICKICON = "bs-ok-default";for (var i = 0; i < t.length; i++) {
          e = t[i];J.DEFAULTS[e.name] = j[e.className];
        }
      }var s = this.each(function () {
        var e = z(this);if (e.is("select")) {
          var t = e.data("selectpicker"),
              i = "object" == (typeof c === "undefined" ? "undefined" : _typeof(c)) && c;if (t) {
            if (i) for (var s in i) {
              i.hasOwnProperty(s) && (t.options[s] = i[s]);
            }
          } else {
            var n = e.data();for (var o in n) {
              n.hasOwnProperty(o) && -1 !== z.inArray(o, d) && delete n[o];
            }var r = z.extend({}, J.DEFAULTS, z.fn.selectpicker.defaults || {}, n, i);r.template = z.extend({}, J.DEFAULTS.template, z.fn.selectpicker.defaults ? z.fn.selectpicker.defaults.template : {}, n.template, i.template), e.data("selectpicker", t = new J(this, r));
          }"string" == typeof c && (l = t[c] instanceof Function ? t[c].apply(t, a) : t.options[c]);
        }
      });return void 0 !== l ? l : s;
    }J.VERSION = "1.13.10", J.DEFAULTS = { noneSelectedText: "Nothing selected", noneResultsText: "No results matched {0}", countSelectedText: function countSelectedText(e, t) {
        return 1 == e ? "{0} item selected" : "{0} items selected";
      }, maxOptionsText: function maxOptionsText(e, t) {
        return [1 == e ? "Limit reached ({n} item max)" : "Limit reached ({n} items max)", 1 == t ? "Group limit reached ({n} item max)" : "Group limit reached ({n} items max)"];
      }, selectAllText: "Select All", deselectAllText: "Deselect All", doneButton: !1, doneButtonText: "Close", multipleSeparator: ", ", styleBase: "btn", style: j.BUTTONCLASS, size: "auto", title: null, selectedTextFormat: "values", width: !1, container: !1, hideDisabled: !1, showSubtext: !1, showIcon: !0, showContent: !0, dropupAuto: !0, header: !1, liveSearch: !1, liveSearchPlaceholder: null, liveSearchNormalize: !1, liveSearchStyle: "contains", actionsBox: !1, iconBase: j.ICONBASE, tickIcon: j.TICKICON, showTick: !1, template: { caret: '<span class="caret"></span>' }, maxOptions: !1, mobile: !1, selectOnTab: !1, dropdownAlignRight: !1, windowPadding: 0, virtualScroll: 600, display: !1, sanitize: !0, sanitizeFn: null, whiteList: e }, J.prototype = { constructor: J, init: function init() {
        var i = this,
            e = this.$element.attr("id");R++, this.selectId = "bs-select-" + R, this.$element[0].classList.add("bs-select-hidden"), this.multiple = this.$element.prop("multiple"), this.autofocus = this.$element.prop("autofocus"), this.$element[0].classList.contains("show-tick") && (this.options.showTick = !0), this.$newElement = this.createDropdown(), this.$element.after(this.$newElement).prependTo(this.$newElement), this.$button = this.$newElement.children("button"), this.$menu = this.$newElement.children(V.MENU), this.$menuInner = this.$menu.children(".inner"), this.$searchbox = this.$menu.find("input"), this.$element[0].classList.remove("bs-select-hidden"), !0 === this.options.dropdownAlignRight && this.$menu[0].classList.add(j.MENURIGHT), void 0 !== e && this.$button.attr("data-id", e), this.checkDisabled(), this.clickListener(), this.options.liveSearch ? (this.liveSearchListener(), this.focusedParent = this.$searchbox[0]) : this.focusedParent = this.$menuInner[0], this.setStyle(), this.render(), this.setWidth(), this.options.container ? this.selectPosition() : this.$element.on("hide" + U, function () {
          if (i.isVirtual()) {
            var e = i.$menuInner[0],
                t = e.firstChild.cloneNode(!1);e.replaceChild(t, e.firstChild), e.scrollTop = 0;
          }
        }), this.$menu.data("this", this), this.$newElement.data("this", this), this.options.mobile && this.mobile(), this.$newElement.on({ "hide.bs.dropdown": function hideBsDropdown(e) {
            i.$element.trigger("hide" + U, e);
          }, "hidden.bs.dropdown": function hiddenBsDropdown(e) {
            i.$element.trigger("hidden" + U, e);
          }, "show.bs.dropdown": function showBsDropdown(e) {
            i.$element.trigger("show" + U, e);
          }, "shown.bs.dropdown": function shownBsDropdown(e) {
            i.$element.trigger("shown" + U, e);
          } }), i.$element[0].hasAttribute("required") && this.$element.on("invalid" + U, function () {
          i.$button[0].classList.add("bs-invalid"), i.$element.on("shown" + U + ".invalid", function () {
            i.$element.val(i.$element.val()).off("shown" + U + ".invalid");
          }).on("rendered" + U, function () {
            this.validity.valid && i.$button[0].classList.remove("bs-invalid"), i.$element.off("rendered" + U);
          }), i.$button.on("blur" + U, function () {
            i.$element.trigger("focus").trigger("blur"), i.$button.off("blur" + U);
          });
        }), setTimeout(function () {
          i.createLi(), i.$element.trigger("loaded" + U);
        });
      }, createDropdown: function createDropdown() {
        var e = this.multiple || this.options.showTick ? " show-tick" : "",
            t = this.multiple ? ' aria-multiselectable="true"' : "",
            i = "",
            s = this.autofocus ? " autofocus" : "";M.major < 4 && this.$element.parent().hasClass("input-group") && (i = " input-group-btn");var n,
            o = "",
            r = "",
            l = "",
            a = "";return this.options.header && (o = '<div class="' + j.POPOVERHEADER + '"><button type="button" class="close" aria-hidden="true">&times;</button>' + this.options.header + "</div>"), this.options.liveSearch && (r = '<div class="bs-searchbox"><input type="text" class="form-control" autocomplete="off"' + (null === this.options.liveSearchPlaceholder ? "" : ' placeholder="' + E(this.options.liveSearchPlaceholder) + '"') + ' role="combobox" aria-label="Search" aria-controls="' + this.selectId + '" aria-autocomplete="list"></div>'), this.multiple && this.options.actionsBox && (l = '<div class="bs-actionsbox"><div class="btn-group btn-group-sm btn-block"><button type="button" class="actions-btn bs-select-all btn ' + j.BUTTONCLASS + '">' + this.options.selectAllText + '</button><button type="button" class="actions-btn bs-deselect-all btn ' + j.BUTTONCLASS + '">' + this.options.deselectAllText + "</button></div></div>"), this.multiple && this.options.doneButton && (a = '<div class="bs-donebutton"><div class="btn-group btn-block"><button type="button" class="btn btn-sm ' + j.BUTTONCLASS + '">' + this.options.doneButtonText + "</button></div></div>"), n = '<div class="dropdown bootstrap-select' + e + i + '"><button type="button" class="' + this.options.styleBase + ' dropdown-toggle" ' + ("static" === this.options.display ? 'data-display="static"' : "") + 'data-toggle="dropdown"' + s + ' role="combobox" aria-owns="' + this.selectId + '" aria-haspopup="listbox" aria-expanded="false"><div class="filter-option"><div class="filter-option-inner"><div class="filter-option-inner-inner"></div></div> </div>' + ("4" === M.major ? "" : '<span class="bs-caret">' + this.options.template.caret + "</span>") + '</button><div class="' + j.MENU + " " + ("4" === M.major ? "" : j.SHOW) + '">' + o + r + l + '<div class="inner ' + j.SHOW + '" role="listbox" id="' + this.selectId + '" tabindex="-1" ' + t + '><ul class="' + j.MENU + " inner " + ("4" === M.major ? j.SHOW : "") + '" role="presentation"></ul></div>' + a + "</div></div>", z(n);
      }, setPositionData: function setPositionData() {
        this.selectpicker.view.canHighlight = [];for (var e = this.selectpicker.view.size = 0; e < this.selectpicker.current.data.length; e++) {
          var t = this.selectpicker.current.data[e],
              i = !0;"divider" === t.type ? (i = !1, t.height = this.sizeInfo.dividerHeight) : "optgroup-label" === t.type ? (i = !1, t.height = this.sizeInfo.dropdownHeaderHeight) : t.height = this.sizeInfo.liHeight, t.disabled && (i = !1), this.selectpicker.view.canHighlight.push(i), i && (this.selectpicker.view.size++, t.posinset = this.selectpicker.view.size), t.position = (0 === e ? 0 : this.selectpicker.current.data[e - 1].position) + t.height;
        }
      }, isVirtual: function isVirtual() {
        return !1 !== this.options.virtualScroll && this.selectpicker.main.elements.length >= this.options.virtualScroll || !0 === this.options.virtualScroll;
      }, createView: function createView(A, e, t) {
        var L,
            N,
            D = this,
            i = 0,
            H = [];if (this.selectpicker.current = A ? this.selectpicker.search : this.selectpicker.main, this.setPositionData(), e) if (t) i = this.$menuInner[0].scrollTop;else if (!D.multiple) {
          var s = D.$element[0],
              n = (s.options[s.selectedIndex] || {}).liIndex;if ("number" == typeof n && !1 !== D.options.size) {
            var o = D.selectpicker.main.data[n],
                r = o && o.position;r && (i = r - (D.sizeInfo.menuInnerHeight + D.sizeInfo.liHeight) / 2);
          }
        }function l(e, t) {
          var i,
              s,
              n,
              o,
              r,
              l,
              a,
              c,
              d,
              h,
              p = D.selectpicker.current.elements.length,
              u = [],
              f = !0,
              m = D.isVirtual();D.selectpicker.view.scrollTop = e, !0 === m && D.sizeInfo.hasScrollBar && D.$menu[0].offsetWidth > D.sizeInfo.totalMenuWidth && (D.sizeInfo.menuWidth = D.$menu[0].offsetWidth, D.sizeInfo.totalMenuWidth = D.sizeInfo.menuWidth + D.sizeInfo.scrollBarWidth, D.$menu.css("min-width", D.sizeInfo.menuWidth)), i = Math.ceil(D.sizeInfo.menuInnerHeight / D.sizeInfo.liHeight * 1.5), s = Math.round(p / i) || 1;for (var v = 0; v < s; v++) {
            var g = (v + 1) * i;if (v === s - 1 && (g = p), u[v] = [v * i + (v ? 1 : 0), g], !p) break;void 0 === r && e <= D.selectpicker.current.data[g - 1].position - D.sizeInfo.menuInnerHeight && (r = v);
          }if (void 0 === r && (r = 0), l = [D.selectpicker.view.position0, D.selectpicker.view.position1], n = Math.max(0, r - 1), o = Math.min(s - 1, r + 1), D.selectpicker.view.position0 = !1 === m ? 0 : Math.max(0, u[n][0]) || 0, D.selectpicker.view.position1 = !1 === m ? p : Math.min(p, u[o][1]) || 0, a = l[0] !== D.selectpicker.view.position0 || l[1] !== D.selectpicker.view.position1, void 0 !== D.activeIndex && (N = D.selectpicker.main.elements[D.prevActiveIndex], H = D.selectpicker.main.elements[D.activeIndex], L = D.selectpicker.main.elements[D.selectedIndex], t && (D.activeIndex !== D.selectedIndex && D.defocusItem(H), D.activeIndex = void 0), D.activeIndex && D.activeIndex !== D.selectedIndex && D.defocusItem(L)), void 0 !== D.prevActiveIndex && D.prevActiveIndex !== D.activeIndex && D.prevActiveIndex !== D.selectedIndex && D.defocusItem(N), (t || a) && (c = D.selectpicker.view.visibleElements ? D.selectpicker.view.visibleElements.slice() : [], D.selectpicker.view.visibleElements = !1 === m ? D.selectpicker.current.elements : D.selectpicker.current.elements.slice(D.selectpicker.view.position0, D.selectpicker.view.position1), D.setOptionStatus(), (A || !1 === m && t) && (d = c, h = D.selectpicker.view.visibleElements, f = !(d.length === h.length && d.every(function (e, t) {
            return e === h[t];
          }))), (t || !0 === m) && f)) {
            var b,
                w,
                I = D.$menuInner[0],
                x = document.createDocumentFragment(),
                k = I.firstChild.cloneNode(!1),
                $ = D.selectpicker.view.visibleElements,
                y = [];I.replaceChild(k, I.firstChild);v = 0;for (var S = $.length; v < S; v++) {
              var E,
                  C,
                  O = $[v];D.options.sanitize && (E = O.lastChild) && (C = D.selectpicker.current.data[v + D.selectpicker.view.position0]) && C.content && !C.sanitized && (y.push(E), C.sanitized = !0), x.appendChild(O);
            }D.options.sanitize && y.length && P(y, D.options.whiteList, D.options.sanitizeFn), I.firstChild.style.marginBottom = !0 === m ? (b = 0 === D.selectpicker.view.position0 ? 0 : D.selectpicker.current.data[D.selectpicker.view.position0 - 1].position, w = D.selectpicker.view.position1 > p - 1 ? 0 : D.selectpicker.current.data[p - 1].position - D.selectpicker.current.data[D.selectpicker.view.position1 - 1].position, I.firstChild.style.marginTop = b + "px", w + "px") : I.firstChild.style.marginTop = 0, I.firstChild.appendChild(x);
          }if (D.prevActiveIndex = D.activeIndex, D.options.liveSearch) {
            if (A && t) {
              var z,
                  T = 0;D.selectpicker.view.canHighlight[T] || (T = 1 + D.selectpicker.view.canHighlight.slice(1).indexOf(!0)), z = D.selectpicker.view.visibleElements[T], D.defocusItem(D.selectpicker.view.currentActive), D.activeIndex = (D.selectpicker.current.data[T] || {}).index, D.focusItem(z);
            }
          } else D.$menuInner.trigger("focus");
        }l(i, !0), this.$menuInner.off("scroll.createView").on("scroll.createView", function (e, t) {
          D.noScroll || l(this.scrollTop, t), D.noScroll = !1;
        }), z(window).off("resize" + U + "." + this.selectId + ".createView").on("resize" + U + "." + this.selectId + ".createView", function () {
          D.$newElement.hasClass(j.SHOW) && l(D.$menuInner[0].scrollTop);
        });
      }, focusItem: function focusItem(e, t, i) {
        if (e) {
          t = t || this.selectpicker.main.data[this.activeIndex];var s = e.firstChild;s && (s.setAttribute("aria-setsize", this.selectpicker.view.size), s.setAttribute("aria-posinset", t.posinset), !0 !== i && (this.focusedParent.setAttribute("aria-activedescendant", s.id), e.classList.add("active"), s.classList.add("active")));
        }
      }, defocusItem: function defocusItem(e) {
        e && (e.classList.remove("active"), e.firstChild && e.firstChild.classList.remove("active"));
      }, setPlaceholder: function setPlaceholder() {
        var e = !1;if (this.options.title && !this.multiple) {
          this.selectpicker.view.titleOption || (this.selectpicker.view.titleOption = document.createElement("option")), e = !0;var t = this.$element[0],
              i = !1,
              s = !this.selectpicker.view.titleOption.parentNode;if (s) this.selectpicker.view.titleOption.className = "bs-title-option", this.selectpicker.view.titleOption.value = "", i = void 0 === z(t.options[t.selectedIndex]).attr("selected") && void 0 === this.$element.data("selected");(s || 0 !== this.selectpicker.view.titleOption.index) && t.insertBefore(this.selectpicker.view.titleOption, t.firstChild), i && (t.selectedIndex = 0);
        }return e;
      }, createLi: function createLi() {
        var c = this,
            f = this.options.iconBase,
            m = ':not([hidden]):not([data-hidden="true"])',
            v = [],
            g = [],
            d = 0,
            b = 0,
            e = this.setPlaceholder() ? 1 : 0;this.options.hideDisabled && (m += ":not(:disabled)"), !c.options.showTick && !c.multiple || F.checkMark.parentNode || (F.checkMark.className = f + " " + c.options.tickIcon + " check-mark", F.a.appendChild(F.checkMark));var t = this.$element[0].querySelectorAll("select > *" + m);function w(e) {
          var t = g[g.length - 1];t && "divider" === t.type && (t.optID || e.optID) || ((e = e || {}).type = "divider", v.push(q(!1, j.DIVIDER, e.optID ? e.optID + "div" : void 0)), g.push(e));
        }function I(e, t) {
          if ((t = t || {}).divider = "true" === e.getAttribute("data-divider"), t.divider) w({ optID: t.optID });else {
            var i = g.length,
                s = e.style.cssText,
                n = s ? E(s) : "",
                o = (e.className || "") + (t.optgroupClass || "");t.optID && (o = "opt " + o), t.text = e.textContent, t.content = e.getAttribute("data-content"), t.tokens = e.getAttribute("data-tokens"), t.subtext = e.getAttribute("data-subtext"), t.icon = e.getAttribute("data-icon"), t.iconBase = f;var r = Y(t),
                l = q(K(r, o, n), "", t.optID);l.firstChild && (l.firstChild.id = c.selectId + "-" + i), v.push(l), e.liIndex = i, t.display = t.content || t.text, t.type = "option", t.index = i, t.option = e, t.disabled = t.disabled || e.disabled, g.push(t);var a = 0;t.display && (a += t.display.length), t.subtext && (a += t.subtext.length), t.icon && (a += 1), d < a && (d = a, c.selectpicker.view.widestOption = v[v.length - 1]);
          }
        }function i(e, t) {
          var i = t[e],
              s = t[e - 1],
              n = t[e + 1],
              o = i.querySelectorAll("option" + m);if (o.length) {
            var r,
                l,
                a = { label: E(i.label), subtext: i.getAttribute("data-subtext"), icon: i.getAttribute("data-icon"), iconBase: f },
                c = " " + (i.className || "");b++, s && w({ optID: b });var d = Z(a);v.push(q(d, "dropdown-header" + c, b)), g.push({ display: a.label, subtext: a.subtext, type: "optgroup-label", optID: b });for (var h = 0, p = o.length; h < p; h++) {
              var u = o[h];0 === h && (l = (r = g.length - 1) + p), I(u, { headerIndex: r, lastIndex: l, optID: b, optgroupClass: c, disabled: i.disabled });
            }n && w({ optID: b });
          }
        }for (var s = t.length; e < s; e++) {
          var n = t[e];"OPTGROUP" !== n.tagName ? I(n, {}) : i(e, t);
        }this.selectpicker.main.elements = v, this.selectpicker.main.data = g, this.selectpicker.current = this.selectpicker.main;
      }, findLis: function findLis() {
        return this.$menuInner.find(".inner > li");
      }, render: function render() {
        this.setPlaceholder();var e,
            t,
            i = this,
            s = this.$element[0],
            n = function (e, t) {
          var i,
              s = e.selectedOptions,
              n = [];if (t) {
            for (var o = 0, r = s.length; o < r; o++) {
              (i = s[o]).disabled || "OPTGROUP" === i.parentNode.tagName && i.parentNode.disabled || n.push(i);
            }return n;
          }return s;
        }(s, this.options.hideDisabled),
            o = n.length,
            r = this.$button[0],
            l = r.querySelector(".filter-option-inner-inner"),
            a = document.createTextNode(this.options.multipleSeparator),
            c = F.fragment.cloneNode(!1),
            d = !1;if (r.classList.toggle("bs-placeholder", i.multiple ? !o : !O(s, n)), this.tabIndex(), "static" === this.options.selectedTextFormat) c = Y({ text: this.options.title }, !0);else if ((e = this.multiple && -1 !== this.options.selectedTextFormat.indexOf("count") && 1 < o) && (e = 1 < (t = this.options.selectedTextFormat.split(">")).length && o > t[1] || 1 === t.length && 2 <= o), !1 === e) {
          for (var h = 0; h < o && h < 50; h++) {
            var p = n[h],
                u = {},
                f = { content: p.getAttribute("data-content"), subtext: p.getAttribute("data-subtext"), icon: p.getAttribute("data-icon") };this.multiple && 0 < h && c.appendChild(a.cloneNode(!1)), p.title ? u.text = p.title : f.content && i.options.showContent ? (u.content = f.content.toString(), d = !0) : (i.options.showIcon && (u.icon = f.icon, u.iconBase = this.options.iconBase), i.options.showSubtext && !i.multiple && f.subtext && (u.subtext = " " + f.subtext), u.text = p.textContent.trim()), c.appendChild(Y(u, !0));
          }49 < o && c.appendChild(document.createTextNode("..."));
        } else {
          var m = ':not([hidden]):not([data-hidden="true"]):not([data-divider="true"])';this.options.hideDisabled && (m += ":not(:disabled)");var v = this.$element[0].querySelectorAll("select > option" + m + ", optgroup" + m + " option" + m).length,
              g = "function" == typeof this.options.countSelectedText ? this.options.countSelectedText(o, v) : this.options.countSelectedText;c = Y({ text: g.replace("{0}", o.toString()).replace("{1}", v.toString()) }, !0);
        }if (null == this.options.title && (this.options.title = this.$element.attr("title")), c.childNodes.length || (c = Y({ text: void 0 !== this.options.title ? this.options.title : this.options.noneSelectedText }, !0)), r.title = c.textContent.replace(/<[^>]*>?/g, "").trim(), this.options.sanitize && d && P([c], i.options.whiteList, i.options.sanitizeFn), l.innerHTML = "", l.appendChild(c), M.major < 4 && this.$newElement[0].classList.contains("bs3-has-addon")) {
          var b = r.querySelector(".filter-expand"),
              w = l.cloneNode(!0);w.className = "filter-expand", b ? r.replaceChild(w, b) : r.appendChild(w);
        }this.$element.trigger("rendered" + U);
      }, setStyle: function setStyle(e, t) {
        var i,
            s = this.$button[0],
            n = this.$newElement[0],
            o = this.options.style.trim();this.$element.attr("class") && this.$newElement.addClass(this.$element.attr("class").replace(/selectpicker|mobile-device|bs-select-hidden|validate\[.*\]/gi, "")), M.major < 4 && (n.classList.add("bs3"), n.parentNode.classList.contains("input-group") && (n.previousElementSibling || n.nextElementSibling) && (n.previousElementSibling || n.nextElementSibling).classList.contains("input-group-addon") && n.classList.add("bs3-has-addon")), i = e ? e.trim() : o, "add" == t ? i && s.classList.add.apply(s.classList, i.split(" ")) : "remove" == t ? i && s.classList.remove.apply(s.classList, i.split(" ")) : (o && s.classList.remove.apply(s.classList, o.split(" ")), i && s.classList.add.apply(s.classList, i.split(" ")));
      }, liHeight: function liHeight(e) {
        if (e || !1 !== this.options.size && !this.sizeInfo) {
          this.sizeInfo || (this.sizeInfo = {});var t = document.createElement("div"),
              i = document.createElement("div"),
              s = document.createElement("div"),
              n = document.createElement("ul"),
              o = document.createElement("li"),
              r = document.createElement("li"),
              l = document.createElement("li"),
              a = document.createElement("a"),
              c = document.createElement("span"),
              d = this.options.header && 0 < this.$menu.find("." + j.POPOVERHEADER).length ? this.$menu.find("." + j.POPOVERHEADER)[0].cloneNode(!0) : null,
              h = this.options.liveSearch ? document.createElement("div") : null,
              p = this.options.actionsBox && this.multiple && 0 < this.$menu.find(".bs-actionsbox").length ? this.$menu.find(".bs-actionsbox")[0].cloneNode(!0) : null,
              u = this.options.doneButton && this.multiple && 0 < this.$menu.find(".bs-donebutton").length ? this.$menu.find(".bs-donebutton")[0].cloneNode(!0) : null,
              f = this.$element.find("option")[0];if (this.sizeInfo.selectWidth = this.$newElement[0].offsetWidth, c.className = "text", a.className = "dropdown-item " + (f ? f.className : ""), t.className = this.$menu[0].parentNode.className + " " + j.SHOW, t.style.width = this.sizeInfo.selectWidth + "px", "auto" === this.options.width && (i.style.minWidth = 0), i.className = j.MENU + " " + j.SHOW, s.className = "inner " + j.SHOW, n.className = j.MENU + " inner " + ("4" === M.major ? j.SHOW : ""), o.className = j.DIVIDER, r.className = "dropdown-header", c.appendChild(document.createTextNode("\u200B")), a.appendChild(c), l.appendChild(a), r.appendChild(c.cloneNode(!0)), this.selectpicker.view.widestOption && n.appendChild(this.selectpicker.view.widestOption.cloneNode(!0)), n.appendChild(l), n.appendChild(o), n.appendChild(r), d && i.appendChild(d), h) {
            var m = document.createElement("input");h.className = "bs-searchbox", m.className = "form-control", h.appendChild(m), i.appendChild(h);
          }p && i.appendChild(p), s.appendChild(n), i.appendChild(s), u && i.appendChild(u), t.appendChild(i), document.body.appendChild(t);var v,
              g = l.offsetHeight,
              b = r ? r.offsetHeight : 0,
              w = d ? d.offsetHeight : 0,
              I = h ? h.offsetHeight : 0,
              x = p ? p.offsetHeight : 0,
              k = u ? u.offsetHeight : 0,
              $ = z(o).outerHeight(!0),
              y = !!window.getComputedStyle && window.getComputedStyle(i),
              S = i.offsetWidth,
              E = y ? null : z(i),
              C = { vert: A(y ? y.paddingTop : E.css("paddingTop")) + A(y ? y.paddingBottom : E.css("paddingBottom")) + A(y ? y.borderTopWidth : E.css("borderTopWidth")) + A(y ? y.borderBottomWidth : E.css("borderBottomWidth")), horiz: A(y ? y.paddingLeft : E.css("paddingLeft")) + A(y ? y.paddingRight : E.css("paddingRight")) + A(y ? y.borderLeftWidth : E.css("borderLeftWidth")) + A(y ? y.borderRightWidth : E.css("borderRightWidth")) },
              O = { vert: C.vert + A(y ? y.marginTop : E.css("marginTop")) + A(y ? y.marginBottom : E.css("marginBottom")) + 2, horiz: C.horiz + A(y ? y.marginLeft : E.css("marginLeft")) + A(y ? y.marginRight : E.css("marginRight")) + 2 };s.style.overflowY = "scroll", v = i.offsetWidth - S, document.body.removeChild(t), this.sizeInfo.liHeight = g, this.sizeInfo.dropdownHeaderHeight = b, this.sizeInfo.headerHeight = w, this.sizeInfo.searchHeight = I, this.sizeInfo.actionsHeight = x, this.sizeInfo.doneButtonHeight = k, this.sizeInfo.dividerHeight = $, this.sizeInfo.menuPadding = C, this.sizeInfo.menuExtras = O, this.sizeInfo.menuWidth = S, this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth, this.sizeInfo.scrollBarWidth = v, this.sizeInfo.selectHeight = this.$newElement[0].offsetHeight, this.setPositionData();
        }
      }, getSelectPosition: function getSelectPosition() {
        var e,
            t = z(window),
            i = this.$newElement.offset(),
            s = z(this.options.container);this.options.container && s.length && !s.is("body") ? ((e = s.offset()).top += parseInt(s.css("borderTopWidth")), e.left += parseInt(s.css("borderLeftWidth"))) : e = { top: 0, left: 0 };var n = this.options.windowPadding;this.sizeInfo.selectOffsetTop = i.top - e.top - t.scrollTop(), this.sizeInfo.selectOffsetBot = t.height() - this.sizeInfo.selectOffsetTop - this.sizeInfo.selectHeight - e.top - n[2], this.sizeInfo.selectOffsetLeft = i.left - e.left - t.scrollLeft(), this.sizeInfo.selectOffsetRight = t.width() - this.sizeInfo.selectOffsetLeft - this.sizeInfo.selectWidth - e.left - n[1], this.sizeInfo.selectOffsetTop -= n[0], this.sizeInfo.selectOffsetLeft -= n[3];
      }, setMenuSize: function setMenuSize(e) {
        this.getSelectPosition();var t,
            i,
            s,
            n,
            o,
            r,
            l,
            a = this.sizeInfo.selectWidth,
            c = this.sizeInfo.liHeight,
            d = this.sizeInfo.headerHeight,
            h = this.sizeInfo.searchHeight,
            p = this.sizeInfo.actionsHeight,
            u = this.sizeInfo.doneButtonHeight,
            f = this.sizeInfo.dividerHeight,
            m = this.sizeInfo.menuPadding,
            v = 0;if (this.options.dropupAuto && (l = c * this.selectpicker.current.elements.length + m.vert, this.$newElement.toggleClass(j.DROPUP, this.sizeInfo.selectOffsetTop - this.sizeInfo.selectOffsetBot > this.sizeInfo.menuExtras.vert && l + this.sizeInfo.menuExtras.vert + 50 > this.sizeInfo.selectOffsetBot)), "auto" === this.options.size) n = 3 < this.selectpicker.current.elements.length ? 3 * this.sizeInfo.liHeight + this.sizeInfo.menuExtras.vert - 2 : 0, i = this.sizeInfo.selectOffsetBot - this.sizeInfo.menuExtras.vert, s = n + d + h + p + u, r = Math.max(n - m.vert, 0), this.$newElement.hasClass(j.DROPUP) && (i = this.sizeInfo.selectOffsetTop - this.sizeInfo.menuExtras.vert), t = (o = i) - d - h - p - u - m.vert;else if (this.options.size && "auto" != this.options.size && this.selectpicker.current.elements.length > this.options.size) {
          for (var g = 0; g < this.options.size; g++) {
            "divider" === this.selectpicker.current.data[g].type && v++;
          }t = (i = c * this.options.size + v * f + m.vert) - m.vert, o = i + d + h + p + u, s = r = "";
        }"auto" === this.options.dropdownAlignRight && this.$menu.toggleClass(j.MENURIGHT, this.sizeInfo.selectOffsetLeft > this.sizeInfo.selectOffsetRight && this.sizeInfo.selectOffsetRight < this.sizeInfo.totalMenuWidth - a), this.$menu.css({ "max-height": o + "px", overflow: "hidden", "min-height": s + "px" }), this.$menuInner.css({ "max-height": t + "px", "overflow-y": "auto", "min-height": r + "px" }), this.sizeInfo.menuInnerHeight = Math.max(t, 1), this.selectpicker.current.data.length && this.selectpicker.current.data[this.selectpicker.current.data.length - 1].position > this.sizeInfo.menuInnerHeight && (this.sizeInfo.hasScrollBar = !0, this.sizeInfo.totalMenuWidth = this.sizeInfo.menuWidth + this.sizeInfo.scrollBarWidth, this.$menu.css("min-width", this.sizeInfo.totalMenuWidth)), this.dropdown && this.dropdown._popper && this.dropdown._popper.update();
      }, setSize: function setSize(e) {
        if (this.liHeight(e), this.options.header && this.$menu.css("padding-top", 0), !1 !== this.options.size) {
          var t = this,
              i = z(window);this.setMenuSize(), this.options.liveSearch && this.$searchbox.off("input.setMenuSize propertychange.setMenuSize").on("input.setMenuSize propertychange.setMenuSize", function () {
            return t.setMenuSize();
          }), "auto" === this.options.size ? i.off("resize" + U + "." + this.selectId + ".setMenuSize scroll" + U + "." + this.selectId + ".setMenuSize").on("resize" + U + "." + this.selectId + ".setMenuSize scroll" + U + "." + this.selectId + ".setMenuSize", function () {
            return t.setMenuSize();
          }) : this.options.size && "auto" != this.options.size && this.selectpicker.current.elements.length > this.options.size && i.off("resize" + U + "." + this.selectId + ".setMenuSize scroll" + U + "." + this.selectId + ".setMenuSize"), t.createView(!1, !0, e);
        }
      }, setWidth: function setWidth() {
        var i = this;"auto" === this.options.width ? requestAnimationFrame(function () {
          i.$menu.css("min-width", "0"), i.$element.on("loaded" + U, function () {
            i.liHeight(), i.setMenuSize();var e = i.$newElement.clone().appendTo("body"),
                t = e.css("width", "auto").children("button").outerWidth();e.remove(), i.sizeInfo.selectWidth = Math.max(i.sizeInfo.totalMenuWidth, t), i.$newElement.css("width", i.sizeInfo.selectWidth + "px");
          });
        }) : "fit" === this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", "").addClass("fit-width")) : this.options.width ? (this.$menu.css("min-width", ""), this.$newElement.css("width", this.options.width)) : (this.$menu.css("min-width", ""), this.$newElement.css("width", "")), this.$newElement.hasClass("fit-width") && "fit" !== this.options.width && this.$newElement[0].classList.remove("fit-width");
      }, selectPosition: function selectPosition() {
        this.$bsContainer = z('<div class="bs-container" />');var s,
            n,
            o,
            r = this,
            l = z(this.options.container),
            e = function e(_e) {
          var t = {},
              i = r.options.display || !!z.fn.dropdown.Constructor.Default && z.fn.dropdown.Constructor.Default.display;r.$bsContainer.addClass(_e.attr("class").replace(/form-control|fit-width/gi, "")).toggleClass(j.DROPUP, _e.hasClass(j.DROPUP)), s = _e.offset(), l.is("body") ? n = { top: 0, left: 0 } : ((n = l.offset()).top += parseInt(l.css("borderTopWidth")) - l.scrollTop(), n.left += parseInt(l.css("borderLeftWidth")) - l.scrollLeft()), o = _e.hasClass(j.DROPUP) ? 0 : _e[0].offsetHeight, (M.major < 4 || "static" === i) && (t.top = s.top - n.top + o, t.left = s.left - n.left), t.width = _e[0].offsetWidth, r.$bsContainer.css(t);
        };this.$button.on("click.bs.dropdown.data-api", function () {
          r.isDisabled() || (e(r.$newElement), r.$bsContainer.appendTo(r.options.container).toggleClass(j.SHOW, !r.$button.hasClass(j.SHOW)).append(r.$menu));
        }), z(window).off("resize" + U + "." + this.selectId + " scroll" + U + "." + this.selectId).on("resize" + U + "." + this.selectId + " scroll" + U + "." + this.selectId, function () {
          r.$newElement.hasClass(j.SHOW) && e(r.$newElement);
        }), this.$element.on("hide" + U, function () {
          r.$menu.data("height", r.$menu.height()), r.$bsContainer.detach();
        });
      }, setOptionStatus: function setOptionStatus(e) {
        var t = this;if (t.noScroll = !1, t.selectpicker.view.visibleElements && t.selectpicker.view.visibleElements.length) for (var i = 0; i < t.selectpicker.view.visibleElements.length; i++) {
          var s = t.selectpicker.current.data[i + t.selectpicker.view.position0],
              n = s.option;n && (!0 !== e && t.setDisabled(s.index, s.disabled), t.setSelected(s.index, n.selected));
        }
      }, setSelected: function setSelected(e, t) {
        var i,
            s,
            n = this.selectpicker.main.elements[e],
            o = this.selectpicker.main.data[e],
            r = void 0 !== this.activeIndex,
            l = this.activeIndex === e || t && !this.multiple && !r;o.selected = t, s = n.firstChild, t && (this.selectedIndex = e), n.classList.toggle("selected", t), l ? (this.focusItem(n, o), this.selectpicker.view.currentActive = n, this.activeIndex = e) : this.defocusItem(n), s && (s.classList.toggle("selected", t), t ? s.setAttribute("aria-selected", !0) : this.multiple ? s.setAttribute("aria-selected", !1) : s.removeAttribute("aria-selected")), l || r || !t || void 0 === this.prevActiveIndex || (i = this.selectpicker.main.elements[this.prevActiveIndex], this.defocusItem(i));
      }, setDisabled: function setDisabled(e, t) {
        var i,
            s = this.selectpicker.main.elements[e];this.selectpicker.main.data[e].disabled = t, i = s.firstChild, s.classList.toggle(j.DISABLED, t), i && ("4" === M.major && i.classList.toggle(j.DISABLED, t), t ? (i.setAttribute("aria-disabled", t), i.setAttribute("tabindex", -1)) : (i.removeAttribute("aria-disabled"), i.setAttribute("tabindex", 0)));
      }, isDisabled: function isDisabled() {
        return this.$element[0].disabled;
      }, checkDisabled: function checkDisabled() {
        var e = this;this.isDisabled() ? (this.$newElement[0].classList.add(j.DISABLED), this.$button.addClass(j.DISABLED).attr("tabindex", -1).attr("aria-disabled", !0)) : (this.$button[0].classList.contains(j.DISABLED) && (this.$newElement[0].classList.remove(j.DISABLED), this.$button.removeClass(j.DISABLED).attr("aria-disabled", !1)), -1 != this.$button.attr("tabindex") || this.$element.data("tabindex") || this.$button.removeAttr("tabindex")), this.$button.on("click", function () {
          return !e.isDisabled();
        });
      }, tabIndex: function tabIndex() {
        this.$element.data("tabindex") !== this.$element.attr("tabindex") && -98 !== this.$element.attr("tabindex") && "-98" !== this.$element.attr("tabindex") && (this.$element.data("tabindex", this.$element.attr("tabindex")), this.$button.attr("tabindex", this.$element.data("tabindex"))), this.$element.attr("tabindex", -98);
      }, clickListener: function clickListener() {
        var C = this,
            t = z(document);function e() {
          C.options.liveSearch ? C.$searchbox.trigger("focus") : C.$menuInner.trigger("focus");
        }function i() {
          C.dropdown && C.dropdown._popper && C.dropdown._popper.state.isCreated ? e() : requestAnimationFrame(i);
        }t.data("spaceSelect", !1), this.$button.on("keyup", function (e) {
          /(32)/.test(e.keyCode.toString(10)) && t.data("spaceSelect") && (e.preventDefault(), t.data("spaceSelect", !1));
        }), this.$newElement.on("show.bs.dropdown", function () {
          3 < M.major && !C.dropdown && (C.dropdown = C.$button.data("bs.dropdown"), C.dropdown._menu = C.$menu[0]);
        }), this.$button.on("click.bs.dropdown.data-api", function () {
          C.$newElement.hasClass(j.SHOW) || C.setSize();
        }), this.$element.on("shown" + U, function () {
          C.$menuInner[0].scrollTop !== C.selectpicker.view.scrollTop && (C.$menuInner[0].scrollTop = C.selectpicker.view.scrollTop), 3 < M.major ? requestAnimationFrame(i) : e();
        }), this.$menuInner.on("mouseenter", "li a", function (e) {
          var t = this.parentElement,
              i = C.isVirtual() ? C.selectpicker.view.position0 : 0,
              s = Array.prototype.indexOf.call(t.parentElement.children, t),
              n = C.selectpicker.current.data[s + i];C.focusItem(t, n, !0);
        }), this.$menuInner.on("click", "li a", function (e, t) {
          var i = z(this),
              s = C.$element[0],
              n = C.isVirtual() ? C.selectpicker.view.position0 : 0,
              o = C.selectpicker.current.data[i.parent().index() + n],
              r = o.index,
              l = O(s),
              a = s.selectedIndex,
              c = s.options[a],
              d = !0;if (C.multiple && 1 !== C.options.maxOptions && e.stopPropagation(), e.preventDefault(), !C.isDisabled() && !i.parent().hasClass(j.DISABLED)) {
            var h = C.$element.find("option"),
                p = o.option,
                u = z(p),
                f = p.selected,
                m = u.parent("optgroup"),
                v = m.find("option"),
                g = C.options.maxOptions,
                b = m.data("maxOptions") || !1;if (r === C.activeIndex && (t = !0), t || (C.prevActiveIndex = C.activeIndex, C.activeIndex = void 0), C.multiple) {
              if (p.selected = !f, C.setSelected(r, !f), i.trigger("blur"), !1 !== g || !1 !== b) {
                var w = g < h.filter(":selected").length,
                    I = b < m.find("option:selected").length;if (g && w || b && I) if (g && 1 == g) {
                  h.prop("selected", !1), u.prop("selected", !0);for (var x = 0; x < h.length; x++) {
                    C.setSelected(x, !1);
                  }C.setSelected(r, !0);
                } else if (b && 1 == b) {
                  m.find("option:selected").prop("selected", !1), u.prop("selected", !0);for (x = 0; x < v.length; x++) {
                    p = v[x];C.setSelected(h.index(p), !1);
                  }C.setSelected(r, !0);
                } else {
                  var k = "string" == typeof C.options.maxOptionsText ? [C.options.maxOptionsText, C.options.maxOptionsText] : C.options.maxOptionsText,
                      $ = "function" == typeof k ? k(g, b) : k,
                      y = $[0].replace("{n}", g),
                      S = $[1].replace("{n}", b),
                      E = z('<div class="notify"></div>');$[2] && (y = y.replace("{var}", $[2][1 < g ? 0 : 1]), S = S.replace("{var}", $[2][1 < b ? 0 : 1])), u.prop("selected", !1), C.$menu.append(E), g && w && (E.append(z("<div>" + y + "</div>")), d = !1, C.$element.trigger("maxReached" + U)), b && I && (E.append(z("<div>" + S + "</div>")), d = !1, C.$element.trigger("maxReachedGrp" + U)), setTimeout(function () {
                    C.setSelected(r, !1);
                  }, 10), E.delay(750).fadeOut(300, function () {
                    z(this).remove();
                  });
                }
              }
            } else c.selected = !1, p.selected = !0, C.setSelected(r, !0);!C.multiple || C.multiple && 1 === C.options.maxOptions ? C.$button.trigger("focus") : C.options.liveSearch && C.$searchbox.trigger("focus"), d && (C.multiple || a !== s.selectedIndex) && (T = [p.index, u.prop("selected"), l], C.$element.triggerNative("change"));
          }
        }), this.$menu.on("click", "li." + j.DISABLED + " a, ." + j.POPOVERHEADER + ", ." + j.POPOVERHEADER + " :not(.close)", function (e) {
          e.currentTarget == this && (e.preventDefault(), e.stopPropagation(), C.options.liveSearch && !z(e.target).hasClass("close") ? C.$searchbox.trigger("focus") : C.$button.trigger("focus"));
        }), this.$menuInner.on("click", ".divider, .dropdown-header", function (e) {
          e.preventDefault(), e.stopPropagation(), C.options.liveSearch ? C.$searchbox.trigger("focus") : C.$button.trigger("focus");
        }), this.$menu.on("click", "." + j.POPOVERHEADER + " .close", function () {
          C.$button.trigger("click");
        }), this.$searchbox.on("click", function (e) {
          e.stopPropagation();
        }), this.$menu.on("click", ".actions-btn", function (e) {
          C.options.liveSearch ? C.$searchbox.trigger("focus") : C.$button.trigger("focus"), e.preventDefault(), e.stopPropagation(), z(this).hasClass("bs-select-all") ? C.selectAll() : C.deselectAll();
        }), this.$element.on("change" + U, function () {
          C.render(), C.$element.trigger("changed" + U, T), T = null;
        }).on("focus" + U, function () {
          C.options.mobile || C.$button.trigger("focus");
        });
      }, liveSearchListener: function liveSearchListener() {
        var u = this,
            f = document.createElement("li");this.$button.on("click.bs.dropdown.data-api", function () {
          u.$searchbox.val() && u.$searchbox.val("");
        }), this.$searchbox.on("click.bs.dropdown.data-api focus.bs.dropdown.data-api touchend.bs.dropdown.data-api", function (e) {
          e.stopPropagation();
        }), this.$searchbox.on("input propertychange", function () {
          var e = u.$searchbox.val();if (u.selectpicker.search.elements = [], u.selectpicker.search.data = [], e) {
            var t = [],
                i = e.toUpperCase(),
                s = {},
                n = [],
                o = u._searchStyle(),
                r = u.options.liveSearchNormalize;r && (i = w(i)), u._$lisSelected = u.$menuInner.find(".selected");for (var l = 0; l < u.selectpicker.main.data.length; l++) {
              var a = u.selectpicker.main.data[l];s[l] || (s[l] = k(a, i, o, r)), s[l] && void 0 !== a.headerIndex && -1 === n.indexOf(a.headerIndex) && (0 < a.headerIndex && (s[a.headerIndex - 1] = !0, n.push(a.headerIndex - 1)), s[a.headerIndex] = !0, n.push(a.headerIndex), s[a.lastIndex + 1] = !0), s[l] && "optgroup-label" !== a.type && n.push(l);
            }l = 0;for (var c = n.length; l < c; l++) {
              var d = n[l],
                  h = n[l - 1],
                  p = (a = u.selectpicker.main.data[d], u.selectpicker.main.data[h]);("divider" !== a.type || "divider" === a.type && p && "divider" !== p.type && c - 1 !== l) && (u.selectpicker.search.data.push(a), t.push(u.selectpicker.main.elements[d]));
            }u.activeIndex = void 0, u.noScroll = !0, u.$menuInner.scrollTop(0), u.selectpicker.search.elements = t, u.createView(!0), t.length || (f.className = "no-results", f.innerHTML = u.options.noneResultsText.replace("{0}", '"' + E(e) + '"'), u.$menuInner[0].firstChild.appendChild(f));
          } else u.$menuInner.scrollTop(0), u.createView(!1);
        });
      }, _searchStyle: function _searchStyle() {
        return this.options.liveSearchStyle || "contains";
      }, val: function val(e) {
        var t = this.$element[0];if (void 0 === e) return this.$element.val();var i = O(t);if (T = [null, null, i], this.$element.val(e).trigger("changed" + U, T), this.$newElement.hasClass(j.SHOW)) if (this.multiple) this.setOptionStatus(!0);else {
          var s = (t.options[t.selectedIndex] || {}).liIndex;"number" == typeof s && (this.setSelected(this.selectedIndex, !1), this.setSelected(s, !0));
        }return this.render(), T = null, this.$element;
      }, changeAll: function changeAll(e) {
        if (this.multiple) {
          void 0 === e && (e = !0);var t = this.$element[0],
              i = 0,
              s = 0,
              n = O(t);t.classList.add("bs-select-hidden");for (var o = 0, r = this.selectpicker.current.elements.length; o < r; o++) {
            var l = this.selectpicker.current.data[o],
                a = l.option;a && !l.disabled && "divider" !== l.type && (l.selected && i++, (a.selected = e) && s++);
          }t.classList.remove("bs-select-hidden"), i !== s && (this.setOptionStatus(), T = [null, null, n], this.$element.triggerNative("change"));
        }
      }, selectAll: function selectAll() {
        return this.changeAll(!0);
      }, deselectAll: function deselectAll() {
        return this.changeAll(!1);
      }, toggle: function toggle(e) {
        (e = e || window.event) && e.stopPropagation(), this.$button.trigger("click.bs.dropdown.data-api");
      }, keydown: function keydown(e) {
        var t,
            i,
            s,
            n,
            o,
            r = z(this),
            l = r.hasClass("dropdown-toggle"),
            a = (l ? r.closest(".dropdown") : r.closest(V.MENU)).data("this"),
            c = a.findLis(),
            d = !1,
            h = e.which === H && !l && !a.options.selectOnTab,
            p = _.test(e.which) || h,
            u = a.$menuInner[0].scrollTop,
            f = !0 === a.isVirtual() ? a.selectpicker.view.position0 : 0;if (!(i = a.$newElement.hasClass(j.SHOW)) && (p || 48 <= e.which && e.which <= 57 || 96 <= e.which && e.which <= 105 || 65 <= e.which && e.which <= 90) && (a.$button.trigger("click.bs.dropdown.data-api"), a.options.liveSearch)) a.$searchbox.trigger("focus");else {
          if (e.which === L && i && (e.preventDefault(), a.$button.trigger("click.bs.dropdown.data-api").trigger("focus")), p) {
            if (!c.length) return;-1 !== (t = (s = a.selectpicker.main.elements[a.activeIndex]) ? Array.prototype.indexOf.call(s.parentElement.children, s) : -1) && a.defocusItem(s), e.which === B ? (-1 !== t && t--, t + f < 0 && (t += c.length), a.selectpicker.view.canHighlight[t + f] || -1 === (t = a.selectpicker.view.canHighlight.slice(0, t + f).lastIndexOf(!0) - f) && (t = c.length - 1)) : (e.which === W || h) && (++t + f >= a.selectpicker.view.canHighlight.length && (t = 0), a.selectpicker.view.canHighlight[t + f] || (t = t + 1 + a.selectpicker.view.canHighlight.slice(t + f + 1).indexOf(!0))), e.preventDefault();var m = f + t;e.which === B ? 0 === f && t === c.length - 1 ? (a.$menuInner[0].scrollTop = a.$menuInner[0].scrollHeight, m = a.selectpicker.current.elements.length - 1) : d = (o = (n = a.selectpicker.current.data[m]).position - n.height) < u : (e.which === W || h) && (0 === t ? m = a.$menuInner[0].scrollTop = 0 : d = u < (o = (n = a.selectpicker.current.data[m]).position - a.sizeInfo.menuInnerHeight)), s = a.selectpicker.current.elements[m], a.activeIndex = a.selectpicker.current.data[m].index, a.focusItem(s), a.selectpicker.view.currentActive = s, d && (a.$menuInner[0].scrollTop = o), a.options.liveSearch ? a.$searchbox.trigger("focus") : r.trigger("focus");
          } else if (!r.is("input") && !G.test(e.which) || e.which === D && a.selectpicker.keydown.keyHistory) {
            var v,
                g,
                b = [];e.preventDefault(), a.selectpicker.keydown.keyHistory += C[e.which], a.selectpicker.keydown.resetKeyHistory.cancel && clearTimeout(a.selectpicker.keydown.resetKeyHistory.cancel), a.selectpicker.keydown.resetKeyHistory.cancel = a.selectpicker.keydown.resetKeyHistory.start(), g = a.selectpicker.keydown.keyHistory, /^(.)\1+$/.test(g) && (g = g.charAt(0));for (var w = 0; w < a.selectpicker.current.data.length; w++) {
              var I = a.selectpicker.current.data[w];k(I, g, "startsWith", !0) && a.selectpicker.view.canHighlight[w] && b.push(I.index);
            }if (b.length) {
              var x = 0;c.removeClass("active").find("a").removeClass("active"), 1 === g.length && (-1 === (x = b.indexOf(a.activeIndex)) || x === b.length - 1 ? x = 0 : x++), v = b[x], d = 0 < u - (n = a.selectpicker.main.data[v]).position ? (o = n.position - n.height, !0) : (o = n.position - a.sizeInfo.menuInnerHeight, n.position > u + a.sizeInfo.menuInnerHeight), s = a.selectpicker.main.elements[v], a.activeIndex = b[x], a.focusItem(s), s && s.firstChild.focus(), d && (a.$menuInner[0].scrollTop = o), r.trigger("focus");
            }
          }i && (e.which === D && !a.selectpicker.keydown.keyHistory || e.which === N || e.which === H && a.options.selectOnTab) && (e.which !== D && e.preventDefault(), a.options.liveSearch && e.which === D || (a.$menuInner.find(".active a").trigger("click", !0), r.trigger("focus"), a.options.liveSearch || (e.preventDefault(), z(document).data("spaceSelect", !0))));
        }
      }, mobile: function mobile() {
        this.$element[0].classList.add("mobile-device");
      }, refresh: function refresh() {
        var e = z.extend({}, this.options, this.$element.data());this.options = e, this.checkDisabled(), this.setStyle(), this.render(), this.createLi(), this.setWidth(), this.setSize(!0), this.$element.trigger("refreshed" + U);
      }, hide: function hide() {
        this.$newElement.hide();
      }, show: function show() {
        this.$newElement.show();
      }, remove: function remove() {
        this.$newElement.remove(), this.$element.remove();
      }, destroy: function destroy() {
        this.$newElement.before(this.$element).remove(), this.$bsContainer ? this.$bsContainer.remove() : this.$menu.remove(), this.$element.off(U).removeData("selectpicker").removeClass("bs-select-hidden selectpicker"), z(window).off(U + "." + this.selectId);
      } };var X = z.fn.selectpicker;z.fn.selectpicker = Q, z.fn.selectpicker.Constructor = J, z.fn.selectpicker.noConflict = function () {
      return z.fn.selectpicker = X, this;
    }, z(document).off("keydown.bs.dropdown.data-api").on("keydown" + U, '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', J.prototype.keydown).on("focusin.modal", '.bootstrap-select [data-toggle="dropdown"], .bootstrap-select [role="listbox"], .bootstrap-select .bs-searchbox input', function (e) {
      e.stopPropagation();
    }), z(window).on("load" + U + ".data-api", function () {
      z(".selectpicker").each(function () {
        var e = z(this);Q.call(e, e.data());
      });
    });
  }(e);
});
//# sourceMappingURL=bootstrap-select.min.js.map

/***/ }),

/***/ "./bower_components/bootstrap-select/dist/js/i18n/defaults-ru_RU.min.js":
/*!******************************************************************************!*\
  !*** ./bower_components/bootstrap-select/dist/js/i18n/defaults-ru_RU.min.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Bootstrap-select v1.13.10 (https://developer.snapappointments.com/bootstrap-select)
 *
 * Copyright 2012-2019 SnapAppointments, LLC
 * Licensed under MIT (https://github.com/snapappointments/bootstrap-select/blob/master/LICENSE)
 */

!function (e, t) {
  void 0 === e && void 0 !== window && (e = window),  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_RESULT__ = (function (e) {
    return t(e);
  }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(undefined, function (e) {
  e.fn.selectpicker.defaults = { noneSelectedText: "\u041D\u0438\u0447\u0435\u0433\u043E \u043D\u0435 \u0432\u044B\u0431\u0440\u0430\u043D\u043E", noneResultsText: "\u0421\u043E\u0432\u043F\u0430\u0434\u0435\u043D\u0438\u0439 \u043D\u0435 \u043D\u0430\u0439\u0434\u0435\u043D\u043E {0}", countSelectedText: "\u0412\u044B\u0431\u0440\u0430\u043D\u043E {0} \u0438\u0437 {1}", maxOptionsText: ["\u0414\u043E\u0441\u0442\u0438\u0433\u043D\u0443\u0442 \u043F\u0440\u0435\u0434\u0435\u043B ({n} {var} \u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C)", "\u0414\u043E\u0441\u0442\u0438\u0433\u043D\u0443\u0442 \u043F\u0440\u0435\u0434\u0435\u043B \u0432 \u0433\u0440\u0443\u043F\u043F\u0435 ({n} {var} \u043C\u0430\u043A\u0441\u0438\u043C\u0443\u043C)", ["\u0448\u0442.", "\u0448\u0442."]], doneButtonText: "\u0417\u0430\u043A\u0440\u044B\u0442\u044C", selectAllText: "\u0412\u044B\u0431\u0440\u0430\u0442\u044C \u0432\u0441\u0435", deselectAllText: "\u041E\u0442\u043C\u0435\u043D\u0438\u0442\u044C \u0432\u0441\u0435", multipleSeparator: ", " };
});

/***/ }),

/***/ "./bower_components/jquery-ui/jquery-ui.min.js":
/*!*****************************************************!*\
  !*** ./bower_components/jquery-ui/jquery-ui.min.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! jQuery UI - v1.12.1 - 2016-09-14
* http://jqueryui.com
* Includes: widget.js, position.js, data.js, disable-selection.js, effect.js, effects/effect-blind.js, effects/effect-bounce.js, effects/effect-clip.js, effects/effect-drop.js, effects/effect-explode.js, effects/effect-fade.js, effects/effect-fold.js, effects/effect-highlight.js, effects/effect-puff.js, effects/effect-pulsate.js, effects/effect-scale.js, effects/effect-shake.js, effects/effect-size.js, effects/effect-slide.js, effects/effect-transfer.js, focusable.js, form-reset-mixin.js, jquery-1-7.js, keycode.js, labels.js, scroll-parent.js, tabbable.js, unique-id.js, widgets/accordion.js, widgets/autocomplete.js, widgets/button.js, widgets/checkboxradio.js, widgets/controlgroup.js, widgets/datepicker.js, widgets/dialog.js, widgets/draggable.js, widgets/droppable.js, widgets/menu.js, widgets/mouse.js, widgets/progressbar.js, widgets/resizable.js, widgets/selectable.js, widgets/selectmenu.js, widgets/slider.js, widgets/sortable.js, widgets/spinner.js, widgets/tabs.js, widgets/tooltip.js
* Copyright jQuery Foundation and other contributors; Licensed MIT */

(function (t) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
})(function (t) {
  function e(t) {
    for (var e = t.css("visibility"); "inherit" === e;) {
      t = t.parent(), e = t.css("visibility");
    }return "hidden" !== e;
  }function i(t) {
    for (var e, i; t.length && t[0] !== document;) {
      if (e = t.css("position"), ("absolute" === e || "relative" === e || "fixed" === e) && (i = parseInt(t.css("zIndex"), 10), !isNaN(i) && 0 !== i)) return i;t = t.parent();
    }return 0;
  }function s() {
    this._curInst = null, this._keyEvent = !1, this._disabledInputs = [], this._datepickerShowing = !1, this._inDialog = !1, this._mainDivId = "ui-datepicker-div", this._inlineClass = "ui-datepicker-inline", this._appendClass = "ui-datepicker-append", this._triggerClass = "ui-datepicker-trigger", this._dialogClass = "ui-datepicker-dialog", this._disableClass = "ui-datepicker-disabled", this._unselectableClass = "ui-datepicker-unselectable", this._currentClass = "ui-datepicker-current-day", this._dayOverClass = "ui-datepicker-days-cell-over", this.regional = [], this.regional[""] = { closeText: "Done", prevText: "Prev", nextText: "Next", currentText: "Today", monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], weekHeader: "Wk", dateFormat: "mm/dd/yy", firstDay: 0, isRTL: !1, showMonthAfterYear: !1, yearSuffix: "" }, this._defaults = { showOn: "focus", showAnim: "fadeIn", showOptions: {}, defaultDate: null, appendText: "", buttonText: "...", buttonImage: "", buttonImageOnly: !1, hideIfNoPrevNext: !1, navigationAsDateFormat: !1, gotoCurrent: !1, changeMonth: !1, changeYear: !1, yearRange: "c-10:c+10", showOtherMonths: !1, selectOtherMonths: !1, showWeek: !1, calculateWeek: this.iso8601Week, shortYearCutoff: "+10", minDate: null, maxDate: null, duration: "fast", beforeShowDay: null, beforeShow: null, onSelect: null, onChangeMonthYear: null, onClose: null, numberOfMonths: 1, showCurrentAtPos: 0, stepMonths: 1, stepBigMonths: 12, altField: "", altFormat: "", constrainInput: !0, showButtonPanel: !1, autoSize: !1, disabled: !1 }, t.extend(this._defaults, this.regional[""]), this.regional.en = t.extend(!0, {}, this.regional[""]), this.regional["en-US"] = t.extend(!0, {}, this.regional.en), this.dpDiv = n(t("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
  }function n(e) {
    var i = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.on("mouseout", i, function () {
      t(this).removeClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).removeClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).removeClass("ui-datepicker-next-hover");
    }).on("mouseover", i, o);
  }function o() {
    t.datepicker._isDisabledDatepicker(m.inline ? m.dpDiv.parent()[0] : m.input[0]) || (t(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), t(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && t(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") && t(this).addClass("ui-datepicker-next-hover"));
  }function a(e, i) {
    t.extend(e, i);for (var s in i) {
      null == i[s] && (e[s] = i[s]);
    }return e;
  }function r(t) {
    return function () {
      var e = this.element.val();t.apply(this, arguments), this._refresh(), e !== this.element.val() && this._trigger("change");
    };
  }t.ui = t.ui || {}, t.ui.version = "1.12.1";var h = 0,
      l = Array.prototype.slice;t.cleanData = function (e) {
    return function (i) {
      var s, n, o;for (o = 0; null != (n = i[o]); o++) {
        try {
          s = t._data(n, "events"), s && s.remove && t(n).triggerHandler("remove");
        } catch (a) {}
      }e(i);
    };
  }(t.cleanData), t.widget = function (e, i, s) {
    var n,
        o,
        a,
        r = {},
        h = e.split(".")[0];e = e.split(".")[1];var l = h + "-" + e;return s || (s = i, i = t.Widget), t.isArray(s) && (s = t.extend.apply(null, [{}].concat(s))), t.expr[":"][l.toLowerCase()] = function (e) {
      return !!t.data(e, l);
    }, t[h] = t[h] || {}, n = t[h][e], o = t[h][e] = function (t, e) {
      return this._createWidget ? (arguments.length && this._createWidget(t, e), void 0) : new o(t, e);
    }, t.extend(o, n, { version: s.version, _proto: t.extend({}, s), _childConstructors: [] }), a = new i(), a.options = t.widget.extend({}, a.options), t.each(s, function (e, s) {
      return t.isFunction(s) ? (r[e] = function () {
        function t() {
          return i.prototype[e].apply(this, arguments);
        }function n(t) {
          return i.prototype[e].apply(this, t);
        }return function () {
          var e,
              i = this._super,
              o = this._superApply;return this._super = t, this._superApply = n, e = s.apply(this, arguments), this._super = i, this._superApply = o, e;
        };
      }(), void 0) : (r[e] = s, void 0);
    }), o.prototype = t.widget.extend(a, { widgetEventPrefix: n ? a.widgetEventPrefix || e : e }, r, { constructor: o, namespace: h, widgetName: e, widgetFullName: l }), n ? (t.each(n._childConstructors, function (e, i) {
      var s = i.prototype;t.widget(s.namespace + "." + s.widgetName, o, i._proto);
    }), delete n._childConstructors) : i._childConstructors.push(o), t.widget.bridge(e, o), o;
  }, t.widget.extend = function (e) {
    for (var i, s, n = l.call(arguments, 1), o = 0, a = n.length; a > o; o++) {
      for (i in n[o]) {
        s = n[o][i], n[o].hasOwnProperty(i) && void 0 !== s && (e[i] = t.isPlainObject(s) ? t.isPlainObject(e[i]) ? t.widget.extend({}, e[i], s) : t.widget.extend({}, s) : s);
      }
    }return e;
  }, t.widget.bridge = function (e, i) {
    var s = i.prototype.widgetFullName || e;t.fn[e] = function (n) {
      var o = "string" == typeof n,
          a = l.call(arguments, 1),
          r = this;return o ? this.length || "instance" !== n ? this.each(function () {
        var i,
            o = t.data(this, s);return "instance" === n ? (r = o, !1) : o ? t.isFunction(o[n]) && "_" !== n.charAt(0) ? (i = o[n].apply(o, a), i !== o && void 0 !== i ? (r = i && i.jquery ? r.pushStack(i.get()) : i, !1) : void 0) : t.error("no such method '" + n + "' for " + e + " widget instance") : t.error("cannot call methods on " + e + " prior to initialization; " + "attempted to call method '" + n + "'");
      }) : r = void 0 : (a.length && (n = t.widget.extend.apply(null, [n].concat(a))), this.each(function () {
        var e = t.data(this, s);e ? (e.option(n || {}), e._init && e._init()) : t.data(this, s, new i(n, this));
      })), r;
    };
  }, t.Widget = function () {}, t.Widget._childConstructors = [], t.Widget.prototype = { widgetName: "widget", widgetEventPrefix: "", defaultElement: "<div>", options: { classes: {}, disabled: !1, create: null }, _createWidget: function _createWidget(e, i) {
      i = t(i || this.defaultElement || this)[0], this.element = t(i), this.uuid = h++, this.eventNamespace = "." + this.widgetName + this.uuid, this.bindings = t(), this.hoverable = t(), this.focusable = t(), this.classesElementLookup = {}, i !== this && (t.data(i, this.widgetFullName, this), this._on(!0, this.element, { remove: function remove(t) {
          t.target === i && this.destroy();
        } }), this.document = t(i.style ? i.ownerDocument : i.document || i), this.window = t(this.document[0].defaultView || this.document[0].parentWindow)), this.options = t.widget.extend({}, this.options, this._getCreateOptions(), e), this._create(), this.options.disabled && this._setOptionDisabled(this.options.disabled), this._trigger("create", null, this._getCreateEventData()), this._init();
    }, _getCreateOptions: function _getCreateOptions() {
      return {};
    }, _getCreateEventData: t.noop, _create: t.noop, _init: t.noop, destroy: function destroy() {
      var e = this;this._destroy(), t.each(this.classesElementLookup, function (t, i) {
        e._removeClass(i, t);
      }), this.element.off(this.eventNamespace).removeData(this.widgetFullName), this.widget().off(this.eventNamespace).removeAttr("aria-disabled"), this.bindings.off(this.eventNamespace);
    }, _destroy: t.noop, widget: function widget() {
      return this.element;
    }, option: function option(e, i) {
      var s,
          n,
          o,
          a = e;if (0 === arguments.length) return t.widget.extend({}, this.options);if ("string" == typeof e) if (a = {}, s = e.split("."), e = s.shift(), s.length) {
        for (n = a[e] = t.widget.extend({}, this.options[e]), o = 0; s.length - 1 > o; o++) {
          n[s[o]] = n[s[o]] || {}, n = n[s[o]];
        }if (e = s.pop(), 1 === arguments.length) return void 0 === n[e] ? null : n[e];n[e] = i;
      } else {
        if (1 === arguments.length) return void 0 === this.options[e] ? null : this.options[e];a[e] = i;
      }return this._setOptions(a), this;
    }, _setOptions: function _setOptions(t) {
      var e;for (e in t) {
        this._setOption(e, t[e]);
      }return this;
    }, _setOption: function _setOption(t, e) {
      return "classes" === t && this._setOptionClasses(e), this.options[t] = e, "disabled" === t && this._setOptionDisabled(e), this;
    }, _setOptionClasses: function _setOptionClasses(e) {
      var i, s, n;for (i in e) {
        n = this.classesElementLookup[i], e[i] !== this.options.classes[i] && n && n.length && (s = t(n.get()), this._removeClass(n, i), s.addClass(this._classes({ element: s, keys: i, classes: e, add: !0 })));
      }
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, !!t), t && (this._removeClass(this.hoverable, null, "ui-state-hover"), this._removeClass(this.focusable, null, "ui-state-focus"));
    }, enable: function enable() {
      return this._setOptions({ disabled: !1 });
    }, disable: function disable() {
      return this._setOptions({ disabled: !0 });
    }, _classes: function _classes(e) {
      function i(i, o) {
        var a, r;for (r = 0; i.length > r; r++) {
          a = n.classesElementLookup[i[r]] || t(), a = e.add ? t(t.unique(a.get().concat(e.element.get()))) : t(a.not(e.element).get()), n.classesElementLookup[i[r]] = a, s.push(i[r]), o && e.classes[i[r]] && s.push(e.classes[i[r]]);
        }
      }var s = [],
          n = this;return e = t.extend({ element: this.element, classes: this.options.classes || {} }, e), this._on(e.element, { remove: "_untrackClassesElement" }), e.keys && i(e.keys.match(/\S+/g) || [], !0), e.extra && i(e.extra.match(/\S+/g) || []), s.join(" ");
    }, _untrackClassesElement: function _untrackClassesElement(e) {
      var i = this;t.each(i.classesElementLookup, function (s, n) {
        -1 !== t.inArray(e.target, n) && (i.classesElementLookup[s] = t(n.not(e.target).get()));
      });
    }, _removeClass: function _removeClass(t, e, i) {
      return this._toggleClass(t, e, i, !1);
    }, _addClass: function _addClass(t, e, i) {
      return this._toggleClass(t, e, i, !0);
    }, _toggleClass: function _toggleClass(t, e, i, s) {
      s = "boolean" == typeof s ? s : i;var n = "string" == typeof t || null === t,
          o = { extra: n ? e : i, keys: n ? t : e, element: n ? this.element : t, add: s };return o.element.toggleClass(this._classes(o), s), this;
    }, _on: function _on(e, i, s) {
      var n,
          o = this;"boolean" != typeof e && (s = i, i = e, e = !1), s ? (i = n = t(i), this.bindings = this.bindings.add(i)) : (s = i, i = this.element, n = this.widget()), t.each(s, function (s, a) {
        function r() {
          return e || o.options.disabled !== !0 && !t(this).hasClass("ui-state-disabled") ? ("string" == typeof a ? o[a] : a).apply(o, arguments) : void 0;
        }"string" != typeof a && (r.guid = a.guid = a.guid || r.guid || t.guid++);var h = s.match(/^([\w:-]*)\s*(.*)$/),
            l = h[1] + o.eventNamespace,
            c = h[2];c ? n.on(l, c, r) : i.on(l, r);
      });
    }, _off: function _off(e, i) {
      i = (i || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace, e.off(i).off(i), this.bindings = t(this.bindings.not(e).get()), this.focusable = t(this.focusable.not(e).get()), this.hoverable = t(this.hoverable.not(e).get());
    }, _delay: function _delay(t, e) {
      function i() {
        return ("string" == typeof t ? s[t] : t).apply(s, arguments);
      }var s = this;return setTimeout(i, e || 0);
    }, _hoverable: function _hoverable(e) {
      this.hoverable = this.hoverable.add(e), this._on(e, { mouseenter: function mouseenter(e) {
          this._addClass(t(e.currentTarget), null, "ui-state-hover");
        }, mouseleave: function mouseleave(e) {
          this._removeClass(t(e.currentTarget), null, "ui-state-hover");
        } });
    }, _focusable: function _focusable(e) {
      this.focusable = this.focusable.add(e), this._on(e, { focusin: function focusin(e) {
          this._addClass(t(e.currentTarget), null, "ui-state-focus");
        }, focusout: function focusout(e) {
          this._removeClass(t(e.currentTarget), null, "ui-state-focus");
        } });
    }, _trigger: function _trigger(e, i, s) {
      var n,
          o,
          a = this.options[e];if (s = s || {}, i = t.Event(i), i.type = (e === this.widgetEventPrefix ? e : this.widgetEventPrefix + e).toLowerCase(), i.target = this.element[0], o = i.originalEvent) for (n in o) {
        n in i || (i[n] = o[n]);
      }return this.element.trigger(i, s), !(t.isFunction(a) && a.apply(this.element[0], [i].concat(s)) === !1 || i.isDefaultPrevented());
    } }, t.each({ show: "fadeIn", hide: "fadeOut" }, function (e, i) {
    t.Widget.prototype["_" + e] = function (s, n, o) {
      "string" == typeof n && (n = { effect: n });var a,
          r = n ? n === !0 || "number" == typeof n ? i : n.effect || i : e;n = n || {}, "number" == typeof n && (n = { duration: n }), a = !t.isEmptyObject(n), n.complete = o, n.delay && s.delay(n.delay), a && t.effects && t.effects.effect[r] ? s[e](n) : r !== e && s[r] ? s[r](n.duration, n.easing, o) : s.queue(function (i) {
        t(this)[e](), o && o.call(s[0]), i();
      });
    };
  }), t.widget, function () {
    function e(t, e, i) {
      return [parseFloat(t[0]) * (u.test(t[0]) ? e / 100 : 1), parseFloat(t[1]) * (u.test(t[1]) ? i / 100 : 1)];
    }function i(e, i) {
      return parseInt(t.css(e, i), 10) || 0;
    }function s(e) {
      var i = e[0];return 9 === i.nodeType ? { width: e.width(), height: e.height(), offset: { top: 0, left: 0 } } : t.isWindow(i) ? { width: e.width(), height: e.height(), offset: { top: e.scrollTop(), left: e.scrollLeft() } } : i.preventDefault ? { width: 0, height: 0, offset: { top: i.pageY, left: i.pageX } } : { width: e.outerWidth(), height: e.outerHeight(), offset: e.offset() };
    }var n,
        o = Math.max,
        a = Math.abs,
        r = /left|center|right/,
        h = /top|center|bottom/,
        l = /[\+\-]\d+(\.[\d]+)?%?/,
        c = /^\w+/,
        u = /%$/,
        d = t.fn.position;t.position = { scrollbarWidth: function scrollbarWidth() {
        if (void 0 !== n) return n;var e,
            i,
            s = t("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),
            o = s.children()[0];return t("body").append(s), e = o.offsetWidth, s.css("overflow", "scroll"), i = o.offsetWidth, e === i && (i = s[0].clientWidth), s.remove(), n = e - i;
      }, getScrollInfo: function getScrollInfo(e) {
        var i = e.isWindow || e.isDocument ? "" : e.element.css("overflow-x"),
            s = e.isWindow || e.isDocument ? "" : e.element.css("overflow-y"),
            n = "scroll" === i || "auto" === i && e.width < e.element[0].scrollWidth,
            o = "scroll" === s || "auto" === s && e.height < e.element[0].scrollHeight;return { width: o ? t.position.scrollbarWidth() : 0, height: n ? t.position.scrollbarWidth() : 0 };
      }, getWithinInfo: function getWithinInfo(e) {
        var i = t(e || window),
            s = t.isWindow(i[0]),
            n = !!i[0] && 9 === i[0].nodeType,
            o = !s && !n;return { element: i, isWindow: s, isDocument: n, offset: o ? t(e).offset() : { left: 0, top: 0 }, scrollLeft: i.scrollLeft(), scrollTop: i.scrollTop(), width: i.outerWidth(), height: i.outerHeight() };
      } }, t.fn.position = function (n) {
      if (!n || !n.of) return d.apply(this, arguments);n = t.extend({}, n);var u,
          p,
          f,
          g,
          m,
          _,
          v = t(n.of),
          b = t.position.getWithinInfo(n.within),
          y = t.position.getScrollInfo(b),
          w = (n.collision || "flip").split(" "),
          k = {};return _ = s(v), v[0].preventDefault && (n.at = "left top"), p = _.width, f = _.height, g = _.offset, m = t.extend({}, g), t.each(["my", "at"], function () {
        var t,
            e,
            i = (n[this] || "").split(" ");1 === i.length && (i = r.test(i[0]) ? i.concat(["center"]) : h.test(i[0]) ? ["center"].concat(i) : ["center", "center"]), i[0] = r.test(i[0]) ? i[0] : "center", i[1] = h.test(i[1]) ? i[1] : "center", t = l.exec(i[0]), e = l.exec(i[1]), k[this] = [t ? t[0] : 0, e ? e[0] : 0], n[this] = [c.exec(i[0])[0], c.exec(i[1])[0]];
      }), 1 === w.length && (w[1] = w[0]), "right" === n.at[0] ? m.left += p : "center" === n.at[0] && (m.left += p / 2), "bottom" === n.at[1] ? m.top += f : "center" === n.at[1] && (m.top += f / 2), u = e(k.at, p, f), m.left += u[0], m.top += u[1], this.each(function () {
        var s,
            r,
            h = t(this),
            l = h.outerWidth(),
            c = h.outerHeight(),
            d = i(this, "marginLeft"),
            _ = i(this, "marginTop"),
            x = l + d + i(this, "marginRight") + y.width,
            C = c + _ + i(this, "marginBottom") + y.height,
            D = t.extend({}, m),
            I = e(k.my, h.outerWidth(), h.outerHeight());"right" === n.my[0] ? D.left -= l : "center" === n.my[0] && (D.left -= l / 2), "bottom" === n.my[1] ? D.top -= c : "center" === n.my[1] && (D.top -= c / 2), D.left += I[0], D.top += I[1], s = { marginLeft: d, marginTop: _ }, t.each(["left", "top"], function (e, i) {
          t.ui.position[w[e]] && t.ui.position[w[e]][i](D, { targetWidth: p, targetHeight: f, elemWidth: l, elemHeight: c, collisionPosition: s, collisionWidth: x, collisionHeight: C, offset: [u[0] + I[0], u[1] + I[1]], my: n.my, at: n.at, within: b, elem: h });
        }), n.using && (r = function r(t) {
          var e = g.left - D.left,
              i = e + p - l,
              s = g.top - D.top,
              r = s + f - c,
              u = { target: { element: v, left: g.left, top: g.top, width: p, height: f }, element: { element: h, left: D.left, top: D.top, width: l, height: c }, horizontal: 0 > i ? "left" : e > 0 ? "right" : "center", vertical: 0 > r ? "top" : s > 0 ? "bottom" : "middle" };l > p && p > a(e + i) && (u.horizontal = "center"), c > f && f > a(s + r) && (u.vertical = "middle"), u.important = o(a(e), a(i)) > o(a(s), a(r)) ? "horizontal" : "vertical", n.using.call(this, t, u);
        }), h.offset(t.extend(D, { using: r }));
      });
    }, t.ui.position = { fit: { left: function left(t, e) {
          var i,
              s = e.within,
              n = s.isWindow ? s.scrollLeft : s.offset.left,
              a = s.width,
              r = t.left - e.collisionPosition.marginLeft,
              h = n - r,
              l = r + e.collisionWidth - a - n;e.collisionWidth > a ? h > 0 && 0 >= l ? (i = t.left + h + e.collisionWidth - a - n, t.left += h - i) : t.left = l > 0 && 0 >= h ? n : h > l ? n + a - e.collisionWidth : n : h > 0 ? t.left += h : l > 0 ? t.left -= l : t.left = o(t.left - r, t.left);
        }, top: function top(t, e) {
          var i,
              s = e.within,
              n = s.isWindow ? s.scrollTop : s.offset.top,
              a = e.within.height,
              r = t.top - e.collisionPosition.marginTop,
              h = n - r,
              l = r + e.collisionHeight - a - n;e.collisionHeight > a ? h > 0 && 0 >= l ? (i = t.top + h + e.collisionHeight - a - n, t.top += h - i) : t.top = l > 0 && 0 >= h ? n : h > l ? n + a - e.collisionHeight : n : h > 0 ? t.top += h : l > 0 ? t.top -= l : t.top = o(t.top - r, t.top);
        } }, flip: { left: function left(t, e) {
          var i,
              s,
              n = e.within,
              o = n.offset.left + n.scrollLeft,
              r = n.width,
              h = n.isWindow ? n.scrollLeft : n.offset.left,
              l = t.left - e.collisionPosition.marginLeft,
              c = l - h,
              u = l + e.collisionWidth - r - h,
              d = "left" === e.my[0] ? -e.elemWidth : "right" === e.my[0] ? e.elemWidth : 0,
              p = "left" === e.at[0] ? e.targetWidth : "right" === e.at[0] ? -e.targetWidth : 0,
              f = -2 * e.offset[0];0 > c ? (i = t.left + d + p + f + e.collisionWidth - r - o, (0 > i || a(c) > i) && (t.left += d + p + f)) : u > 0 && (s = t.left - e.collisionPosition.marginLeft + d + p + f - h, (s > 0 || u > a(s)) && (t.left += d + p + f));
        }, top: function top(t, e) {
          var i,
              s,
              n = e.within,
              o = n.offset.top + n.scrollTop,
              r = n.height,
              h = n.isWindow ? n.scrollTop : n.offset.top,
              l = t.top - e.collisionPosition.marginTop,
              c = l - h,
              u = l + e.collisionHeight - r - h,
              d = "top" === e.my[1],
              p = d ? -e.elemHeight : "bottom" === e.my[1] ? e.elemHeight : 0,
              f = "top" === e.at[1] ? e.targetHeight : "bottom" === e.at[1] ? -e.targetHeight : 0,
              g = -2 * e.offset[1];0 > c ? (s = t.top + p + f + g + e.collisionHeight - r - o, (0 > s || a(c) > s) && (t.top += p + f + g)) : u > 0 && (i = t.top - e.collisionPosition.marginTop + p + f + g - h, (i > 0 || u > a(i)) && (t.top += p + f + g));
        } }, flipfit: { left: function left() {
          t.ui.position.flip.left.apply(this, arguments), t.ui.position.fit.left.apply(this, arguments);
        }, top: function top() {
          t.ui.position.flip.top.apply(this, arguments), t.ui.position.fit.top.apply(this, arguments);
        } } };
  }(), t.ui.position, t.extend(t.expr[":"], { data: t.expr.createPseudo ? t.expr.createPseudo(function (e) {
      return function (i) {
        return !!t.data(i, e);
      };
    }) : function (e, i, s) {
      return !!t.data(e, s[3]);
    } }), t.fn.extend({ disableSelection: function () {
      var t = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";return function () {
        return this.on(t + ".ui-disableSelection", function (t) {
          t.preventDefault();
        });
      };
    }(), enableSelection: function enableSelection() {
      return this.off(".ui-disableSelection");
    } });var c = "ui-effects-",
      u = "ui-effects-style",
      d = "ui-effects-animated",
      p = t;t.effects = { effect: {} }, function (t, e) {
    function i(t, e, i) {
      var s = u[e.type] || {};return null == t ? i || !e.def ? null : e.def : (t = s.floor ? ~~t : parseFloat(t), isNaN(t) ? e.def : s.mod ? (t + s.mod) % s.mod : 0 > t ? 0 : t > s.max ? s.max : t);
    }function s(i) {
      var s = l(),
          n = s._rgba = [];return i = i.toLowerCase(), f(h, function (t, o) {
        var a,
            r = o.re.exec(i),
            h = r && o.parse(r),
            l = o.space || "rgba";return h ? (a = s[l](h), s[c[l].cache] = a[c[l].cache], n = s._rgba = a._rgba, !1) : e;
      }), n.length ? ("0,0,0,0" === n.join() && t.extend(n, o.transparent), s) : o[i];
    }function n(t, e, i) {
      return i = (i + 1) % 1, 1 > 6 * i ? t + 6 * (e - t) * i : 1 > 2 * i ? e : 2 > 3 * i ? t + 6 * (e - t) * (2 / 3 - i) : t;
    }var o,
        a = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor",
        r = /^([\-+])=\s*(\d+\.?\d*)/,
        h = [{ re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function parse(t) {
        return [t[1], t[2], t[3], t[4]];
      } }, { re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, parse: function parse(t) {
        return [2.55 * t[1], 2.55 * t[2], 2.55 * t[3], t[4]];
      } }, { re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/, parse: function parse(t) {
        return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
      } }, { re: /#([a-f0-9])([a-f0-9])([a-f0-9])/, parse: function parse(t) {
        return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)];
      } }, { re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/, space: "hsla", parse: function parse(t) {
        return [t[1], t[2] / 100, t[3] / 100, t[4]];
      } }],
        l = t.Color = function (e, i, s, n) {
      return new t.Color.fn.parse(e, i, s, n);
    },
        c = { rgba: { props: { red: { idx: 0, type: "byte" }, green: { idx: 1, type: "byte" }, blue: { idx: 2, type: "byte" } } }, hsla: { props: { hue: { idx: 0, type: "degrees" }, saturation: { idx: 1, type: "percent" }, lightness: { idx: 2, type: "percent" } } } },
        u = { "byte": { floor: !0, max: 255 }, percent: { max: 1 }, degrees: { mod: 360, floor: !0 } },
        d = l.support = {},
        p = t("<p>")[0],
        f = t.each;p.style.cssText = "background-color:rgba(1,1,1,.5)", d.rgba = p.style.backgroundColor.indexOf("rgba") > -1, f(c, function (t, e) {
      e.cache = "_" + t, e.props.alpha = { idx: 3, type: "percent", def: 1 };
    }), l.fn = t.extend(l.prototype, { parse: function parse(n, a, r, h) {
        if (n === e) return this._rgba = [null, null, null, null], this;(n.jquery || n.nodeType) && (n = t(n).css(a), a = e);var u = this,
            d = t.type(n),
            p = this._rgba = [];return a !== e && (n = [n, a, r, h], d = "array"), "string" === d ? this.parse(s(n) || o._default) : "array" === d ? (f(c.rgba.props, function (t, e) {
          p[e.idx] = i(n[e.idx], e);
        }), this) : "object" === d ? (n instanceof l ? f(c, function (t, e) {
          n[e.cache] && (u[e.cache] = n[e.cache].slice());
        }) : f(c, function (e, s) {
          var o = s.cache;f(s.props, function (t, e) {
            if (!u[o] && s.to) {
              if ("alpha" === t || null == n[t]) return;u[o] = s.to(u._rgba);
            }u[o][e.idx] = i(n[t], e, !0);
          }), u[o] && 0 > t.inArray(null, u[o].slice(0, 3)) && (u[o][3] = 1, s.from && (u._rgba = s.from(u[o])));
        }), this) : e;
      }, is: function is(t) {
        var i = l(t),
            s = !0,
            n = this;return f(c, function (t, o) {
          var a,
              r = i[o.cache];return r && (a = n[o.cache] || o.to && o.to(n._rgba) || [], f(o.props, function (t, i) {
            return null != r[i.idx] ? s = r[i.idx] === a[i.idx] : e;
          })), s;
        }), s;
      }, _space: function _space() {
        var t = [],
            e = this;return f(c, function (i, s) {
          e[s.cache] && t.push(i);
        }), t.pop();
      }, transition: function transition(t, e) {
        var s = l(t),
            n = s._space(),
            o = c[n],
            a = 0 === this.alpha() ? l("transparent") : this,
            r = a[o.cache] || o.to(a._rgba),
            h = r.slice();return s = s[o.cache], f(o.props, function (t, n) {
          var o = n.idx,
              a = r[o],
              l = s[o],
              c = u[n.type] || {};null !== l && (null === a ? h[o] = l : (c.mod && (l - a > c.mod / 2 ? a += c.mod : a - l > c.mod / 2 && (a -= c.mod)), h[o] = i((l - a) * e + a, n)));
        }), this[n](h);
      }, blend: function blend(e) {
        if (1 === this._rgba[3]) return this;var i = this._rgba.slice(),
            s = i.pop(),
            n = l(e)._rgba;return l(t.map(i, function (t, e) {
          return (1 - s) * n[e] + s * t;
        }));
      }, toRgbaString: function toRgbaString() {
        var e = "rgba(",
            i = t.map(this._rgba, function (t, e) {
          return null == t ? e > 2 ? 1 : 0 : t;
        });return 1 === i[3] && (i.pop(), e = "rgb("), e + i.join() + ")";
      }, toHslaString: function toHslaString() {
        var e = "hsla(",
            i = t.map(this.hsla(), function (t, e) {
          return null == t && (t = e > 2 ? 1 : 0), e && 3 > e && (t = Math.round(100 * t) + "%"), t;
        });return 1 === i[3] && (i.pop(), e = "hsl("), e + i.join() + ")";
      }, toHexString: function toHexString(e) {
        var i = this._rgba.slice(),
            s = i.pop();return e && i.push(~~(255 * s)), "#" + t.map(i, function (t) {
          return t = (t || 0).toString(16), 1 === t.length ? "0" + t : t;
        }).join("");
      }, toString: function toString() {
        return 0 === this._rgba[3] ? "transparent" : this.toRgbaString();
      } }), l.fn.parse.prototype = l.fn, c.hsla.to = function (t) {
      if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]];var e,
          i,
          s = t[0] / 255,
          n = t[1] / 255,
          o = t[2] / 255,
          a = t[3],
          r = Math.max(s, n, o),
          h = Math.min(s, n, o),
          l = r - h,
          c = r + h,
          u = .5 * c;return e = h === r ? 0 : s === r ? 60 * (n - o) / l + 360 : n === r ? 60 * (o - s) / l + 120 : 60 * (s - n) / l + 240, i = 0 === l ? 0 : .5 >= u ? l / c : l / (2 - c), [Math.round(e) % 360, i, u, null == a ? 1 : a];
    }, c.hsla.from = function (t) {
      if (null == t[0] || null == t[1] || null == t[2]) return [null, null, null, t[3]];var e = t[0] / 360,
          i = t[1],
          s = t[2],
          o = t[3],
          a = .5 >= s ? s * (1 + i) : s + i - s * i,
          r = 2 * s - a;return [Math.round(255 * n(r, a, e + 1 / 3)), Math.round(255 * n(r, a, e)), Math.round(255 * n(r, a, e - 1 / 3)), o];
    }, f(c, function (s, n) {
      var o = n.props,
          a = n.cache,
          h = n.to,
          c = n.from;l.fn[s] = function (s) {
        if (h && !this[a] && (this[a] = h(this._rgba)), s === e) return this[a].slice();var n,
            r = t.type(s),
            u = "array" === r || "object" === r ? s : arguments,
            d = this[a].slice();return f(o, function (t, e) {
          var s = u["object" === r ? t : e.idx];null == s && (s = d[e.idx]), d[e.idx] = i(s, e);
        }), c ? (n = l(c(d)), n[a] = d, n) : l(d);
      }, f(o, function (e, i) {
        l.fn[e] || (l.fn[e] = function (n) {
          var o,
              a = t.type(n),
              h = "alpha" === e ? this._hsla ? "hsla" : "rgba" : s,
              l = this[h](),
              c = l[i.idx];return "undefined" === a ? c : ("function" === a && (n = n.call(this, c), a = t.type(n)), null == n && i.empty ? this : ("string" === a && (o = r.exec(n), o && (n = c + parseFloat(o[2]) * ("+" === o[1] ? 1 : -1))), l[i.idx] = n, this[h](l)));
        });
      });
    }), l.hook = function (e) {
      var i = e.split(" ");f(i, function (e, i) {
        t.cssHooks[i] = { set: function set(e, n) {
            var o,
                a,
                r = "";if ("transparent" !== n && ("string" !== t.type(n) || (o = s(n)))) {
              if (n = l(o || n), !d.rgba && 1 !== n._rgba[3]) {
                for (a = "backgroundColor" === i ? e.parentNode : e; ("" === r || "transparent" === r) && a && a.style;) {
                  try {
                    r = t.css(a, "backgroundColor"), a = a.parentNode;
                  } catch (h) {}
                }n = n.blend(r && "transparent" !== r ? r : "_default");
              }n = n.toRgbaString();
            }try {
              e.style[i] = n;
            } catch (h) {}
          } }, t.fx.step[i] = function (e) {
          e.colorInit || (e.start = l(e.elem, i), e.end = l(e.end), e.colorInit = !0), t.cssHooks[i].set(e.elem, e.start.transition(e.end, e.pos));
        };
      });
    }, l.hook(a), t.cssHooks.borderColor = { expand: function expand(t) {
        var e = {};return f(["Top", "Right", "Bottom", "Left"], function (i, s) {
          e["border" + s + "Color"] = t;
        }), e;
      } }, o = t.Color.names = { aqua: "#00ffff", black: "#000000", blue: "#0000ff", fuchsia: "#ff00ff", gray: "#808080", green: "#008000", lime: "#00ff00", maroon: "#800000", navy: "#000080", olive: "#808000", purple: "#800080", red: "#ff0000", silver: "#c0c0c0", teal: "#008080", white: "#ffffff", yellow: "#ffff00", transparent: [null, null, null, 0], _default: "#ffffff" };
  }(p), function () {
    function e(e) {
      var i,
          s,
          n = e.ownerDocument.defaultView ? e.ownerDocument.defaultView.getComputedStyle(e, null) : e.currentStyle,
          o = {};if (n && n.length && n[0] && n[n[0]]) for (s = n.length; s--;) {
        i = n[s], "string" == typeof n[i] && (o[t.camelCase(i)] = n[i]);
      } else for (i in n) {
        "string" == typeof n[i] && (o[i] = n[i]);
      }return o;
    }function i(e, i) {
      var s,
          o,
          a = {};for (s in i) {
        o = i[s], e[s] !== o && (n[s] || (t.fx.step[s] || !isNaN(parseFloat(o))) && (a[s] = o));
      }return a;
    }var s = ["add", "remove", "toggle"],
        n = { border: 1, borderBottom: 1, borderColor: 1, borderLeft: 1, borderRight: 1, borderTop: 1, borderWidth: 1, margin: 1, padding: 1 };t.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function (e, i) {
      t.fx.step[i] = function (t) {
        ("none" !== t.end && !t.setAttr || 1 === t.pos && !t.setAttr) && (p.style(t.elem, i, t.end), t.setAttr = !0);
      };
    }), t.fn.addBack || (t.fn.addBack = function (t) {
      return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
    }), t.effects.animateClass = function (n, o, a, r) {
      var h = t.speed(o, a, r);return this.queue(function () {
        var o,
            a = t(this),
            r = a.attr("class") || "",
            l = h.children ? a.find("*").addBack() : a;l = l.map(function () {
          var i = t(this);return { el: i, start: e(this) };
        }), o = function o() {
          t.each(s, function (t, e) {
            n[e] && a[e + "Class"](n[e]);
          });
        }, o(), l = l.map(function () {
          return this.end = e(this.el[0]), this.diff = i(this.start, this.end), this;
        }), a.attr("class", r), l = l.map(function () {
          var e = this,
              i = t.Deferred(),
              s = t.extend({}, h, { queue: !1, complete: function complete() {
              i.resolve(e);
            } });return this.el.animate(this.diff, s), i.promise();
        }), t.when.apply(t, l.get()).done(function () {
          o(), t.each(arguments, function () {
            var e = this.el;t.each(this.diff, function (t) {
              e.css(t, "");
            });
          }), h.complete.call(a[0]);
        });
      });
    }, t.fn.extend({ addClass: function (e) {
        return function (i, s, n, o) {
          return s ? t.effects.animateClass.call(this, { add: i }, s, n, o) : e.apply(this, arguments);
        };
      }(t.fn.addClass), removeClass: function (e) {
        return function (i, s, n, o) {
          return arguments.length > 1 ? t.effects.animateClass.call(this, { remove: i }, s, n, o) : e.apply(this, arguments);
        };
      }(t.fn.removeClass), toggleClass: function (e) {
        return function (i, s, n, o, a) {
          return "boolean" == typeof s || void 0 === s ? n ? t.effects.animateClass.call(this, s ? { add: i } : { remove: i }, n, o, a) : e.apply(this, arguments) : t.effects.animateClass.call(this, { toggle: i }, s, n, o);
        };
      }(t.fn.toggleClass), switchClass: function switchClass(e, i, s, n, o) {
        return t.effects.animateClass.call(this, { add: i, remove: e }, s, n, o);
      } });
  }(), function () {
    function e(e, i, s, n) {
      return t.isPlainObject(e) && (i = e, e = e.effect), e = { effect: e }, null == i && (i = {}), t.isFunction(i) && (n = i, s = null, i = {}), ("number" == typeof i || t.fx.speeds[i]) && (n = s, s = i, i = {}), t.isFunction(s) && (n = s, s = null), i && t.extend(e, i), s = s || i.duration, e.duration = t.fx.off ? 0 : "number" == typeof s ? s : s in t.fx.speeds ? t.fx.speeds[s] : t.fx.speeds._default, e.complete = n || i.complete, e;
    }function i(e) {
      return !e || "number" == typeof e || t.fx.speeds[e] ? !0 : "string" != typeof e || t.effects.effect[e] ? t.isFunction(e) ? !0 : "object" != (typeof e === "undefined" ? "undefined" : _typeof(e)) || e.effect ? !1 : !0 : !0;
    }function s(t, e) {
      var i = e.outerWidth(),
          s = e.outerHeight(),
          n = /^rect\((-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto),?\s*(-?\d*\.?\d*px|-?\d+%|auto)\)$/,
          o = n.exec(t) || ["", 0, i, s, 0];return { top: parseFloat(o[1]) || 0, right: "auto" === o[2] ? i : parseFloat(o[2]), bottom: "auto" === o[3] ? s : parseFloat(o[3]), left: parseFloat(o[4]) || 0 };
    }t.expr && t.expr.filters && t.expr.filters.animated && (t.expr.filters.animated = function (e) {
      return function (i) {
        return !!t(i).data(d) || e(i);
      };
    }(t.expr.filters.animated)), t.uiBackCompat !== !1 && t.extend(t.effects, { save: function save(t, e) {
        for (var i = 0, s = e.length; s > i; i++) {
          null !== e[i] && t.data(c + e[i], t[0].style[e[i]]);
        }
      }, restore: function restore(t, e) {
        for (var i, s = 0, n = e.length; n > s; s++) {
          null !== e[s] && (i = t.data(c + e[s]), t.css(e[s], i));
        }
      }, setMode: function setMode(t, e) {
        return "toggle" === e && (e = t.is(":hidden") ? "show" : "hide"), e;
      }, createWrapper: function createWrapper(e) {
        if (e.parent().is(".ui-effects-wrapper")) return e.parent();var i = { width: e.outerWidth(!0), height: e.outerHeight(!0), "float": e.css("float") },
            s = t("<div></div>").addClass("ui-effects-wrapper").css({ fontSize: "100%", background: "transparent", border: "none", margin: 0, padding: 0 }),
            n = { width: e.width(), height: e.height() },
            o = document.activeElement;try {
          o.id;
        } catch (a) {
          o = document.body;
        }return e.wrap(s), (e[0] === o || t.contains(e[0], o)) && t(o).trigger("focus"), s = e.parent(), "static" === e.css("position") ? (s.css({ position: "relative" }), e.css({ position: "relative" })) : (t.extend(i, { position: e.css("position"), zIndex: e.css("z-index") }), t.each(["top", "left", "bottom", "right"], function (t, s) {
          i[s] = e.css(s), isNaN(parseInt(i[s], 10)) && (i[s] = "auto");
        }), e.css({ position: "relative", top: 0, left: 0, right: "auto", bottom: "auto" })), e.css(n), s.css(i).show();
      }, removeWrapper: function removeWrapper(e) {
        var i = document.activeElement;return e.parent().is(".ui-effects-wrapper") && (e.parent().replaceWith(e), (e[0] === i || t.contains(e[0], i)) && t(i).trigger("focus")), e;
      } }), t.extend(t.effects, { version: "1.12.1", define: function define(e, i, s) {
        return s || (s = i, i = "effect"), t.effects.effect[e] = s, t.effects.effect[e].mode = i, s;
      }, scaledDimensions: function scaledDimensions(t, e, i) {
        if (0 === e) return { height: 0, width: 0, outerHeight: 0, outerWidth: 0 };var s = "horizontal" !== i ? (e || 100) / 100 : 1,
            n = "vertical" !== i ? (e || 100) / 100 : 1;return { height: t.height() * n, width: t.width() * s, outerHeight: t.outerHeight() * n, outerWidth: t.outerWidth() * s };
      }, clipToBox: function clipToBox(t) {
        return { width: t.clip.right - t.clip.left, height: t.clip.bottom - t.clip.top, left: t.clip.left, top: t.clip.top };
      }, unshift: function unshift(t, e, i) {
        var s = t.queue();e > 1 && s.splice.apply(s, [1, 0].concat(s.splice(e, i))), t.dequeue();
      }, saveStyle: function saveStyle(t) {
        t.data(u, t[0].style.cssText);
      }, restoreStyle: function restoreStyle(t) {
        t[0].style.cssText = t.data(u) || "", t.removeData(u);
      }, mode: function mode(t, e) {
        var i = t.is(":hidden");return "toggle" === e && (e = i ? "show" : "hide"), (i ? "hide" === e : "show" === e) && (e = "none"), e;
      }, getBaseline: function getBaseline(t, e) {
        var i, s;switch (t[0]) {case "top":
            i = 0;break;case "middle":
            i = .5;break;case "bottom":
            i = 1;break;default:
            i = t[0] / e.height;}switch (t[1]) {case "left":
            s = 0;break;case "center":
            s = .5;break;case "right":
            s = 1;break;default:
            s = t[1] / e.width;}return { x: s, y: i };
      }, createPlaceholder: function createPlaceholder(e) {
        var i,
            s = e.css("position"),
            n = e.position();return e.css({ marginTop: e.css("marginTop"), marginBottom: e.css("marginBottom"), marginLeft: e.css("marginLeft"), marginRight: e.css("marginRight") }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()), /^(static|relative)/.test(s) && (s = "absolute", i = t("<" + e[0].nodeName + ">").insertAfter(e).css({ display: /^(inline|ruby)/.test(e.css("display")) ? "inline-block" : "block", visibility: "hidden", marginTop: e.css("marginTop"), marginBottom: e.css("marginBottom"), marginLeft: e.css("marginLeft"), marginRight: e.css("marginRight"), "float": e.css("float") }).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).addClass("ui-effects-placeholder"), e.data(c + "placeholder", i)), e.css({ position: s, left: n.left, top: n.top }), i;
      }, removePlaceholder: function removePlaceholder(t) {
        var e = c + "placeholder",
            i = t.data(e);i && (i.remove(), t.removeData(e));
      }, cleanUp: function cleanUp(e) {
        t.effects.restoreStyle(e), t.effects.removePlaceholder(e);
      }, setTransition: function setTransition(e, i, s, n) {
        return n = n || {}, t.each(i, function (t, i) {
          var o = e.cssUnit(i);o[0] > 0 && (n[i] = o[0] * s + o[1]);
        }), n;
      } }), t.fn.extend({ effect: function effect() {
        function i(e) {
          function i() {
            r.removeData(d), t.effects.cleanUp(r), "hide" === s.mode && r.hide(), a();
          }function a() {
            t.isFunction(h) && h.call(r[0]), t.isFunction(e) && e();
          }var r = t(this);s.mode = c.shift(), t.uiBackCompat === !1 || o ? "none" === s.mode ? (r[l](), a()) : n.call(r[0], s, i) : (r.is(":hidden") ? "hide" === l : "show" === l) ? (r[l](), a()) : n.call(r[0], s, a);
        }var s = e.apply(this, arguments),
            n = t.effects.effect[s.effect],
            o = n.mode,
            a = s.queue,
            r = a || "fx",
            h = s.complete,
            l = s.mode,
            c = [],
            u = function u(e) {
          var i = t(this),
              s = t.effects.mode(i, l) || o;i.data(d, !0), c.push(s), o && ("show" === s || s === o && "hide" === s) && i.show(), o && "none" === s || t.effects.saveStyle(i), t.isFunction(e) && e();
        };return t.fx.off || !n ? l ? this[l](s.duration, h) : this.each(function () {
          h && h.call(this);
        }) : a === !1 ? this.each(u).each(i) : this.queue(r, u).queue(r, i);
      }, show: function (t) {
        return function (s) {
          if (i(s)) return t.apply(this, arguments);var n = e.apply(this, arguments);return n.mode = "show", this.effect.call(this, n);
        };
      }(t.fn.show), hide: function (t) {
        return function (s) {
          if (i(s)) return t.apply(this, arguments);var n = e.apply(this, arguments);return n.mode = "hide", this.effect.call(this, n);
        };
      }(t.fn.hide), toggle: function (t) {
        return function (s) {
          if (i(s) || "boolean" == typeof s) return t.apply(this, arguments);var n = e.apply(this, arguments);return n.mode = "toggle", this.effect.call(this, n);
        };
      }(t.fn.toggle), cssUnit: function cssUnit(e) {
        var i = this.css(e),
            s = [];return t.each(["em", "px", "%", "pt"], function (t, e) {
          i.indexOf(e) > 0 && (s = [parseFloat(i), e]);
        }), s;
      }, cssClip: function cssClip(t) {
        return t ? this.css("clip", "rect(" + t.top + "px " + t.right + "px " + t.bottom + "px " + t.left + "px)") : s(this.css("clip"), this);
      }, transfer: function transfer(e, i) {
        var s = t(this),
            n = t(e.to),
            o = "fixed" === n.css("position"),
            a = t("body"),
            r = o ? a.scrollTop() : 0,
            h = o ? a.scrollLeft() : 0,
            l = n.offset(),
            c = { top: l.top - r, left: l.left - h, height: n.innerHeight(), width: n.innerWidth() },
            u = s.offset(),
            d = t("<div class='ui-effects-transfer'></div>").appendTo("body").addClass(e.className).css({ top: u.top - r, left: u.left - h, height: s.innerHeight(), width: s.innerWidth(), position: o ? "fixed" : "absolute" }).animate(c, e.duration, e.easing, function () {
          d.remove(), t.isFunction(i) && i();
        });
      } }), t.fx.step.clip = function (e) {
      e.clipInit || (e.start = t(e.elem).cssClip(), "string" == typeof e.end && (e.end = s(e.end, e.elem)), e.clipInit = !0), t(e.elem).cssClip({ top: e.pos * (e.end.top - e.start.top) + e.start.top, right: e.pos * (e.end.right - e.start.right) + e.start.right, bottom: e.pos * (e.end.bottom - e.start.bottom) + e.start.bottom, left: e.pos * (e.end.left - e.start.left) + e.start.left });
    };
  }(), function () {
    var e = {};t.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function (t, i) {
      e[i] = function (e) {
        return Math.pow(e, t + 2);
      };
    }), t.extend(e, { Sine: function Sine(t) {
        return 1 - Math.cos(t * Math.PI / 2);
      }, Circ: function Circ(t) {
        return 1 - Math.sqrt(1 - t * t);
      }, Elastic: function Elastic(t) {
        return 0 === t || 1 === t ? t : -Math.pow(2, 8 * (t - 1)) * Math.sin((80 * (t - 1) - 7.5) * Math.PI / 15);
      }, Back: function Back(t) {
        return t * t * (3 * t - 2);
      }, Bounce: function Bounce(t) {
        for (var e, i = 4; ((e = Math.pow(2, --i)) - 1) / 11 > t;) {}return 1 / Math.pow(4, 3 - i) - 7.5625 * Math.pow((3 * e - 2) / 22 - t, 2);
      } }), t.each(e, function (e, i) {
      t.easing["easeIn" + e] = i, t.easing["easeOut" + e] = function (t) {
        return 1 - i(1 - t);
      }, t.easing["easeInOut" + e] = function (t) {
        return .5 > t ? i(2 * t) / 2 : 1 - i(-2 * t + 2) / 2;
      };
    });
  }();var f = t.effects;t.effects.define("blind", "hide", function (e, i) {
    var s = { up: ["bottom", "top"], vertical: ["bottom", "top"], down: ["top", "bottom"], left: ["right", "left"], horizontal: ["right", "left"], right: ["left", "right"] },
        n = t(this),
        o = e.direction || "up",
        a = n.cssClip(),
        r = { clip: t.extend({}, a) },
        h = t.effects.createPlaceholder(n);r.clip[s[o][0]] = r.clip[s[o][1]], "show" === e.mode && (n.cssClip(r.clip), h && h.css(t.effects.clipToBox(r)), r.clip = a), h && h.animate(t.effects.clipToBox(r), e.duration, e.easing), n.animate(r, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
  }), t.effects.define("bounce", function (e, i) {
    var s,
        n,
        o,
        a = t(this),
        r = e.mode,
        h = "hide" === r,
        l = "show" === r,
        c = e.direction || "up",
        u = e.distance,
        d = e.times || 5,
        p = 2 * d + (l || h ? 1 : 0),
        f = e.duration / p,
        g = e.easing,
        m = "up" === c || "down" === c ? "top" : "left",
        _ = "up" === c || "left" === c,
        v = 0,
        b = a.queue().length;for (t.effects.createPlaceholder(a), o = a.css(m), u || (u = a["top" === m ? "outerHeight" : "outerWidth"]() / 3), l && (n = { opacity: 1 }, n[m] = o, a.css("opacity", 0).css(m, _ ? 2 * -u : 2 * u).animate(n, f, g)), h && (u /= Math.pow(2, d - 1)), n = {}, n[m] = o; d > v; v++) {
      s = {}, s[m] = (_ ? "-=" : "+=") + u, a.animate(s, f, g).animate(n, f, g), u = h ? 2 * u : u / 2;
    }h && (s = { opacity: 0 }, s[m] = (_ ? "-=" : "+=") + u, a.animate(s, f, g)), a.queue(i), t.effects.unshift(a, b, p + 1);
  }), t.effects.define("clip", "hide", function (e, i) {
    var s,
        n = {},
        o = t(this),
        a = e.direction || "vertical",
        r = "both" === a,
        h = r || "horizontal" === a,
        l = r || "vertical" === a;s = o.cssClip(), n.clip = { top: l ? (s.bottom - s.top) / 2 : s.top, right: h ? (s.right - s.left) / 2 : s.right, bottom: l ? (s.bottom - s.top) / 2 : s.bottom, left: h ? (s.right - s.left) / 2 : s.left }, t.effects.createPlaceholder(o), "show" === e.mode && (o.cssClip(n.clip), n.clip = s), o.animate(n, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
  }), t.effects.define("drop", "hide", function (e, i) {
    var s,
        n = t(this),
        o = e.mode,
        a = "show" === o,
        r = e.direction || "left",
        h = "up" === r || "down" === r ? "top" : "left",
        l = "up" === r || "left" === r ? "-=" : "+=",
        c = "+=" === l ? "-=" : "+=",
        u = { opacity: 0 };t.effects.createPlaceholder(n), s = e.distance || n["top" === h ? "outerHeight" : "outerWidth"](!0) / 2, u[h] = l + s, a && (n.css(u), u[h] = c + s, u.opacity = 1), n.animate(u, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
  }), t.effects.define("explode", "hide", function (e, i) {
    function s() {
      b.push(this), b.length === u * d && n();
    }function n() {
      p.css({ visibility: "visible" }), t(b).remove(), i();
    }var o,
        a,
        r,
        h,
        l,
        c,
        u = e.pieces ? Math.round(Math.sqrt(e.pieces)) : 3,
        d = u,
        p = t(this),
        f = e.mode,
        g = "show" === f,
        m = p.show().css("visibility", "hidden").offset(),
        _ = Math.ceil(p.outerWidth() / d),
        v = Math.ceil(p.outerHeight() / u),
        b = [];for (o = 0; u > o; o++) {
      for (h = m.top + o * v, c = o - (u - 1) / 2, a = 0; d > a; a++) {
        r = m.left + a * _, l = a - (d - 1) / 2, p.clone().appendTo("body").wrap("<div></div>").css({ position: "absolute", visibility: "visible", left: -a * _, top: -o * v }).parent().addClass("ui-effects-explode").css({ position: "absolute", overflow: "hidden", width: _, height: v, left: r + (g ? l * _ : 0), top: h + (g ? c * v : 0), opacity: g ? 0 : 1 }).animate({ left: r + (g ? 0 : l * _), top: h + (g ? 0 : c * v), opacity: g ? 1 : 0 }, e.duration || 500, e.easing, s);
      }
    }
  }), t.effects.define("fade", "toggle", function (e, i) {
    var s = "show" === e.mode;t(this).css("opacity", s ? 0 : 1).animate({ opacity: s ? 1 : 0 }, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
  }), t.effects.define("fold", "hide", function (e, i) {
    var s = t(this),
        n = e.mode,
        o = "show" === n,
        a = "hide" === n,
        r = e.size || 15,
        h = /([0-9]+)%/.exec(r),
        l = !!e.horizFirst,
        c = l ? ["right", "bottom"] : ["bottom", "right"],
        u = e.duration / 2,
        d = t.effects.createPlaceholder(s),
        p = s.cssClip(),
        f = { clip: t.extend({}, p) },
        g = { clip: t.extend({}, p) },
        m = [p[c[0]], p[c[1]]],
        _ = s.queue().length;h && (r = parseInt(h[1], 10) / 100 * m[a ? 0 : 1]), f.clip[c[0]] = r, g.clip[c[0]] = r, g.clip[c[1]] = 0, o && (s.cssClip(g.clip), d && d.css(t.effects.clipToBox(g)), g.clip = p), s.queue(function (i) {
      d && d.animate(t.effects.clipToBox(f), u, e.easing).animate(t.effects.clipToBox(g), u, e.easing), i();
    }).animate(f, u, e.easing).animate(g, u, e.easing).queue(i), t.effects.unshift(s, _, 4);
  }), t.effects.define("highlight", "show", function (e, i) {
    var s = t(this),
        n = { backgroundColor: s.css("backgroundColor") };"hide" === e.mode && (n.opacity = 0), t.effects.saveStyle(s), s.css({ backgroundImage: "none", backgroundColor: e.color || "#ffff99" }).animate(n, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
  }), t.effects.define("size", function (e, i) {
    var s,
        n,
        o,
        a = t(this),
        r = ["fontSize"],
        h = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"],
        l = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"],
        c = e.mode,
        u = "effect" !== c,
        d = e.scale || "both",
        p = e.origin || ["middle", "center"],
        f = a.css("position"),
        g = a.position(),
        m = t.effects.scaledDimensions(a),
        _ = e.from || m,
        v = e.to || t.effects.scaledDimensions(a, 0);t.effects.createPlaceholder(a), "show" === c && (o = _, _ = v, v = o), n = { from: { y: _.height / m.height, x: _.width / m.width }, to: { y: v.height / m.height, x: v.width / m.width } }, ("box" === d || "both" === d) && (n.from.y !== n.to.y && (_ = t.effects.setTransition(a, h, n.from.y, _), v = t.effects.setTransition(a, h, n.to.y, v)), n.from.x !== n.to.x && (_ = t.effects.setTransition(a, l, n.from.x, _), v = t.effects.setTransition(a, l, n.to.x, v))), ("content" === d || "both" === d) && n.from.y !== n.to.y && (_ = t.effects.setTransition(a, r, n.from.y, _), v = t.effects.setTransition(a, r, n.to.y, v)), p && (s = t.effects.getBaseline(p, m), _.top = (m.outerHeight - _.outerHeight) * s.y + g.top, _.left = (m.outerWidth - _.outerWidth) * s.x + g.left, v.top = (m.outerHeight - v.outerHeight) * s.y + g.top, v.left = (m.outerWidth - v.outerWidth) * s.x + g.left), a.css(_), ("content" === d || "both" === d) && (h = h.concat(["marginTop", "marginBottom"]).concat(r), l = l.concat(["marginLeft", "marginRight"]), a.find("*[width]").each(function () {
      var i = t(this),
          s = t.effects.scaledDimensions(i),
          o = { height: s.height * n.from.y, width: s.width * n.from.x, outerHeight: s.outerHeight * n.from.y, outerWidth: s.outerWidth * n.from.x },
          a = { height: s.height * n.to.y, width: s.width * n.to.x, outerHeight: s.height * n.to.y, outerWidth: s.width * n.to.x };n.from.y !== n.to.y && (o = t.effects.setTransition(i, h, n.from.y, o), a = t.effects.setTransition(i, h, n.to.y, a)), n.from.x !== n.to.x && (o = t.effects.setTransition(i, l, n.from.x, o), a = t.effects.setTransition(i, l, n.to.x, a)), u && t.effects.saveStyle(i), i.css(o), i.animate(a, e.duration, e.easing, function () {
        u && t.effects.restoreStyle(i);
      });
    })), a.animate(v, { queue: !1, duration: e.duration, easing: e.easing, complete: function complete() {
        var e = a.offset();0 === v.opacity && a.css("opacity", _.opacity), u || (a.css("position", "static" === f ? "relative" : f).offset(e), t.effects.saveStyle(a)), i();
      } });
  }), t.effects.define("scale", function (e, i) {
    var s = t(this),
        n = e.mode,
        o = parseInt(e.percent, 10) || (0 === parseInt(e.percent, 10) ? 0 : "effect" !== n ? 0 : 100),
        a = t.extend(!0, { from: t.effects.scaledDimensions(s), to: t.effects.scaledDimensions(s, o, e.direction || "both"), origin: e.origin || ["middle", "center"] }, e);e.fade && (a.from.opacity = 1, a.to.opacity = 0), t.effects.effect.size.call(this, a, i);
  }), t.effects.define("puff", "hide", function (e, i) {
    var s = t.extend(!0, {}, e, { fade: !0, percent: parseInt(e.percent, 10) || 150 });t.effects.effect.scale.call(this, s, i);
  }), t.effects.define("pulsate", "show", function (e, i) {
    var s = t(this),
        n = e.mode,
        o = "show" === n,
        a = "hide" === n,
        r = o || a,
        h = 2 * (e.times || 5) + (r ? 1 : 0),
        l = e.duration / h,
        c = 0,
        u = 1,
        d = s.queue().length;for ((o || !s.is(":visible")) && (s.css("opacity", 0).show(), c = 1); h > u; u++) {
      s.animate({ opacity: c }, l, e.easing), c = 1 - c;
    }s.animate({ opacity: c }, l, e.easing), s.queue(i), t.effects.unshift(s, d, h + 1);
  }), t.effects.define("shake", function (e, i) {
    var s = 1,
        n = t(this),
        o = e.direction || "left",
        a = e.distance || 20,
        r = e.times || 3,
        h = 2 * r + 1,
        l = Math.round(e.duration / h),
        c = "up" === o || "down" === o ? "top" : "left",
        u = "up" === o || "left" === o,
        d = {},
        p = {},
        f = {},
        g = n.queue().length;for (t.effects.createPlaceholder(n), d[c] = (u ? "-=" : "+=") + a, p[c] = (u ? "+=" : "-=") + 2 * a, f[c] = (u ? "-=" : "+=") + 2 * a, n.animate(d, l, e.easing); r > s; s++) {
      n.animate(p, l, e.easing).animate(f, l, e.easing);
    }n.animate(p, l, e.easing).animate(d, l / 2, e.easing).queue(i), t.effects.unshift(n, g, h + 1);
  }), t.effects.define("slide", "show", function (e, i) {
    var s,
        n,
        o = t(this),
        a = { up: ["bottom", "top"], down: ["top", "bottom"], left: ["right", "left"], right: ["left", "right"] },
        r = e.mode,
        h = e.direction || "left",
        l = "up" === h || "down" === h ? "top" : "left",
        c = "up" === h || "left" === h,
        u = e.distance || o["top" === l ? "outerHeight" : "outerWidth"](!0),
        d = {};t.effects.createPlaceholder(o), s = o.cssClip(), n = o.position()[l], d[l] = (c ? -1 : 1) * u + n, d.clip = o.cssClip(), d.clip[a[h][1]] = d.clip[a[h][0]], "show" === r && (o.cssClip(d.clip), o.css(l, d[l]), d.clip = s, d[l] = n), o.animate(d, { queue: !1, duration: e.duration, easing: e.easing, complete: i });
  });var f;t.uiBackCompat !== !1 && (f = t.effects.define("transfer", function (e, i) {
    t(this).transfer(e, i);
  })), t.ui.focusable = function (i, s) {
    var n,
        o,
        a,
        r,
        h,
        l = i.nodeName.toLowerCase();return "area" === l ? (n = i.parentNode, o = n.name, i.href && o && "map" === n.nodeName.toLowerCase() ? (a = t("img[usemap='#" + o + "']"), a.length > 0 && a.is(":visible")) : !1) : (/^(input|select|textarea|button|object)$/.test(l) ? (r = !i.disabled, r && (h = t(i).closest("fieldset")[0], h && (r = !h.disabled))) : r = "a" === l ? i.href || s : s, r && t(i).is(":visible") && e(t(i)));
  }, t.extend(t.expr[":"], { focusable: function focusable(e) {
      return t.ui.focusable(e, null != t.attr(e, "tabindex"));
    } }), t.ui.focusable, t.fn.form = function () {
    return "string" == typeof this[0].form ? this.closest("form") : t(this[0].form);
  }, t.ui.formResetMixin = { _formResetHandler: function _formResetHandler() {
      var e = t(this);setTimeout(function () {
        var i = e.data("ui-form-reset-instances");t.each(i, function () {
          this.refresh();
        });
      });
    }, _bindFormResetHandler: function _bindFormResetHandler() {
      if (this.form = this.element.form(), this.form.length) {
        var t = this.form.data("ui-form-reset-instances") || [];t.length || this.form.on("reset.ui-form-reset", this._formResetHandler), t.push(this), this.form.data("ui-form-reset-instances", t);
      }
    }, _unbindFormResetHandler: function _unbindFormResetHandler() {
      if (this.form.length) {
        var e = this.form.data("ui-form-reset-instances");e.splice(t.inArray(this, e), 1), e.length ? this.form.data("ui-form-reset-instances", e) : this.form.removeData("ui-form-reset-instances").off("reset.ui-form-reset");
      }
    } }, "1.7" === t.fn.jquery.substring(0, 3) && (t.each(["Width", "Height"], function (e, i) {
    function s(e, i, s, o) {
      return t.each(n, function () {
        i -= parseFloat(t.css(e, "padding" + this)) || 0, s && (i -= parseFloat(t.css(e, "border" + this + "Width")) || 0), o && (i -= parseFloat(t.css(e, "margin" + this)) || 0);
      }), i;
    }var n = "Width" === i ? ["Left", "Right"] : ["Top", "Bottom"],
        o = i.toLowerCase(),
        a = { innerWidth: t.fn.innerWidth, innerHeight: t.fn.innerHeight, outerWidth: t.fn.outerWidth, outerHeight: t.fn.outerHeight };t.fn["inner" + i] = function (e) {
      return void 0 === e ? a["inner" + i].call(this) : this.each(function () {
        t(this).css(o, s(this, e) + "px");
      });
    }, t.fn["outer" + i] = function (e, n) {
      return "number" != typeof e ? a["outer" + i].call(this, e) : this.each(function () {
        t(this).css(o, s(this, e, !0, n) + "px");
      });
    };
  }), t.fn.addBack = function (t) {
    return this.add(null == t ? this.prevObject : this.prevObject.filter(t));
  }), t.ui.keyCode = { BACKSPACE: 8, COMMA: 188, DELETE: 46, DOWN: 40, END: 35, ENTER: 13, ESCAPE: 27, HOME: 36, LEFT: 37, PAGE_DOWN: 34, PAGE_UP: 33, PERIOD: 190, RIGHT: 39, SPACE: 32, TAB: 9, UP: 38 }, t.ui.escapeSelector = function () {
    var t = /([!"#$%&'()*+,.\/:;<=>?@[\]^`{|}~])/g;return function (e) {
      return e.replace(t, "\\$1");
    };
  }(), t.fn.labels = function () {
    var e, i, s, n, o;return this[0].labels && this[0].labels.length ? this.pushStack(this[0].labels) : (n = this.eq(0).parents("label"), s = this.attr("id"), s && (e = this.eq(0).parents().last(), o = e.add(e.length ? e.siblings() : this.siblings()), i = "label[for='" + t.ui.escapeSelector(s) + "']", n = n.add(o.find(i).addBack(i))), this.pushStack(n));
  }, t.fn.scrollParent = function (e) {
    var i = this.css("position"),
        s = "absolute" === i,
        n = e ? /(auto|scroll|hidden)/ : /(auto|scroll)/,
        o = this.parents().filter(function () {
      var e = t(this);return s && "static" === e.css("position") ? !1 : n.test(e.css("overflow") + e.css("overflow-y") + e.css("overflow-x"));
    }).eq(0);return "fixed" !== i && o.length ? o : t(this[0].ownerDocument || document);
  }, t.extend(t.expr[":"], { tabbable: function tabbable(e) {
      var i = t.attr(e, "tabindex"),
          s = null != i;return (!s || i >= 0) && t.ui.focusable(e, s);
    } }), t.fn.extend({ uniqueId: function () {
      var t = 0;return function () {
        return this.each(function () {
          this.id || (this.id = "ui-id-" + ++t);
        });
      };
    }(), removeUniqueId: function removeUniqueId() {
      return this.each(function () {
        /^ui-id-\d+$/.test(this.id) && t(this).removeAttr("id");
      });
    } }), t.widget("ui.accordion", { version: "1.12.1", options: { active: 0, animate: {}, classes: { "ui-accordion-header": "ui-corner-top", "ui-accordion-header-collapsed": "ui-corner-all", "ui-accordion-content": "ui-corner-bottom" }, collapsible: !1, event: "click", header: "> li > :first-child, > :not(li):even", heightStyle: "auto", icons: { activeHeader: "ui-icon-triangle-1-s", header: "ui-icon-triangle-1-e" }, activate: null, beforeActivate: null }, hideProps: { borderTopWidth: "hide", borderBottomWidth: "hide", paddingTop: "hide", paddingBottom: "hide", height: "hide" }, showProps: { borderTopWidth: "show", borderBottomWidth: "show", paddingTop: "show", paddingBottom: "show", height: "show" }, _create: function _create() {
      var e = this.options;this.prevShow = this.prevHide = t(), this._addClass("ui-accordion", "ui-widget ui-helper-reset"), this.element.attr("role", "tablist"), e.collapsible || e.active !== !1 && null != e.active || (e.active = 0), this._processPanels(), 0 > e.active && (e.active += this.headers.length), this._refresh();
    }, _getCreateEventData: function _getCreateEventData() {
      return { header: this.active, panel: this.active.length ? this.active.next() : t() };
    }, _createIcons: function _createIcons() {
      var e,
          i,
          s = this.options.icons;s && (e = t("<span>"), this._addClass(e, "ui-accordion-header-icon", "ui-icon " + s.header), e.prependTo(this.headers), i = this.active.children(".ui-accordion-header-icon"), this._removeClass(i, s.header)._addClass(i, null, s.activeHeader)._addClass(this.headers, "ui-accordion-icons"));
    }, _destroyIcons: function _destroyIcons() {
      this._removeClass(this.headers, "ui-accordion-icons"), this.headers.children(".ui-accordion-header-icon").remove();
    }, _destroy: function _destroy() {
      var t;this.element.removeAttr("role"), this.headers.removeAttr("role aria-expanded aria-selected aria-controls tabIndex").removeUniqueId(), this._destroyIcons(), t = this.headers.next().css("display", "").removeAttr("role aria-hidden aria-labelledby").removeUniqueId(), "content" !== this.options.heightStyle && t.css("height", "");
    }, _setOption: function _setOption(t, e) {
      return "active" === t ? (this._activate(e), void 0) : ("event" === t && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(e)), this._super(t, e), "collapsible" !== t || e || this.options.active !== !1 || this._activate(0), "icons" === t && (this._destroyIcons(), e && this._createIcons()), void 0);
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t), this._toggleClass(this.headers.add(this.headers.next()), null, "ui-state-disabled", !!t);
    }, _keydown: function _keydown(e) {
      if (!e.altKey && !e.ctrlKey) {
        var i = t.ui.keyCode,
            s = this.headers.length,
            n = this.headers.index(e.target),
            o = !1;switch (e.keyCode) {case i.RIGHT:case i.DOWN:
            o = this.headers[(n + 1) % s];break;case i.LEFT:case i.UP:
            o = this.headers[(n - 1 + s) % s];break;case i.SPACE:case i.ENTER:
            this._eventHandler(e);break;case i.HOME:
            o = this.headers[0];break;case i.END:
            o = this.headers[s - 1];}o && (t(e.target).attr("tabIndex", -1), t(o).attr("tabIndex", 0), t(o).trigger("focus"), e.preventDefault());
      }
    }, _panelKeyDown: function _panelKeyDown(e) {
      e.keyCode === t.ui.keyCode.UP && e.ctrlKey && t(e.currentTarget).prev().trigger("focus");
    }, refresh: function refresh() {
      var e = this.options;this._processPanels(), e.active === !1 && e.collapsible === !0 || !this.headers.length ? (e.active = !1, this.active = t()) : e.active === !1 ? this._activate(0) : this.active.length && !t.contains(this.element[0], this.active[0]) ? this.headers.length === this.headers.find(".ui-state-disabled").length ? (e.active = !1, this.active = t()) : this._activate(Math.max(0, e.active - 1)) : e.active = this.headers.index(this.active), this._destroyIcons(), this._refresh();
    }, _processPanels: function _processPanels() {
      var t = this.headers,
          e = this.panels;this.headers = this.element.find(this.options.header), this._addClass(this.headers, "ui-accordion-header ui-accordion-header-collapsed", "ui-state-default"), this.panels = this.headers.next().filter(":not(.ui-accordion-content-active)").hide(), this._addClass(this.panels, "ui-accordion-content", "ui-helper-reset ui-widget-content"), e && (this._off(t.not(this.headers)), this._off(e.not(this.panels)));
    }, _refresh: function _refresh() {
      var e,
          i = this.options,
          s = i.heightStyle,
          n = this.element.parent();this.active = this._findActive(i.active), this._addClass(this.active, "ui-accordion-header-active", "ui-state-active")._removeClass(this.active, "ui-accordion-header-collapsed"), this._addClass(this.active.next(), "ui-accordion-content-active"), this.active.next().show(), this.headers.attr("role", "tab").each(function () {
        var e = t(this),
            i = e.uniqueId().attr("id"),
            s = e.next(),
            n = s.uniqueId().attr("id");e.attr("aria-controls", n), s.attr("aria-labelledby", i);
      }).next().attr("role", "tabpanel"), this.headers.not(this.active).attr({ "aria-selected": "false", "aria-expanded": "false", tabIndex: -1 }).next().attr({ "aria-hidden": "true" }).hide(), this.active.length ? this.active.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }).next().attr({ "aria-hidden": "false" }) : this.headers.eq(0).attr("tabIndex", 0), this._createIcons(), this._setupEvents(i.event), "fill" === s ? (e = n.height(), this.element.siblings(":visible").each(function () {
        var i = t(this),
            s = i.css("position");"absolute" !== s && "fixed" !== s && (e -= i.outerHeight(!0));
      }), this.headers.each(function () {
        e -= t(this).outerHeight(!0);
      }), this.headers.next().each(function () {
        t(this).height(Math.max(0, e - t(this).innerHeight() + t(this).height()));
      }).css("overflow", "auto")) : "auto" === s && (e = 0, this.headers.next().each(function () {
        var i = t(this).is(":visible");i || t(this).show(), e = Math.max(e, t(this).css("height", "").height()), i || t(this).hide();
      }).height(e));
    }, _activate: function _activate(e) {
      var i = this._findActive(e)[0];i !== this.active[0] && (i = i || this.active[0], this._eventHandler({ target: i, currentTarget: i, preventDefault: t.noop }));
    }, _findActive: function _findActive(e) {
      return "number" == typeof e ? this.headers.eq(e) : t();
    }, _setupEvents: function _setupEvents(e) {
      var i = { keydown: "_keydown" };e && t.each(e.split(" "), function (t, e) {
        i[e] = "_eventHandler";
      }), this._off(this.headers.add(this.headers.next())), this._on(this.headers, i), this._on(this.headers.next(), { keydown: "_panelKeyDown" }), this._hoverable(this.headers), this._focusable(this.headers);
    }, _eventHandler: function _eventHandler(e) {
      var i,
          s,
          n = this.options,
          o = this.active,
          a = t(e.currentTarget),
          r = a[0] === o[0],
          h = r && n.collapsible,
          l = h ? t() : a.next(),
          c = o.next(),
          u = { oldHeader: o, oldPanel: c, newHeader: h ? t() : a, newPanel: l };e.preventDefault(), r && !n.collapsible || this._trigger("beforeActivate", e, u) === !1 || (n.active = h ? !1 : this.headers.index(a), this.active = r ? t() : a, this._toggle(u), this._removeClass(o, "ui-accordion-header-active", "ui-state-active"), n.icons && (i = o.children(".ui-accordion-header-icon"), this._removeClass(i, null, n.icons.activeHeader)._addClass(i, null, n.icons.header)), r || (this._removeClass(a, "ui-accordion-header-collapsed")._addClass(a, "ui-accordion-header-active", "ui-state-active"), n.icons && (s = a.children(".ui-accordion-header-icon"), this._removeClass(s, null, n.icons.header)._addClass(s, null, n.icons.activeHeader)), this._addClass(a.next(), "ui-accordion-content-active")));
    }, _toggle: function _toggle(e) {
      var i = e.newPanel,
          s = this.prevShow.length ? this.prevShow : e.oldPanel;this.prevShow.add(this.prevHide).stop(!0, !0), this.prevShow = i, this.prevHide = s, this.options.animate ? this._animate(i, s, e) : (s.hide(), i.show(), this._toggleComplete(e)), s.attr({ "aria-hidden": "true" }), s.prev().attr({ "aria-selected": "false", "aria-expanded": "false" }), i.length && s.length ? s.prev().attr({ tabIndex: -1, "aria-expanded": "false" }) : i.length && this.headers.filter(function () {
        return 0 === parseInt(t(this).attr("tabIndex"), 10);
      }).attr("tabIndex", -1), i.attr("aria-hidden", "false").prev().attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 });
    }, _animate: function _animate(t, e, i) {
      var s,
          n,
          o,
          a = this,
          r = 0,
          h = t.css("box-sizing"),
          l = t.length && (!e.length || t.index() < e.index()),
          c = this.options.animate || {},
          u = l && c.down || c,
          d = function d() {
        a._toggleComplete(i);
      };return "number" == typeof u && (o = u), "string" == typeof u && (n = u), n = n || u.easing || c.easing, o = o || u.duration || c.duration, e.length ? t.length ? (s = t.show().outerHeight(), e.animate(this.hideProps, { duration: o, easing: n, step: function step(t, e) {
          e.now = Math.round(t);
        } }), t.hide().animate(this.showProps, { duration: o, easing: n, complete: d, step: function step(t, i) {
          i.now = Math.round(t), "height" !== i.prop ? "content-box" === h && (r += i.now) : "content" !== a.options.heightStyle && (i.now = Math.round(s - e.outerHeight() - r), r = 0);
        } }), void 0) : e.animate(this.hideProps, o, n, d) : t.animate(this.showProps, o, n, d);
    }, _toggleComplete: function _toggleComplete(t) {
      var e = t.oldPanel,
          i = e.prev();this._removeClass(e, "ui-accordion-content-active"), this._removeClass(i, "ui-accordion-header-active")._addClass(i, "ui-accordion-header-collapsed"), e.length && (e.parent()[0].className = e.parent()[0].className), this._trigger("activate", null, t);
    } }), t.ui.safeActiveElement = function (t) {
    var e;try {
      e = t.activeElement;
    } catch (i) {
      e = t.body;
    }return e || (e = t.body), e.nodeName || (e = t.body), e;
  }, t.widget("ui.menu", { version: "1.12.1", defaultElement: "<ul>", delay: 300, options: { icons: { submenu: "ui-icon-caret-1-e" }, items: "> *", menus: "ul", position: { my: "left top", at: "right top" }, role: "menu", blur: null, focus: null, select: null }, _create: function _create() {
      this.activeMenu = this.element, this.mouseHandled = !1, this.element.uniqueId().attr({ role: this.options.role, tabIndex: 0 }), this._addClass("ui-menu", "ui-widget ui-widget-content"), this._on({ "mousedown .ui-menu-item": function mousedownUiMenuItem(t) {
          t.preventDefault();
        }, "click .ui-menu-item": function clickUiMenuItem(e) {
          var i = t(e.target),
              s = t(t.ui.safeActiveElement(this.document[0]));!this.mouseHandled && i.not(".ui-state-disabled").length && (this.select(e), e.isPropagationStopped() || (this.mouseHandled = !0), i.has(".ui-menu").length ? this.expand(e) : !this.element.is(":focus") && s.closest(".ui-menu").length && (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)));
        }, "mouseenter .ui-menu-item": function mouseenterUiMenuItem(e) {
          if (!this.previousFilter) {
            var i = t(e.target).closest(".ui-menu-item"),
                s = t(e.currentTarget);i[0] === s[0] && (this._removeClass(s.siblings().children(".ui-state-active"), null, "ui-state-active"), this.focus(e, s));
          }
        }, mouseleave: "collapseAll", "mouseleave .ui-menu": "collapseAll", focus: function focus(t, e) {
          var i = this.active || this.element.find(this.options.items).eq(0);e || this.focus(t, i);
        }, blur: function blur(e) {
          this._delay(function () {
            var i = !t.contains(this.element[0], t.ui.safeActiveElement(this.document[0]));i && this.collapseAll(e);
          });
        }, keydown: "_keydown" }), this.refresh(), this._on(this.document, { click: function click(t) {
          this._closeOnDocumentClick(t) && this.collapseAll(t), this.mouseHandled = !1;
        } });
    }, _destroy: function _destroy() {
      var e = this.element.find(".ui-menu-item").removeAttr("role aria-disabled"),
          i = e.children(".ui-menu-item-wrapper").removeUniqueId().removeAttr("tabIndex role aria-haspopup");this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeAttr("role aria-labelledby aria-expanded aria-hidden aria-disabled tabIndex").removeUniqueId().show(), i.children().each(function () {
        var e = t(this);e.data("ui-menu-submenu-caret") && e.remove();
      });
    }, _keydown: function _keydown(e) {
      var i,
          s,
          n,
          o,
          a = !0;switch (e.keyCode) {case t.ui.keyCode.PAGE_UP:
          this.previousPage(e);break;case t.ui.keyCode.PAGE_DOWN:
          this.nextPage(e);break;case t.ui.keyCode.HOME:
          this._move("first", "first", e);break;case t.ui.keyCode.END:
          this._move("last", "last", e);break;case t.ui.keyCode.UP:
          this.previous(e);break;case t.ui.keyCode.DOWN:
          this.next(e);break;case t.ui.keyCode.LEFT:
          this.collapse(e);break;case t.ui.keyCode.RIGHT:
          this.active && !this.active.is(".ui-state-disabled") && this.expand(e);break;case t.ui.keyCode.ENTER:case t.ui.keyCode.SPACE:
          this._activate(e);break;case t.ui.keyCode.ESCAPE:
          this.collapse(e);break;default:
          a = !1, s = this.previousFilter || "", o = !1, n = e.keyCode >= 96 && 105 >= e.keyCode ? "" + (e.keyCode - 96) : String.fromCharCode(e.keyCode), clearTimeout(this.filterTimer), n === s ? o = !0 : n = s + n, i = this._filterMenuItems(n), i = o && -1 !== i.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : i, i.length || (n = String.fromCharCode(e.keyCode), i = this._filterMenuItems(n)), i.length ? (this.focus(e, i), this.previousFilter = n, this.filterTimer = this._delay(function () {
            delete this.previousFilter;
          }, 1e3)) : delete this.previousFilter;}a && e.preventDefault();
    }, _activate: function _activate(t) {
      this.active && !this.active.is(".ui-state-disabled") && (this.active.children("[aria-haspopup='true']").length ? this.expand(t) : this.select(t));
    }, refresh: function refresh() {
      var e,
          i,
          s,
          n,
          o,
          a = this,
          r = this.options.icons.submenu,
          h = this.element.find(this.options.menus);this._toggleClass("ui-menu-icons", null, !!this.element.find(".ui-icon").length), s = h.filter(":not(.ui-menu)").hide().attr({ role: this.options.role, "aria-hidden": "true", "aria-expanded": "false" }).each(function () {
        var e = t(this),
            i = e.prev(),
            s = t("<span>").data("ui-menu-submenu-caret", !0);a._addClass(s, "ui-menu-icon", "ui-icon " + r), i.attr("aria-haspopup", "true").prepend(s), e.attr("aria-labelledby", i.attr("id"));
      }), this._addClass(s, "ui-menu", "ui-widget ui-widget-content ui-front"), e = h.add(this.element), i = e.find(this.options.items), i.not(".ui-menu-item").each(function () {
        var e = t(this);a._isDivider(e) && a._addClass(e, "ui-menu-divider", "ui-widget-content");
      }), n = i.not(".ui-menu-item, .ui-menu-divider"), o = n.children().not(".ui-menu").uniqueId().attr({ tabIndex: -1, role: this._itemRole() }), this._addClass(n, "ui-menu-item")._addClass(o, "ui-menu-item-wrapper"), i.filter(".ui-state-disabled").attr("aria-disabled", "true"), this.active && !t.contains(this.element[0], this.active[0]) && this.blur();
    }, _itemRole: function _itemRole() {
      return { menu: "menuitem", listbox: "option" }[this.options.role];
    }, _setOption: function _setOption(t, e) {
      if ("icons" === t) {
        var i = this.element.find(".ui-menu-icon");this._removeClass(i, null, this.options.icons.submenu)._addClass(i, null, e.submenu);
      }this._super(t, e);
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this._super(t), this.element.attr("aria-disabled", t + ""), this._toggleClass(null, "ui-state-disabled", !!t);
    }, focus: function focus(t, e) {
      var i, s, n;this.blur(t, t && "focus" === t.type), this._scrollIntoView(e), this.active = e.first(), s = this.active.children(".ui-menu-item-wrapper"), this._addClass(s, null, "ui-state-active"), this.options.role && this.element.attr("aria-activedescendant", s.attr("id")), n = this.active.parent().closest(".ui-menu-item").children(".ui-menu-item-wrapper"), this._addClass(n, null, "ui-state-active"), t && "keydown" === t.type ? this._close() : this.timer = this._delay(function () {
        this._close();
      }, this.delay), i = e.children(".ui-menu"), i.length && t && /^mouse/.test(t.type) && this._startOpening(i), this.activeMenu = e.parent(), this._trigger("focus", t, { item: e });
    }, _scrollIntoView: function _scrollIntoView(e) {
      var i, s, n, o, a, r;this._hasScroll() && (i = parseFloat(t.css(this.activeMenu[0], "borderTopWidth")) || 0, s = parseFloat(t.css(this.activeMenu[0], "paddingTop")) || 0, n = e.offset().top - this.activeMenu.offset().top - i - s, o = this.activeMenu.scrollTop(), a = this.activeMenu.height(), r = e.outerHeight(), 0 > n ? this.activeMenu.scrollTop(o + n) : n + r > a && this.activeMenu.scrollTop(o + n - a + r));
    }, blur: function blur(t, e) {
      e || clearTimeout(this.timer), this.active && (this._removeClass(this.active.children(".ui-menu-item-wrapper"), null, "ui-state-active"), this._trigger("blur", t, { item: this.active }), this.active = null);
    }, _startOpening: function _startOpening(t) {
      clearTimeout(this.timer), "true" === t.attr("aria-hidden") && (this.timer = this._delay(function () {
        this._close(), this._open(t);
      }, this.delay));
    }, _open: function _open(e) {
      var i = t.extend({ of: this.active }, this.options.position);clearTimeout(this.timer), this.element.find(".ui-menu").not(e.parents(".ui-menu")).hide().attr("aria-hidden", "true"), e.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(i);
    }, collapseAll: function collapseAll(e, i) {
      clearTimeout(this.timer), this.timer = this._delay(function () {
        var s = i ? this.element : t(e && e.target).closest(this.element.find(".ui-menu"));s.length || (s = this.element), this._close(s), this.blur(e), this._removeClass(s.find(".ui-state-active"), null, "ui-state-active"), this.activeMenu = s;
      }, this.delay);
    }, _close: function _close(t) {
      t || (t = this.active ? this.active.parent() : this.element), t.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false");
    }, _closeOnDocumentClick: function _closeOnDocumentClick(e) {
      return !t(e.target).closest(".ui-menu").length;
    }, _isDivider: function _isDivider(t) {
      return !/[^\-\u2014\u2013\s]/.test(t.text());
    }, collapse: function collapse(t) {
      var e = this.active && this.active.parent().closest(".ui-menu-item", this.element);e && e.length && (this._close(), this.focus(t, e));
    }, expand: function expand(t) {
      var e = this.active && this.active.children(".ui-menu ").find(this.options.items).first();e && e.length && (this._open(e.parent()), this._delay(function () {
        this.focus(t, e);
      }));
    }, next: function next(t) {
      this._move("next", "first", t);
    }, previous: function previous(t) {
      this._move("prev", "last", t);
    }, isFirstItem: function isFirstItem() {
      return this.active && !this.active.prevAll(".ui-menu-item").length;
    }, isLastItem: function isLastItem() {
      return this.active && !this.active.nextAll(".ui-menu-item").length;
    }, _move: function _move(t, e, i) {
      var s;this.active && (s = "first" === t || "last" === t ? this.active["first" === t ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[t + "All"](".ui-menu-item").eq(0)), s && s.length && this.active || (s = this.activeMenu.find(this.options.items)[e]()), this.focus(i, s);
    }, nextPage: function nextPage(e) {
      var i, s, n;return this.active ? (this.isLastItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.nextAll(".ui-menu-item").each(function () {
        return i = t(this), 0 > i.offset().top - s - n;
      }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]())), void 0) : (this.next(e), void 0);
    }, previousPage: function previousPage(e) {
      var i, s, n;return this.active ? (this.isFirstItem() || (this._hasScroll() ? (s = this.active.offset().top, n = this.element.height(), this.active.prevAll(".ui-menu-item").each(function () {
        return i = t(this), i.offset().top - s + n > 0;
      }), this.focus(e, i)) : this.focus(e, this.activeMenu.find(this.options.items).first())), void 0) : (this.next(e), void 0);
    }, _hasScroll: function _hasScroll() {
      return this.element.outerHeight() < this.element.prop("scrollHeight");
    }, select: function select(e) {
      this.active = this.active || t(e.target).closest(".ui-menu-item");var i = { item: this.active };this.active.has(".ui-menu").length || this.collapseAll(e, !0), this._trigger("select", e, i);
    }, _filterMenuItems: function _filterMenuItems(e) {
      var i = e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&"),
          s = RegExp("^" + i, "i");return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function () {
        return s.test(t.trim(t(this).children(".ui-menu-item-wrapper").text()));
      });
    } }), t.widget("ui.autocomplete", { version: "1.12.1", defaultElement: "<input>", options: { appendTo: null, autoFocus: !1, delay: 300, minLength: 1, position: { my: "left top", at: "left bottom", collision: "none" }, source: null, change: null, close: null, focus: null, open: null, response: null, search: null, select: null }, requestIndex: 0, pending: 0, _create: function _create() {
      var e,
          i,
          s,
          n = this.element[0].nodeName.toLowerCase(),
          o = "textarea" === n,
          a = "input" === n;
      this.isMultiLine = o || !a && this._isContentEditable(this.element), this.valueMethod = this.element[o || a ? "val" : "text"], this.isNewMenu = !0, this._addClass("ui-autocomplete-input"), this.element.attr("autocomplete", "off"), this._on(this.element, { keydown: function keydown(n) {
          if (this.element.prop("readOnly")) return e = !0, s = !0, i = !0, void 0;e = !1, s = !1, i = !1;var o = t.ui.keyCode;switch (n.keyCode) {case o.PAGE_UP:
              e = !0, this._move("previousPage", n);break;case o.PAGE_DOWN:
              e = !0, this._move("nextPage", n);break;case o.UP:
              e = !0, this._keyEvent("previous", n);break;case o.DOWN:
              e = !0, this._keyEvent("next", n);break;case o.ENTER:
              this.menu.active && (e = !0, n.preventDefault(), this.menu.select(n));break;case o.TAB:
              this.menu.active && this.menu.select(n);break;case o.ESCAPE:
              this.menu.element.is(":visible") && (this.isMultiLine || this._value(this.term), this.close(n), n.preventDefault());break;default:
              i = !0, this._searchTimeout(n);}
        }, keypress: function keypress(s) {
          if (e) return e = !1, (!this.isMultiLine || this.menu.element.is(":visible")) && s.preventDefault(), void 0;if (!i) {
            var n = t.ui.keyCode;switch (s.keyCode) {case n.PAGE_UP:
                this._move("previousPage", s);break;case n.PAGE_DOWN:
                this._move("nextPage", s);break;case n.UP:
                this._keyEvent("previous", s);break;case n.DOWN:
                this._keyEvent("next", s);}
          }
        }, input: function input(t) {
          return s ? (s = !1, t.preventDefault(), void 0) : (this._searchTimeout(t), void 0);
        }, focus: function focus() {
          this.selectedItem = null, this.previous = this._value();
        }, blur: function blur(t) {
          return this.cancelBlur ? (delete this.cancelBlur, void 0) : (clearTimeout(this.searching), this.close(t), this._change(t), void 0);
        } }), this._initSource(), this.menu = t("<ul>").appendTo(this._appendTo()).menu({ role: null }).hide().menu("instance"), this._addClass(this.menu.element, "ui-autocomplete", "ui-front"), this._on(this.menu.element, { mousedown: function mousedown(e) {
          e.preventDefault(), this.cancelBlur = !0, this._delay(function () {
            delete this.cancelBlur, this.element[0] !== t.ui.safeActiveElement(this.document[0]) && this.element.trigger("focus");
          });
        }, menufocus: function menufocus(e, i) {
          var s, n;return this.isNewMenu && (this.isNewMenu = !1, e.originalEvent && /^mouse/.test(e.originalEvent.type)) ? (this.menu.blur(), this.document.one("mousemove", function () {
            t(e.target).trigger(e.originalEvent);
          }), void 0) : (n = i.item.data("ui-autocomplete-item"), !1 !== this._trigger("focus", e, { item: n }) && e.originalEvent && /^key/.test(e.originalEvent.type) && this._value(n.value), s = i.item.attr("aria-label") || n.value, s && t.trim(s).length && (this.liveRegion.children().hide(), t("<div>").text(s).appendTo(this.liveRegion)), void 0);
        }, menuselect: function menuselect(e, i) {
          var s = i.item.data("ui-autocomplete-item"),
              n = this.previous;this.element[0] !== t.ui.safeActiveElement(this.document[0]) && (this.element.trigger("focus"), this.previous = n, this._delay(function () {
            this.previous = n, this.selectedItem = s;
          })), !1 !== this._trigger("select", e, { item: s }) && this._value(s.value), this.term = this._value(), this.close(e), this.selectedItem = s;
        } }), this.liveRegion = t("<div>", { role: "status", "aria-live": "assertive", "aria-relevant": "additions" }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), this._on(this.window, { beforeunload: function beforeunload() {
          this.element.removeAttr("autocomplete");
        } });
    }, _destroy: function _destroy() {
      clearTimeout(this.searching), this.element.removeAttr("autocomplete"), this.menu.element.remove(), this.liveRegion.remove();
    }, _setOption: function _setOption(t, e) {
      this._super(t, e), "source" === t && this._initSource(), "appendTo" === t && this.menu.element.appendTo(this._appendTo()), "disabled" === t && e && this.xhr && this.xhr.abort();
    }, _isEventTargetInWidget: function _isEventTargetInWidget(e) {
      var i = this.menu.element[0];return e.target === this.element[0] || e.target === i || t.contains(i, e.target);
    }, _closeOnClickOutside: function _closeOnClickOutside(t) {
      this._isEventTargetInWidget(t) || this.close();
    }, _appendTo: function _appendTo() {
      var e = this.options.appendTo;return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e;
    }, _initSource: function _initSource() {
      var e,
          i,
          s = this;t.isArray(this.options.source) ? (e = this.options.source, this.source = function (i, s) {
        s(t.ui.autocomplete.filter(e, i.term));
      }) : "string" == typeof this.options.source ? (i = this.options.source, this.source = function (e, n) {
        s.xhr && s.xhr.abort(), s.xhr = t.ajax({ url: i, data: e, dataType: "json", success: function success(t) {
            n(t);
          }, error: function error() {
            n([]);
          } });
      }) : this.source = this.options.source;
    }, _searchTimeout: function _searchTimeout(t) {
      clearTimeout(this.searching), this.searching = this._delay(function () {
        var e = this.term === this._value(),
            i = this.menu.element.is(":visible"),
            s = t.altKey || t.ctrlKey || t.metaKey || t.shiftKey;(!e || e && !i && !s) && (this.selectedItem = null, this.search(null, t));
      }, this.options.delay);
    }, search: function search(t, e) {
      return t = null != t ? t : this._value(), this.term = this._value(), t.length < this.options.minLength ? this.close(e) : this._trigger("search", e) !== !1 ? this._search(t) : void 0;
    }, _search: function _search(t) {
      this.pending++, this._addClass("ui-autocomplete-loading"), this.cancelSearch = !1, this.source({ term: t }, this._response());
    }, _response: function _response() {
      var e = ++this.requestIndex;return t.proxy(function (t) {
        e === this.requestIndex && this.__response(t), this.pending--, this.pending || this._removeClass("ui-autocomplete-loading");
      }, this);
    }, __response: function __response(t) {
      t && (t = this._normalize(t)), this._trigger("response", null, { content: t }), !this.options.disabled && t && t.length && !this.cancelSearch ? (this._suggest(t), this._trigger("open")) : this._close();
    }, close: function close(t) {
      this.cancelSearch = !0, this._close(t);
    }, _close: function _close(t) {
      this._off(this.document, "mousedown"), this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", t));
    }, _change: function _change(t) {
      this.previous !== this._value() && this._trigger("change", t, { item: this.selectedItem });
    }, _normalize: function _normalize(e) {
      return e.length && e[0].label && e[0].value ? e : t.map(e, function (e) {
        return "string" == typeof e ? { label: e, value: e } : t.extend({}, e, { label: e.label || e.value, value: e.value || e.label });
      });
    }, _suggest: function _suggest(e) {
      var i = this.menu.element.empty();this._renderMenu(i, e), this.isNewMenu = !0, this.menu.refresh(), i.show(), this._resizeMenu(), i.position(t.extend({ of: this.element }, this.options.position)), this.options.autoFocus && this.menu.next(), this._on(this.document, { mousedown: "_closeOnClickOutside" });
    }, _resizeMenu: function _resizeMenu() {
      var t = this.menu.element;t.outerWidth(Math.max(t.width("").outerWidth() + 1, this.element.outerWidth()));
    }, _renderMenu: function _renderMenu(e, i) {
      var s = this;t.each(i, function (t, i) {
        s._renderItemData(e, i);
      });
    }, _renderItemData: function _renderItemData(t, e) {
      return this._renderItem(t, e).data("ui-autocomplete-item", e);
    }, _renderItem: function _renderItem(e, i) {
      return t("<li>").append(t("<div>").text(i.label)).appendTo(e);
    }, _move: function _move(t, e) {
      return this.menu.element.is(":visible") ? this.menu.isFirstItem() && /^previous/.test(t) || this.menu.isLastItem() && /^next/.test(t) ? (this.isMultiLine || this._value(this.term), this.menu.blur(), void 0) : (this.menu[t](e), void 0) : (this.search(null, e), void 0);
    }, widget: function widget() {
      return this.menu.element;
    }, _value: function _value() {
      return this.valueMethod.apply(this.element, arguments);
    }, _keyEvent: function _keyEvent(t, e) {
      (!this.isMultiLine || this.menu.element.is(":visible")) && (this._move(t, e), e.preventDefault());
    }, _isContentEditable: function _isContentEditable(t) {
      if (!t.length) return !1;var e = t.prop("contentEditable");return "inherit" === e ? this._isContentEditable(t.parent()) : "true" === e;
    } }), t.extend(t.ui.autocomplete, { escapeRegex: function escapeRegex(t) {
      return t.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
    }, filter: function filter(e, i) {
      var s = RegExp(t.ui.autocomplete.escapeRegex(i), "i");return t.grep(e, function (t) {
        return s.test(t.label || t.value || t);
      });
    } }), t.widget("ui.autocomplete", t.ui.autocomplete, { options: { messages: { noResults: "No search results.", results: function results(t) {
          return t + (t > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
        } } }, __response: function __response(e) {
      var i;this._superApply(arguments), this.options.disabled || this.cancelSearch || (i = e && e.length ? this.options.messages.results(e.length) : this.options.messages.noResults, this.liveRegion.children().hide(), t("<div>").text(i).appendTo(this.liveRegion));
    } }), t.ui.autocomplete;var g = /ui-corner-([a-z]){2,6}/g;t.widget("ui.controlgroup", { version: "1.12.1", defaultElement: "<div>", options: { direction: "horizontal", disabled: null, onlyVisible: !0, items: { button: "input[type=button], input[type=submit], input[type=reset], button, a", controlgroupLabel: ".ui-controlgroup-label", checkboxradio: "input[type='checkbox'], input[type='radio']", selectmenu: "select", spinner: ".ui-spinner-input" } }, _create: function _create() {
      this._enhance();
    }, _enhance: function _enhance() {
      this.element.attr("role", "toolbar"), this.refresh();
    }, _destroy: function _destroy() {
      this._callChildMethod("destroy"), this.childWidgets.removeData("ui-controlgroup-data"), this.element.removeAttr("role"), this.options.items.controlgroupLabel && this.element.find(this.options.items.controlgroupLabel).find(".ui-controlgroup-label-contents").contents().unwrap();
    }, _initWidgets: function _initWidgets() {
      var e = this,
          i = [];t.each(this.options.items, function (s, n) {
        var o,
            a = {};return n ? "controlgroupLabel" === s ? (o = e.element.find(n), o.each(function () {
          var e = t(this);e.children(".ui-controlgroup-label-contents").length || e.contents().wrapAll("<span class='ui-controlgroup-label-contents'></span>");
        }), e._addClass(o, null, "ui-widget ui-widget-content ui-state-default"), i = i.concat(o.get()), void 0) : (t.fn[s] && (a = e["_" + s + "Options"] ? e["_" + s + "Options"]("middle") : { classes: {} }, e.element.find(n).each(function () {
          var n = t(this),
              o = n[s]("instance"),
              r = t.widget.extend({}, a);if ("button" !== s || !n.parent(".ui-spinner").length) {
            o || (o = n[s]()[s]("instance")), o && (r.classes = e._resolveClassesValues(r.classes, o)), n[s](r);var h = n[s]("widget");t.data(h[0], "ui-controlgroup-data", o ? o : n[s]("instance")), i.push(h[0]);
          }
        })), void 0) : void 0;
      }), this.childWidgets = t(t.unique(i)), this._addClass(this.childWidgets, "ui-controlgroup-item");
    }, _callChildMethod: function _callChildMethod(e) {
      this.childWidgets.each(function () {
        var i = t(this),
            s = i.data("ui-controlgroup-data");s && s[e] && s[e]();
      });
    }, _updateCornerClass: function _updateCornerClass(t, e) {
      var i = "ui-corner-top ui-corner-bottom ui-corner-left ui-corner-right ui-corner-all",
          s = this._buildSimpleOptions(e, "label").classes.label;this._removeClass(t, null, i), this._addClass(t, null, s);
    }, _buildSimpleOptions: function _buildSimpleOptions(t, e) {
      var i = "vertical" === this.options.direction,
          s = { classes: {} };return s.classes[e] = { middle: "", first: "ui-corner-" + (i ? "top" : "left"), last: "ui-corner-" + (i ? "bottom" : "right"), only: "ui-corner-all" }[t], s;
    }, _spinnerOptions: function _spinnerOptions(t) {
      var e = this._buildSimpleOptions(t, "ui-spinner");return e.classes["ui-spinner-up"] = "", e.classes["ui-spinner-down"] = "", e;
    }, _buttonOptions: function _buttonOptions(t) {
      return this._buildSimpleOptions(t, "ui-button");
    }, _checkboxradioOptions: function _checkboxradioOptions(t) {
      return this._buildSimpleOptions(t, "ui-checkboxradio-label");
    }, _selectmenuOptions: function _selectmenuOptions(t) {
      var e = "vertical" === this.options.direction;return { width: e ? "auto" : !1, classes: { middle: { "ui-selectmenu-button-open": "", "ui-selectmenu-button-closed": "" }, first: { "ui-selectmenu-button-open": "ui-corner-" + (e ? "top" : "tl"), "ui-selectmenu-button-closed": "ui-corner-" + (e ? "top" : "left") }, last: { "ui-selectmenu-button-open": e ? "" : "ui-corner-tr", "ui-selectmenu-button-closed": "ui-corner-" + (e ? "bottom" : "right") }, only: { "ui-selectmenu-button-open": "ui-corner-top", "ui-selectmenu-button-closed": "ui-corner-all" } }[t] };
    }, _resolveClassesValues: function _resolveClassesValues(e, i) {
      var s = {};return t.each(e, function (n) {
        var o = i.options.classes[n] || "";o = t.trim(o.replace(g, "")), s[n] = (o + " " + e[n]).replace(/\s+/g, " ");
      }), s;
    }, _setOption: function _setOption(t, e) {
      return "direction" === t && this._removeClass("ui-controlgroup-" + this.options.direction), this._super(t, e), "disabled" === t ? (this._callChildMethod(e ? "disable" : "enable"), void 0) : (this.refresh(), void 0);
    }, refresh: function refresh() {
      var e,
          i = this;this._addClass("ui-controlgroup ui-controlgroup-" + this.options.direction), "horizontal" === this.options.direction && this._addClass(null, "ui-helper-clearfix"), this._initWidgets(), e = this.childWidgets, this.options.onlyVisible && (e = e.filter(":visible")), e.length && (t.each(["first", "last"], function (t, s) {
        var n = e[s]().data("ui-controlgroup-data");if (n && i["_" + n.widgetName + "Options"]) {
          var o = i["_" + n.widgetName + "Options"](1 === e.length ? "only" : s);o.classes = i._resolveClassesValues(o.classes, n), n.element[n.widgetName](o);
        } else i._updateCornerClass(e[s](), s);
      }), this._callChildMethod("refresh"));
    } }), t.widget("ui.checkboxradio", [t.ui.formResetMixin, { version: "1.12.1", options: { disabled: null, label: null, icon: !0, classes: { "ui-checkboxradio-label": "ui-corner-all", "ui-checkboxradio-icon": "ui-corner-all" } }, _getCreateOptions: function _getCreateOptions() {
      var e,
          i,
          s = this,
          n = this._super() || {};return this._readType(), i = this.element.labels(), this.label = t(i[i.length - 1]), this.label.length || t.error("No label found for checkboxradio widget"), this.originalLabel = "", this.label.contents().not(this.element[0]).each(function () {
        s.originalLabel += 3 === this.nodeType ? t(this).text() : this.outerHTML;
      }), this.originalLabel && (n.label = this.originalLabel), e = this.element[0].disabled, null != e && (n.disabled = e), n;
    }, _create: function _create() {
      var t = this.element[0].checked;this._bindFormResetHandler(), null == this.options.disabled && (this.options.disabled = this.element[0].disabled), this._setOption("disabled", this.options.disabled), this._addClass("ui-checkboxradio", "ui-helper-hidden-accessible"), this._addClass(this.label, "ui-checkboxradio-label", "ui-button ui-widget"), "radio" === this.type && this._addClass(this.label, "ui-checkboxradio-radio-label"), this.options.label && this.options.label !== this.originalLabel ? this._updateLabel() : this.originalLabel && (this.options.label = this.originalLabel), this._enhance(), t && (this._addClass(this.label, "ui-checkboxradio-checked", "ui-state-active"), this.icon && this._addClass(this.icon, null, "ui-state-hover")), this._on({ change: "_toggleClasses", focus: function focus() {
          this._addClass(this.label, null, "ui-state-focus ui-visual-focus");
        }, blur: function blur() {
          this._removeClass(this.label, null, "ui-state-focus ui-visual-focus");
        } });
    }, _readType: function _readType() {
      var e = this.element[0].nodeName.toLowerCase();this.type = this.element[0].type, "input" === e && /radio|checkbox/.test(this.type) || t.error("Can't create checkboxradio on element.nodeName=" + e + " and element.type=" + this.type);
    }, _enhance: function _enhance() {
      this._updateIcon(this.element[0].checked);
    }, widget: function widget() {
      return this.label;
    }, _getRadioGroup: function _getRadioGroup() {
      var e,
          i = this.element[0].name,
          s = "input[name='" + t.ui.escapeSelector(i) + "']";return i ? (e = this.form.length ? t(this.form[0].elements).filter(s) : t(s).filter(function () {
        return 0 === t(this).form().length;
      }), e.not(this.element)) : t([]);
    }, _toggleClasses: function _toggleClasses() {
      var e = this.element[0].checked;this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", e), this.options.icon && "checkbox" === this.type && this._toggleClass(this.icon, null, "ui-icon-check ui-state-checked", e)._toggleClass(this.icon, null, "ui-icon-blank", !e), "radio" === this.type && this._getRadioGroup().each(function () {
        var e = t(this).checkboxradio("instance");e && e._removeClass(e.label, "ui-checkboxradio-checked", "ui-state-active");
      });
    }, _destroy: function _destroy() {
      this._unbindFormResetHandler(), this.icon && (this.icon.remove(), this.iconSpace.remove());
    }, _setOption: function _setOption(t, e) {
      return "label" !== t || e ? (this._super(t, e), "disabled" === t ? (this._toggleClass(this.label, null, "ui-state-disabled", e), this.element[0].disabled = e, void 0) : (this.refresh(), void 0)) : void 0;
    }, _updateIcon: function _updateIcon(e) {
      var i = "ui-icon ui-icon-background ";this.options.icon ? (this.icon || (this.icon = t("<span>"), this.iconSpace = t("<span> </span>"), this._addClass(this.iconSpace, "ui-checkboxradio-icon-space")), "checkbox" === this.type ? (i += e ? "ui-icon-check ui-state-checked" : "ui-icon-blank", this._removeClass(this.icon, null, e ? "ui-icon-blank" : "ui-icon-check")) : i += "ui-icon-blank", this._addClass(this.icon, "ui-checkboxradio-icon", i), e || this._removeClass(this.icon, null, "ui-icon-check ui-state-checked"), this.icon.prependTo(this.label).after(this.iconSpace)) : void 0 !== this.icon && (this.icon.remove(), this.iconSpace.remove(), delete this.icon);
    }, _updateLabel: function _updateLabel() {
      var t = this.label.contents().not(this.element[0]);this.icon && (t = t.not(this.icon[0])), this.iconSpace && (t = t.not(this.iconSpace[0])), t.remove(), this.label.append(this.options.label);
    }, refresh: function refresh() {
      var t = this.element[0].checked,
          e = this.element[0].disabled;this._updateIcon(t), this._toggleClass(this.label, "ui-checkboxradio-checked", "ui-state-active", t), null !== this.options.label && this._updateLabel(), e !== this.options.disabled && this._setOptions({ disabled: e });
    } }]), t.ui.checkboxradio, t.widget("ui.button", { version: "1.12.1", defaultElement: "<button>", options: { classes: { "ui-button": "ui-corner-all" }, disabled: null, icon: null, iconPosition: "beginning", label: null, showLabel: !0 }, _getCreateOptions: function _getCreateOptions() {
      var t,
          e = this._super() || {};return this.isInput = this.element.is("input"), t = this.element[0].disabled, null != t && (e.disabled = t), this.originalLabel = this.isInput ? this.element.val() : this.element.html(), this.originalLabel && (e.label = this.originalLabel), e;
    }, _create: function _create() {
      !this.option.showLabel & !this.options.icon && (this.options.showLabel = !0), null == this.options.disabled && (this.options.disabled = this.element[0].disabled || !1), this.hasTitle = !!this.element.attr("title"), this.options.label && this.options.label !== this.originalLabel && (this.isInput ? this.element.val(this.options.label) : this.element.html(this.options.label)), this._addClass("ui-button", "ui-widget"), this._setOption("disabled", this.options.disabled), this._enhance(), this.element.is("a") && this._on({ keyup: function keyup(e) {
          e.keyCode === t.ui.keyCode.SPACE && (e.preventDefault(), this.element[0].click ? this.element[0].click() : this.element.trigger("click"));
        } });
    }, _enhance: function _enhance() {
      this.element.is("button") || this.element.attr("role", "button"), this.options.icon && (this._updateIcon("icon", this.options.icon), this._updateTooltip());
    }, _updateTooltip: function _updateTooltip() {
      this.title = this.element.attr("title"), this.options.showLabel || this.title || this.element.attr("title", this.options.label);
    }, _updateIcon: function _updateIcon(e, i) {
      var s = "iconPosition" !== e,
          n = s ? this.options.iconPosition : i,
          o = "top" === n || "bottom" === n;this.icon ? s && this._removeClass(this.icon, null, this.options.icon) : (this.icon = t("<span>"), this._addClass(this.icon, "ui-button-icon", "ui-icon"), this.options.showLabel || this._addClass("ui-button-icon-only")), s && this._addClass(this.icon, null, i), this._attachIcon(n), o ? (this._addClass(this.icon, null, "ui-widget-icon-block"), this.iconSpace && this.iconSpace.remove()) : (this.iconSpace || (this.iconSpace = t("<span> </span>"), this._addClass(this.iconSpace, "ui-button-icon-space")), this._removeClass(this.icon, null, "ui-wiget-icon-block"), this._attachIconSpace(n));
    }, _destroy: function _destroy() {
      this.element.removeAttr("role"), this.icon && this.icon.remove(), this.iconSpace && this.iconSpace.remove(), this.hasTitle || this.element.removeAttr("title");
    }, _attachIconSpace: function _attachIconSpace(t) {
      this.icon[/^(?:end|bottom)/.test(t) ? "before" : "after"](this.iconSpace);
    }, _attachIcon: function _attachIcon(t) {
      this.element[/^(?:end|bottom)/.test(t) ? "append" : "prepend"](this.icon);
    }, _setOptions: function _setOptions(t) {
      var e = void 0 === t.showLabel ? this.options.showLabel : t.showLabel,
          i = void 0 === t.icon ? this.options.icon : t.icon;e || i || (t.showLabel = !0), this._super(t);
    }, _setOption: function _setOption(t, e) {
      "icon" === t && (e ? this._updateIcon(t, e) : this.icon && (this.icon.remove(), this.iconSpace && this.iconSpace.remove())), "iconPosition" === t && this._updateIcon(t, e), "showLabel" === t && (this._toggleClass("ui-button-icon-only", null, !e), this._updateTooltip()), "label" === t && (this.isInput ? this.element.val(e) : (this.element.html(e), this.icon && (this._attachIcon(this.options.iconPosition), this._attachIconSpace(this.options.iconPosition)))), this._super(t, e), "disabled" === t && (this._toggleClass(null, "ui-state-disabled", e), this.element[0].disabled = e, e && this.element.blur());
    }, refresh: function refresh() {
      var t = this.element.is("input, button") ? this.element[0].disabled : this.element.hasClass("ui-button-disabled");t !== this.options.disabled && this._setOptions({ disabled: t }), this._updateTooltip();
    } }), t.uiBackCompat !== !1 && (t.widget("ui.button", t.ui.button, { options: { text: !0, icons: { primary: null, secondary: null } }, _create: function _create() {
      this.options.showLabel && !this.options.text && (this.options.showLabel = this.options.text), !this.options.showLabel && this.options.text && (this.options.text = this.options.showLabel), this.options.icon || !this.options.icons.primary && !this.options.icons.secondary ? this.options.icon && (this.options.icons.primary = this.options.icon) : this.options.icons.primary ? this.options.icon = this.options.icons.primary : (this.options.icon = this.options.icons.secondary, this.options.iconPosition = "end"), this._super();
    }, _setOption: function _setOption(t, e) {
      return "text" === t ? (this._super("showLabel", e), void 0) : ("showLabel" === t && (this.options.text = e), "icon" === t && (this.options.icons.primary = e), "icons" === t && (e.primary ? (this._super("icon", e.primary), this._super("iconPosition", "beginning")) : e.secondary && (this._super("icon", e.secondary), this._super("iconPosition", "end"))), this._superApply(arguments), void 0);
    } }), t.fn.button = function (e) {
    return function () {
      return !this.length || this.length && "INPUT" !== this[0].tagName || this.length && "INPUT" === this[0].tagName && "checkbox" !== this.attr("type") && "radio" !== this.attr("type") ? e.apply(this, arguments) : (t.ui.checkboxradio || t.error("Checkboxradio widget missing"), 0 === arguments.length ? this.checkboxradio({ icon: !1 }) : this.checkboxradio.apply(this, arguments));
    };
  }(t.fn.button), t.fn.buttonset = function () {
    return t.ui.controlgroup || t.error("Controlgroup widget missing"), "option" === arguments[0] && "items" === arguments[1] && arguments[2] ? this.controlgroup.apply(this, [arguments[0], "items.button", arguments[2]]) : "option" === arguments[0] && "items" === arguments[1] ? this.controlgroup.apply(this, [arguments[0], "items.button"]) : ("object" == _typeof(arguments[0]) && arguments[0].items && (arguments[0].items = { button: arguments[0].items }), this.controlgroup.apply(this, arguments));
  }), t.ui.button, t.extend(t.ui, { datepicker: { version: "1.12.1" } });var m;t.extend(s.prototype, { markerClassName: "hasDatepicker", maxRows: 4, _widgetDatepicker: function _widgetDatepicker() {
      return this.dpDiv;
    }, setDefaults: function setDefaults(t) {
      return a(this._defaults, t || {}), this;
    }, _attachDatepicker: function _attachDatepicker(e, i) {
      var s, n, o;s = e.nodeName.toLowerCase(), n = "div" === s || "span" === s, e.id || (this.uuid += 1, e.id = "dp" + this.uuid), o = this._newInst(t(e), n), o.settings = t.extend({}, i || {}), "input" === s ? this._connectDatepicker(e, o) : n && this._inlineDatepicker(e, o);
    }, _newInst: function _newInst(e, i) {
      var s = e[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");return { id: s, input: e, selectedDay: 0, selectedMonth: 0, selectedYear: 0, drawMonth: 0, drawYear: 0, inline: i, dpDiv: i ? n(t("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv };
    }, _connectDatepicker: function _connectDatepicker(e, i) {
      var s = t(e);i.append = t([]), i.trigger = t([]), s.hasClass(this.markerClassName) || (this._attachments(s, i), s.addClass(this.markerClassName).on("keydown", this._doKeyDown).on("keypress", this._doKeyPress).on("keyup", this._doKeyUp), this._autoSize(i), t.data(e, "datepicker", i), i.settings.disabled && this._disableDatepicker(e));
    }, _attachments: function _attachments(e, i) {
      var s,
          n,
          o,
          a = this._get(i, "appendText"),
          r = this._get(i, "isRTL");i.append && i.append.remove(), a && (i.append = t("<span class='" + this._appendClass + "'>" + a + "</span>"), e[r ? "before" : "after"](i.append)), e.off("focus", this._showDatepicker), i.trigger && i.trigger.remove(), s = this._get(i, "showOn"), ("focus" === s || "both" === s) && e.on("focus", this._showDatepicker), ("button" === s || "both" === s) && (n = this._get(i, "buttonText"), o = this._get(i, "buttonImage"), i.trigger = t(this._get(i, "buttonImageOnly") ? t("<img/>").addClass(this._triggerClass).attr({ src: o, alt: n, title: n }) : t("<button type='button'></button>").addClass(this._triggerClass).html(o ? t("<img/>").attr({ src: o, alt: n, title: n }) : n)), e[r ? "before" : "after"](i.trigger), i.trigger.on("click", function () {
        return t.datepicker._datepickerShowing && t.datepicker._lastInput === e[0] ? t.datepicker._hideDatepicker() : t.datepicker._datepickerShowing && t.datepicker._lastInput !== e[0] ? (t.datepicker._hideDatepicker(), t.datepicker._showDatepicker(e[0])) : t.datepicker._showDatepicker(e[0]), !1;
      }));
    }, _autoSize: function _autoSize(t) {
      if (this._get(t, "autoSize") && !t.inline) {
        var e,
            i,
            s,
            n,
            o = new Date(2009, 11, 20),
            a = this._get(t, "dateFormat");a.match(/[DM]/) && (e = function e(t) {
          for (i = 0, s = 0, n = 0; t.length > n; n++) {
            t[n].length > i && (i = t[n].length, s = n);
          }return s;
        }, o.setMonth(e(this._get(t, a.match(/MM/) ? "monthNames" : "monthNamesShort"))), o.setDate(e(this._get(t, a.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - o.getDay())), t.input.attr("size", this._formatDate(t, o).length);
      }
    }, _inlineDatepicker: function _inlineDatepicker(e, i) {
      var s = t(e);s.hasClass(this.markerClassName) || (s.addClass(this.markerClassName).append(i.dpDiv), t.data(e, "datepicker", i), this._setDate(i, this._getDefaultDate(i), !0), this._updateDatepicker(i), this._updateAlternate(i), i.settings.disabled && this._disableDatepicker(e), i.dpDiv.css("display", "block"));
    }, _dialogDatepicker: function _dialogDatepicker(e, i, s, n, o) {
      var r,
          h,
          l,
          c,
          u,
          d = this._dialogInst;return d || (this.uuid += 1, r = "dp" + this.uuid, this._dialogInput = t("<input type='text' id='" + r + "' style='position: absolute; top: -100px; width: 0px;'/>"), this._dialogInput.on("keydown", this._doKeyDown), t("body").append(this._dialogInput), d = this._dialogInst = this._newInst(this._dialogInput, !1), d.settings = {}, t.data(this._dialogInput[0], "datepicker", d)), a(d.settings, n || {}), i = i && i.constructor === Date ? this._formatDate(d, i) : i, this._dialogInput.val(i), this._pos = o ? o.length ? o : [o.pageX, o.pageY] : null, this._pos || (h = document.documentElement.clientWidth, l = document.documentElement.clientHeight, c = document.documentElement.scrollLeft || document.body.scrollLeft, u = document.documentElement.scrollTop || document.body.scrollTop, this._pos = [h / 2 - 100 + c, l / 2 - 150 + u]), this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px"), d.settings.onSelect = s, this._inDialog = !0, this.dpDiv.addClass(this._dialogClass), this._showDatepicker(this._dialogInput[0]), t.blockUI && t.blockUI(this.dpDiv), t.data(this._dialogInput[0], "datepicker", d), this;
    }, _destroyDatepicker: function _destroyDatepicker(e) {
      var i,
          s = t(e),
          n = t.data(e, "datepicker");s.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), t.removeData(e, "datepicker"), "input" === i ? (n.append.remove(), n.trigger.remove(), s.removeClass(this.markerClassName).off("focus", this._showDatepicker).off("keydown", this._doKeyDown).off("keypress", this._doKeyPress).off("keyup", this._doKeyUp)) : ("div" === i || "span" === i) && s.removeClass(this.markerClassName).empty(), m === n && (m = null));
    }, _enableDatepicker: function _enableDatepicker(e) {
      var i,
          s,
          n = t(e),
          o = t.data(e, "datepicker");n.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), "input" === i ? (e.disabled = !1, o.trigger.filter("button").each(function () {
        this.disabled = !1;
      }).end().filter("img").css({ opacity: "1.0", cursor: "" })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().removeClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1)), this._disabledInputs = t.map(this._disabledInputs, function (t) {
        return t === e ? null : t;
      }));
    }, _disableDatepicker: function _disableDatepicker(e) {
      var i,
          s,
          n = t(e),
          o = t.data(e, "datepicker");n.hasClass(this.markerClassName) && (i = e.nodeName.toLowerCase(), "input" === i ? (e.disabled = !0, o.trigger.filter("button").each(function () {
        this.disabled = !0;
      }).end().filter("img").css({ opacity: "0.5", cursor: "default" })) : ("div" === i || "span" === i) && (s = n.children("." + this._inlineClass), s.children().addClass("ui-state-disabled"), s.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0)), this._disabledInputs = t.map(this._disabledInputs, function (t) {
        return t === e ? null : t;
      }), this._disabledInputs[this._disabledInputs.length] = e);
    }, _isDisabledDatepicker: function _isDisabledDatepicker(t) {
      if (!t) return !1;for (var e = 0; this._disabledInputs.length > e; e++) {
        if (this._disabledInputs[e] === t) return !0;
      }return !1;
    }, _getInst: function _getInst(e) {
      try {
        return t.data(e, "datepicker");
      } catch (i) {
        throw "Missing instance data for this datepicker";
      }
    }, _optionDatepicker: function _optionDatepicker(e, i, s) {
      var n,
          o,
          r,
          h,
          l = this._getInst(e);return 2 === arguments.length && "string" == typeof i ? "defaults" === i ? t.extend({}, t.datepicker._defaults) : l ? "all" === i ? t.extend({}, l.settings) : this._get(l, i) : null : (n = i || {}, "string" == typeof i && (n = {}, n[i] = s), l && (this._curInst === l && this._hideDatepicker(), o = this._getDateDatepicker(e, !0), r = this._getMinMaxDate(l, "min"), h = this._getMinMaxDate(l, "max"), a(l.settings, n), null !== r && void 0 !== n.dateFormat && void 0 === n.minDate && (l.settings.minDate = this._formatDate(l, r)), null !== h && void 0 !== n.dateFormat && void 0 === n.maxDate && (l.settings.maxDate = this._formatDate(l, h)), "disabled" in n && (n.disabled ? this._disableDatepicker(e) : this._enableDatepicker(e)), this._attachments(t(e), l), this._autoSize(l), this._setDate(l, o), this._updateAlternate(l), this._updateDatepicker(l)), void 0);
    }, _changeDatepicker: function _changeDatepicker(t, e, i) {
      this._optionDatepicker(t, e, i);
    }, _refreshDatepicker: function _refreshDatepicker(t) {
      var e = this._getInst(t);e && this._updateDatepicker(e);
    }, _setDateDatepicker: function _setDateDatepicker(t, e) {
      var i = this._getInst(t);i && (this._setDate(i, e), this._updateDatepicker(i), this._updateAlternate(i));
    }, _getDateDatepicker: function _getDateDatepicker(t, e) {
      var i = this._getInst(t);return i && !i.inline && this._setDateFromField(i, e), i ? this._getDate(i) : null;
    }, _doKeyDown: function _doKeyDown(e) {
      var i,
          s,
          n,
          o = t.datepicker._getInst(e.target),
          a = !0,
          r = o.dpDiv.is(".ui-datepicker-rtl");if (o._keyEvent = !0, t.datepicker._datepickerShowing) switch (e.keyCode) {case 9:
          t.datepicker._hideDatepicker(), a = !1;break;case 13:
          return n = t("td." + t.datepicker._dayOverClass + ":not(." + t.datepicker._currentClass + ")", o.dpDiv), n[0] && t.datepicker._selectDay(e.target, o.selectedMonth, o.selectedYear, n[0]), i = t.datepicker._get(o, "onSelect"), i ? (s = t.datepicker._formatDate(o), i.apply(o.input ? o.input[0] : null, [s, o])) : t.datepicker._hideDatepicker(), !1;case 27:
          t.datepicker._hideDatepicker();break;case 33:
          t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(o, "stepBigMonths") : -t.datepicker._get(o, "stepMonths"), "M");break;case 34:
          t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(o, "stepBigMonths") : +t.datepicker._get(o, "stepMonths"), "M");break;case 35:
          (e.ctrlKey || e.metaKey) && t.datepicker._clearDate(e.target), a = e.ctrlKey || e.metaKey;break;case 36:
          (e.ctrlKey || e.metaKey) && t.datepicker._gotoToday(e.target), a = e.ctrlKey || e.metaKey;break;case 37:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, r ? 1 : -1, "D"), a = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? -t.datepicker._get(o, "stepBigMonths") : -t.datepicker._get(o, "stepMonths"), "M");break;case 38:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, -7, "D"), a = e.ctrlKey || e.metaKey;break;case 39:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, r ? -1 : 1, "D"), a = e.ctrlKey || e.metaKey, e.originalEvent.altKey && t.datepicker._adjustDate(e.target, e.ctrlKey ? +t.datepicker._get(o, "stepBigMonths") : +t.datepicker._get(o, "stepMonths"), "M");break;case 40:
          (e.ctrlKey || e.metaKey) && t.datepicker._adjustDate(e.target, 7, "D"), a = e.ctrlKey || e.metaKey;break;default:
          a = !1;} else 36 === e.keyCode && e.ctrlKey ? t.datepicker._showDatepicker(this) : a = !1;a && (e.preventDefault(), e.stopPropagation());
    }, _doKeyPress: function _doKeyPress(e) {
      var i,
          s,
          n = t.datepicker._getInst(e.target);return t.datepicker._get(n, "constrainInput") ? (i = t.datepicker._possibleChars(t.datepicker._get(n, "dateFormat")), s = String.fromCharCode(null == e.charCode ? e.keyCode : e.charCode), e.ctrlKey || e.metaKey || " " > s || !i || i.indexOf(s) > -1) : void 0;
    }, _doKeyUp: function _doKeyUp(e) {
      var i,
          s = t.datepicker._getInst(e.target);if (s.input.val() !== s.lastVal) try {
        i = t.datepicker.parseDate(t.datepicker._get(s, "dateFormat"), s.input ? s.input.val() : null, t.datepicker._getFormatConfig(s)), i && (t.datepicker._setDateFromField(s), t.datepicker._updateAlternate(s), t.datepicker._updateDatepicker(s));
      } catch (n) {}return !0;
    }, _showDatepicker: function _showDatepicker(e) {
      if (e = e.target || e, "input" !== e.nodeName.toLowerCase() && (e = t("input", e.parentNode)[0]), !t.datepicker._isDisabledDatepicker(e) && t.datepicker._lastInput !== e) {
        var s, n, o, r, h, l, c;s = t.datepicker._getInst(e), t.datepicker._curInst && t.datepicker._curInst !== s && (t.datepicker._curInst.dpDiv.stop(!0, !0), s && t.datepicker._datepickerShowing && t.datepicker._hideDatepicker(t.datepicker._curInst.input[0])), n = t.datepicker._get(s, "beforeShow"), o = n ? n.apply(e, [e, s]) : {}, o !== !1 && (a(s.settings, o), s.lastVal = null, t.datepicker._lastInput = e, t.datepicker._setDateFromField(s), t.datepicker._inDialog && (e.value = ""), t.datepicker._pos || (t.datepicker._pos = t.datepicker._findPos(e), t.datepicker._pos[1] += e.offsetHeight), r = !1, t(e).parents().each(function () {
          return r |= "fixed" === t(this).css("position"), !r;
        }), h = { left: t.datepicker._pos[0], top: t.datepicker._pos[1] }, t.datepicker._pos = null, s.dpDiv.empty(), s.dpDiv.css({ position: "absolute", display: "block", top: "-1000px" }), t.datepicker._updateDatepicker(s), h = t.datepicker._checkOffset(s, h, r), s.dpDiv.css({ position: t.datepicker._inDialog && t.blockUI ? "static" : r ? "fixed" : "absolute", display: "none", left: h.left + "px", top: h.top + "px" }), s.inline || (l = t.datepicker._get(s, "showAnim"), c = t.datepicker._get(s, "duration"), s.dpDiv.css("z-index", i(t(e)) + 1), t.datepicker._datepickerShowing = !0, t.effects && t.effects.effect[l] ? s.dpDiv.show(l, t.datepicker._get(s, "showOptions"), c) : s.dpDiv[l || "show"](l ? c : null), t.datepicker._shouldFocusInput(s) && s.input.trigger("focus"), t.datepicker._curInst = s));
      }
    }, _updateDatepicker: function _updateDatepicker(e) {
      this.maxRows = 4, m = e, e.dpDiv.empty().append(this._generateHTML(e)), this._attachHandlers(e);var i,
          s = this._getNumberOfMonths(e),
          n = s[1],
          a = 17,
          r = e.dpDiv.find("." + this._dayOverClass + " a");r.length > 0 && o.apply(r.get(0)), e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""), n > 1 && e.dpDiv.addClass("ui-datepicker-multi-" + n).css("width", a * n + "em"), e.dpDiv[(1 !== s[0] || 1 !== s[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi"), e.dpDiv[(this._get(e, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl"), e === t.datepicker._curInst && t.datepicker._datepickerShowing && t.datepicker._shouldFocusInput(e) && e.input.trigger("focus"), e.yearshtml && (i = e.yearshtml, setTimeout(function () {
        i === e.yearshtml && e.yearshtml && e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml), i = e.yearshtml = null;
      }, 0));
    }, _shouldFocusInput: function _shouldFocusInput(t) {
      return t.input && t.input.is(":visible") && !t.input.is(":disabled") && !t.input.is(":focus");
    }, _checkOffset: function _checkOffset(e, i, s) {
      var n = e.dpDiv.outerWidth(),
          o = e.dpDiv.outerHeight(),
          a = e.input ? e.input.outerWidth() : 0,
          r = e.input ? e.input.outerHeight() : 0,
          h = document.documentElement.clientWidth + (s ? 0 : t(document).scrollLeft()),
          l = document.documentElement.clientHeight + (s ? 0 : t(document).scrollTop());return i.left -= this._get(e, "isRTL") ? n - a : 0, i.left -= s && i.left === e.input.offset().left ? t(document).scrollLeft() : 0, i.top -= s && i.top === e.input.offset().top + r ? t(document).scrollTop() : 0, i.left -= Math.min(i.left, i.left + n > h && h > n ? Math.abs(i.left + n - h) : 0), i.top -= Math.min(i.top, i.top + o > l && l > o ? Math.abs(o + r) : 0), i;
    }, _findPos: function _findPos(e) {
      for (var i, s = this._getInst(e), n = this._get(s, "isRTL"); e && ("hidden" === e.type || 1 !== e.nodeType || t.expr.filters.hidden(e));) {
        e = e[n ? "previousSibling" : "nextSibling"];
      }return i = t(e).offset(), [i.left, i.top];
    }, _hideDatepicker: function _hideDatepicker(e) {
      var i,
          s,
          n,
          o,
          a = this._curInst;!a || e && a !== t.data(e, "datepicker") || this._datepickerShowing && (i = this._get(a, "showAnim"), s = this._get(a, "duration"), n = function n() {
        t.datepicker._tidyDialog(a);
      }, t.effects && (t.effects.effect[i] || t.effects[i]) ? a.dpDiv.hide(i, t.datepicker._get(a, "showOptions"), s, n) : a.dpDiv["slideDown" === i ? "slideUp" : "fadeIn" === i ? "fadeOut" : "hide"](i ? s : null, n), i || n(), this._datepickerShowing = !1, o = this._get(a, "onClose"), o && o.apply(a.input ? a.input[0] : null, [a.input ? a.input.val() : "", a]), this._lastInput = null, this._inDialog && (this._dialogInput.css({ position: "absolute", left: "0", top: "-100px" }), t.blockUI && (t.unblockUI(), t("body").append(this.dpDiv))), this._inDialog = !1);
    }, _tidyDialog: function _tidyDialog(t) {
      t.dpDiv.removeClass(this._dialogClass).off(".ui-datepicker-calendar");
    }, _checkExternalClick: function _checkExternalClick(e) {
      if (t.datepicker._curInst) {
        var i = t(e.target),
            s = t.datepicker._getInst(i[0]);(i[0].id !== t.datepicker._mainDivId && 0 === i.parents("#" + t.datepicker._mainDivId).length && !i.hasClass(t.datepicker.markerClassName) && !i.closest("." + t.datepicker._triggerClass).length && t.datepicker._datepickerShowing && (!t.datepicker._inDialog || !t.blockUI) || i.hasClass(t.datepicker.markerClassName) && t.datepicker._curInst !== s) && t.datepicker._hideDatepicker();
      }
    }, _adjustDate: function _adjustDate(e, i, s) {
      var n = t(e),
          o = this._getInst(n[0]);this._isDisabledDatepicker(n[0]) || (this._adjustInstDate(o, i + ("M" === s ? this._get(o, "showCurrentAtPos") : 0), s), this._updateDatepicker(o));
    }, _gotoToday: function _gotoToday(e) {
      var i,
          s = t(e),
          n = this._getInst(s[0]);this._get(n, "gotoCurrent") && n.currentDay ? (n.selectedDay = n.currentDay, n.drawMonth = n.selectedMonth = n.currentMonth, n.drawYear = n.selectedYear = n.currentYear) : (i = new Date(), n.selectedDay = i.getDate(), n.drawMonth = n.selectedMonth = i.getMonth(), n.drawYear = n.selectedYear = i.getFullYear()), this._notifyChange(n), this._adjustDate(s);
    }, _selectMonthYear: function _selectMonthYear(e, i, s) {
      var n = t(e),
          o = this._getInst(n[0]);o["selected" + ("M" === s ? "Month" : "Year")] = o["draw" + ("M" === s ? "Month" : "Year")] = parseInt(i.options[i.selectedIndex].value, 10), this._notifyChange(o), this._adjustDate(n);
    }, _selectDay: function _selectDay(e, i, s, n) {
      var o,
          a = t(e);t(n).hasClass(this._unselectableClass) || this._isDisabledDatepicker(a[0]) || (o = this._getInst(a[0]), o.selectedDay = o.currentDay = t("a", n).html(), o.selectedMonth = o.currentMonth = i, o.selectedYear = o.currentYear = s, this._selectDate(e, this._formatDate(o, o.currentDay, o.currentMonth, o.currentYear)));
    }, _clearDate: function _clearDate(e) {
      var i = t(e);this._selectDate(i, "");
    }, _selectDate: function _selectDate(e, i) {
      var s,
          n = t(e),
          o = this._getInst(n[0]);i = null != i ? i : this._formatDate(o), o.input && o.input.val(i), this._updateAlternate(o), s = this._get(o, "onSelect"), s ? s.apply(o.input ? o.input[0] : null, [i, o]) : o.input && o.input.trigger("change"), o.inline ? this._updateDatepicker(o) : (this._hideDatepicker(), this._lastInput = o.input[0], "object" != _typeof(o.input[0]) && o.input.trigger("focus"), this._lastInput = null);
    }, _updateAlternate: function _updateAlternate(e) {
      var i,
          s,
          n,
          o = this._get(e, "altField");o && (i = this._get(e, "altFormat") || this._get(e, "dateFormat"), s = this._getDate(e), n = this.formatDate(i, s, this._getFormatConfig(e)), t(o).val(n));
    }, noWeekends: function noWeekends(t) {
      var e = t.getDay();return [e > 0 && 6 > e, ""];
    }, iso8601Week: function iso8601Week(t) {
      var e,
          i = new Date(t.getTime());return i.setDate(i.getDate() + 4 - (i.getDay() || 7)), e = i.getTime(), i.setMonth(0), i.setDate(1), Math.floor(Math.round((e - i) / 864e5) / 7) + 1;
    }, parseDate: function parseDate(e, i, s) {
      if (null == e || null == i) throw "Invalid arguments";if (i = "object" == (typeof i === "undefined" ? "undefined" : _typeof(i)) ? "" + i : i + "", "" === i) return null;var n,
          o,
          a,
          r,
          h = 0,
          l = (s ? s.shortYearCutoff : null) || this._defaults.shortYearCutoff,
          c = "string" != typeof l ? l : new Date().getFullYear() % 100 + parseInt(l, 10),
          u = (s ? s.dayNamesShort : null) || this._defaults.dayNamesShort,
          d = (s ? s.dayNames : null) || this._defaults.dayNames,
          p = (s ? s.monthNamesShort : null) || this._defaults.monthNamesShort,
          f = (s ? s.monthNames : null) || this._defaults.monthNames,
          g = -1,
          m = -1,
          _ = -1,
          v = -1,
          b = !1,
          y = function y(t) {
        var i = e.length > n + 1 && e.charAt(n + 1) === t;return i && n++, i;
      },
          w = function w(t) {
        var e = y(t),
            s = "@" === t ? 14 : "!" === t ? 20 : "y" === t && e ? 4 : "o" === t ? 3 : 2,
            n = "y" === t ? s : 1,
            o = RegExp("^\\d{" + n + "," + s + "}"),
            a = i.substring(h).match(o);if (!a) throw "Missing number at position " + h;return h += a[0].length, parseInt(a[0], 10);
      },
          k = function k(e, s, n) {
        var o = -1,
            a = t.map(y(e) ? n : s, function (t, e) {
          return [[e, t]];
        }).sort(function (t, e) {
          return -(t[1].length - e[1].length);
        });if (t.each(a, function (t, e) {
          var s = e[1];return i.substr(h, s.length).toLowerCase() === s.toLowerCase() ? (o = e[0], h += s.length, !1) : void 0;
        }), -1 !== o) return o + 1;throw "Unknown name at position " + h;
      },
          x = function x() {
        if (i.charAt(h) !== e.charAt(n)) throw "Unexpected literal at position " + h;h++;
      };for (n = 0; e.length > n; n++) {
        if (b) "'" !== e.charAt(n) || y("'") ? x() : b = !1;else switch (e.charAt(n)) {case "d":
            _ = w("d");break;case "D":
            k("D", u, d);break;case "o":
            v = w("o");break;case "m":
            m = w("m");break;case "M":
            m = k("M", p, f);break;case "y":
            g = w("y");break;case "@":
            r = new Date(w("@")), g = r.getFullYear(), m = r.getMonth() + 1, _ = r.getDate();break;case "!":
            r = new Date((w("!") - this._ticksTo1970) / 1e4), g = r.getFullYear(), m = r.getMonth() + 1, _ = r.getDate();break;case "'":
            y("'") ? x() : b = !0;break;default:
            x();}
      }if (i.length > h && (a = i.substr(h), !/^\s+/.test(a))) throw "Extra/unparsed characters found in date: " + a;if (-1 === g ? g = new Date().getFullYear() : 100 > g && (g += new Date().getFullYear() - new Date().getFullYear() % 100 + (c >= g ? 0 : -100)), v > -1) for (m = 1, _ = v;;) {
        if (o = this._getDaysInMonth(g, m - 1), o >= _) break;m++, _ -= o;
      }if (r = this._daylightSavingAdjust(new Date(g, m - 1, _)), r.getFullYear() !== g || r.getMonth() + 1 !== m || r.getDate() !== _) throw "Invalid date";return r;
    }, ATOM: "yy-mm-dd", COOKIE: "D, dd M yy", ISO_8601: "yy-mm-dd", RFC_822: "D, d M y", RFC_850: "DD, dd-M-y", RFC_1036: "D, d M y", RFC_1123: "D, d M yy", RFC_2822: "D, d M yy", RSS: "D, d M y", TICKS: "!", TIMESTAMP: "@", W3C: "yy-mm-dd", _ticksTo1970: 1e7 * 60 * 60 * 24 * (718685 + Math.floor(492.5) - Math.floor(19.7) + Math.floor(4.925)), formatDate: function formatDate(t, e, i) {
      if (!e) return "";var s,
          n = (i ? i.dayNamesShort : null) || this._defaults.dayNamesShort,
          o = (i ? i.dayNames : null) || this._defaults.dayNames,
          a = (i ? i.monthNamesShort : null) || this._defaults.monthNamesShort,
          r = (i ? i.monthNames : null) || this._defaults.monthNames,
          h = function h(e) {
        var i = t.length > s + 1 && t.charAt(s + 1) === e;return i && s++, i;
      },
          l = function l(t, e, i) {
        var s = "" + e;if (h(t)) for (; i > s.length;) {
          s = "0" + s;
        }return s;
      },
          c = function c(t, e, i, s) {
        return h(t) ? s[e] : i[e];
      },
          u = "",
          d = !1;if (e) for (s = 0; t.length > s; s++) {
        if (d) "'" !== t.charAt(s) || h("'") ? u += t.charAt(s) : d = !1;else switch (t.charAt(s)) {case "d":
            u += l("d", e.getDate(), 2);break;case "D":
            u += c("D", e.getDay(), n, o);break;case "o":
            u += l("o", Math.round((new Date(e.getFullYear(), e.getMonth(), e.getDate()).getTime() - new Date(e.getFullYear(), 0, 0).getTime()) / 864e5), 3);break;case "m":
            u += l("m", e.getMonth() + 1, 2);break;case "M":
            u += c("M", e.getMonth(), a, r);break;case "y":
            u += h("y") ? e.getFullYear() : (10 > e.getFullYear() % 100 ? "0" : "") + e.getFullYear() % 100;break;case "@":
            u += e.getTime();break;case "!":
            u += 1e4 * e.getTime() + this._ticksTo1970;break;case "'":
            h("'") ? u += "'" : d = !0;break;default:
            u += t.charAt(s);}
      }return u;
    }, _possibleChars: function _possibleChars(t) {
      var e,
          i = "",
          s = !1,
          n = function n(i) {
        var s = t.length > e + 1 && t.charAt(e + 1) === i;return s && e++, s;
      };for (e = 0; t.length > e; e++) {
        if (s) "'" !== t.charAt(e) || n("'") ? i += t.charAt(e) : s = !1;else switch (t.charAt(e)) {case "d":case "m":case "y":case "@":
            i += "0123456789";break;case "D":case "M":
            return null;case "'":
            n("'") ? i += "'" : s = !0;break;default:
            i += t.charAt(e);}
      }return i;
    }, _get: function _get(t, e) {
      return void 0 !== t.settings[e] ? t.settings[e] : this._defaults[e];
    }, _setDateFromField: function _setDateFromField(t, e) {
      if (t.input.val() !== t.lastVal) {
        var i = this._get(t, "dateFormat"),
            s = t.lastVal = t.input ? t.input.val() : null,
            n = this._getDefaultDate(t),
            o = n,
            a = this._getFormatConfig(t);try {
          o = this.parseDate(i, s, a) || n;
        } catch (r) {
          s = e ? "" : s;
        }t.selectedDay = o.getDate(), t.drawMonth = t.selectedMonth = o.getMonth(), t.drawYear = t.selectedYear = o.getFullYear(), t.currentDay = s ? o.getDate() : 0, t.currentMonth = s ? o.getMonth() : 0, t.currentYear = s ? o.getFullYear() : 0, this._adjustInstDate(t);
      }
    }, _getDefaultDate: function _getDefaultDate(t) {
      return this._restrictMinMax(t, this._determineDate(t, this._get(t, "defaultDate"), new Date()));
    }, _determineDate: function _determineDate(e, i, s) {
      var n = function n(t) {
        var e = new Date();return e.setDate(e.getDate() + t), e;
      },
          o = function o(i) {
        try {
          return t.datepicker.parseDate(t.datepicker._get(e, "dateFormat"), i, t.datepicker._getFormatConfig(e));
        } catch (s) {}for (var n = (i.toLowerCase().match(/^c/) ? t.datepicker._getDate(e) : null) || new Date(), o = n.getFullYear(), a = n.getMonth(), r = n.getDate(), h = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, l = h.exec(i); l;) {
          switch (l[2] || "d") {case "d":case "D":
              r += parseInt(l[1], 10);break;case "w":case "W":
              r += 7 * parseInt(l[1], 10);break;case "m":case "M":
              a += parseInt(l[1], 10), r = Math.min(r, t.datepicker._getDaysInMonth(o, a));break;case "y":case "Y":
              o += parseInt(l[1], 10), r = Math.min(r, t.datepicker._getDaysInMonth(o, a));}l = h.exec(i);
        }return new Date(o, a, r);
      },
          a = null == i || "" === i ? s : "string" == typeof i ? o(i) : "number" == typeof i ? isNaN(i) ? s : n(i) : new Date(i.getTime());return a = a && "Invalid Date" == "" + a ? s : a, a && (a.setHours(0), a.setMinutes(0), a.setSeconds(0), a.setMilliseconds(0)), this._daylightSavingAdjust(a);
    }, _daylightSavingAdjust: function _daylightSavingAdjust(t) {
      return t ? (t.setHours(t.getHours() > 12 ? t.getHours() + 2 : 0), t) : null;
    }, _setDate: function _setDate(t, e, i) {
      var s = !e,
          n = t.selectedMonth,
          o = t.selectedYear,
          a = this._restrictMinMax(t, this._determineDate(t, e, new Date()));t.selectedDay = t.currentDay = a.getDate(), t.drawMonth = t.selectedMonth = t.currentMonth = a.getMonth(), t.drawYear = t.selectedYear = t.currentYear = a.getFullYear(), n === t.selectedMonth && o === t.selectedYear || i || this._notifyChange(t), this._adjustInstDate(t), t.input && t.input.val(s ? "" : this._formatDate(t));
    }, _getDate: function _getDate(t) {
      var e = !t.currentYear || t.input && "" === t.input.val() ? null : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay));return e;
    }, _attachHandlers: function _attachHandlers(e) {
      var i = this._get(e, "stepMonths"),
          s = "#" + e.id.replace(/\\\\/g, "\\");e.dpDiv.find("[data-handler]").map(function () {
        var e = { prev: function prev() {
            t.datepicker._adjustDate(s, -i, "M");
          }, next: function next() {
            t.datepicker._adjustDate(s, +i, "M");
          }, hide: function hide() {
            t.datepicker._hideDatepicker();
          }, today: function today() {
            t.datepicker._gotoToday(s);
          }, selectDay: function selectDay() {
            return t.datepicker._selectDay(s, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this), !1;
          }, selectMonth: function selectMonth() {
            return t.datepicker._selectMonthYear(s, this, "M"), !1;
          }, selectYear: function selectYear() {
            return t.datepicker._selectMonthYear(s, this, "Y"), !1;
          } };t(this).on(this.getAttribute("data-event"), e[this.getAttribute("data-handler")]);
      });
    }, _generateHTML: function _generateHTML(t) {
      var e,
          i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c,
          u,
          d,
          p,
          f,
          g,
          m,
          _,
          v,
          b,
          y,
          w,
          k,
          x,
          C,
          D,
          I,
          T,
          P,
          M,
          S,
          H,
          z,
          O,
          A,
          N,
          W,
          E,
          F,
          L,
          R = new Date(),
          B = this._daylightSavingAdjust(new Date(R.getFullYear(), R.getMonth(), R.getDate())),
          Y = this._get(t, "isRTL"),
          j = this._get(t, "showButtonPanel"),
          q = this._get(t, "hideIfNoPrevNext"),
          K = this._get(t, "navigationAsDateFormat"),
          U = this._getNumberOfMonths(t),
          V = this._get(t, "showCurrentAtPos"),
          $ = this._get(t, "stepMonths"),
          X = 1 !== U[0] || 1 !== U[1],
          G = this._daylightSavingAdjust(t.currentDay ? new Date(t.currentYear, t.currentMonth, t.currentDay) : new Date(9999, 9, 9)),
          Q = this._getMinMaxDate(t, "min"),
          J = this._getMinMaxDate(t, "max"),
          Z = t.drawMonth - V,
          te = t.drawYear;if (0 > Z && (Z += 12, te--), J) for (e = this._daylightSavingAdjust(new Date(J.getFullYear(), J.getMonth() - U[0] * U[1] + 1, J.getDate())), e = Q && Q > e ? Q : e; this._daylightSavingAdjust(new Date(te, Z, 1)) > e;) {
        Z--, 0 > Z && (Z = 11, te--);
      }for (t.drawMonth = Z, t.drawYear = te, i = this._get(t, "prevText"), i = K ? this.formatDate(i, this._daylightSavingAdjust(new Date(te, Z - $, 1)), this._getFormatConfig(t)) : i, s = this._canAdjustMonth(t, -1, te, Z) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>" : q ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + i + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "e" : "w") + "'>" + i + "</span></a>", n = this._get(t, "nextText"), n = K ? this.formatDate(n, this._daylightSavingAdjust(new Date(te, Z + $, 1)), this._getFormatConfig(t)) : n, o = this._canAdjustMonth(t, 1, te, Z) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>" : q ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + n + "'><span class='ui-icon ui-icon-circle-triangle-" + (Y ? "w" : "e") + "'>" + n + "</span></a>", a = this._get(t, "currentText"), r = this._get(t, "gotoCurrent") && t.currentDay ? G : B, a = K ? this.formatDate(a, r, this._getFormatConfig(t)) : a, h = t.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(t, "closeText") + "</button>", l = j ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (Y ? h : "") + (this._isInRange(t, r) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + a + "</button>" : "") + (Y ? "" : h) + "</div>" : "", c = parseInt(this._get(t, "firstDay"), 10), c = isNaN(c) ? 0 : c, u = this._get(t, "showWeek"), d = this._get(t, "dayNames"), p = this._get(t, "dayNamesMin"), f = this._get(t, "monthNames"), g = this._get(t, "monthNamesShort"), m = this._get(t, "beforeShowDay"), _ = this._get(t, "showOtherMonths"), v = this._get(t, "selectOtherMonths"), b = this._getDefaultDate(t), y = "", k = 0; U[0] > k; k++) {
        for (x = "", this.maxRows = 4, C = 0; U[1] > C; C++) {
          if (D = this._daylightSavingAdjust(new Date(te, Z, t.selectedDay)), I = " ui-corner-all", T = "", X) {
            if (T += "<div class='ui-datepicker-group", U[1] > 1) switch (C) {case 0:
                T += " ui-datepicker-group-first", I = " ui-corner-" + (Y ? "right" : "left");break;case U[1] - 1:
                T += " ui-datepicker-group-last", I = " ui-corner-" + (Y ? "left" : "right");break;default:
                T += " ui-datepicker-group-middle", I = "";}T += "'>";
          }for (T += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + I + "'>" + (/all|left/.test(I) && 0 === k ? Y ? o : s : "") + (/all|right/.test(I) && 0 === k ? Y ? s : o : "") + this._generateMonthYearHeader(t, Z, te, Q, J, k > 0 || C > 0, f, g) + "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>", P = u ? "<th class='ui-datepicker-week-col'>" + this._get(t, "weekHeader") + "</th>" : "", w = 0; 7 > w; w++) {
            M = (w + c) % 7, P += "<th scope='col'" + ((w + c + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + d[M] + "'>" + p[M] + "</span></th>";
          }for (T += P + "</tr></thead><tbody>", S = this._getDaysInMonth(te, Z), te === t.selectedYear && Z === t.selectedMonth && (t.selectedDay = Math.min(t.selectedDay, S)), H = (this._getFirstDayOfMonth(te, Z) - c + 7) % 7, z = Math.ceil((H + S) / 7), O = X ? this.maxRows > z ? this.maxRows : z : z, this.maxRows = O, A = this._daylightSavingAdjust(new Date(te, Z, 1 - H)), N = 0; O > N; N++) {
            for (T += "<tr>", W = u ? "<td class='ui-datepicker-week-col'>" + this._get(t, "calculateWeek")(A) + "</td>" : "", w = 0; 7 > w; w++) {
              E = m ? m.apply(t.input ? t.input[0] : null, [A]) : [!0, ""], F = A.getMonth() !== Z, L = F && !v || !E[0] || Q && Q > A || J && A > J, W += "<td class='" + ((w + c + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (F ? " ui-datepicker-other-month" : "") + (A.getTime() === D.getTime() && Z === t.selectedMonth && t._keyEvent || b.getTime() === A.getTime() && b.getTime() === D.getTime() ? " " + this._dayOverClass : "") + (L ? " " + this._unselectableClass + " ui-state-disabled" : "") + (F && !_ ? "" : " " + E[1] + (A.getTime() === G.getTime() ? " " + this._currentClass : "") + (A.getTime() === B.getTime() ? " ui-datepicker-today" : "")) + "'" + (F && !_ || !E[2] ? "" : " title='" + E[2].replace(/'/g, "&#39;") + "'") + (L ? "" : " data-handler='selectDay' data-event='click' data-month='" + A.getMonth() + "' data-year='" + A.getFullYear() + "'") + ">" + (F && !_ ? "&#xa0;" : L ? "<span class='ui-state-default'>" + A.getDate() + "</span>" : "<a class='ui-state-default" + (A.getTime() === B.getTime() ? " ui-state-highlight" : "") + (A.getTime() === G.getTime() ? " ui-state-active" : "") + (F ? " ui-priority-secondary" : "") + "' href='#'>" + A.getDate() + "</a>") + "</td>", A.setDate(A.getDate() + 1), A = this._daylightSavingAdjust(A);
            }T += W + "</tr>";
          }Z++, Z > 11 && (Z = 0, te++), T += "</tbody></table>" + (X ? "</div>" + (U[0] > 0 && C === U[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : ""), x += T;
        }y += x;
      }return y += l, t._keyEvent = !1, y;
    }, _generateMonthYearHeader: function _generateMonthYearHeader(t, e, i, s, n, o, a, r) {
      var h,
          l,
          c,
          u,
          d,
          p,
          f,
          g,
          m = this._get(t, "changeMonth"),
          _ = this._get(t, "changeYear"),
          v = this._get(t, "showMonthAfterYear"),
          b = "<div class='ui-datepicker-title'>",
          y = "";if (o || !m) y += "<span class='ui-datepicker-month'>" + a[e] + "</span>";else {
        for (h = s && s.getFullYear() === i, l = n && n.getFullYear() === i, y += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>", c = 0; 12 > c; c++) {
          (!h || c >= s.getMonth()) && (!l || n.getMonth() >= c) && (y += "<option value='" + c + "'" + (c === e ? " selected='selected'" : "") + ">" + r[c] + "</option>");
        }y += "</select>";
      }if (v || (b += y + (!o && m && _ ? "" : "&#xa0;")), !t.yearshtml) if (t.yearshtml = "", o || !_) b += "<span class='ui-datepicker-year'>" + i + "</span>";else {
        for (u = this._get(t, "yearRange").split(":"), d = new Date().getFullYear(), p = function p(t) {
          var e = t.match(/c[+\-].*/) ? i + parseInt(t.substring(1), 10) : t.match(/[+\-].*/) ? d + parseInt(t, 10) : parseInt(t, 10);return isNaN(e) ? d : e;
        }, f = p(u[0]), g = Math.max(f, p(u[1] || "")), f = s ? Math.max(f, s.getFullYear()) : f, g = n ? Math.min(g, n.getFullYear()) : g, t.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; g >= f; f++) {
          t.yearshtml += "<option value='" + f + "'" + (f === i ? " selected='selected'" : "") + ">" + f + "</option>";
        }t.yearshtml += "</select>", b += t.yearshtml, t.yearshtml = null;
      }return b += this._get(t, "yearSuffix"), v && (b += (!o && m && _ ? "" : "&#xa0;") + y), b += "</div>";
    }, _adjustInstDate: function _adjustInstDate(t, e, i) {
      var s = t.selectedYear + ("Y" === i ? e : 0),
          n = t.selectedMonth + ("M" === i ? e : 0),
          o = Math.min(t.selectedDay, this._getDaysInMonth(s, n)) + ("D" === i ? e : 0),
          a = this._restrictMinMax(t, this._daylightSavingAdjust(new Date(s, n, o)));t.selectedDay = a.getDate(), t.drawMonth = t.selectedMonth = a.getMonth(), t.drawYear = t.selectedYear = a.getFullYear(), ("M" === i || "Y" === i) && this._notifyChange(t);
    }, _restrictMinMax: function _restrictMinMax(t, e) {
      var i = this._getMinMaxDate(t, "min"),
          s = this._getMinMaxDate(t, "max"),
          n = i && i > e ? i : e;return s && n > s ? s : n;
    }, _notifyChange: function _notifyChange(t) {
      var e = this._get(t, "onChangeMonthYear");e && e.apply(t.input ? t.input[0] : null, [t.selectedYear, t.selectedMonth + 1, t]);
    }, _getNumberOfMonths: function _getNumberOfMonths(t) {
      var e = this._get(t, "numberOfMonths");return null == e ? [1, 1] : "number" == typeof e ? [1, e] : e;
    }, _getMinMaxDate: function _getMinMaxDate(t, e) {
      return this._determineDate(t, this._get(t, e + "Date"), null);
    }, _getDaysInMonth: function _getDaysInMonth(t, e) {
      return 32 - this._daylightSavingAdjust(new Date(t, e, 32)).getDate();
    }, _getFirstDayOfMonth: function _getFirstDayOfMonth(t, e) {
      return new Date(t, e, 1).getDay();
    }, _canAdjustMonth: function _canAdjustMonth(t, e, i, s) {
      var n = this._getNumberOfMonths(t),
          o = this._daylightSavingAdjust(new Date(i, s + (0 > e ? e : n[0] * n[1]), 1));return 0 > e && o.setDate(this._getDaysInMonth(o.getFullYear(), o.getMonth())), this._isInRange(t, o);
    }, _isInRange: function _isInRange(t, e) {
      var i,
          s,
          n = this._getMinMaxDate(t, "min"),
          o = this._getMinMaxDate(t, "max"),
          a = null,
          r = null,
          h = this._get(t, "yearRange");return h && (i = h.split(":"), s = new Date().getFullYear(), a = parseInt(i[0], 10), r = parseInt(i[1], 10), i[0].match(/[+\-].*/) && (a += s), i[1].match(/[+\-].*/) && (r += s)), (!n || e.getTime() >= n.getTime()) && (!o || e.getTime() <= o.getTime()) && (!a || e.getFullYear() >= a) && (!r || r >= e.getFullYear());
    }, _getFormatConfig: function _getFormatConfig(t) {
      var e = this._get(t, "shortYearCutoff");return e = "string" != typeof e ? e : new Date().getFullYear() % 100 + parseInt(e, 10), { shortYearCutoff: e, dayNamesShort: this._get(t, "dayNamesShort"), dayNames: this._get(t, "dayNames"), monthNamesShort: this._get(t, "monthNamesShort"), monthNames: this._get(t, "monthNames") };
    }, _formatDate: function _formatDate(t, e, i, s) {
      e || (t.currentDay = t.selectedDay, t.currentMonth = t.selectedMonth, t.currentYear = t.selectedYear);var n = e ? "object" == (typeof e === "undefined" ? "undefined" : _typeof(e)) ? e : this._daylightSavingAdjust(new Date(s, i, e)) : this._daylightSavingAdjust(new Date(t.currentYear, t.currentMonth, t.currentDay));return this.formatDate(this._get(t, "dateFormat"), n, this._getFormatConfig(t));
    } }), t.fn.datepicker = function (e) {
    if (!this.length) return this;t.datepicker.initialized || (t(document).on("mousedown", t.datepicker._checkExternalClick), t.datepicker.initialized = !0), 0 === t("#" + t.datepicker._mainDivId).length && t("body").append(t.datepicker.dpDiv);var i = Array.prototype.slice.call(arguments, 1);return "string" != typeof e || "isDisabled" !== e && "getDate" !== e && "widget" !== e ? "option" === e && 2 === arguments.length && "string" == typeof arguments[1] ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i)) : this.each(function () {
      "string" == typeof e ? t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this].concat(i)) : t.datepicker._attachDatepicker(this, e);
    }) : t.datepicker["_" + e + "Datepicker"].apply(t.datepicker, [this[0]].concat(i));
  }, t.datepicker = new s(), t.datepicker.initialized = !1, t.datepicker.uuid = new Date().getTime(), t.datepicker.version = "1.12.1", t.datepicker, t.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());var _ = !1;t(document).on("mouseup", function () {
    _ = !1;
  }), t.widget("ui.mouse", { version: "1.12.1", options: { cancel: "input, textarea, button, select, option", distance: 1, delay: 0 }, _mouseInit: function _mouseInit() {
      var e = this;this.element.on("mousedown." + this.widgetName, function (t) {
        return e._mouseDown(t);
      }).on("click." + this.widgetName, function (i) {
        return !0 === t.data(i.target, e.widgetName + ".preventClickEvent") ? (t.removeData(i.target, e.widgetName + ".preventClickEvent"), i.stopImmediatePropagation(), !1) : void 0;
      }), this.started = !1;
    }, _mouseDestroy: function _mouseDestroy() {
      this.element.off("." + this.widgetName), this._mouseMoveDelegate && this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate);
    }, _mouseDown: function _mouseDown(e) {
      if (!_) {
        this._mouseMoved = !1, this._mouseStarted && this._mouseUp(e), this._mouseDownEvent = e;var i = this,
            s = 1 === e.which,
            n = "string" == typeof this.options.cancel && e.target.nodeName ? t(e.target).closest(this.options.cancel).length : !1;return s && !n && this._mouseCapture(e) ? (this.mouseDelayMet = !this.options.delay, this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function () {
          i.mouseDelayMet = !0;
        }, this.options.delay)), this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(e) !== !1, !this._mouseStarted) ? (e.preventDefault(), !0) : (!0 === t.data(e.target, this.widgetName + ".preventClickEvent") && t.removeData(e.target, this.widgetName + ".preventClickEvent"), this._mouseMoveDelegate = function (t) {
          return i._mouseMove(t);
        }, this._mouseUpDelegate = function (t) {
          return i._mouseUp(t);
        }, this.document.on("mousemove." + this.widgetName, this._mouseMoveDelegate).on("mouseup." + this.widgetName, this._mouseUpDelegate), e.preventDefault(), _ = !0, !0)) : !0;
      }
    }, _mouseMove: function _mouseMove(e) {
      if (this._mouseMoved) {
        if (t.ui.ie && (!document.documentMode || 9 > document.documentMode) && !e.button) return this._mouseUp(e);if (!e.which) if (e.originalEvent.altKey || e.originalEvent.ctrlKey || e.originalEvent.metaKey || e.originalEvent.shiftKey) this.ignoreMissingWhich = !0;else if (!this.ignoreMissingWhich) return this._mouseUp(e);
      }return (e.which || e.button) && (this._mouseMoved = !0), this._mouseStarted ? (this._mouseDrag(e), e.preventDefault()) : (this._mouseDistanceMet(e) && this._mouseDelayMet(e) && (this._mouseStarted = this._mouseStart(this._mouseDownEvent, e) !== !1, this._mouseStarted ? this._mouseDrag(e) : this._mouseUp(e)), !this._mouseStarted);
    }, _mouseUp: function _mouseUp(e) {
      this.document.off("mousemove." + this.widgetName, this._mouseMoveDelegate).off("mouseup." + this.widgetName, this._mouseUpDelegate), this._mouseStarted && (this._mouseStarted = !1, e.target === this._mouseDownEvent.target && t.data(e.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(e)), this._mouseDelayTimer && (clearTimeout(this._mouseDelayTimer), delete this._mouseDelayTimer), this.ignoreMissingWhich = !1, _ = !1, e.preventDefault();
    }, _mouseDistanceMet: function _mouseDistanceMet(t) {
      return Math.max(Math.abs(this._mouseDownEvent.pageX - t.pageX), Math.abs(this._mouseDownEvent.pageY - t.pageY)) >= this.options.distance;
    }, _mouseDelayMet: function _mouseDelayMet() {
      return this.mouseDelayMet;
    }, _mouseStart: function _mouseStart() {}, _mouseDrag: function _mouseDrag() {}, _mouseStop: function _mouseStop() {}, _mouseCapture: function _mouseCapture() {
      return !0;
    } }), t.ui.plugin = { add: function add(e, i, s) {
      var n,
          o = t.ui[e].prototype;for (n in s) {
        o.plugins[n] = o.plugins[n] || [], o.plugins[n].push([i, s[n]]);
      }
    }, call: function call(t, e, i, s) {
      var n,
          o = t.plugins[e];if (o && (s || t.element[0].parentNode && 11 !== t.element[0].parentNode.nodeType)) for (n = 0; o.length > n; n++) {
        t.options[o[n][0]] && o[n][1].apply(t.element, i);
      }
    } }, t.ui.safeBlur = function (e) {
    e && "body" !== e.nodeName.toLowerCase() && t(e).trigger("blur");
  }, t.widget("ui.draggable", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "drag", options: { addClasses: !0, appendTo: "parent", axis: !1, connectToSortable: !1, containment: !1, cursor: "auto", cursorAt: !1, grid: !1, handle: !1, helper: "original", iframeFix: !1, opacity: !1, refreshPositions: !1, revert: !1, revertDuration: 500, scope: "default", scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, snap: !1, snapMode: "both", snapTolerance: 20, stack: !1, zIndex: !1, drag: null, start: null, stop: null }, _create: function _create() {
      "original" === this.options.helper && this._setPositionRelative(), this.options.addClasses && this._addClass("ui-draggable"), this._setHandleClassName(), this._mouseInit();
    }, _setOption: function _setOption(t, e) {
      this._super(t, e), "handle" === t && (this._removeHandleClassName(), this._setHandleClassName());
    }, _destroy: function _destroy() {
      return (this.helper || this.element).is(".ui-draggable-dragging") ? (this.destroyOnClear = !0, void 0) : (this._removeHandleClassName(), this._mouseDestroy(), void 0);
    }, _mouseCapture: function _mouseCapture(e) {
      var i = this.options;return this.helper || i.disabled || t(e.target).closest(".ui-resizable-handle").length > 0 ? !1 : (this.handle = this._getHandle(e), this.handle ? (this._blurActiveElement(e), this._blockFrames(i.iframeFix === !0 ? "iframe" : i.iframeFix), !0) : !1);
    }, _blockFrames: function _blockFrames(e) {
      this.iframeBlocks = this.document.find(e).map(function () {
        var e = t(this);return t("<div>").css("position", "absolute").appendTo(e.parent()).outerWidth(e.outerWidth()).outerHeight(e.outerHeight()).offset(e.offset())[0];
      });
    }, _unblockFrames: function _unblockFrames() {
      this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
    }, _blurActiveElement: function _blurActiveElement(e) {
      var i = t.ui.safeActiveElement(this.document[0]),
          s = t(e.target);s.closest(i).length || t.ui.safeBlur(i);
    }, _mouseStart: function _mouseStart(e) {
      var i = this.options;return this.helper = this._createHelper(e), this._addClass(this.helper, "ui-draggable-dragging"), this._cacheHelperProportions(), t.ui.ddmanager && (t.ui.ddmanager.current = this), this._cacheMargins(), this.cssPosition = this.helper.css("position"), this.scrollParent = this.helper.scrollParent(!0), this.offsetParent = this.helper.offsetParent(), this.hasFixedAncestor = this.helper.parents().filter(function () {
        return "fixed" === t(this).css("position");
      }).length > 0, this.positionAbs = this.element.offset(), this._refreshOffsets(e), this.originalPosition = this.position = this._generatePosition(e, !1), this.originalPageX = e.pageX, this.originalPageY = e.pageY, i.cursorAt && this._adjustOffsetFromHelper(i.cursorAt), this._setContainment(), this._trigger("start", e) === !1 ? (this._clear(), !1) : (this._cacheHelperProportions(), t.ui.ddmanager && !i.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this._mouseDrag(e, !0), t.ui.ddmanager && t.ui.ddmanager.dragStart(this, e), !0);
    }, _refreshOffsets: function _refreshOffsets(t) {
      this.offset = { top: this.positionAbs.top - this.margins.top, left: this.positionAbs.left - this.margins.left, scroll: !1, parent: this._getParentOffset(), relative: this._getRelativeOffset() }, this.offset.click = { left: t.pageX - this.offset.left, top: t.pageY - this.offset.top };
    }, _mouseDrag: function _mouseDrag(e, i) {
      if (this.hasFixedAncestor && (this.offset.parent = this._getParentOffset()), this.position = this._generatePosition(e, !0), this.positionAbs = this._convertPositionTo("absolute"), !i) {
        var s = this._uiHash();if (this._trigger("drag", e, s) === !1) return this._mouseUp(new t.Event("mouseup", e)), !1;this.position = s.position;
      }return this.helper[0].style.left = this.position.left + "px", this.helper[0].style.top = this.position.top + "px", t.ui.ddmanager && t.ui.ddmanager.drag(this, e), !1;
    }, _mouseStop: function _mouseStop(e) {
      var i = this,
          s = !1;return t.ui.ddmanager && !this.options.dropBehaviour && (s = t.ui.ddmanager.drop(this, e)), this.dropped && (s = this.dropped, this.dropped = !1), "invalid" === this.options.revert && !s || "valid" === this.options.revert && s || this.options.revert === !0 || t.isFunction(this.options.revert) && this.options.revert.call(this.element, s) ? t(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function () {
        i._trigger("stop", e) !== !1 && i._clear();
      }) : this._trigger("stop", e) !== !1 && this._clear(), !1;
    }, _mouseUp: function _mouseUp(e) {
      return this._unblockFrames(), t.ui.ddmanager && t.ui.ddmanager.dragStop(this, e), this.handleElement.is(e.target) && this.element.trigger("focus"), t.ui.mouse.prototype._mouseUp.call(this, e);
    }, cancel: function cancel() {
      return this.helper.is(".ui-draggable-dragging") ? this._mouseUp(new t.Event("mouseup", { target: this.element[0] })) : this._clear(), this;
    }, _getHandle: function _getHandle(e) {
      return this.options.handle ? !!t(e.target).closest(this.element.find(this.options.handle)).length : !0;
    }, _setHandleClassName: function _setHandleClassName() {
      this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element, this._addClass(this.handleElement, "ui-draggable-handle");
    }, _removeHandleClassName: function _removeHandleClassName() {
      this._removeClass(this.handleElement, "ui-draggable-handle");
    }, _createHelper: function _createHelper(e) {
      var i = this.options,
          s = t.isFunction(i.helper),
          n = s ? t(i.helper.apply(this.element[0], [e])) : "clone" === i.helper ? this.element.clone().removeAttr("id") : this.element;return n.parents("body").length || n.appendTo("parent" === i.appendTo ? this.element[0].parentNode : i.appendTo), s && n[0] === this.element[0] && this._setPositionRelative(), n[0] === this.element[0] || /(fixed|absolute)/.test(n.css("position")) || n.css("position", "absolute"), n;
    }, _setPositionRelative: function _setPositionRelative() {
      /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative");
    }, _adjustOffsetFromHelper: function _adjustOffsetFromHelper(e) {
      "string" == typeof e && (e = e.split(" ")), t.isArray(e) && (e = { left: +e[0], top: +e[1] || 0 }), "left" in e && (this.offset.click.left = e.left + this.margins.left), "right" in e && (this.offset.click.left = this.helperProportions.width - e.right + this.margins.left), "top" in e && (this.offset.click.top = e.top + this.margins.top), "bottom" in e && (this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top);
    }, _isRootNode: function _isRootNode(t) {
      return (/(html|body)/i.test(t.tagName) || t === this.document[0]
      );
    }, _getParentOffset: function _getParentOffset() {
      var e = this.offsetParent.offset(),
          i = this.document[0];return "absolute" === this.cssPosition && this.scrollParent[0] !== i && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), this._isRootNode(this.offsetParent[0]) && (e = { top: 0, left: 0 }), { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) };
    }, _getRelativeOffset: function _getRelativeOffset() {
      if ("relative" !== this.cssPosition) return { top: 0, left: 0 };var t = this.element.position(),
          e = this._isRootNode(this.scrollParent[0]);return { top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + (e ? 0 : this.scrollParent.scrollTop()), left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + (e ? 0 : this.scrollParent.scrollLeft()) };
    }, _cacheMargins: function _cacheMargins() {
      this.margins = { left: parseInt(this.element.css("marginLeft"), 10) || 0, top: parseInt(this.element.css("marginTop"), 10) || 0, right: parseInt(this.element.css("marginRight"), 10) || 0, bottom: parseInt(this.element.css("marginBottom"), 10) || 0 };
    }, _cacheHelperProportions: function _cacheHelperProportions() {
      this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() };
    }, _setContainment: function _setContainment() {
      var e,
          i,
          s,
          n = this.options,
          o = this.document[0];return this.relativeContainer = null, n.containment ? "window" === n.containment ? (this.containment = [t(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, t(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, t(window).scrollLeft() + t(window).width() - this.helperProportions.width - this.margins.left, t(window).scrollTop() + (t(window).height() || o.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top], void 0) : "document" === n.containment ? (this.containment = [0, 0, t(o).width() - this.helperProportions.width - this.margins.left, (t(o).height() || o.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top], void 0) : n.containment.constructor === Array ? (this.containment = n.containment, void 0) : ("parent" === n.containment && (n.containment = this.helper[0].parentNode), i = t(n.containment), s = i[0], s && (e = /(scroll|auto)/.test(i.css("overflow")), this.containment = [(parseInt(i.css("borderLeftWidth"), 10) || 0) + (parseInt(i.css("paddingLeft"), 10) || 0), (parseInt(i.css("borderTopWidth"), 10) || 0) + (parseInt(i.css("paddingTop"), 10) || 0), (e ? Math.max(s.scrollWidth, s.offsetWidth) : s.offsetWidth) - (parseInt(i.css("borderRightWidth"), 10) || 0) - (parseInt(i.css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (e ? Math.max(s.scrollHeight, s.offsetHeight) : s.offsetHeight) - (parseInt(i.css("borderBottomWidth"), 10) || 0) - (parseInt(i.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relativeContainer = i), void 0) : (this.containment = null, void 0);
    }, _convertPositionTo: function _convertPositionTo(t, e) {
      e || (e = this.position);var i = "absolute" === t ? 1 : -1,
          s = this._isRootNode(this.scrollParent[0]);return { top: e.top + this.offset.relative.top * i + this.offset.parent.top * i - ("fixed" === this.cssPosition ? -this.offset.scroll.top : s ? 0 : this.offset.scroll.top) * i, left: e.left + this.offset.relative.left * i + this.offset.parent.left * i - ("fixed" === this.cssPosition ? -this.offset.scroll.left : s ? 0 : this.offset.scroll.left) * i };
    }, _generatePosition: function _generatePosition(t, e) {
      var i,
          s,
          n,
          o,
          a = this.options,
          r = this._isRootNode(this.scrollParent[0]),
          h = t.pageX,
          l = t.pageY;return r && this.offset.scroll || (this.offset.scroll = { top: this.scrollParent.scrollTop(), left: this.scrollParent.scrollLeft() }), e && (this.containment && (this.relativeContainer ? (s = this.relativeContainer.offset(), i = [this.containment[0] + s.left, this.containment[1] + s.top, this.containment[2] + s.left, this.containment[3] + s.top]) : i = this.containment, t.pageX - this.offset.click.left < i[0] && (h = i[0] + this.offset.click.left), t.pageY - this.offset.click.top < i[1] && (l = i[1] + this.offset.click.top), t.pageX - this.offset.click.left > i[2] && (h = i[2] + this.offset.click.left), t.pageY - this.offset.click.top > i[3] && (l = i[3] + this.offset.click.top)), a.grid && (n = a.grid[1] ? this.originalPageY + Math.round((l - this.originalPageY) / a.grid[1]) * a.grid[1] : this.originalPageY, l = i ? n - this.offset.click.top >= i[1] || n - this.offset.click.top > i[3] ? n : n - this.offset.click.top >= i[1] ? n - a.grid[1] : n + a.grid[1] : n, o = a.grid[0] ? this.originalPageX + Math.round((h - this.originalPageX) / a.grid[0]) * a.grid[0] : this.originalPageX, h = i ? o - this.offset.click.left >= i[0] || o - this.offset.click.left > i[2] ? o : o - this.offset.click.left >= i[0] ? o - a.grid[0] : o + a.grid[0] : o), "y" === a.axis && (h = this.originalPageX), "x" === a.axis && (l = this.originalPageY)), { top: l - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : r ? 0 : this.offset.scroll.top), left: h - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : r ? 0 : this.offset.scroll.left) };
    }, _clear: function _clear() {
      this._removeClass(this.helper, "ui-draggable-dragging"), this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove(), this.helper = null, this.cancelHelperRemoval = !1, this.destroyOnClear && this.destroy();
    }, _trigger: function _trigger(e, i, s) {
      return s = s || this._uiHash(), t.ui.plugin.call(this, e, [i, s, this], !0), /^(drag|start|stop)/.test(e) && (this.positionAbs = this._convertPositionTo("absolute"), s.offset = this.positionAbs), t.Widget.prototype._trigger.call(this, e, i, s);
    }, plugins: {}, _uiHash: function _uiHash() {
      return { helper: this.helper, position: this.position, originalPosition: this.originalPosition, offset: this.positionAbs };
    } }), t.ui.plugin.add("draggable", "connectToSortable", { start: function start(e, i, s) {
      var n = t.extend({}, i, { item: s.element });s.sortables = [], t(s.options.connectToSortable).each(function () {
        var i = t(this).sortable("instance");i && !i.options.disabled && (s.sortables.push(i), i.refreshPositions(), i._trigger("activate", e, n));
      });
    }, stop: function stop(e, i, s) {
      var n = t.extend({}, i, { item: s.element });s.cancelHelperRemoval = !1, t.each(s.sortables, function () {
        var t = this;t.isOver ? (t.isOver = 0, s.cancelHelperRemoval = !0, t.cancelHelperRemoval = !1, t._storedCSS = { position: t.placeholder.css("position"), top: t.placeholder.css("top"), left: t.placeholder.css("left") }, t._mouseStop(e), t.options.helper = t.options._helper) : (t.cancelHelperRemoval = !0, t._trigger("deactivate", e, n));
      });
    }, drag: function drag(e, i, s) {
      t.each(s.sortables, function () {
        var n = !1,
            o = this;o.positionAbs = s.positionAbs, o.helperProportions = s.helperProportions, o.offset.click = s.offset.click, o._intersectsWith(o.containerCache) && (n = !0, t.each(s.sortables, function () {
          return this.positionAbs = s.positionAbs, this.helperProportions = s.helperProportions, this.offset.click = s.offset.click, this !== o && this._intersectsWith(this.containerCache) && t.contains(o.element[0], this.element[0]) && (n = !1), n;
        })), n ? (o.isOver || (o.isOver = 1, s._parent = i.helper.parent(), o.currentItem = i.helper.appendTo(o.element).data("ui-sortable-item", !0), o.options._helper = o.options.helper, o.options.helper = function () {
          return i.helper[0];
        }, e.target = o.currentItem[0], o._mouseCapture(e, !0), o._mouseStart(e, !0, !0), o.offset.click.top = s.offset.click.top, o.offset.click.left = s.offset.click.left, o.offset.parent.left -= s.offset.parent.left - o.offset.parent.left, o.offset.parent.top -= s.offset.parent.top - o.offset.parent.top, s._trigger("toSortable", e), s.dropped = o.element, t.each(s.sortables, function () {
          this.refreshPositions();
        }), s.currentItem = s.element, o.fromOutside = s), o.currentItem && (o._mouseDrag(e), i.position = o.position)) : o.isOver && (o.isOver = 0, o.cancelHelperRemoval = !0, o.options._revert = o.options.revert, o.options.revert = !1, o._trigger("out", e, o._uiHash(o)), o._mouseStop(e, !0), o.options.revert = o.options._revert, o.options.helper = o.options._helper, o.placeholder && o.placeholder.remove(), i.helper.appendTo(s._parent), s._refreshOffsets(e), i.position = s._generatePosition(e, !0), s._trigger("fromSortable", e), s.dropped = !1, t.each(s.sortables, function () {
          this.refreshPositions();
        }));
      });
    } }), t.ui.plugin.add("draggable", "cursor", { start: function start(e, i, s) {
      var n = t("body"),
          o = s.options;n.css("cursor") && (o._cursor = n.css("cursor")), n.css("cursor", o.cursor);
    }, stop: function stop(e, i, s) {
      var n = s.options;n._cursor && t("body").css("cursor", n._cursor);
    } }), t.ui.plugin.add("draggable", "opacity", { start: function start(e, i, s) {
      var n = t(i.helper),
          o = s.options;n.css("opacity") && (o._opacity = n.css("opacity")), n.css("opacity", o.opacity);
    }, stop: function stop(e, i, s) {
      var n = s.options;n._opacity && t(i.helper).css("opacity", n._opacity);
    } }), t.ui.plugin.add("draggable", "scroll", { start: function start(t, e, i) {
      i.scrollParentNotHidden || (i.scrollParentNotHidden = i.helper.scrollParent(!1)), i.scrollParentNotHidden[0] !== i.document[0] && "HTML" !== i.scrollParentNotHidden[0].tagName && (i.overflowOffset = i.scrollParentNotHidden.offset());
    }, drag: function drag(e, i, s) {
      var n = s.options,
          o = !1,
          a = s.scrollParentNotHidden[0],
          r = s.document[0];a !== r && "HTML" !== a.tagName ? (n.axis && "x" === n.axis || (s.overflowOffset.top + a.offsetHeight - e.pageY < n.scrollSensitivity ? a.scrollTop = o = a.scrollTop + n.scrollSpeed : e.pageY - s.overflowOffset.top < n.scrollSensitivity && (a.scrollTop = o = a.scrollTop - n.scrollSpeed)), n.axis && "y" === n.axis || (s.overflowOffset.left + a.offsetWidth - e.pageX < n.scrollSensitivity ? a.scrollLeft = o = a.scrollLeft + n.scrollSpeed : e.pageX - s.overflowOffset.left < n.scrollSensitivity && (a.scrollLeft = o = a.scrollLeft - n.scrollSpeed))) : (n.axis && "x" === n.axis || (e.pageY - t(r).scrollTop() < n.scrollSensitivity ? o = t(r).scrollTop(t(r).scrollTop() - n.scrollSpeed) : t(window).height() - (e.pageY - t(r).scrollTop()) < n.scrollSensitivity && (o = t(r).scrollTop(t(r).scrollTop() + n.scrollSpeed))), n.axis && "y" === n.axis || (e.pageX - t(r).scrollLeft() < n.scrollSensitivity ? o = t(r).scrollLeft(t(r).scrollLeft() - n.scrollSpeed) : t(window).width() - (e.pageX - t(r).scrollLeft()) < n.scrollSensitivity && (o = t(r).scrollLeft(t(r).scrollLeft() + n.scrollSpeed)))), o !== !1 && t.ui.ddmanager && !n.dropBehaviour && t.ui.ddmanager.prepareOffsets(s, e);
    } }), t.ui.plugin.add("draggable", "snap", { start: function start(e, i, s) {
      var n = s.options;s.snapElements = [], t(n.snap.constructor !== String ? n.snap.items || ":data(ui-draggable)" : n.snap).each(function () {
        var e = t(this),
            i = e.offset();this !== s.element[0] && s.snapElements.push({ item: this, width: e.outerWidth(), height: e.outerHeight(), top: i.top, left: i.left });
      });
    }, drag: function drag(e, i, s) {
      var n,
          o,
          a,
          r,
          h,
          l,
          c,
          u,
          d,
          p,
          f = s.options,
          g = f.snapTolerance,
          m = i.offset.left,
          _ = m + s.helperProportions.width,
          v = i.offset.top,
          b = v + s.helperProportions.height;for (d = s.snapElements.length - 1; d >= 0; d--) {
        h = s.snapElements[d].left - s.margins.left, l = h + s.snapElements[d].width, c = s.snapElements[d].top - s.margins.top, u = c + s.snapElements[d].height, h - g > _ || m > l + g || c - g > b || v > u + g || !t.contains(s.snapElements[d].item.ownerDocument, s.snapElements[d].item) ? (s.snapElements[d].snapping && s.options.snap.release && s.options.snap.release.call(s.element, e, t.extend(s._uiHash(), { snapItem: s.snapElements[d].item })), s.snapElements[d].snapping = !1) : ("inner" !== f.snapMode && (n = g >= Math.abs(c - b), o = g >= Math.abs(u - v), a = g >= Math.abs(h - _), r = g >= Math.abs(l - m), n && (i.position.top = s._convertPositionTo("relative", { top: c - s.helperProportions.height, left: 0 }).top), o && (i.position.top = s._convertPositionTo("relative", { top: u, left: 0 }).top), a && (i.position.left = s._convertPositionTo("relative", { top: 0, left: h - s.helperProportions.width }).left), r && (i.position.left = s._convertPositionTo("relative", { top: 0, left: l }).left)), p = n || o || a || r, "outer" !== f.snapMode && (n = g >= Math.abs(c - v), o = g >= Math.abs(u - b), a = g >= Math.abs(h - m), r = g >= Math.abs(l - _), n && (i.position.top = s._convertPositionTo("relative", { top: c, left: 0 }).top), o && (i.position.top = s._convertPositionTo("relative", { top: u - s.helperProportions.height, left: 0 }).top), a && (i.position.left = s._convertPositionTo("relative", { top: 0, left: h }).left), r && (i.position.left = s._convertPositionTo("relative", { top: 0, left: l - s.helperProportions.width }).left)), !s.snapElements[d].snapping && (n || o || a || r || p) && s.options.snap.snap && s.options.snap.snap.call(s.element, e, t.extend(s._uiHash(), { snapItem: s.snapElements[d].item })), s.snapElements[d].snapping = n || o || a || r || p);
      }
    } }), t.ui.plugin.add("draggable", "stack", { start: function start(e, i, s) {
      var n,
          o = s.options,
          a = t.makeArray(t(o.stack)).sort(function (e, i) {
        return (parseInt(t(e).css("zIndex"), 10) || 0) - (parseInt(t(i).css("zIndex"), 10) || 0);
      });a.length && (n = parseInt(t(a[0]).css("zIndex"), 10) || 0, t(a).each(function (e) {
        t(this).css("zIndex", n + e);
      }), this.css("zIndex", n + a.length));
    } }), t.ui.plugin.add("draggable", "zIndex", { start: function start(e, i, s) {
      var n = t(i.helper),
          o = s.options;n.css("zIndex") && (o._zIndex = n.css("zIndex")), n.css("zIndex", o.zIndex);
    }, stop: function stop(e, i, s) {
      var n = s.options;n._zIndex && t(i.helper).css("zIndex", n._zIndex);
    } }), t.ui.draggable, t.widget("ui.resizable", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "resize", options: { alsoResize: !1, animate: !1, animateDuration: "slow", animateEasing: "swing", aspectRatio: !1, autoHide: !1, classes: { "ui-resizable-se": "ui-icon ui-icon-gripsmall-diagonal-se" }, containment: !1, ghost: !1, grid: !1, handles: "e,s,se", helper: !1, maxHeight: null, maxWidth: null, minHeight: 10, minWidth: 10, zIndex: 90, resize: null, start: null, stop: null }, _num: function _num(t) {
      return parseFloat(t) || 0;
    }, _isNumber: function _isNumber(t) {
      return !isNaN(parseFloat(t));
    }, _hasScroll: function _hasScroll(e, i) {
      if ("hidden" === t(e).css("overflow")) return !1;var s = i && "left" === i ? "scrollLeft" : "scrollTop",
          n = !1;return e[s] > 0 ? !0 : (e[s] = 1, n = e[s] > 0, e[s] = 0, n);
    }, _create: function _create() {
      var e,
          i = this.options,
          s = this;this._addClass("ui-resizable"), t.extend(this, { _aspectRatio: !!i.aspectRatio, aspectRatio: i.aspectRatio, originalElement: this.element, _proportionallyResizeElements: [], _helper: i.helper || i.ghost || i.animate ? i.helper || "ui-resizable-helper" : null }), this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i) && (this.element.wrap(t("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({ position: this.element.css("position"), width: this.element.outerWidth(), height: this.element.outerHeight(), top: this.element.css("top"), left: this.element.css("left") })), this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")), this.elementIsWrapper = !0, e = { marginTop: this.originalElement.css("marginTop"), marginRight: this.originalElement.css("marginRight"), marginBottom: this.originalElement.css("marginBottom"), marginLeft: this.originalElement.css("marginLeft") }, this.element.css(e), this.originalElement.css("margin", 0), this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({ position: "static", zoom: 1, display: "block" })), this.originalElement.css(e), this._proportionallyResize()), this._setupHandles(), i.autoHide && t(this.element).on("mouseenter", function () {
        i.disabled || (s._removeClass("ui-resizable-autohide"), s._handles.show());
      }).on("mouseleave", function () {
        i.disabled || s.resizing || (s._addClass("ui-resizable-autohide"), s._handles.hide());
      }), this._mouseInit();
    }, _destroy: function _destroy() {
      this._mouseDestroy();var e,
          i = function i(e) {
        t(e).removeData("resizable").removeData("ui-resizable").off(".resizable").find(".ui-resizable-handle").remove();
      };return this.elementIsWrapper && (i(this.element), e = this.element, this.originalElement.css({ position: e.css("position"), width: e.outerWidth(), height: e.outerHeight(), top: e.css("top"), left: e.css("left") }).insertAfter(e), e.remove()), this.originalElement.css("resize", this.originalResizeStyle), i(this.originalElement), this;
    }, _setOption: function _setOption(t, e) {
      switch (this._super(t, e), t) {case "handles":
          this._removeHandles(), this._setupHandles();break;default:}
    }, _setupHandles: function _setupHandles() {
      var e,
          i,
          s,
          n,
          o,
          a = this.options,
          r = this;if (this.handles = a.handles || (t(".ui-resizable-handle", this.element).length ? { n: ".ui-resizable-n", e: ".ui-resizable-e", s: ".ui-resizable-s", w: ".ui-resizable-w", se: ".ui-resizable-se", sw: ".ui-resizable-sw", ne: ".ui-resizable-ne", nw: ".ui-resizable-nw" } : "e,s,se"), this._handles = t(), this.handles.constructor === String) for ("all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"), s = this.handles.split(","), this.handles = {}, i = 0; s.length > i; i++) {
        e = t.trim(s[i]), n = "ui-resizable-" + e, o = t("<div>"), this._addClass(o, "ui-resizable-handle " + n), o.css({ zIndex: a.zIndex }), this.handles[e] = ".ui-resizable-" + e, this.element.append(o);
      }this._renderAxis = function (e) {
        var i, s, n, o;e = e || this.element;for (i in this.handles) {
          this.handles[i].constructor === String ? this.handles[i] = this.element.children(this.handles[i]).first().show() : (this.handles[i].jquery || this.handles[i].nodeType) && (this.handles[i] = t(this.handles[i]), this._on(this.handles[i], { mousedown: r._mouseDown })), this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i) && (s = t(this.handles[i], this.element), o = /sw|ne|nw|se|n|s/.test(i) ? s.outerHeight() : s.outerWidth(), n = ["padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left"].join(""), e.css(n, o), this._proportionallyResize()), this._handles = this._handles.add(this.handles[i]);
        }
      }, this._renderAxis(this.element), this._handles = this._handles.add(this.element.find(".ui-resizable-handle")), this._handles.disableSelection(), this._handles.on("mouseover", function () {
        r.resizing || (this.className && (o = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)), r.axis = o && o[1] ? o[1] : "se");
      }), a.autoHide && (this._handles.hide(), this._addClass("ui-resizable-autohide"));
    }, _removeHandles: function _removeHandles() {
      this._handles.remove();
    }, _mouseCapture: function _mouseCapture(e) {
      var i,
          s,
          n = !1;for (i in this.handles) {
        s = t(this.handles[i])[0], (s === e.target || t.contains(s, e.target)) && (n = !0);
      }return !this.options.disabled && n;
    }, _mouseStart: function _mouseStart(e) {
      var i,
          s,
          n,
          o = this.options,
          a = this.element;return this.resizing = !0, this._renderProxy(), i = this._num(this.helper.css("left")), s = this._num(this.helper.css("top")), o.containment && (i += t(o.containment).scrollLeft() || 0, s += t(o.containment).scrollTop() || 0), this.offset = this.helper.offset(), this.position = { left: i, top: s }, this.size = this._helper ? { width: this.helper.width(), height: this.helper.height() } : { width: a.width(), height: a.height() }, this.originalSize = this._helper ? { width: a.outerWidth(), height: a.outerHeight() } : { width: a.width(), height: a.height() }, this.sizeDiff = { width: a.outerWidth() - a.width(), height: a.outerHeight() - a.height() }, this.originalPosition = { left: i, top: s }, this.originalMousePosition = { left: e.pageX, top: e.pageY }, this.aspectRatio = "number" == typeof o.aspectRatio ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1, n = t(".ui-resizable-" + this.axis).css("cursor"), t("body").css("cursor", "auto" === n ? this.axis + "-resize" : n), this._addClass("ui-resizable-resizing"), this._propagate("start", e), !0;
    }, _mouseDrag: function _mouseDrag(e) {
      var i,
          s,
          n = this.originalMousePosition,
          o = this.axis,
          a = e.pageX - n.left || 0,
          r = e.pageY - n.top || 0,
          h = this._change[o];return this._updatePrevProperties(), h ? (i = h.apply(this, [e, a, r]), this._updateVirtualBoundaries(e.shiftKey), (this._aspectRatio || e.shiftKey) && (i = this._updateRatio(i, e)), i = this._respectSize(i, e), this._updateCache(i), this._propagate("resize", e), s = this._applyChanges(), !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize(), t.isEmptyObject(s) || (this._updatePrevProperties(), this._trigger("resize", e, this.ui()), this._applyChanges()), !1) : !1;
    }, _mouseStop: function _mouseStop(e) {
      this.resizing = !1;var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l = this.options,
          c = this;return this._helper && (i = this._proportionallyResizeElements, s = i.length && /textarea/i.test(i[0].nodeName), n = s && this._hasScroll(i[0], "left") ? 0 : c.sizeDiff.height, o = s ? 0 : c.sizeDiff.width, a = { width: c.helper.width() - o, height: c.helper.height() - n }, r = parseFloat(c.element.css("left")) + (c.position.left - c.originalPosition.left) || null, h = parseFloat(c.element.css("top")) + (c.position.top - c.originalPosition.top) || null, l.animate || this.element.css(t.extend(a, { top: h, left: r })), c.helper.height(c.size.height), c.helper.width(c.size.width), this._helper && !l.animate && this._proportionallyResize()), t("body").css("cursor", "auto"), this._removeClass("ui-resizable-resizing"), this._propagate("stop", e), this._helper && this.helper.remove(), !1;
    }, _updatePrevProperties: function _updatePrevProperties() {
      this.prevPosition = { top: this.position.top, left: this.position.left }, this.prevSize = { width: this.size.width, height: this.size.height };
    }, _applyChanges: function _applyChanges() {
      var t = {};return this.position.top !== this.prevPosition.top && (t.top = this.position.top + "px"), this.position.left !== this.prevPosition.left && (t.left = this.position.left + "px"), this.size.width !== this.prevSize.width && (t.width = this.size.width + "px"), this.size.height !== this.prevSize.height && (t.height = this.size.height + "px"), this.helper.css(t), t;
    }, _updateVirtualBoundaries: function _updateVirtualBoundaries(t) {
      var e,
          i,
          s,
          n,
          o,
          a = this.options;o = { minWidth: this._isNumber(a.minWidth) ? a.minWidth : 0, maxWidth: this._isNumber(a.maxWidth) ? a.maxWidth : 1 / 0, minHeight: this._isNumber(a.minHeight) ? a.minHeight : 0, maxHeight: this._isNumber(a.maxHeight) ? a.maxHeight : 1 / 0 }, (this._aspectRatio || t) && (e = o.minHeight * this.aspectRatio, s = o.minWidth / this.aspectRatio, i = o.maxHeight * this.aspectRatio, n = o.maxWidth / this.aspectRatio, e > o.minWidth && (o.minWidth = e), s > o.minHeight && (o.minHeight = s), o.maxWidth > i && (o.maxWidth = i), o.maxHeight > n && (o.maxHeight = n)), this._vBoundaries = o;
    }, _updateCache: function _updateCache(t) {
      this.offset = this.helper.offset(), this._isNumber(t.left) && (this.position.left = t.left), this._isNumber(t.top) && (this.position.top = t.top), this._isNumber(t.height) && (this.size.height = t.height), this._isNumber(t.width) && (this.size.width = t.width);
    }, _updateRatio: function _updateRatio(t) {
      var e = this.position,
          i = this.size,
          s = this.axis;return this._isNumber(t.height) ? t.width = t.height * this.aspectRatio : this._isNumber(t.width) && (t.height = t.width / this.aspectRatio), "sw" === s && (t.left = e.left + (i.width - t.width), t.top = null), "nw" === s && (t.top = e.top + (i.height - t.height), t.left = e.left + (i.width - t.width)), t;
    }, _respectSize: function _respectSize(t) {
      var e = this._vBoundaries,
          i = this.axis,
          s = this._isNumber(t.width) && e.maxWidth && e.maxWidth < t.width,
          n = this._isNumber(t.height) && e.maxHeight && e.maxHeight < t.height,
          o = this._isNumber(t.width) && e.minWidth && e.minWidth > t.width,
          a = this._isNumber(t.height) && e.minHeight && e.minHeight > t.height,
          r = this.originalPosition.left + this.originalSize.width,
          h = this.originalPosition.top + this.originalSize.height,
          l = /sw|nw|w/.test(i),
          c = /nw|ne|n/.test(i);return o && (t.width = e.minWidth), a && (t.height = e.minHeight), s && (t.width = e.maxWidth), n && (t.height = e.maxHeight), o && l && (t.left = r - e.minWidth), s && l && (t.left = r - e.maxWidth), a && c && (t.top = h - e.minHeight), n && c && (t.top = h - e.maxHeight), t.width || t.height || t.left || !t.top ? t.width || t.height || t.top || !t.left || (t.left = null) : t.top = null, t;
    }, _getPaddingPlusBorderDimensions: function _getPaddingPlusBorderDimensions(t) {
      for (var e = 0, i = [], s = [t.css("borderTopWidth"), t.css("borderRightWidth"), t.css("borderBottomWidth"), t.css("borderLeftWidth")], n = [t.css("paddingTop"), t.css("paddingRight"), t.css("paddingBottom"), t.css("paddingLeft")]; 4 > e; e++) {
        i[e] = parseFloat(s[e]) || 0, i[e] += parseFloat(n[e]) || 0;
      }return { height: i[0] + i[2], width: i[1] + i[3] };
    }, _proportionallyResize: function _proportionallyResize() {
      if (this._proportionallyResizeElements.length) for (var t, e = 0, i = this.helper || this.element; this._proportionallyResizeElements.length > e; e++) {
        t = this._proportionallyResizeElements[e], this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(t)), t.css({ height: i.height() - this.outerDimensions.height || 0, width: i.width() - this.outerDimensions.width || 0 });
      }
    }, _renderProxy: function _renderProxy() {
      var e = this.element,
          i = this.options;this.elementOffset = e.offset(), this._helper ? (this.helper = this.helper || t("<div style='overflow:hidden;'></div>"), this._addClass(this.helper, this._helper), this.helper.css({ width: this.element.outerWidth(), height: this.element.outerHeight(), position: "absolute", left: this.elementOffset.left + "px", top: this.elementOffset.top + "px", zIndex: ++i.zIndex }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element;
    }, _change: { e: function e(t, _e) {
        return { width: this.originalSize.width + _e };
      }, w: function w(t, e) {
        var i = this.originalSize,
            s = this.originalPosition;return { left: s.left + e, width: i.width - e };
      }, n: function n(t, e, i) {
        var s = this.originalSize,
            n = this.originalPosition;return { top: n.top + i, height: s.height - i };
      }, s: function s(t, e, i) {
        return { height: this.originalSize.height + i };
      }, se: function se(e, i, s) {
        return t.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [e, i, s]));
      }, sw: function sw(e, i, s) {
        return t.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [e, i, s]));
      }, ne: function ne(e, i, s) {
        return t.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [e, i, s]));
      }, nw: function nw(e, i, s) {
        return t.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [e, i, s]));
      } }, _propagate: function _propagate(e, i) {
      t.ui.plugin.call(this, e, [i, this.ui()]), "resize" !== e && this._trigger(e, i, this.ui());
    }, plugins: {}, ui: function ui() {
      return { originalElement: this.originalElement, element: this.element, helper: this.helper, position: this.position, size: this.size, originalSize: this.originalSize, originalPosition: this.originalPosition };
    } }), t.ui.plugin.add("resizable", "animate", { stop: function stop(e) {
      var i = t(this).resizable("instance"),
          s = i.options,
          n = i._proportionallyResizeElements,
          o = n.length && /textarea/i.test(n[0].nodeName),
          a = o && i._hasScroll(n[0], "left") ? 0 : i.sizeDiff.height,
          r = o ? 0 : i.sizeDiff.width,
          h = { width: i.size.width - r, height: i.size.height - a },
          l = parseFloat(i.element.css("left")) + (i.position.left - i.originalPosition.left) || null,
          c = parseFloat(i.element.css("top")) + (i.position.top - i.originalPosition.top) || null;i.element.animate(t.extend(h, c && l ? { top: c, left: l } : {}), { duration: s.animateDuration, easing: s.animateEasing, step: function step() {
          var s = { width: parseFloat(i.element.css("width")), height: parseFloat(i.element.css("height")), top: parseFloat(i.element.css("top")), left: parseFloat(i.element.css("left")) };n && n.length && t(n[0]).css({ width: s.width, height: s.height }), i._updateCache(s), i._propagate("resize", e);
        } });
    } }), t.ui.plugin.add("resizable", "containment", { start: function start() {
      var e,
          i,
          s,
          n,
          o,
          a,
          r,
          h = t(this).resizable("instance"),
          l = h.options,
          c = h.element,
          u = l.containment,
          d = u instanceof t ? u.get(0) : /parent/.test(u) ? c.parent().get(0) : u;d && (h.containerElement = t(d), /document/.test(u) || u === document ? (h.containerOffset = { left: 0, top: 0 }, h.containerPosition = { left: 0, top: 0 }, h.parentData = { element: t(document), left: 0, top: 0, width: t(document).width(), height: t(document).height() || document.body.parentNode.scrollHeight }) : (e = t(d), i = [], t(["Top", "Right", "Left", "Bottom"]).each(function (t, s) {
        i[t] = h._num(e.css("padding" + s));
      }), h.containerOffset = e.offset(), h.containerPosition = e.position(), h.containerSize = { height: e.innerHeight() - i[3], width: e.innerWidth() - i[1] }, s = h.containerOffset, n = h.containerSize.height, o = h.containerSize.width, a = h._hasScroll(d, "left") ? d.scrollWidth : o, r = h._hasScroll(d) ? d.scrollHeight : n, h.parentData = { element: d, left: s.left, top: s.top, width: a, height: r }));
    }, resize: function resize(e) {
      var i,
          s,
          n,
          o,
          a = t(this).resizable("instance"),
          r = a.options,
          h = a.containerOffset,
          l = a.position,
          c = a._aspectRatio || e.shiftKey,
          u = { top: 0, left: 0 },
          d = a.containerElement,
          p = !0;d[0] !== document && /static/.test(d.css("position")) && (u = h), l.left < (a._helper ? h.left : 0) && (a.size.width = a.size.width + (a._helper ? a.position.left - h.left : a.position.left - u.left), c && (a.size.height = a.size.width / a.aspectRatio, p = !1), a.position.left = r.helper ? h.left : 0), l.top < (a._helper ? h.top : 0) && (a.size.height = a.size.height + (a._helper ? a.position.top - h.top : a.position.top), c && (a.size.width = a.size.height * a.aspectRatio, p = !1), a.position.top = a._helper ? h.top : 0), n = a.containerElement.get(0) === a.element.parent().get(0), o = /relative|absolute/.test(a.containerElement.css("position")), n && o ? (a.offset.left = a.parentData.left + a.position.left, a.offset.top = a.parentData.top + a.position.top) : (a.offset.left = a.element.offset().left, a.offset.top = a.element.offset().top), i = Math.abs(a.sizeDiff.width + (a._helper ? a.offset.left - u.left : a.offset.left - h.left)), s = Math.abs(a.sizeDiff.height + (a._helper ? a.offset.top - u.top : a.offset.top - h.top)), i + a.size.width >= a.parentData.width && (a.size.width = a.parentData.width - i, c && (a.size.height = a.size.width / a.aspectRatio, p = !1)), s + a.size.height >= a.parentData.height && (a.size.height = a.parentData.height - s, c && (a.size.width = a.size.height * a.aspectRatio, p = !1)), p || (a.position.left = a.prevPosition.left, a.position.top = a.prevPosition.top, a.size.width = a.prevSize.width, a.size.height = a.prevSize.height);
    }, stop: function stop() {
      var e = t(this).resizable("instance"),
          i = e.options,
          s = e.containerOffset,
          n = e.containerPosition,
          o = e.containerElement,
          a = t(e.helper),
          r = a.offset(),
          h = a.outerWidth() - e.sizeDiff.width,
          l = a.outerHeight() - e.sizeDiff.height;e._helper && !i.animate && /relative/.test(o.css("position")) && t(this).css({ left: r.left - n.left - s.left, width: h, height: l }), e._helper && !i.animate && /static/.test(o.css("position")) && t(this).css({ left: r.left - n.left - s.left, width: h, height: l });
    } }), t.ui.plugin.add("resizable", "alsoResize", { start: function start() {
      var e = t(this).resizable("instance"),
          i = e.options;t(i.alsoResize).each(function () {
        var e = t(this);e.data("ui-resizable-alsoresize", { width: parseFloat(e.width()), height: parseFloat(e.height()), left: parseFloat(e.css("left")), top: parseFloat(e.css("top")) });
      });
    }, resize: function resize(e, i) {
      var s = t(this).resizable("instance"),
          n = s.options,
          o = s.originalSize,
          a = s.originalPosition,
          r = { height: s.size.height - o.height || 0, width: s.size.width - o.width || 0, top: s.position.top - a.top || 0, left: s.position.left - a.left || 0 };t(n.alsoResize).each(function () {
        var e = t(this),
            s = t(this).data("ui-resizable-alsoresize"),
            n = {},
            o = e.parents(i.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];t.each(o, function (t, e) {
          var i = (s[e] || 0) + (r[e] || 0);i && i >= 0 && (n[e] = i || null);
        }), e.css(n);
      });
    }, stop: function stop() {
      t(this).removeData("ui-resizable-alsoresize");
    } }), t.ui.plugin.add("resizable", "ghost", { start: function start() {
      var e = t(this).resizable("instance"),
          i = e.size;e.ghost = e.originalElement.clone(), e.ghost.css({ opacity: .25, display: "block", position: "relative", height: i.height, width: i.width, margin: 0, left: 0, top: 0 }), e._addClass(e.ghost, "ui-resizable-ghost"), t.uiBackCompat !== !1 && "string" == typeof e.options.ghost && e.ghost.addClass(this.options.ghost), e.ghost.appendTo(e.helper);
    }, resize: function resize() {
      var e = t(this).resizable("instance");e.ghost && e.ghost.css({ position: "relative", height: e.size.height, width: e.size.width });
    }, stop: function stop() {
      var e = t(this).resizable("instance");e.ghost && e.helper && e.helper.get(0).removeChild(e.ghost.get(0));
    } }), t.ui.plugin.add("resizable", "grid", { resize: function resize() {
      var e,
          i = t(this).resizable("instance"),
          s = i.options,
          n = i.size,
          o = i.originalSize,
          a = i.originalPosition,
          r = i.axis,
          h = "number" == typeof s.grid ? [s.grid, s.grid] : s.grid,
          l = h[0] || 1,
          c = h[1] || 1,
          u = Math.round((n.width - o.width) / l) * l,
          d = Math.round((n.height - o.height) / c) * c,
          p = o.width + u,
          f = o.height + d,
          g = s.maxWidth && p > s.maxWidth,
          m = s.maxHeight && f > s.maxHeight,
          _ = s.minWidth && s.minWidth > p,
          v = s.minHeight && s.minHeight > f;s.grid = h, _ && (p += l), v && (f += c), g && (p -= l), m && (f -= c), /^(se|s|e)$/.test(r) ? (i.size.width = p, i.size.height = f) : /^(ne)$/.test(r) ? (i.size.width = p, i.size.height = f, i.position.top = a.top - d) : /^(sw)$/.test(r) ? (i.size.width = p, i.size.height = f, i.position.left = a.left - u) : ((0 >= f - c || 0 >= p - l) && (e = i._getPaddingPlusBorderDimensions(this)), f - c > 0 ? (i.size.height = f, i.position.top = a.top - d) : (f = c - e.height, i.size.height = f, i.position.top = a.top + o.height - f), p - l > 0 ? (i.size.width = p, i.position.left = a.left - u) : (p = l - e.width, i.size.width = p, i.position.left = a.left + o.width - p));
    } }), t.ui.resizable, t.widget("ui.dialog", { version: "1.12.1", options: { appendTo: "body", autoOpen: !0, buttons: [], classes: { "ui-dialog": "ui-corner-all", "ui-dialog-titlebar": "ui-corner-all" }, closeOnEscape: !0, closeText: "Close", draggable: !0, hide: null, height: "auto", maxHeight: null, maxWidth: null, minHeight: 150, minWidth: 150, modal: !1, position: { my: "center", at: "center", of: window, collision: "fit", using: function using(e) {
          var i = t(this).css(e).offset().top;0 > i && t(this).css("top", e.top - i);
        } }, resizable: !0, show: null, title: null, width: 300, beforeClose: null, close: null, drag: null, dragStart: null, dragStop: null, focus: null, open: null, resize: null, resizeStart: null, resizeStop: null }, sizeRelatedOptions: { buttons: !0, height: !0, maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0, width: !0 }, resizableRelatedOptions: { maxHeight: !0, maxWidth: !0, minHeight: !0, minWidth: !0 }, _create: function _create() {
      this.originalCss = { display: this.element[0].style.display, width: this.element[0].style.width, minHeight: this.element[0].style.minHeight, maxHeight: this.element[0].style.maxHeight, height: this.element[0].style.height }, this.originalPosition = { parent: this.element.parent(), index: this.element.parent().children().index(this.element) }, this.originalTitle = this.element.attr("title"), null == this.options.title && null != this.originalTitle && (this.options.title = this.originalTitle), this.options.disabled && (this.options.disabled = !1), this._createWrapper(), this.element.show().removeAttr("title").appendTo(this.uiDialog), this._addClass("ui-dialog-content", "ui-widget-content"), this._createTitlebar(), this._createButtonPane(), this.options.draggable && t.fn.draggable && this._makeDraggable(), this.options.resizable && t.fn.resizable && this._makeResizable(), this._isOpen = !1, this._trackFocus();
    }, _init: function _init() {
      this.options.autoOpen && this.open();
    }, _appendTo: function _appendTo() {
      var e = this.options.appendTo;return e && (e.jquery || e.nodeType) ? t(e) : this.document.find(e || "body").eq(0);
    }, _destroy: function _destroy() {
      var t,
          e = this.originalPosition;this._untrackInstance(), this._destroyOverlay(), this.element.removeUniqueId().css(this.originalCss).detach(), this.uiDialog.remove(), this.originalTitle && this.element.attr("title", this.originalTitle), t = e.parent.children().eq(e.index), t.length && t[0] !== this.element[0] ? t.before(this.element) : e.parent.append(this.element);
    }, widget: function widget() {
      return this.uiDialog;
    }, disable: t.noop, enable: t.noop, close: function close(e) {
      var i = this;this._isOpen && this._trigger("beforeClose", e) !== !1 && (this._isOpen = !1, this._focusedElement = null, this._destroyOverlay(), this._untrackInstance(), this.opener.filter(":focusable").trigger("focus").length || t.ui.safeBlur(t.ui.safeActiveElement(this.document[0])), this._hide(this.uiDialog, this.options.hide, function () {
        i._trigger("close", e);
      }));
    }, isOpen: function isOpen() {
      return this._isOpen;
    }, moveToTop: function moveToTop() {
      this._moveToTop();
    }, _moveToTop: function _moveToTop(e, i) {
      var s = !1,
          n = this.uiDialog.siblings(".ui-front:visible").map(function () {
        return +t(this).css("z-index");
      }).get(),
          o = Math.max.apply(null, n);return o >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", o + 1), s = !0), s && !i && this._trigger("focus", e), s;
    }, open: function open() {
      var e = this;return this._isOpen ? (this._moveToTop() && this._focusTabbable(), void 0) : (this._isOpen = !0, this.opener = t(t.ui.safeActiveElement(this.document[0])), this._size(), this._position(), this._createOverlay(), this._moveToTop(null, !0), this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), this._show(this.uiDialog, this.options.show, function () {
        e._focusTabbable(), e._trigger("focus");
      }), this._makeFocusTarget(), this._trigger("open"), void 0);
    }, _focusTabbable: function _focusTabbable() {
      var t = this._focusedElement;t || (t = this.element.find("[autofocus]")), t.length || (t = this.element.find(":tabbable")), t.length || (t = this.uiDialogButtonPane.find(":tabbable")), t.length || (t = this.uiDialogTitlebarClose.filter(":tabbable")), t.length || (t = this.uiDialog), t.eq(0).trigger("focus");
    }, _keepFocus: function _keepFocus(e) {
      function i() {
        var e = t.ui.safeActiveElement(this.document[0]),
            i = this.uiDialog[0] === e || t.contains(this.uiDialog[0], e);i || this._focusTabbable();
      }e.preventDefault(), i.call(this), this._delay(i);
    }, _createWrapper: function _createWrapper() {
      this.uiDialog = t("<div>").hide().attr({ tabIndex: -1, role: "dialog" }).appendTo(this._appendTo()), this._addClass(this.uiDialog, "ui-dialog", "ui-widget ui-widget-content ui-front"), this._on(this.uiDialog, { keydown: function keydown(e) {
          if (this.options.closeOnEscape && !e.isDefaultPrevented() && e.keyCode && e.keyCode === t.ui.keyCode.ESCAPE) return e.preventDefault(), this.close(e), void 0;if (e.keyCode === t.ui.keyCode.TAB && !e.isDefaultPrevented()) {
            var i = this.uiDialog.find(":tabbable"),
                s = i.filter(":first"),
                n = i.filter(":last");e.target !== n[0] && e.target !== this.uiDialog[0] || e.shiftKey ? e.target !== s[0] && e.target !== this.uiDialog[0] || !e.shiftKey || (this._delay(function () {
              n.trigger("focus");
            }), e.preventDefault()) : (this._delay(function () {
              s.trigger("focus");
            }), e.preventDefault());
          }
        }, mousedown: function mousedown(t) {
          this._moveToTop(t) && this._focusTabbable();
        } }), this.element.find("[aria-describedby]").length || this.uiDialog.attr({ "aria-describedby": this.element.uniqueId().attr("id") });
    }, _createTitlebar: function _createTitlebar() {
      var e;this.uiDialogTitlebar = t("<div>"), this._addClass(this.uiDialogTitlebar, "ui-dialog-titlebar", "ui-widget-header ui-helper-clearfix"), this._on(this.uiDialogTitlebar, { mousedown: function mousedown(e) {
          t(e.target).closest(".ui-dialog-titlebar-close") || this.uiDialog.trigger("focus");
        } }), this.uiDialogTitlebarClose = t("<button type='button'></button>").button({ label: t("<a>").text(this.options.closeText).html(), icon: "ui-icon-closethick", showLabel: !1 }).appendTo(this.uiDialogTitlebar), this._addClass(this.uiDialogTitlebarClose, "ui-dialog-titlebar-close"), this._on(this.uiDialogTitlebarClose, { click: function click(t) {
          t.preventDefault(), this.close(t);
        } }), e = t("<span>").uniqueId().prependTo(this.uiDialogTitlebar), this._addClass(e, "ui-dialog-title"), this._title(e), this.uiDialogTitlebar.prependTo(this.uiDialog), this.uiDialog.attr({ "aria-labelledby": e.attr("id") });
    }, _title: function _title(t) {
      this.options.title ? t.text(this.options.title) : t.html("&#160;");
    }, _createButtonPane: function _createButtonPane() {
      this.uiDialogButtonPane = t("<div>"), this._addClass(this.uiDialogButtonPane, "ui-dialog-buttonpane", "ui-widget-content ui-helper-clearfix"), this.uiButtonSet = t("<div>").appendTo(this.uiDialogButtonPane), this._addClass(this.uiButtonSet, "ui-dialog-buttonset"), this._createButtons();
    }, _createButtons: function _createButtons() {
      var e = this,
          i = this.options.buttons;return this.uiDialogButtonPane.remove(), this.uiButtonSet.empty(), t.isEmptyObject(i) || t.isArray(i) && !i.length ? (this._removeClass(this.uiDialog, "ui-dialog-buttons"), void 0) : (t.each(i, function (i, s) {
        var n, o;s = t.isFunction(s) ? { click: s, text: i } : s, s = t.extend({ type: "button" }, s), n = s.click, o = { icon: s.icon, iconPosition: s.iconPosition, showLabel: s.showLabel, icons: s.icons, text: s.text }, delete s.click, delete s.icon, delete s.iconPosition, delete s.showLabel, delete s.icons, "boolean" == typeof s.text && delete s.text, t("<button></button>", s).button(o).appendTo(e.uiButtonSet).on("click", function () {
          n.apply(e.element[0], arguments);
        });
      }), this._addClass(this.uiDialog, "ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog), void 0);
    }, _makeDraggable: function _makeDraggable() {
      function e(t) {
        return { position: t.position, offset: t.offset };
      }var i = this,
          s = this.options;this.uiDialog.draggable({ cancel: ".ui-dialog-content, .ui-dialog-titlebar-close", handle: ".ui-dialog-titlebar", containment: "document", start: function start(s, n) {
          i._addClass(t(this), "ui-dialog-dragging"), i._blockFrames(), i._trigger("dragStart", s, e(n));
        }, drag: function drag(t, s) {
          i._trigger("drag", t, e(s));
        }, stop: function stop(n, o) {
          var a = o.offset.left - i.document.scrollLeft(),
              r = o.offset.top - i.document.scrollTop();s.position = { my: "left top", at: "left" + (a >= 0 ? "+" : "") + a + " " + "top" + (r >= 0 ? "+" : "") + r, of: i.window }, i._removeClass(t(this), "ui-dialog-dragging"), i._unblockFrames(), i._trigger("dragStop", n, e(o));
        } });
    }, _makeResizable: function _makeResizable() {
      function e(t) {
        return { originalPosition: t.originalPosition, originalSize: t.originalSize, position: t.position, size: t.size };
      }var i = this,
          s = this.options,
          n = s.resizable,
          o = this.uiDialog.css("position"),
          a = "string" == typeof n ? n : "n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({ cancel: ".ui-dialog-content", containment: "document", alsoResize: this.element, maxWidth: s.maxWidth, maxHeight: s.maxHeight, minWidth: s.minWidth, minHeight: this._minHeight(), handles: a, start: function start(s, n) {
          i._addClass(t(this), "ui-dialog-resizing"), i._blockFrames(), i._trigger("resizeStart", s, e(n));
        }, resize: function resize(t, s) {
          i._trigger("resize", t, e(s));
        }, stop: function stop(n, o) {
          var a = i.uiDialog.offset(),
              r = a.left - i.document.scrollLeft(),
              h = a.top - i.document.scrollTop();s.height = i.uiDialog.height(), s.width = i.uiDialog.width(), s.position = { my: "left top", at: "left" + (r >= 0 ? "+" : "") + r + " " + "top" + (h >= 0 ? "+" : "") + h, of: i.window }, i._removeClass(t(this), "ui-dialog-resizing"), i._unblockFrames(), i._trigger("resizeStop", n, e(o));
        } }).css("position", o);
    }, _trackFocus: function _trackFocus() {
      this._on(this.widget(), { focusin: function focusin(e) {
          this._makeFocusTarget(), this._focusedElement = t(e.target);
        } });
    }, _makeFocusTarget: function _makeFocusTarget() {
      this._untrackInstance(), this._trackingInstances().unshift(this);
    }, _untrackInstance: function _untrackInstance() {
      var e = this._trackingInstances(),
          i = t.inArray(this, e);-1 !== i && e.splice(i, 1);
    }, _trackingInstances: function _trackingInstances() {
      var t = this.document.data("ui-dialog-instances");return t || (t = [], this.document.data("ui-dialog-instances", t)), t;
    }, _minHeight: function _minHeight() {
      var t = this.options;return "auto" === t.height ? t.minHeight : Math.min(t.minHeight, t.height);
    }, _position: function _position() {
      var t = this.uiDialog.is(":visible");t || this.uiDialog.show(), this.uiDialog.position(this.options.position), t || this.uiDialog.hide();
    }, _setOptions: function _setOptions(e) {
      var i = this,
          s = !1,
          n = {};t.each(e, function (t, e) {
        i._setOption(t, e), t in i.sizeRelatedOptions && (s = !0), t in i.resizableRelatedOptions && (n[t] = e);
      }), s && (this._size(), this._position()), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", n);
    }, _setOption: function _setOption(e, i) {
      var s,
          n,
          o = this.uiDialog;"disabled" !== e && (this._super(e, i), "appendTo" === e && this.uiDialog.appendTo(this._appendTo()), "buttons" === e && this._createButtons(), "closeText" === e && this.uiDialogTitlebarClose.button({ label: t("<a>").text("" + this.options.closeText).html() }), "draggable" === e && (s = o.is(":data(ui-draggable)"), s && !i && o.draggable("destroy"), !s && i && this._makeDraggable()), "position" === e && this._position(), "resizable" === e && (n = o.is(":data(ui-resizable)"), n && !i && o.resizable("destroy"), n && "string" == typeof i && o.resizable("option", "handles", i), n || i === !1 || this._makeResizable()), "title" === e && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")));
    }, _size: function _size() {
      var t,
          e,
          i,
          s = this.options;this.element.show().css({ width: "auto", minHeight: 0, maxHeight: "none", height: 0 }), s.minWidth > s.width && (s.width = s.minWidth), t = this.uiDialog.css({ height: "auto", width: s.width }).outerHeight(), e = Math.max(0, s.minHeight - t), i = "number" == typeof s.maxHeight ? Math.max(0, s.maxHeight - t) : "none", "auto" === s.height ? this.element.css({ minHeight: e, maxHeight: i, height: "auto" }) : this.element.height(Math.max(0, s.height - t)), this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight());
    }, _blockFrames: function _blockFrames() {
      this.iframeBlocks = this.document.find("iframe").map(function () {
        var e = t(this);return t("<div>").css({ position: "absolute", width: e.outerWidth(), height: e.outerHeight() }).appendTo(e.parent()).offset(e.offset())[0];
      });
    }, _unblockFrames: function _unblockFrames() {
      this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks);
    }, _allowInteraction: function _allowInteraction(e) {
      return t(e.target).closest(".ui-dialog").length ? !0 : !!t(e.target).closest(".ui-datepicker").length;
    }, _createOverlay: function _createOverlay() {
      if (this.options.modal) {
        var e = !0;this._delay(function () {
          e = !1;
        }), this.document.data("ui-dialog-overlays") || this._on(this.document, { focusin: function focusin(t) {
            e || this._allowInteraction(t) || (t.preventDefault(), this._trackingInstances()[0]._focusTabbable());
          } }), this.overlay = t("<div>").appendTo(this._appendTo()), this._addClass(this.overlay, null, "ui-widget-overlay ui-front"), this._on(this.overlay, { mousedown: "_keepFocus" }), this.document.data("ui-dialog-overlays", (this.document.data("ui-dialog-overlays") || 0) + 1);
      }
    }, _destroyOverlay: function _destroyOverlay() {
      if (this.options.modal && this.overlay) {
        var t = this.document.data("ui-dialog-overlays") - 1;t ? this.document.data("ui-dialog-overlays", t) : (this._off(this.document, "focusin"), this.document.removeData("ui-dialog-overlays")), this.overlay.remove(), this.overlay = null;
      }
    } }), t.uiBackCompat !== !1 && t.widget("ui.dialog", t.ui.dialog, { options: { dialogClass: "" }, _createWrapper: function _createWrapper() {
      this._super(), this.uiDialog.addClass(this.options.dialogClass);
    }, _setOption: function _setOption(t, e) {
      "dialogClass" === t && this.uiDialog.removeClass(this.options.dialogClass).addClass(e), this._superApply(arguments);
    } }), t.ui.dialog, t.widget("ui.droppable", { version: "1.12.1", widgetEventPrefix: "drop", options: { accept: "*", addClasses: !0, greedy: !1, scope: "default", tolerance: "intersect", activate: null, deactivate: null, drop: null, out: null, over: null }, _create: function _create() {
      var e,
          i = this.options,
          s = i.accept;this.isover = !1, this.isout = !0, this.accept = t.isFunction(s) ? s : function (t) {
        return t.is(s);
      }, this.proportions = function () {
        return arguments.length ? (e = arguments[0], void 0) : e ? e : e = { width: this.element[0].offsetWidth, height: this.element[0].offsetHeight };
      }, this._addToManager(i.scope), i.addClasses && this._addClass("ui-droppable");
    }, _addToManager: function _addToManager(e) {
      t.ui.ddmanager.droppables[e] = t.ui.ddmanager.droppables[e] || [], t.ui.ddmanager.droppables[e].push(this);
    }, _splice: function _splice(t) {
      for (var e = 0; t.length > e; e++) {
        t[e] === this && t.splice(e, 1);
      }
    }, _destroy: function _destroy() {
      var e = t.ui.ddmanager.droppables[this.options.scope];this._splice(e);
    }, _setOption: function _setOption(e, i) {
      if ("accept" === e) this.accept = t.isFunction(i) ? i : function (t) {
        return t.is(i);
      };else if ("scope" === e) {
        var s = t.ui.ddmanager.droppables[this.options.scope];this._splice(s), this._addToManager(i);
      }this._super(e, i);
    }, _activate: function _activate(e) {
      var i = t.ui.ddmanager.current;this._addActiveClass(), i && this._trigger("activate", e, this.ui(i));
    }, _deactivate: function _deactivate(e) {
      var i = t.ui.ddmanager.current;this._removeActiveClass(), i && this._trigger("deactivate", e, this.ui(i));
    }, _over: function _over(e) {
      var i = t.ui.ddmanager.current;i && (i.currentItem || i.element)[0] !== this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this._addHoverClass(), this._trigger("over", e, this.ui(i)));
    }, _out: function _out(e) {
      var i = t.ui.ddmanager.current;i && (i.currentItem || i.element)[0] !== this.element[0] && this.accept.call(this.element[0], i.currentItem || i.element) && (this._removeHoverClass(), this._trigger("out", e, this.ui(i)));
    }, _drop: function _drop(e, i) {
      var s = i || t.ui.ddmanager.current,
          n = !1;return s && (s.currentItem || s.element)[0] !== this.element[0] ? (this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function () {
        var i = t(this).droppable("instance");return i.options.greedy && !i.options.disabled && i.options.scope === s.options.scope && i.accept.call(i.element[0], s.currentItem || s.element) && v(s, t.extend(i, { offset: i.element.offset() }), i.options.tolerance, e) ? (n = !0, !1) : void 0;
      }), n ? !1 : this.accept.call(this.element[0], s.currentItem || s.element) ? (this._removeActiveClass(), this._removeHoverClass(), this._trigger("drop", e, this.ui(s)), this.element) : !1) : !1;
    }, ui: function ui(t) {
      return { draggable: t.currentItem || t.element, helper: t.helper, position: t.position, offset: t.positionAbs };
    }, _addHoverClass: function _addHoverClass() {
      this._addClass("ui-droppable-hover");
    }, _removeHoverClass: function _removeHoverClass() {
      this._removeClass("ui-droppable-hover");
    }, _addActiveClass: function _addActiveClass() {
      this._addClass("ui-droppable-active");
    }, _removeActiveClass: function _removeActiveClass() {
      this._removeClass("ui-droppable-active");
    } });var v = t.ui.intersect = function () {
    function t(t, e, i) {
      return t >= e && e + i > t;
    }return function (e, i, s, n) {
      if (!i.offset) return !1;var o = (e.positionAbs || e.position.absolute).left + e.margins.left,
          a = (e.positionAbs || e.position.absolute).top + e.margins.top,
          r = o + e.helperProportions.width,
          h = a + e.helperProportions.height,
          l = i.offset.left,
          c = i.offset.top,
          u = l + i.proportions().width,
          d = c + i.proportions().height;switch (s) {case "fit":
          return o >= l && u >= r && a >= c && d >= h;case "intersect":
          return o + e.helperProportions.width / 2 > l && u > r - e.helperProportions.width / 2 && a + e.helperProportions.height / 2 > c && d > h - e.helperProportions.height / 2;case "pointer":
          return t(n.pageY, c, i.proportions().height) && t(n.pageX, l, i.proportions().width);case "touch":
          return (a >= c && d >= a || h >= c && d >= h || c > a && h > d) && (o >= l && u >= o || r >= l && u >= r || l > o && r > u);default:
          return !1;}
    };
  }();t.ui.ddmanager = { current: null, droppables: { "default": [] }, prepareOffsets: function prepareOffsets(e, i) {
      var s,
          n,
          o = t.ui.ddmanager.droppables[e.options.scope] || [],
          a = i ? i.type : null,
          r = (e.currentItem || e.element).find(":data(ui-droppable)").addBack();t: for (s = 0; o.length > s; s++) {
        if (!(o[s].options.disabled || e && !o[s].accept.call(o[s].element[0], e.currentItem || e.element))) {
          for (n = 0; r.length > n; n++) {
            if (r[n] === o[s].element[0]) {
              o[s].proportions().height = 0;continue t;
            }
          }o[s].visible = "none" !== o[s].element.css("display"), o[s].visible && ("mousedown" === a && o[s]._activate.call(o[s], i), o[s].offset = o[s].element.offset(), o[s].proportions({ width: o[s].element[0].offsetWidth, height: o[s].element[0].offsetHeight }));
        }
      }
    }, drop: function drop(e, i) {
      var s = !1;return t.each((t.ui.ddmanager.droppables[e.options.scope] || []).slice(), function () {
        this.options && (!this.options.disabled && this.visible && v(e, this, this.options.tolerance, i) && (s = this._drop.call(this, i) || s), !this.options.disabled && this.visible && this.accept.call(this.element[0], e.currentItem || e.element) && (this.isout = !0, this.isover = !1, this._deactivate.call(this, i)));
      }), s;
    }, dragStart: function dragStart(e, i) {
      e.element.parentsUntil("body").on("scroll.droppable", function () {
        e.options.refreshPositions || t.ui.ddmanager.prepareOffsets(e, i);
      });
    }, drag: function drag(e, i) {
      e.options.refreshPositions && t.ui.ddmanager.prepareOffsets(e, i), t.each(t.ui.ddmanager.droppables[e.options.scope] || [], function () {
        if (!this.options.disabled && !this.greedyChild && this.visible) {
          var s,
              n,
              o,
              a = v(e, this, this.options.tolerance, i),
              r = !a && this.isover ? "isout" : a && !this.isover ? "isover" : null;r && (this.options.greedy && (n = this.options.scope, o = this.element.parents(":data(ui-droppable)").filter(function () {
            return t(this).droppable("instance").options.scope === n;
          }), o.length && (s = t(o[0]).droppable("instance"), s.greedyChild = "isover" === r)), s && "isover" === r && (s.isover = !1, s.isout = !0, s._out.call(s, i)), this[r] = !0, this["isout" === r ? "isover" : "isout"] = !1, this["isover" === r ? "_over" : "_out"].call(this, i), s && "isout" === r && (s.isout = !1, s.isover = !0, s._over.call(s, i)));
        }
      });
    }, dragStop: function dragStop(e, i) {
      e.element.parentsUntil("body").off("scroll.droppable"), e.options.refreshPositions || t.ui.ddmanager.prepareOffsets(e, i);
    } }, t.uiBackCompat !== !1 && t.widget("ui.droppable", t.ui.droppable, { options: { hoverClass: !1, activeClass: !1 }, _addActiveClass: function _addActiveClass() {
      this._super(), this.options.activeClass && this.element.addClass(this.options.activeClass);
    }, _removeActiveClass: function _removeActiveClass() {
      this._super(), this.options.activeClass && this.element.removeClass(this.options.activeClass);
    }, _addHoverClass: function _addHoverClass() {
      this._super(), this.options.hoverClass && this.element.addClass(this.options.hoverClass);
    }, _removeHoverClass: function _removeHoverClass() {
      this._super(), this.options.hoverClass && this.element.removeClass(this.options.hoverClass);
    } }), t.ui.droppable, t.widget("ui.progressbar", { version: "1.12.1", options: { classes: { "ui-progressbar": "ui-corner-all", "ui-progressbar-value": "ui-corner-left", "ui-progressbar-complete": "ui-corner-right" }, max: 100, value: 0, change: null, complete: null }, min: 0, _create: function _create() {
      this.oldValue = this.options.value = this._constrainedValue(), this.element.attr({ role: "progressbar", "aria-valuemin": this.min }), this._addClass("ui-progressbar", "ui-widget ui-widget-content"), this.valueDiv = t("<div>").appendTo(this.element), this._addClass(this.valueDiv, "ui-progressbar-value", "ui-widget-header"), this._refreshValue();
    }, _destroy: function _destroy() {
      this.element.removeAttr("role aria-valuemin aria-valuemax aria-valuenow"), this.valueDiv.remove();
    }, value: function value(t) {
      return void 0 === t ? this.options.value : (this.options.value = this._constrainedValue(t), this._refreshValue(), void 0);
    }, _constrainedValue: function _constrainedValue(t) {
      return void 0 === t && (t = this.options.value), this.indeterminate = t === !1, "number" != typeof t && (t = 0), this.indeterminate ? !1 : Math.min(this.options.max, Math.max(this.min, t));
    }, _setOptions: function _setOptions(t) {
      var e = t.value;delete t.value, this._super(t), this.options.value = this._constrainedValue(e), this._refreshValue();
    }, _setOption: function _setOption(t, e) {
      "max" === t && (e = Math.max(this.min, e)), this._super(t, e);
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this._super(t), this.element.attr("aria-disabled", t), this._toggleClass(null, "ui-state-disabled", !!t);
    }, _percentage: function _percentage() {
      return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
    }, _refreshValue: function _refreshValue() {
      var e = this.options.value,
          i = this._percentage();this.valueDiv.toggle(this.indeterminate || e > this.min).width(i.toFixed(0) + "%"), this._toggleClass(this.valueDiv, "ui-progressbar-complete", null, e === this.options.max)._toggleClass("ui-progressbar-indeterminate", null, this.indeterminate), this.indeterminate ? (this.element.removeAttr("aria-valuenow"), this.overlayDiv || (this.overlayDiv = t("<div>").appendTo(this.valueDiv), this._addClass(this.overlayDiv, "ui-progressbar-overlay"))) : (this.element.attr({ "aria-valuemax": this.options.max, "aria-valuenow": e }), this.overlayDiv && (this.overlayDiv.remove(), this.overlayDiv = null)), this.oldValue !== e && (this.oldValue = e, this._trigger("change")), e === this.options.max && this._trigger("complete");
    } }), t.widget("ui.selectable", t.ui.mouse, { version: "1.12.1", options: { appendTo: "body", autoRefresh: !0, distance: 0, filter: "*", tolerance: "touch", selected: null, selecting: null, start: null, stop: null, unselected: null, unselecting: null }, _create: function _create() {
      var e = this;this._addClass("ui-selectable"), this.dragged = !1, this.refresh = function () {
        e.elementPos = t(e.element[0]).offset(), e.selectees = t(e.options.filter, e.element[0]), e._addClass(e.selectees, "ui-selectee"), e.selectees.each(function () {
          var i = t(this),
              s = i.offset(),
              n = { left: s.left - e.elementPos.left, top: s.top - e.elementPos.top };t.data(this, "selectable-item", { element: this, $element: i, left: n.left, top: n.top, right: n.left + i.outerWidth(), bottom: n.top + i.outerHeight(), startselected: !1, selected: i.hasClass("ui-selected"), selecting: i.hasClass("ui-selecting"), unselecting: i.hasClass("ui-unselecting") });
        });
      }, this.refresh(), this._mouseInit(), this.helper = t("<div>"), this._addClass(this.helper, "ui-selectable-helper");
    }, _destroy: function _destroy() {
      this.selectees.removeData("selectable-item"), this._mouseDestroy();
    }, _mouseStart: function _mouseStart(e) {
      var i = this,
          s = this.options;this.opos = [e.pageX, e.pageY], this.elementPos = t(this.element[0]).offset(), this.options.disabled || (this.selectees = t(s.filter, this.element[0]), this._trigger("start", e), t(s.appendTo).append(this.helper), this.helper.css({ left: e.pageX, top: e.pageY, width: 0, height: 0 }), s.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function () {
        var s = t.data(this, "selectable-item");s.startselected = !0, e.metaKey || e.ctrlKey || (i._removeClass(s.$element, "ui-selected"), s.selected = !1, i._addClass(s.$element, "ui-unselecting"), s.unselecting = !0, i._trigger("unselecting", e, { unselecting: s.element }));
      }), t(e.target).parents().addBack().each(function () {
        var s,
            n = t.data(this, "selectable-item");return n ? (s = !e.metaKey && !e.ctrlKey || !n.$element.hasClass("ui-selected"), i._removeClass(n.$element, s ? "ui-unselecting" : "ui-selected")._addClass(n.$element, s ? "ui-selecting" : "ui-unselecting"), n.unselecting = !s, n.selecting = s, n.selected = s, s ? i._trigger("selecting", e, { selecting: n.element }) : i._trigger("unselecting", e, { unselecting: n.element }), !1) : void 0;
      }));
    }, _mouseDrag: function _mouseDrag(e) {
      if (this.dragged = !0, !this.options.disabled) {
        var i,
            s = this,
            n = this.options,
            o = this.opos[0],
            a = this.opos[1],
            r = e.pageX,
            h = e.pageY;return o > r && (i = r, r = o, o = i), a > h && (i = h, h = a, a = i), this.helper.css({ left: o, top: a, width: r - o, height: h - a }), this.selectees.each(function () {
          var i = t.data(this, "selectable-item"),
              l = !1,
              c = {};i && i.element !== s.element[0] && (c.left = i.left + s.elementPos.left, c.right = i.right + s.elementPos.left, c.top = i.top + s.elementPos.top, c.bottom = i.bottom + s.elementPos.top, "touch" === n.tolerance ? l = !(c.left > r || o > c.right || c.top > h || a > c.bottom) : "fit" === n.tolerance && (l = c.left > o && r > c.right && c.top > a && h > c.bottom), l ? (i.selected && (s._removeClass(i.$element, "ui-selected"), i.selected = !1), i.unselecting && (s._removeClass(i.$element, "ui-unselecting"), i.unselecting = !1), i.selecting || (s._addClass(i.$element, "ui-selecting"), i.selecting = !0, s._trigger("selecting", e, { selecting: i.element }))) : (i.selecting && ((e.metaKey || e.ctrlKey) && i.startselected ? (s._removeClass(i.$element, "ui-selecting"), i.selecting = !1, s._addClass(i.$element, "ui-selected"), i.selected = !0) : (s._removeClass(i.$element, "ui-selecting"), i.selecting = !1, i.startselected && (s._addClass(i.$element, "ui-unselecting"), i.unselecting = !0), s._trigger("unselecting", e, { unselecting: i.element }))), i.selected && (e.metaKey || e.ctrlKey || i.startselected || (s._removeClass(i.$element, "ui-selected"), i.selected = !1, s._addClass(i.$element, "ui-unselecting"), i.unselecting = !0, s._trigger("unselecting", e, { unselecting: i.element })))));
        }), !1;
      }
    }, _mouseStop: function _mouseStop(e) {
      var i = this;return this.dragged = !1, t(".ui-unselecting", this.element[0]).each(function () {
        var s = t.data(this, "selectable-item");i._removeClass(s.$element, "ui-unselecting"), s.unselecting = !1, s.startselected = !1, i._trigger("unselected", e, { unselected: s.element });
      }), t(".ui-selecting", this.element[0]).each(function () {
        var s = t.data(this, "selectable-item");i._removeClass(s.$element, "ui-selecting")._addClass(s.$element, "ui-selected"), s.selecting = !1, s.selected = !0, s.startselected = !0, i._trigger("selected", e, { selected: s.element });
      }), this._trigger("stop", e), this.helper.remove(), !1;
    } }), t.widget("ui.selectmenu", [t.ui.formResetMixin, { version: "1.12.1", defaultElement: "<select>", options: { appendTo: null, classes: { "ui-selectmenu-button-open": "ui-corner-top", "ui-selectmenu-button-closed": "ui-corner-all" }, disabled: null, icons: { button: "ui-icon-triangle-1-s" }, position: { my: "left top", at: "left bottom", collision: "none" }, width: !1, change: null, close: null, focus: null, open: null, select: null }, _create: function _create() {
      var e = this.element.uniqueId().attr("id");this.ids = { element: e, button: e + "-button", menu: e + "-menu" }, this._drawButton(), this._drawMenu(), this._bindFormResetHandler(), this._rendered = !1, this.menuItems = t();
    }, _drawButton: function _drawButton() {
      var e,
          i = this,
          s = this._parseOption(this.element.find("option:selected"), this.element[0].selectedIndex);this.labels = this.element.labels().attr("for", this.ids.button), this._on(this.labels, { click: function click(t) {
          this.button.focus(), t.preventDefault();
        } }), this.element.hide(), this.button = t("<span>", { tabindex: this.options.disabled ? -1 : 0, id: this.ids.button, role: "combobox", "aria-expanded": "false", "aria-autocomplete": "list", "aria-owns": this.ids.menu, "aria-haspopup": "true", title: this.element.attr("title") }).insertAfter(this.element), this._addClass(this.button, "ui-selectmenu-button ui-selectmenu-button-closed", "ui-button ui-widget"), e = t("<span>").appendTo(this.button), this._addClass(e, "ui-selectmenu-icon", "ui-icon " + this.options.icons.button), this.buttonItem = this._renderButtonItem(s).appendTo(this.button), this.options.width !== !1 && this._resizeButton(), this._on(this.button, this._buttonEvents), this.button.one("focusin", function () {
        i._rendered || i._refreshMenu();
      });
    }, _drawMenu: function _drawMenu() {
      var e = this;this.menu = t("<ul>", { "aria-hidden": "true", "aria-labelledby": this.ids.button, id: this.ids.menu }), this.menuWrap = t("<div>").append(this.menu), this._addClass(this.menuWrap, "ui-selectmenu-menu", "ui-front"), this.menuWrap.appendTo(this._appendTo()), this.menuInstance = this.menu.menu({ classes: { "ui-menu": "ui-corner-bottom" }, role: "listbox", select: function select(t, i) {
          t.preventDefault(), e._setSelection(), e._select(i.item.data("ui-selectmenu-item"), t);
        }, focus: function focus(t, i) {
          var s = i.item.data("ui-selectmenu-item");null != e.focusIndex && s.index !== e.focusIndex && (e._trigger("focus", t, { item: s }), e.isOpen || e._select(s, t)), e.focusIndex = s.index, e.button.attr("aria-activedescendant", e.menuItems.eq(s.index).attr("id"));
        } }).menu("instance"), this.menuInstance._off(this.menu, "mouseleave"), this.menuInstance._closeOnDocumentClick = function () {
        return !1;
      }, this.menuInstance._isDivider = function () {
        return !1;
      };
    }, refresh: function refresh() {
      this._refreshMenu(), this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(this._getSelectedItem().data("ui-selectmenu-item") || {})), null === this.options.width && this._resizeButton();
    }, _refreshMenu: function _refreshMenu() {
      var t,
          e = this.element.find("option");this.menu.empty(), this._parseOptions(e), this._renderMenu(this.menu, this.items), this.menuInstance.refresh(), this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup").find(".ui-menu-item-wrapper"), this._rendered = !0, e.length && (t = this._getSelectedItem(), this.menuInstance.focus(null, t), this._setAria(t.data("ui-selectmenu-item")), this._setOption("disabled", this.element.prop("disabled")));
    }, open: function open(t) {
      this.options.disabled || (this._rendered ? (this._removeClass(this.menu.find(".ui-state-active"), null, "ui-state-active"), this.menuInstance.focus(null, this._getSelectedItem())) : this._refreshMenu(), this.menuItems.length && (this.isOpen = !0, this._toggleAttr(), this._resizeMenu(), this._position(), this._on(this.document, this._documentClick), this._trigger("open", t)));
    }, _position: function _position() {
      this.menuWrap.position(t.extend({ of: this.button }, this.options.position));
    }, close: function close(t) {
      this.isOpen && (this.isOpen = !1, this._toggleAttr(), this.range = null, this._off(this.document), this._trigger("close", t));
    }, widget: function widget() {
      return this.button;
    }, menuWidget: function menuWidget() {
      return this.menu;
    }, _renderButtonItem: function _renderButtonItem(e) {
      var i = t("<span>");return this._setText(i, e.label), this._addClass(i, "ui-selectmenu-text"), i;
    }, _renderMenu: function _renderMenu(e, i) {
      var s = this,
          n = "";t.each(i, function (i, o) {
        var a;o.optgroup !== n && (a = t("<li>", { text: o.optgroup }), s._addClass(a, "ui-selectmenu-optgroup", "ui-menu-divider" + (o.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : "")), a.appendTo(e), n = o.optgroup), s._renderItemData(e, o);
      });
    }, _renderItemData: function _renderItemData(t, e) {
      return this._renderItem(t, e).data("ui-selectmenu-item", e);
    }, _renderItem: function _renderItem(e, i) {
      var s = t("<li>"),
          n = t("<div>", { title: i.element.attr("title") });return i.disabled && this._addClass(s, null, "ui-state-disabled"), this._setText(n, i.label), s.append(n).appendTo(e);
    }, _setText: function _setText(t, e) {
      e ? t.text(e) : t.html("&#160;");
    }, _move: function _move(t, e) {
      var i,
          s,
          n = ".ui-menu-item";this.isOpen ? i = this.menuItems.eq(this.focusIndex).parent("li") : (i = this.menuItems.eq(this.element[0].selectedIndex).parent("li"), n += ":not(.ui-state-disabled)"), s = "first" === t || "last" === t ? i["first" === t ? "prevAll" : "nextAll"](n).eq(-1) : i[t + "All"](n).eq(0), s.length && this.menuInstance.focus(e, s);
    }, _getSelectedItem: function _getSelectedItem() {
      return this.menuItems.eq(this.element[0].selectedIndex).parent("li");
    }, _toggle: function _toggle(t) {
      this[this.isOpen ? "close" : "open"](t);
    }, _setSelection: function _setSelection() {
      var t;this.range && (window.getSelection ? (t = window.getSelection(), t.removeAllRanges(), t.addRange(this.range)) : this.range.select(), this.button.focus());
    }, _documentClick: { mousedown: function mousedown(e) {
        this.isOpen && (t(e.target).closest(".ui-selectmenu-menu, #" + t.ui.escapeSelector(this.ids.button)).length || this.close(e));
      } }, _buttonEvents: { mousedown: function mousedown() {
        var t;window.getSelection ? (t = window.getSelection(), t.rangeCount && (this.range = t.getRangeAt(0))) : this.range = document.selection.createRange();
      }, click: function click(t) {
        this._setSelection(), this._toggle(t);
      }, keydown: function keydown(e) {
        var i = !0;switch (e.keyCode) {case t.ui.keyCode.TAB:case t.ui.keyCode.ESCAPE:
            this.close(e), i = !1;break;case t.ui.keyCode.ENTER:
            this.isOpen && this._selectFocusedItem(e);break;case t.ui.keyCode.UP:
            e.altKey ? this._toggle(e) : this._move("prev", e);break;case t.ui.keyCode.DOWN:
            e.altKey ? this._toggle(e) : this._move("next", e);break;case t.ui.keyCode.SPACE:
            this.isOpen ? this._selectFocusedItem(e) : this._toggle(e);break;case t.ui.keyCode.LEFT:
            this._move("prev", e);break;case t.ui.keyCode.RIGHT:
            this._move("next", e);break;case t.ui.keyCode.HOME:case t.ui.keyCode.PAGE_UP:
            this._move("first", e);break;case t.ui.keyCode.END:case t.ui.keyCode.PAGE_DOWN:
            this._move("last", e);break;default:
            this.menu.trigger(e), i = !1;}i && e.preventDefault();
      } }, _selectFocusedItem: function _selectFocusedItem(t) {
      var e = this.menuItems.eq(this.focusIndex).parent("li");e.hasClass("ui-state-disabled") || this._select(e.data("ui-selectmenu-item"), t);
    }, _select: function _select(t, e) {
      var i = this.element[0].selectedIndex;this.element[0].selectedIndex = t.index, this.buttonItem.replaceWith(this.buttonItem = this._renderButtonItem(t)), this._setAria(t), this._trigger("select", e, { item: t }), t.index !== i && this._trigger("change", e, { item: t }), this.close(e);
    }, _setAria: function _setAria(t) {
      var e = this.menuItems.eq(t.index).attr("id");this.button.attr({ "aria-labelledby": e, "aria-activedescendant": e }), this.menu.attr("aria-activedescendant", e);
    }, _setOption: function _setOption(t, e) {
      if ("icons" === t) {
        var i = this.button.find("span.ui-icon");this._removeClass(i, null, this.options.icons.button)._addClass(i, null, e.button);
      }this._super(t, e), "appendTo" === t && this.menuWrap.appendTo(this._appendTo()), "width" === t && this._resizeButton();
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this._super(t), this.menuInstance.option("disabled", t), this.button.attr("aria-disabled", t), this._toggleClass(this.button, null, "ui-state-disabled", t), this.element.prop("disabled", t), t ? (this.button.attr("tabindex", -1), this.close()) : this.button.attr("tabindex", 0);
    }, _appendTo: function _appendTo() {
      var e = this.options.appendTo;return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e;
    }, _toggleAttr: function _toggleAttr() {
      this.button.attr("aria-expanded", this.isOpen), this._removeClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "closed" : "open"))._addClass(this.button, "ui-selectmenu-button-" + (this.isOpen ? "open" : "closed"))._toggleClass(this.menuWrap, "ui-selectmenu-open", null, this.isOpen), this.menu.attr("aria-hidden", !this.isOpen);
    }, _resizeButton: function _resizeButton() {
      var t = this.options.width;return t === !1 ? (this.button.css("width", ""), void 0) : (null === t && (t = this.element.show().outerWidth(), this.element.hide()), this.button.outerWidth(t), void 0);
    }, _resizeMenu: function _resizeMenu() {
      this.menu.outerWidth(Math.max(this.button.outerWidth(), this.menu.width("").outerWidth() + 1));
    }, _getCreateOptions: function _getCreateOptions() {
      var t = this._super();return t.disabled = this.element.prop("disabled"), t;
    }, _parseOptions: function _parseOptions(e) {
      var i = this,
          s = [];e.each(function (e, n) {
        s.push(i._parseOption(t(n), e));
      }), this.items = s;
    }, _parseOption: function _parseOption(t, e) {
      var i = t.parent("optgroup");return { element: t, index: e, value: t.val(), label: t.text(), optgroup: i.attr("label") || "", disabled: i.prop("disabled") || t.prop("disabled") };
    }, _destroy: function _destroy() {
      this._unbindFormResetHandler(), this.menuWrap.remove(), this.button.remove(), this.element.show(), this.element.removeUniqueId(), this.labels.attr("for", this.ids.element);
    } }]), t.widget("ui.slider", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "slide", options: { animate: !1, classes: { "ui-slider": "ui-corner-all", "ui-slider-handle": "ui-corner-all", "ui-slider-range": "ui-corner-all ui-widget-header" }, distance: 0, max: 100, min: 0, orientation: "horizontal", range: !1, step: 1, value: 0, values: null, change: null, slide: null, start: null, stop: null }, numPages: 5, _create: function _create() {
      this._keySliding = !1, this._mouseSliding = !1, this._animateOff = !0, this._handleIndex = null, this._detectOrientation(), this._mouseInit(), this._calculateNewMax(), this._addClass("ui-slider ui-slider-" + this.orientation, "ui-widget ui-widget-content"), this._refresh(), this._animateOff = !1;
    }, _refresh: function _refresh() {
      this._createRange(), this._createHandles(), this._setupEvents(), this._refreshValue();
    }, _createHandles: function _createHandles() {
      var e,
          i,
          s = this.options,
          n = this.element.find(".ui-slider-handle"),
          o = "<span tabindex='0'></span>",
          a = [];for (i = s.values && s.values.length || 1, n.length > i && (n.slice(i).remove(), n = n.slice(0, i)), e = n.length; i > e; e++) {
        a.push(o);
      }this.handles = n.add(t(a.join("")).appendTo(this.element)), this._addClass(this.handles, "ui-slider-handle", "ui-state-default"), this.handle = this.handles.eq(0), this.handles.each(function (e) {
        t(this).data("ui-slider-handle-index", e).attr("tabIndex", 0);
      });
    }, _createRange: function _createRange() {
      var e = this.options;e.range ? (e.range === !0 && (e.values ? e.values.length && 2 !== e.values.length ? e.values = [e.values[0], e.values[0]] : t.isArray(e.values) && (e.values = e.values.slice(0)) : e.values = [this._valueMin(), this._valueMin()]), this.range && this.range.length ? (this._removeClass(this.range, "ui-slider-range-min ui-slider-range-max"), this.range.css({ left: "", bottom: "" })) : (this.range = t("<div>").appendTo(this.element), this._addClass(this.range, "ui-slider-range")), ("min" === e.range || "max" === e.range) && this._addClass(this.range, "ui-slider-range-" + e.range)) : (this.range && this.range.remove(), this.range = null);
    }, _setupEvents: function _setupEvents() {
      this._off(this.handles), this._on(this.handles, this._handleEvents), this._hoverable(this.handles), this._focusable(this.handles);
    }, _destroy: function _destroy() {
      this.handles.remove(), this.range && this.range.remove(), this._mouseDestroy();
    }, _mouseCapture: function _mouseCapture(e) {
      var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c = this,
          u = this.options;return u.disabled ? !1 : (this.elementSize = { width: this.element.outerWidth(), height: this.element.outerHeight() }, this.elementOffset = this.element.offset(), i = { x: e.pageX, y: e.pageY }, s = this._normValueFromMouse(i), n = this._valueMax() - this._valueMin() + 1, this.handles.each(function (e) {
        var i = Math.abs(s - c.values(e));(n > i || n === i && (e === c._lastChangedValue || c.values(e) === u.min)) && (n = i, o = t(this), a = e);
      }), r = this._start(e, a), r === !1 ? !1 : (this._mouseSliding = !0, this._handleIndex = a, this._addClass(o, null, "ui-state-active"), o.trigger("focus"), h = o.offset(), l = !t(e.target).parents().addBack().is(".ui-slider-handle"), this._clickOffset = l ? { left: 0, top: 0 } : { left: e.pageX - h.left - o.width() / 2, top: e.pageY - h.top - o.height() / 2 - (parseInt(o.css("borderTopWidth"), 10) || 0) - (parseInt(o.css("borderBottomWidth"), 10) || 0) + (parseInt(o.css("marginTop"), 10) || 0) }, this.handles.hasClass("ui-state-hover") || this._slide(e, a, s), this._animateOff = !0, !0));
    }, _mouseStart: function _mouseStart() {
      return !0;
    }, _mouseDrag: function _mouseDrag(t) {
      var e = { x: t.pageX, y: t.pageY },
          i = this._normValueFromMouse(e);return this._slide(t, this._handleIndex, i), !1;
    }, _mouseStop: function _mouseStop(t) {
      return this._removeClass(this.handles, null, "ui-state-active"), this._mouseSliding = !1, this._stop(t, this._handleIndex), this._change(t, this._handleIndex), this._handleIndex = null, this._clickOffset = null, this._animateOff = !1, !1;
    }, _detectOrientation: function _detectOrientation() {
      this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal";
    }, _normValueFromMouse: function _normValueFromMouse(t) {
      var e, i, s, n, o;return "horizontal" === this.orientation ? (e = this.elementSize.width, i = t.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (e = this.elementSize.height, i = t.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0)), s = i / e, s > 1 && (s = 1), 0 > s && (s = 0), "vertical" === this.orientation && (s = 1 - s), n = this._valueMax() - this._valueMin(), o = this._valueMin() + s * n, this._trimAlignValue(o);
    }, _uiHash: function _uiHash(t, e, i) {
      var s = { handle: this.handles[t], handleIndex: t, value: void 0 !== e ? e : this.value() };return this._hasMultipleValues() && (s.value = void 0 !== e ? e : this.values(t), s.values = i || this.values()), s;
    }, _hasMultipleValues: function _hasMultipleValues() {
      return this.options.values && this.options.values.length;
    }, _start: function _start(t, e) {
      return this._trigger("start", t, this._uiHash(e));
    }, _slide: function _slide(t, e, i) {
      var s,
          n,
          o = this.value(),
          a = this.values();this._hasMultipleValues() && (n = this.values(e ? 0 : 1), o = this.values(e), 2 === this.options.values.length && this.options.range === !0 && (i = 0 === e ? Math.min(n, i) : Math.max(n, i)), a[e] = i), i !== o && (s = this._trigger("slide", t, this._uiHash(e, i, a)), s !== !1 && (this._hasMultipleValues() ? this.values(e, i) : this.value(i)));
    }, _stop: function _stop(t, e) {
      this._trigger("stop", t, this._uiHash(e));
    }, _change: function _change(t, e) {
      this._keySliding || this._mouseSliding || (this._lastChangedValue = e, this._trigger("change", t, this._uiHash(e)));
    }, value: function value(t) {
      return arguments.length ? (this.options.value = this._trimAlignValue(t), this._refreshValue(), this._change(null, 0), void 0) : this._value();
    }, values: function values(e, i) {
      var s, n, o;if (arguments.length > 1) return this.options.values[e] = this._trimAlignValue(i), this._refreshValue(), this._change(null, e), void 0;if (!arguments.length) return this._values();if (!t.isArray(arguments[0])) return this._hasMultipleValues() ? this._values(e) : this.value();for (s = this.options.values, n = arguments[0], o = 0; s.length > o; o += 1) {
        s[o] = this._trimAlignValue(n[o]), this._change(null, o);
      }this._refreshValue();
    }, _setOption: function _setOption(e, i) {
      var s,
          n = 0;switch ("range" === e && this.options.range === !0 && ("min" === i ? (this.options.value = this._values(0), this.options.values = null) : "max" === i && (this.options.value = this._values(this.options.values.length - 1), this.options.values = null)), t.isArray(this.options.values) && (n = this.options.values.length), this._super(e, i), e) {case "orientation":
          this._detectOrientation(), this._removeClass("ui-slider-horizontal ui-slider-vertical")._addClass("ui-slider-" + this.orientation), this._refreshValue(), this.options.range && this._refreshRange(i), this.handles.css("horizontal" === i ? "bottom" : "left", "");break;case "value":
          this._animateOff = !0, this._refreshValue(), this._change(null, 0), this._animateOff = !1;break;case "values":
          for (this._animateOff = !0, this._refreshValue(), s = n - 1; s >= 0; s--) {
            this._change(null, s);
          }this._animateOff = !1;break;case "step":case "min":case "max":
          this._animateOff = !0, this._calculateNewMax(), this._refreshValue(), this._animateOff = !1;break;case "range":
          this._animateOff = !0, this._refresh(), this._animateOff = !1;}
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this._super(t), this._toggleClass(null, "ui-state-disabled", !!t);
    }, _value: function _value() {
      var t = this.options.value;return t = this._trimAlignValue(t);
    }, _values: function _values(t) {
      var e, i, s;if (arguments.length) return e = this.options.values[t], e = this._trimAlignValue(e);if (this._hasMultipleValues()) {
        for (i = this.options.values.slice(), s = 0; i.length > s; s += 1) {
          i[s] = this._trimAlignValue(i[s]);
        }return i;
      }return [];
    }, _trimAlignValue: function _trimAlignValue(t) {
      if (this._valueMin() >= t) return this._valueMin();if (t >= this._valueMax()) return this._valueMax();var e = this.options.step > 0 ? this.options.step : 1,
          i = (t - this._valueMin()) % e,
          s = t - i;return 2 * Math.abs(i) >= e && (s += i > 0 ? e : -e), parseFloat(s.toFixed(5));
    }, _calculateNewMax: function _calculateNewMax() {
      var t = this.options.max,
          e = this._valueMin(),
          i = this.options.step,
          s = Math.round((t - e) / i) * i;t = s + e, t > this.options.max && (t -= i), this.max = parseFloat(t.toFixed(this._precision()));
    }, _precision: function _precision() {
      var t = this._precisionOf(this.options.step);return null !== this.options.min && (t = Math.max(t, this._precisionOf(this.options.min))), t;
    }, _precisionOf: function _precisionOf(t) {
      var e = "" + t,
          i = e.indexOf(".");return -1 === i ? 0 : e.length - i - 1;
    }, _valueMin: function _valueMin() {
      return this.options.min;
    }, _valueMax: function _valueMax() {
      return this.max;
    }, _refreshRange: function _refreshRange(t) {
      "vertical" === t && this.range.css({ width: "", left: "" }), "horizontal" === t && this.range.css({ height: "", bottom: "" });
    }, _refreshValue: function _refreshValue() {
      var e,
          i,
          s,
          n,
          o,
          a = this.options.range,
          r = this.options,
          h = this,
          l = this._animateOff ? !1 : r.animate,
          c = {};this._hasMultipleValues() ? this.handles.each(function (s) {
        i = 100 * ((h.values(s) - h._valueMin()) / (h._valueMax() - h._valueMin())), c["horizontal" === h.orientation ? "left" : "bottom"] = i + "%", t(this).stop(1, 1)[l ? "animate" : "css"](c, r.animate), h.options.range === !0 && ("horizontal" === h.orientation ? (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({ left: i + "%" }, r.animate), 1 === s && h.range[l ? "animate" : "css"]({ width: i - e + "%" }, { queue: !1, duration: r.animate })) : (0 === s && h.range.stop(1, 1)[l ? "animate" : "css"]({ bottom: i + "%" }, r.animate), 1 === s && h.range[l ? "animate" : "css"]({ height: i - e + "%" }, { queue: !1, duration: r.animate }))), e = i;
      }) : (s = this.value(), n = this._valueMin(), o = this._valueMax(), i = o !== n ? 100 * ((s - n) / (o - n)) : 0, c["horizontal" === this.orientation ? "left" : "bottom"] = i + "%", this.handle.stop(1, 1)[l ? "animate" : "css"](c, r.animate), "min" === a && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({ width: i + "%" }, r.animate), "max" === a && "horizontal" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({ width: 100 - i + "%" }, r.animate), "min" === a && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({ height: i + "%" }, r.animate), "max" === a && "vertical" === this.orientation && this.range.stop(1, 1)[l ? "animate" : "css"]({ height: 100 - i + "%" }, r.animate));
    }, _handleEvents: { keydown: function keydown(e) {
        var i,
            s,
            n,
            o,
            a = t(e.target).data("ui-slider-handle-index");switch (e.keyCode) {case t.ui.keyCode.HOME:case t.ui.keyCode.END:case t.ui.keyCode.PAGE_UP:case t.ui.keyCode.PAGE_DOWN:case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:
            if (e.preventDefault(), !this._keySliding && (this._keySliding = !0, this._addClass(t(e.target), null, "ui-state-active"), i = this._start(e, a), i === !1)) return;}switch (o = this.options.step, s = n = this._hasMultipleValues() ? this.values(a) : this.value(), e.keyCode) {case t.ui.keyCode.HOME:
            n = this._valueMin();break;case t.ui.keyCode.END:
            n = this._valueMax();break;case t.ui.keyCode.PAGE_UP:
            n = this._trimAlignValue(s + (this._valueMax() - this._valueMin()) / this.numPages);break;case t.ui.keyCode.PAGE_DOWN:
            n = this._trimAlignValue(s - (this._valueMax() - this._valueMin()) / this.numPages);break;case t.ui.keyCode.UP:case t.ui.keyCode.RIGHT:
            if (s === this._valueMax()) return;n = this._trimAlignValue(s + o);break;case t.ui.keyCode.DOWN:case t.ui.keyCode.LEFT:
            if (s === this._valueMin()) return;n = this._trimAlignValue(s - o);}this._slide(e, a, n);
      }, keyup: function keyup(e) {
        var i = t(e.target).data("ui-slider-handle-index");this._keySliding && (this._keySliding = !1, this._stop(e, i), this._change(e, i), this._removeClass(t(e.target), null, "ui-state-active"));
      } } }), t.widget("ui.sortable", t.ui.mouse, { version: "1.12.1", widgetEventPrefix: "sort", ready: !1, options: { appendTo: "parent", axis: !1, connectWith: !1, containment: !1, cursor: "auto", cursorAt: !1, dropOnEmpty: !0, forcePlaceholderSize: !1, forceHelperSize: !1, grid: !1, handle: !1, helper: "original", items: "> *", opacity: !1, placeholder: !1, revert: !1, scroll: !0, scrollSensitivity: 20, scrollSpeed: 20, scope: "default", tolerance: "intersect", zIndex: 1e3, activate: null, beforeStop: null, change: null, deactivate: null, out: null, over: null, receive: null, remove: null, sort: null, start: null, stop: null, update: null }, _isOverAxis: function _isOverAxis(t, e, i) {
      return t >= e && e + i > t;
    }, _isFloating: function _isFloating(t) {
      return (/left|right/.test(t.css("float")) || /inline|table-cell/.test(t.css("display"))
      );
    }, _create: function _create() {
      this.containerCache = {}, this._addClass("ui-sortable"), this.refresh(), this.offset = this.element.offset(), this._mouseInit(), this._setHandleClassName(), this.ready = !0;
    }, _setOption: function _setOption(t, e) {
      this._super(t, e), "handle" === t && this._setHandleClassName();
    }, _setHandleClassName: function _setHandleClassName() {
      var e = this;this._removeClass(this.element.find(".ui-sortable-handle"), "ui-sortable-handle"), t.each(this.items, function () {
        e._addClass(this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item, "ui-sortable-handle");
      });
    }, _destroy: function _destroy() {
      this._mouseDestroy();for (var t = this.items.length - 1; t >= 0; t--) {
        this.items[t].item.removeData(this.widgetName + "-item");
      }return this;
    }, _mouseCapture: function _mouseCapture(e, i) {
      var s = null,
          n = !1,
          o = this;return this.reverting ? !1 : this.options.disabled || "static" === this.options.type ? !1 : (this._refreshItems(e), t(e.target).parents().each(function () {
        return t.data(this, o.widgetName + "-item") === o ? (s = t(this), !1) : void 0;
      }), t.data(e.target, o.widgetName + "-item") === o && (s = t(e.target)), s ? !this.options.handle || i || (t(this.options.handle, s).find("*").addBack().each(function () {
        this === e.target && (n = !0);
      }), n) ? (this.currentItem = s, this._removeCurrentsFromItems(), !0) : !1 : !1);
    }, _mouseStart: function _mouseStart(e, i, s) {
      var n,
          o,
          a = this.options;if (this.currentContainer = this, this.refreshPositions(), this.helper = this._createHelper(e), this._cacheHelperProportions(), this._cacheMargins(), this.scrollParent = this.helper.scrollParent(), this.offset = this.currentItem.offset(), this.offset = { top: this.offset.top - this.margins.top, left: this.offset.left - this.margins.left }, t.extend(this.offset, { click: { left: e.pageX - this.offset.left, top: e.pageY - this.offset.top }, parent: this._getParentOffset(), relative: this._getRelativeOffset() }), this.helper.css("position", "absolute"), this.cssPosition = this.helper.css("position"), this.originalPosition = this._generatePosition(e), this.originalPageX = e.pageX, this.originalPageY = e.pageY, a.cursorAt && this._adjustOffsetFromHelper(a.cursorAt), this.domPosition = { prev: this.currentItem.prev()[0], parent: this.currentItem.parent()[0] }, this.helper[0] !== this.currentItem[0] && this.currentItem.hide(), this._createPlaceholder(), a.containment && this._setContainment(), a.cursor && "auto" !== a.cursor && (o = this.document.find("body"), this.storedCursor = o.css("cursor"), o.css("cursor", a.cursor), this.storedStylesheet = t("<style>*{ cursor: " + a.cursor + " !important; }</style>").appendTo(o)), a.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", a.opacity)), a.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", a.zIndex)), this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset()), this._trigger("start", e, this._uiHash()), this._preserveHelperProportions || this._cacheHelperProportions(), !s) for (n = this.containers.length - 1; n >= 0; n--) {
        this.containers[n]._trigger("activate", e, this._uiHash(this));
      }return t.ui.ddmanager && (t.ui.ddmanager.current = this), t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e), this.dragging = !0, this._addClass(this.helper, "ui-sortable-helper"), this._mouseDrag(e), !0;
    }, _mouseDrag: function _mouseDrag(e) {
      var i,
          s,
          n,
          o,
          a = this.options,
          r = !1;for (this.position = this._generatePosition(e), this.positionAbs = this._convertPositionTo("absolute"), this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs), this.options.scroll && (this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - e.pageY < a.scrollSensitivity ? this.scrollParent[0].scrollTop = r = this.scrollParent[0].scrollTop + a.scrollSpeed : e.pageY - this.overflowOffset.top < a.scrollSensitivity && (this.scrollParent[0].scrollTop = r = this.scrollParent[0].scrollTop - a.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - e.pageX < a.scrollSensitivity ? this.scrollParent[0].scrollLeft = r = this.scrollParent[0].scrollLeft + a.scrollSpeed : e.pageX - this.overflowOffset.left < a.scrollSensitivity && (this.scrollParent[0].scrollLeft = r = this.scrollParent[0].scrollLeft - a.scrollSpeed)) : (e.pageY - this.document.scrollTop() < a.scrollSensitivity ? r = this.document.scrollTop(this.document.scrollTop() - a.scrollSpeed) : this.window.height() - (e.pageY - this.document.scrollTop()) < a.scrollSensitivity && (r = this.document.scrollTop(this.document.scrollTop() + a.scrollSpeed)), e.pageX - this.document.scrollLeft() < a.scrollSensitivity ? r = this.document.scrollLeft(this.document.scrollLeft() - a.scrollSpeed) : this.window.width() - (e.pageX - this.document.scrollLeft()) < a.scrollSensitivity && (r = this.document.scrollLeft(this.document.scrollLeft() + a.scrollSpeed))), r !== !1 && t.ui.ddmanager && !a.dropBehaviour && t.ui.ddmanager.prepareOffsets(this, e)), this.positionAbs = this._convertPositionTo("absolute"), this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px"), this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px"), i = this.items.length - 1; i >= 0; i--) {
        if (s = this.items[i], n = s.item[0], o = this._intersectsWithPointer(s), o && s.instance === this.currentContainer && n !== this.currentItem[0] && this.placeholder[1 === o ? "next" : "prev"]()[0] !== n && !t.contains(this.placeholder[0], n) && ("semi-dynamic" === this.options.type ? !t.contains(this.element[0], n) : !0)) {
          if (this.direction = 1 === o ? "down" : "up", "pointer" !== this.options.tolerance && !this._intersectsWithSides(s)) break;this._rearrange(e, s), this._trigger("change", e, this._uiHash());break;
        }
      }return this._contactContainers(e), t.ui.ddmanager && t.ui.ddmanager.drag(this, e), this._trigger("sort", e, this._uiHash()), this.lastPositionAbs = this.positionAbs, !1;
    }, _mouseStop: function _mouseStop(e, i) {
      if (e) {
        if (t.ui.ddmanager && !this.options.dropBehaviour && t.ui.ddmanager.drop(this, e), this.options.revert) {
          var s = this,
              n = this.placeholder.offset(),
              o = this.options.axis,
              a = {};o && "x" !== o || (a.left = n.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft)), o && "y" !== o || (a.top = n.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop)), this.reverting = !0, t(this.helper).animate(a, parseInt(this.options.revert, 10) || 500, function () {
            s._clear(e);
          });
        } else this._clear(e, i);return !1;
      }
    }, cancel: function cancel() {
      if (this.dragging) {
        this._mouseUp(new t.Event("mouseup", { target: null })), "original" === this.options.helper ? (this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper")) : this.currentItem.show();for (var e = this.containers.length - 1; e >= 0; e--) {
          this.containers[e]._trigger("deactivate", null, this._uiHash(this)), this.containers[e].containerCache.over && (this.containers[e]._trigger("out", null, this._uiHash(this)), this.containers[e].containerCache.over = 0);
        }
      }return this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" !== this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), t.extend(this, { helper: null, dragging: !1, reverting: !1, _noFinalSort: null }), this.domPosition.prev ? t(this.domPosition.prev).after(this.currentItem) : t(this.domPosition.parent).prepend(this.currentItem)), this;
    }, serialize: function serialize(e) {
      var i = this._getItemsAsjQuery(e && e.connected),
          s = [];return e = e || {}, t(i).each(function () {
        var i = (t(e.item || this).attr(e.attribute || "id") || "").match(e.expression || /(.+)[\-=_](.+)/);i && s.push((e.key || i[1] + "[]") + "=" + (e.key && e.expression ? i[1] : i[2]));
      }), !s.length && e.key && s.push(e.key + "="), s.join("&");
    }, toArray: function toArray(e) {
      var i = this._getItemsAsjQuery(e && e.connected),
          s = [];return e = e || {}, i.each(function () {
        s.push(t(e.item || this).attr(e.attribute || "id") || "");
      }), s;
    }, _intersectsWith: function _intersectsWith(t) {
      var e = this.positionAbs.left,
          i = e + this.helperProportions.width,
          s = this.positionAbs.top,
          n = s + this.helperProportions.height,
          o = t.left,
          a = o + t.width,
          r = t.top,
          h = r + t.height,
          l = this.offset.click.top,
          c = this.offset.click.left,
          u = "x" === this.options.axis || s + l > r && h > s + l,
          d = "y" === this.options.axis || e + c > o && a > e + c,
          p = u && d;return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > t[this.floating ? "width" : "height"] ? p : e + this.helperProportions.width / 2 > o && a > i - this.helperProportions.width / 2 && s + this.helperProportions.height / 2 > r && h > n - this.helperProportions.height / 2;
    }, _intersectsWithPointer: function _intersectsWithPointer(t) {
      var e,
          i,
          s = "x" === this.options.axis || this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top, t.height),
          n = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left, t.width),
          o = s && n;return o ? (e = this._getDragVerticalDirection(), i = this._getDragHorizontalDirection(), this.floating ? "right" === i || "down" === e ? 2 : 1 : e && ("down" === e ? 2 : 1)) : !1;
    }, _intersectsWithSides: function _intersectsWithSides(t) {
      var e = this._isOverAxis(this.positionAbs.top + this.offset.click.top, t.top + t.height / 2, t.height),
          i = this._isOverAxis(this.positionAbs.left + this.offset.click.left, t.left + t.width / 2, t.width),
          s = this._getDragVerticalDirection(),
          n = this._getDragHorizontalDirection();return this.floating && n ? "right" === n && i || "left" === n && !i : s && ("down" === s && e || "up" === s && !e);
    }, _getDragVerticalDirection: function _getDragVerticalDirection() {
      var t = this.positionAbs.top - this.lastPositionAbs.top;return 0 !== t && (t > 0 ? "down" : "up");
    }, _getDragHorizontalDirection: function _getDragHorizontalDirection() {
      var t = this.positionAbs.left - this.lastPositionAbs.left;return 0 !== t && (t > 0 ? "right" : "left");
    }, refresh: function refresh(t) {
      return this._refreshItems(t), this._setHandleClassName(), this.refreshPositions(), this;
    }, _connectWith: function _connectWith() {
      var t = this.options;return t.connectWith.constructor === String ? [t.connectWith] : t.connectWith;
    }, _getItemsAsjQuery: function _getItemsAsjQuery(e) {
      function i() {
        r.push(this);
      }var s,
          n,
          o,
          a,
          r = [],
          h = [],
          l = this._connectWith();if (l && e) for (s = l.length - 1; s >= 0; s--) {
        for (o = t(l[s], this.document[0]), n = o.length - 1; n >= 0; n--) {
          a = t.data(o[n], this.widgetFullName), a && a !== this && !a.options.disabled && h.push([t.isFunction(a.options.items) ? a.options.items.call(a.element) : t(a.options.items, a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), a]);
        }
      }for (h.push([t.isFunction(this.options.items) ? this.options.items.call(this.element, null, { options: this.options, item: this.currentItem }) : t(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]), s = h.length - 1; s >= 0; s--) {
        h[s][0].each(i);
      }return t(r);
    }, _removeCurrentsFromItems: function _removeCurrentsFromItems() {
      var e = this.currentItem.find(":data(" + this.widgetName + "-item)");this.items = t.grep(this.items, function (t) {
        for (var i = 0; e.length > i; i++) {
          if (e[i] === t.item[0]) return !1;
        }return !0;
      });
    }, _refreshItems: function _refreshItems(e) {
      this.items = [], this.containers = [this];var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c = this.items,
          u = [[t.isFunction(this.options.items) ? this.options.items.call(this.element[0], e, { item: this.currentItem }) : t(this.options.items, this.element), this]],
          d = this._connectWith();if (d && this.ready) for (i = d.length - 1; i >= 0; i--) {
        for (n = t(d[i], this.document[0]), s = n.length - 1; s >= 0; s--) {
          o = t.data(n[s], this.widgetFullName), o && o !== this && !o.options.disabled && (u.push([t.isFunction(o.options.items) ? o.options.items.call(o.element[0], e, { item: this.currentItem }) : t(o.options.items, o.element), o]), this.containers.push(o));
        }
      }for (i = u.length - 1; i >= 0; i--) {
        for (a = u[i][1], r = u[i][0], s = 0, l = r.length; l > s; s++) {
          h = t(r[s]), h.data(this.widgetName + "-item", a), c.push({ item: h, instance: a, width: 0, height: 0, left: 0, top: 0 });
        }
      }
    }, refreshPositions: function refreshPositions(e) {
      this.floating = this.items.length ? "x" === this.options.axis || this._isFloating(this.items[0].item) : !1, this.offsetParent && this.helper && (this.offset.parent = this._getParentOffset());var i, s, n, o;for (i = this.items.length - 1; i >= 0; i--) {
        s = this.items[i], s.instance !== this.currentContainer && this.currentContainer && s.item[0] !== this.currentItem[0] || (n = this.options.toleranceElement ? t(this.options.toleranceElement, s.item) : s.item, e || (s.width = n.outerWidth(), s.height = n.outerHeight()), o = n.offset(), s.left = o.left, s.top = o.top);
      }if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this);else for (i = this.containers.length - 1; i >= 0; i--) {
        o = this.containers[i].element.offset(), this.containers[i].containerCache.left = o.left, this.containers[i].containerCache.top = o.top, this.containers[i].containerCache.width = this.containers[i].element.outerWidth(), this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
      }return this;
    }, _createPlaceholder: function _createPlaceholder(e) {
      e = e || this;var i,
          s = e.options;s.placeholder && s.placeholder.constructor !== String || (i = s.placeholder, s.placeholder = { element: function element() {
          var s = e.currentItem[0].nodeName.toLowerCase(),
              n = t("<" + s + ">", e.document[0]);return e._addClass(n, "ui-sortable-placeholder", i || e.currentItem[0].className)._removeClass(n, "ui-sortable-helper"), "tbody" === s ? e._createTrPlaceholder(e.currentItem.find("tr").eq(0), t("<tr>", e.document[0]).appendTo(n)) : "tr" === s ? e._createTrPlaceholder(e.currentItem, n) : "img" === s && n.attr("src", e.currentItem.attr("src")), i || n.css("visibility", "hidden"), n;
        }, update: function update(t, n) {
          (!i || s.forcePlaceholderSize) && (n.height() || n.height(e.currentItem.innerHeight() - parseInt(e.currentItem.css("paddingTop") || 0, 10) - parseInt(e.currentItem.css("paddingBottom") || 0, 10)), n.width() || n.width(e.currentItem.innerWidth() - parseInt(e.currentItem.css("paddingLeft") || 0, 10) - parseInt(e.currentItem.css("paddingRight") || 0, 10)));
        } }), e.placeholder = t(s.placeholder.element.call(e.element, e.currentItem)), e.currentItem.after(e.placeholder), s.placeholder.update(e, e.placeholder);
    }, _createTrPlaceholder: function _createTrPlaceholder(e, i) {
      var s = this;e.children().each(function () {
        t("<td>&#160;</td>", s.document[0]).attr("colspan", t(this).attr("colspan") || 1).appendTo(i);
      });
    }, _contactContainers: function _contactContainers(e) {
      var i,
          s,
          n,
          o,
          a,
          r,
          h,
          l,
          c,
          u,
          d = null,
          p = null;for (i = this.containers.length - 1; i >= 0; i--) {
        if (!t.contains(this.currentItem[0], this.containers[i].element[0])) if (this._intersectsWith(this.containers[i].containerCache)) {
          if (d && t.contains(this.containers[i].element[0], d.element[0])) continue;d = this.containers[i], p = i;
        } else this.containers[i].containerCache.over && (this.containers[i]._trigger("out", e, this._uiHash(this)), this.containers[i].containerCache.over = 0);
      }if (d) if (1 === this.containers.length) this.containers[p].containerCache.over || (this.containers[p]._trigger("over", e, this._uiHash(this)), this.containers[p].containerCache.over = 1);else {
        for (n = 1e4, o = null, c = d.floating || this._isFloating(this.currentItem), a = c ? "left" : "top", r = c ? "width" : "height", u = c ? "pageX" : "pageY", s = this.items.length - 1; s >= 0; s--) {
          t.contains(this.containers[p].element[0], this.items[s].item[0]) && this.items[s].item[0] !== this.currentItem[0] && (h = this.items[s].item.offset()[a], l = !1, e[u] - h > this.items[s][r] / 2 && (l = !0), n > Math.abs(e[u] - h) && (n = Math.abs(e[u] - h), o = this.items[s], this.direction = l ? "up" : "down"));
        }if (!o && !this.options.dropOnEmpty) return;if (this.currentContainer === this.containers[p]) return this.currentContainer.containerCache.over || (this.containers[p]._trigger("over", e, this._uiHash()), this.currentContainer.containerCache.over = 1), void 0;o ? this._rearrange(e, o, null, !0) : this._rearrange(e, null, this.containers[p].element, !0), this._trigger("change", e, this._uiHash()), this.containers[p]._trigger("change", e, this._uiHash(this)), this.currentContainer = this.containers[p], this.options.placeholder.update(this.currentContainer, this.placeholder), this.containers[p]._trigger("over", e, this._uiHash(this)), this.containers[p].containerCache.over = 1;
      }
    }, _createHelper: function _createHelper(e) {
      var i = this.options,
          s = t.isFunction(i.helper) ? t(i.helper.apply(this.element[0], [e, this.currentItem])) : "clone" === i.helper ? this.currentItem.clone() : this.currentItem;return s.parents("body").length || t("parent" !== i.appendTo ? i.appendTo : this.currentItem[0].parentNode)[0].appendChild(s[0]), s[0] === this.currentItem[0] && (this._storedCSS = { width: this.currentItem[0].style.width, height: this.currentItem[0].style.height, position: this.currentItem.css("position"), top: this.currentItem.css("top"), left: this.currentItem.css("left") }), (!s[0].style.width || i.forceHelperSize) && s.width(this.currentItem.width()), (!s[0].style.height || i.forceHelperSize) && s.height(this.currentItem.height()), s;
    }, _adjustOffsetFromHelper: function _adjustOffsetFromHelper(e) {
      "string" == typeof e && (e = e.split(" ")), t.isArray(e) && (e = { left: +e[0], top: +e[1] || 0 }), "left" in e && (this.offset.click.left = e.left + this.margins.left), "right" in e && (this.offset.click.left = this.helperProportions.width - e.right + this.margins.left), "top" in e && (this.offset.click.top = e.top + this.margins.top), "bottom" in e && (this.offset.click.top = this.helperProportions.height - e.bottom + this.margins.top);
    }, _getParentOffset: function _getParentOffset() {
      this.offsetParent = this.helper.offsetParent();var e = this.offsetParent.offset();return "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) && (e.left += this.scrollParent.scrollLeft(), e.top += this.scrollParent.scrollTop()), (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && t.ui.ie) && (e = { top: 0, left: 0 }), { top: e.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0), left: e.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0) };
    }, _getRelativeOffset: function _getRelativeOffset() {
      if ("relative" === this.cssPosition) {
        var t = this.currentItem.position();return { top: t.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(), left: t.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft() };
      }return { top: 0, left: 0 };
    }, _cacheMargins: function _cacheMargins() {
      this.margins = { left: parseInt(this.currentItem.css("marginLeft"), 10) || 0, top: parseInt(this.currentItem.css("marginTop"), 10) || 0 };
    }, _cacheHelperProportions: function _cacheHelperProportions() {
      this.helperProportions = { width: this.helper.outerWidth(), height: this.helper.outerHeight() };
    }, _setContainment: function _setContainment() {
      var e,
          i,
          s,
          n = this.options;"parent" === n.containment && (n.containment = this.helper[0].parentNode), ("document" === n.containment || "window" === n.containment) && (this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === n.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === n.containment ? this.document.height() || document.body.parentNode.scrollHeight : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top]), /^(document|window|parent)$/.test(n.containment) || (e = t(n.containment)[0], i = t(n.containment).offset(), s = "hidden" !== t(e).css("overflow"), this.containment = [i.left + (parseInt(t(e).css("borderLeftWidth"), 10) || 0) + (parseInt(t(e).css("paddingLeft"), 10) || 0) - this.margins.left, i.top + (parseInt(t(e).css("borderTopWidth"), 10) || 0) + (parseInt(t(e).css("paddingTop"), 10) || 0) - this.margins.top, i.left + (s ? Math.max(e.scrollWidth, e.offsetWidth) : e.offsetWidth) - (parseInt(t(e).css("borderLeftWidth"), 10) || 0) - (parseInt(t(e).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, i.top + (s ? Math.max(e.scrollHeight, e.offsetHeight) : e.offsetHeight) - (parseInt(t(e).css("borderTopWidth"), 10) || 0) - (parseInt(t(e).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top]);
    }, _convertPositionTo: function _convertPositionTo(e, i) {
      i || (i = this.position);var s = "absolute" === e ? 1 : -1,
          n = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
          o = /(html|body)/i.test(n[0].tagName);return { top: i.top + this.offset.relative.top * s + this.offset.parent.top * s - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : o ? 0 : n.scrollTop()) * s, left: i.left + this.offset.relative.left * s + this.offset.parent.left * s - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : o ? 0 : n.scrollLeft()) * s };
    }, _generatePosition: function _generatePosition(e) {
      var i,
          s,
          n = this.options,
          o = e.pageX,
          a = e.pageY,
          r = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && t.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
          h = /(html|body)/i.test(r[0].tagName);return "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset()), this.originalPosition && (this.containment && (e.pageX - this.offset.click.left < this.containment[0] && (o = this.containment[0] + this.offset.click.left), e.pageY - this.offset.click.top < this.containment[1] && (a = this.containment[1] + this.offset.click.top), e.pageX - this.offset.click.left > this.containment[2] && (o = this.containment[2] + this.offset.click.left), e.pageY - this.offset.click.top > this.containment[3] && (a = this.containment[3] + this.offset.click.top)), n.grid && (i = this.originalPageY + Math.round((a - this.originalPageY) / n.grid[1]) * n.grid[1], a = this.containment ? i - this.offset.click.top >= this.containment[1] && i - this.offset.click.top <= this.containment[3] ? i : i - this.offset.click.top >= this.containment[1] ? i - n.grid[1] : i + n.grid[1] : i, s = this.originalPageX + Math.round((o - this.originalPageX) / n.grid[0]) * n.grid[0], o = this.containment ? s - this.offset.click.left >= this.containment[0] && s - this.offset.click.left <= this.containment[2] ? s : s - this.offset.click.left >= this.containment[0] ? s - n.grid[0] : s + n.grid[0] : s)), { top: a - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : h ? 0 : r.scrollTop()), left: o - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : h ? 0 : r.scrollLeft()) };
    }, _rearrange: function _rearrange(t, e, i, s) {
      i ? i[0].appendChild(this.placeholder[0]) : e.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? e.item[0] : e.item[0].nextSibling), this.counter = this.counter ? ++this.counter : 1;var n = this.counter;
      this._delay(function () {
        n === this.counter && this.refreshPositions(!s);
      });
    }, _clear: function _clear(t, e) {
      function i(t, e, i) {
        return function (s) {
          i._trigger(t, s, e._uiHash(e));
        };
      }this.reverting = !1;var s,
          n = [];if (!this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem), this._noFinalSort = null, this.helper[0] === this.currentItem[0]) {
        for (s in this._storedCSS) {
          ("auto" === this._storedCSS[s] || "static" === this._storedCSS[s]) && (this._storedCSS[s] = "");
        }this.currentItem.css(this._storedCSS), this._removeClass(this.currentItem, "ui-sortable-helper");
      } else this.currentItem.show();for (this.fromOutside && !e && n.push(function (t) {
        this._trigger("receive", t, this._uiHash(this.fromOutside));
      }), !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] || e || n.push(function (t) {
        this._trigger("update", t, this._uiHash());
      }), this !== this.currentContainer && (e || (n.push(function (t) {
        this._trigger("remove", t, this._uiHash());
      }), n.push(function (t) {
        return function (e) {
          t._trigger("receive", e, this._uiHash(this));
        };
      }.call(this, this.currentContainer)), n.push(function (t) {
        return function (e) {
          t._trigger("update", e, this._uiHash(this));
        };
      }.call(this, this.currentContainer)))), s = this.containers.length - 1; s >= 0; s--) {
        e || n.push(i("deactivate", this, this.containers[s])), this.containers[s].containerCache.over && (n.push(i("out", this, this.containers[s])), this.containers[s].containerCache.over = 0);
      }if (this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove()), this._storedOpacity && this.helper.css("opacity", this._storedOpacity), this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex), this.dragging = !1, e || this._trigger("beforeStop", t, this._uiHash()), this.placeholder[0].parentNode.removeChild(this.placeholder[0]), this.cancelHelperRemoval || (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null), !e) {
        for (s = 0; n.length > s; s++) {
          n[s].call(this, t);
        }this._trigger("stop", t, this._uiHash());
      }return this.fromOutside = !1, !this.cancelHelperRemoval;
    }, _trigger: function _trigger() {
      t.Widget.prototype._trigger.apply(this, arguments) === !1 && this.cancel();
    }, _uiHash: function _uiHash(e) {
      var i = e || this;return { helper: i.helper, placeholder: i.placeholder || t([]), position: i.position, originalPosition: i.originalPosition, offset: i.positionAbs, item: i.currentItem, sender: e ? e.element : null };
    } }), t.widget("ui.spinner", { version: "1.12.1", defaultElement: "<input>", widgetEventPrefix: "spin", options: { classes: { "ui-spinner": "ui-corner-all", "ui-spinner-down": "ui-corner-br", "ui-spinner-up": "ui-corner-tr" }, culture: null, icons: { down: "ui-icon-triangle-1-s", up: "ui-icon-triangle-1-n" }, incremental: !0, max: null, min: null, numberFormat: null, page: 10, step: 1, change: null, spin: null, start: null, stop: null }, _create: function _create() {
      this._setOption("max", this.options.max), this._setOption("min", this.options.min), this._setOption("step", this.options.step), "" !== this.value() && this._value(this.element.val(), !0), this._draw(), this._on(this._events), this._refresh(), this._on(this.window, { beforeunload: function beforeunload() {
          this.element.removeAttr("autocomplete");
        } });
    }, _getCreateOptions: function _getCreateOptions() {
      var e = this._super(),
          i = this.element;return t.each(["min", "max", "step"], function (t, s) {
        var n = i.attr(s);null != n && n.length && (e[s] = n);
      }), e;
    }, _events: { keydown: function keydown(t) {
        this._start(t) && this._keydown(t) && t.preventDefault();
      }, keyup: "_stop", focus: function focus() {
        this.previous = this.element.val();
      }, blur: function blur(t) {
        return this.cancelBlur ? (delete this.cancelBlur, void 0) : (this._stop(), this._refresh(), this.previous !== this.element.val() && this._trigger("change", t), void 0);
      }, mousewheel: function mousewheel(t, e) {
        if (e) {
          if (!this.spinning && !this._start(t)) return !1;this._spin((e > 0 ? 1 : -1) * this.options.step, t), clearTimeout(this.mousewheelTimer), this.mousewheelTimer = this._delay(function () {
            this.spinning && this._stop(t);
          }, 100), t.preventDefault();
        }
      }, "mousedown .ui-spinner-button": function mousedownUiSpinnerButton(e) {
        function i() {
          var e = this.element[0] === t.ui.safeActiveElement(this.document[0]);e || (this.element.trigger("focus"), this.previous = s, this._delay(function () {
            this.previous = s;
          }));
        }var s;s = this.element[0] === t.ui.safeActiveElement(this.document[0]) ? this.previous : this.element.val(), e.preventDefault(), i.call(this), this.cancelBlur = !0, this._delay(function () {
          delete this.cancelBlur, i.call(this);
        }), this._start(e) !== !1 && this._repeat(null, t(e.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, e);
      }, "mouseup .ui-spinner-button": "_stop", "mouseenter .ui-spinner-button": function mouseenterUiSpinnerButton(e) {
        return t(e.currentTarget).hasClass("ui-state-active") ? this._start(e) === !1 ? !1 : (this._repeat(null, t(e.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, e), void 0) : void 0;
      }, "mouseleave .ui-spinner-button": "_stop" }, _enhance: function _enhance() {
      this.uiSpinner = this.element.attr("autocomplete", "off").wrap("<span>").parent().append("<a></a><a></a>");
    }, _draw: function _draw() {
      this._enhance(), this._addClass(this.uiSpinner, "ui-spinner", "ui-widget ui-widget-content"), this._addClass("ui-spinner-input"), this.element.attr("role", "spinbutton"), this.buttons = this.uiSpinner.children("a").attr("tabIndex", -1).attr("aria-hidden", !0).button({ classes: { "ui-button": "" } }), this._removeClass(this.buttons, "ui-corner-all"), this._addClass(this.buttons.first(), "ui-spinner-button ui-spinner-up"), this._addClass(this.buttons.last(), "ui-spinner-button ui-spinner-down"), this.buttons.first().button({ icon: this.options.icons.up, showLabel: !1 }), this.buttons.last().button({ icon: this.options.icons.down, showLabel: !1 }), this.buttons.height() > Math.ceil(.5 * this.uiSpinner.height()) && this.uiSpinner.height() > 0 && this.uiSpinner.height(this.uiSpinner.height());
    }, _keydown: function _keydown(e) {
      var i = this.options,
          s = t.ui.keyCode;switch (e.keyCode) {case s.UP:
          return this._repeat(null, 1, e), !0;case s.DOWN:
          return this._repeat(null, -1, e), !0;case s.PAGE_UP:
          return this._repeat(null, i.page, e), !0;case s.PAGE_DOWN:
          return this._repeat(null, -i.page, e), !0;}return !1;
    }, _start: function _start(t) {
      return this.spinning || this._trigger("start", t) !== !1 ? (this.counter || (this.counter = 1), this.spinning = !0, !0) : !1;
    }, _repeat: function _repeat(t, e, i) {
      t = t || 500, clearTimeout(this.timer), this.timer = this._delay(function () {
        this._repeat(40, e, i);
      }, t), this._spin(e * this.options.step, i);
    }, _spin: function _spin(t, e) {
      var i = this.value() || 0;this.counter || (this.counter = 1), i = this._adjustValue(i + t * this._increment(this.counter)), this.spinning && this._trigger("spin", e, { value: i }) === !1 || (this._value(i), this.counter++);
    }, _increment: function _increment(e) {
      var i = this.options.incremental;return i ? t.isFunction(i) ? i(e) : Math.floor(e * e * e / 5e4 - e * e / 500 + 17 * e / 200 + 1) : 1;
    }, _precision: function _precision() {
      var t = this._precisionOf(this.options.step);return null !== this.options.min && (t = Math.max(t, this._precisionOf(this.options.min))), t;
    }, _precisionOf: function _precisionOf(t) {
      var e = "" + t,
          i = e.indexOf(".");return -1 === i ? 0 : e.length - i - 1;
    }, _adjustValue: function _adjustValue(t) {
      var e,
          i,
          s = this.options;return e = null !== s.min ? s.min : 0, i = t - e, i = Math.round(i / s.step) * s.step, t = e + i, t = parseFloat(t.toFixed(this._precision())), null !== s.max && t > s.max ? s.max : null !== s.min && s.min > t ? s.min : t;
    }, _stop: function _stop(t) {
      this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), this.counter = 0, this.spinning = !1, this._trigger("stop", t));
    }, _setOption: function _setOption(t, e) {
      var i, s, n;return "culture" === t || "numberFormat" === t ? (i = this._parse(this.element.val()), this.options[t] = e, this.element.val(this._format(i)), void 0) : (("max" === t || "min" === t || "step" === t) && "string" == typeof e && (e = this._parse(e)), "icons" === t && (s = this.buttons.first().find(".ui-icon"), this._removeClass(s, null, this.options.icons.up), this._addClass(s, null, e.up), n = this.buttons.last().find(".ui-icon"), this._removeClass(n, null, this.options.icons.down), this._addClass(n, null, e.down)), this._super(t, e), void 0);
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this._super(t), this._toggleClass(this.uiSpinner, null, "ui-state-disabled", !!t), this.element.prop("disabled", !!t), this.buttons.button(t ? "disable" : "enable");
    }, _setOptions: r(function (t) {
      this._super(t);
    }), _parse: function _parse(t) {
      return "string" == typeof t && "" !== t && (t = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(t, 10, this.options.culture) : +t), "" === t || isNaN(t) ? null : t;
    }, _format: function _format(t) {
      return "" === t ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(t, this.options.numberFormat, this.options.culture) : t;
    }, _refresh: function _refresh() {
      this.element.attr({ "aria-valuemin": this.options.min, "aria-valuemax": this.options.max, "aria-valuenow": this._parse(this.element.val()) });
    }, isValid: function isValid() {
      var t = this.value();return null === t ? !1 : t === this._adjustValue(t);
    }, _value: function _value(t, e) {
      var i;"" !== t && (i = this._parse(t), null !== i && (e || (i = this._adjustValue(i)), t = this._format(i))), this.element.val(t), this._refresh();
    }, _destroy: function _destroy() {
      this.element.prop("disabled", !1).removeAttr("autocomplete role aria-valuemin aria-valuemax aria-valuenow"), this.uiSpinner.replaceWith(this.element);
    }, stepUp: r(function (t) {
      this._stepUp(t);
    }), _stepUp: function _stepUp(t) {
      this._start() && (this._spin((t || 1) * this.options.step), this._stop());
    }, stepDown: r(function (t) {
      this._stepDown(t);
    }), _stepDown: function _stepDown(t) {
      this._start() && (this._spin((t || 1) * -this.options.step), this._stop());
    }, pageUp: r(function (t) {
      this._stepUp((t || 1) * this.options.page);
    }), pageDown: r(function (t) {
      this._stepDown((t || 1) * this.options.page);
    }), value: function value(t) {
      return arguments.length ? (r(this._value).call(this, t), void 0) : this._parse(this.element.val());
    }, widget: function widget() {
      return this.uiSpinner;
    } }), t.uiBackCompat !== !1 && t.widget("ui.spinner", t.ui.spinner, { _enhance: function _enhance() {
      this.uiSpinner = this.element.attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
    }, _uiSpinnerHtml: function _uiSpinnerHtml() {
      return "<span>";
    }, _buttonHtml: function _buttonHtml() {
      return "<a></a><a></a>";
    } }), t.ui.spinner, t.widget("ui.tabs", { version: "1.12.1", delay: 300, options: { active: null, classes: { "ui-tabs": "ui-corner-all", "ui-tabs-nav": "ui-corner-all", "ui-tabs-panel": "ui-corner-bottom", "ui-tabs-tab": "ui-corner-top" }, collapsible: !1, event: "click", heightStyle: "content", hide: null, show: null, activate: null, beforeActivate: null, beforeLoad: null, load: null }, _isLocal: function () {
      var t = /#.*$/;return function (e) {
        var i, s;i = e.href.replace(t, ""), s = location.href.replace(t, "");try {
          i = decodeURIComponent(i);
        } catch (n) {}try {
          s = decodeURIComponent(s);
        } catch (n) {}return e.hash.length > 1 && i === s;
      };
    }(), _create: function _create() {
      var e = this,
          i = this.options;this.running = !1, this._addClass("ui-tabs", "ui-widget ui-widget-content"), this._toggleClass("ui-tabs-collapsible", null, i.collapsible), this._processTabs(), i.active = this._initialActive(), t.isArray(i.disabled) && (i.disabled = t.unique(i.disabled.concat(t.map(this.tabs.filter(".ui-state-disabled"), function (t) {
        return e.tabs.index(t);
      }))).sort()), this.active = this.options.active !== !1 && this.anchors.length ? this._findActive(i.active) : t(), this._refresh(), this.active.length && this.load(i.active);
    }, _initialActive: function _initialActive() {
      var e = this.options.active,
          i = this.options.collapsible,
          s = location.hash.substring(1);return null === e && (s && this.tabs.each(function (i, n) {
        return t(n).attr("aria-controls") === s ? (e = i, !1) : void 0;
      }), null === e && (e = this.tabs.index(this.tabs.filter(".ui-tabs-active"))), (null === e || -1 === e) && (e = this.tabs.length ? 0 : !1)), e !== !1 && (e = this.tabs.index(this.tabs.eq(e)), -1 === e && (e = i ? !1 : 0)), !i && e === !1 && this.anchors.length && (e = 0), e;
    }, _getCreateEventData: function _getCreateEventData() {
      return { tab: this.active, panel: this.active.length ? this._getPanelForTab(this.active) : t() };
    }, _tabKeydown: function _tabKeydown(e) {
      var i = t(t.ui.safeActiveElement(this.document[0])).closest("li"),
          s = this.tabs.index(i),
          n = !0;if (!this._handlePageNav(e)) {
        switch (e.keyCode) {case t.ui.keyCode.RIGHT:case t.ui.keyCode.DOWN:
            s++;break;case t.ui.keyCode.UP:case t.ui.keyCode.LEFT:
            n = !1, s--;break;case t.ui.keyCode.END:
            s = this.anchors.length - 1;break;case t.ui.keyCode.HOME:
            s = 0;break;case t.ui.keyCode.SPACE:
            return e.preventDefault(), clearTimeout(this.activating), this._activate(s), void 0;case t.ui.keyCode.ENTER:
            return e.preventDefault(), clearTimeout(this.activating), this._activate(s === this.options.active ? !1 : s), void 0;default:
            return;}e.preventDefault(), clearTimeout(this.activating), s = this._focusNextTab(s, n), e.ctrlKey || e.metaKey || (i.attr("aria-selected", "false"), this.tabs.eq(s).attr("aria-selected", "true"), this.activating = this._delay(function () {
          this.option("active", s);
        }, this.delay));
      }
    }, _panelKeydown: function _panelKeydown(e) {
      this._handlePageNav(e) || e.ctrlKey && e.keyCode === t.ui.keyCode.UP && (e.preventDefault(), this.active.trigger("focus"));
    }, _handlePageNav: function _handlePageNav(e) {
      return e.altKey && e.keyCode === t.ui.keyCode.PAGE_UP ? (this._activate(this._focusNextTab(this.options.active - 1, !1)), !0) : e.altKey && e.keyCode === t.ui.keyCode.PAGE_DOWN ? (this._activate(this._focusNextTab(this.options.active + 1, !0)), !0) : void 0;
    }, _findNextTab: function _findNextTab(e, i) {
      function s() {
        return e > n && (e = 0), 0 > e && (e = n), e;
      }for (var n = this.tabs.length - 1; -1 !== t.inArray(s(), this.options.disabled);) {
        e = i ? e + 1 : e - 1;
      }return e;
    }, _focusNextTab: function _focusNextTab(t, e) {
      return t = this._findNextTab(t, e), this.tabs.eq(t).trigger("focus"), t;
    }, _setOption: function _setOption(t, e) {
      return "active" === t ? (this._activate(e), void 0) : (this._super(t, e), "collapsible" === t && (this._toggleClass("ui-tabs-collapsible", null, e), e || this.options.active !== !1 || this._activate(0)), "event" === t && this._setupEvents(e), "heightStyle" === t && this._setupHeightStyle(e), void 0);
    }, _sanitizeSelector: function _sanitizeSelector(t) {
      return t ? t.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
    }, refresh: function refresh() {
      var e = this.options,
          i = this.tablist.children(":has(a[href])");e.disabled = t.map(i.filter(".ui-state-disabled"), function (t) {
        return i.index(t);
      }), this._processTabs(), e.active !== !1 && this.anchors.length ? this.active.length && !t.contains(this.tablist[0], this.active[0]) ? this.tabs.length === e.disabled.length ? (e.active = !1, this.active = t()) : this._activate(this._findNextTab(Math.max(0, e.active - 1), !1)) : e.active = this.tabs.index(this.active) : (e.active = !1, this.active = t()), this._refresh();
    }, _refresh: function _refresh() {
      this._setOptionDisabled(this.options.disabled), this._setupEvents(this.options.event), this._setupHeightStyle(this.options.heightStyle), this.tabs.not(this.active).attr({ "aria-selected": "false", "aria-expanded": "false", tabIndex: -1 }), this.panels.not(this._getPanelForTab(this.active)).hide().attr({ "aria-hidden": "true" }), this.active.length ? (this.active.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 }), this._addClass(this.active, "ui-tabs-active", "ui-state-active"), this._getPanelForTab(this.active).show().attr({ "aria-hidden": "false" })) : this.tabs.eq(0).attr("tabIndex", 0);
    }, _processTabs: function _processTabs() {
      var e = this,
          i = this.tabs,
          s = this.anchors,
          n = this.panels;this.tablist = this._getList().attr("role", "tablist"), this._addClass(this.tablist, "ui-tabs-nav", "ui-helper-reset ui-helper-clearfix ui-widget-header"), this.tablist.on("mousedown" + this.eventNamespace, "> li", function (e) {
        t(this).is(".ui-state-disabled") && e.preventDefault();
      }).on("focus" + this.eventNamespace, ".ui-tabs-anchor", function () {
        t(this).closest("li").is(".ui-state-disabled") && this.blur();
      }), this.tabs = this.tablist.find("> li:has(a[href])").attr({ role: "tab", tabIndex: -1 }), this._addClass(this.tabs, "ui-tabs-tab", "ui-state-default"), this.anchors = this.tabs.map(function () {
        return t("a", this)[0];
      }).attr({ role: "presentation", tabIndex: -1 }), this._addClass(this.anchors, "ui-tabs-anchor"), this.panels = t(), this.anchors.each(function (i, s) {
        var n,
            o,
            a,
            r = t(s).uniqueId().attr("id"),
            h = t(s).closest("li"),
            l = h.attr("aria-controls");e._isLocal(s) ? (n = s.hash, a = n.substring(1), o = e.element.find(e._sanitizeSelector(n))) : (a = h.attr("aria-controls") || t({}).uniqueId()[0].id, n = "#" + a, o = e.element.find(n), o.length || (o = e._createPanel(a), o.insertAfter(e.panels[i - 1] || e.tablist)), o.attr("aria-live", "polite")), o.length && (e.panels = e.panels.add(o)), l && h.data("ui-tabs-aria-controls", l), h.attr({ "aria-controls": a, "aria-labelledby": r }), o.attr("aria-labelledby", r);
      }), this.panels.attr("role", "tabpanel"), this._addClass(this.panels, "ui-tabs-panel", "ui-widget-content"), i && (this._off(i.not(this.tabs)), this._off(s.not(this.anchors)), this._off(n.not(this.panels)));
    }, _getList: function _getList() {
      return this.tablist || this.element.find("ol, ul").eq(0);
    }, _createPanel: function _createPanel(e) {
      return t("<div>").attr("id", e).data("ui-tabs-destroy", !0);
    }, _setOptionDisabled: function _setOptionDisabled(e) {
      var i, s, n;for (t.isArray(e) && (e.length ? e.length === this.anchors.length && (e = !0) : e = !1), n = 0; s = this.tabs[n]; n++) {
        i = t(s), e === !0 || -1 !== t.inArray(n, e) ? (i.attr("aria-disabled", "true"), this._addClass(i, null, "ui-state-disabled")) : (i.removeAttr("aria-disabled"), this._removeClass(i, null, "ui-state-disabled"));
      }this.options.disabled = e, this._toggleClass(this.widget(), this.widgetFullName + "-disabled", null, e === !0);
    }, _setupEvents: function _setupEvents(e) {
      var i = {};e && t.each(e.split(" "), function (t, e) {
        i[e] = "_eventHandler";
      }), this._off(this.anchors.add(this.tabs).add(this.panels)), this._on(!0, this.anchors, { click: function click(t) {
          t.preventDefault();
        } }), this._on(this.anchors, i), this._on(this.tabs, { keydown: "_tabKeydown" }), this._on(this.panels, { keydown: "_panelKeydown" }), this._focusable(this.tabs), this._hoverable(this.tabs);
    }, _setupHeightStyle: function _setupHeightStyle(e) {
      var i,
          s = this.element.parent();"fill" === e ? (i = s.height(), i -= this.element.outerHeight() - this.element.height(), this.element.siblings(":visible").each(function () {
        var e = t(this),
            s = e.css("position");"absolute" !== s && "fixed" !== s && (i -= e.outerHeight(!0));
      }), this.element.children().not(this.panels).each(function () {
        i -= t(this).outerHeight(!0);
      }), this.panels.each(function () {
        t(this).height(Math.max(0, i - t(this).innerHeight() + t(this).height()));
      }).css("overflow", "auto")) : "auto" === e && (i = 0, this.panels.each(function () {
        i = Math.max(i, t(this).height("").height());
      }).height(i));
    }, _eventHandler: function _eventHandler(e) {
      var i = this.options,
          s = this.active,
          n = t(e.currentTarget),
          o = n.closest("li"),
          a = o[0] === s[0],
          r = a && i.collapsible,
          h = r ? t() : this._getPanelForTab(o),
          l = s.length ? this._getPanelForTab(s) : t(),
          c = { oldTab: s, oldPanel: l, newTab: r ? t() : o, newPanel: h };e.preventDefault(), o.hasClass("ui-state-disabled") || o.hasClass("ui-tabs-loading") || this.running || a && !i.collapsible || this._trigger("beforeActivate", e, c) === !1 || (i.active = r ? !1 : this.tabs.index(o), this.active = a ? t() : o, this.xhr && this.xhr.abort(), l.length || h.length || t.error("jQuery UI Tabs: Mismatching fragment identifier."), h.length && this.load(this.tabs.index(o), e), this._toggle(e, c));
    }, _toggle: function _toggle(e, i) {
      function s() {
        o.running = !1, o._trigger("activate", e, i);
      }function n() {
        o._addClass(i.newTab.closest("li"), "ui-tabs-active", "ui-state-active"), a.length && o.options.show ? o._show(a, o.options.show, s) : (a.show(), s());
      }var o = this,
          a = i.newPanel,
          r = i.oldPanel;this.running = !0, r.length && this.options.hide ? this._hide(r, this.options.hide, function () {
        o._removeClass(i.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), n();
      }) : (this._removeClass(i.oldTab.closest("li"), "ui-tabs-active", "ui-state-active"), r.hide(), n()), r.attr("aria-hidden", "true"), i.oldTab.attr({ "aria-selected": "false", "aria-expanded": "false" }), a.length && r.length ? i.oldTab.attr("tabIndex", -1) : a.length && this.tabs.filter(function () {
        return 0 === t(this).attr("tabIndex");
      }).attr("tabIndex", -1), a.attr("aria-hidden", "false"), i.newTab.attr({ "aria-selected": "true", "aria-expanded": "true", tabIndex: 0 });
    }, _activate: function _activate(e) {
      var i,
          s = this._findActive(e);s[0] !== this.active[0] && (s.length || (s = this.active), i = s.find(".ui-tabs-anchor")[0], this._eventHandler({ target: i, currentTarget: i, preventDefault: t.noop }));
    }, _findActive: function _findActive(e) {
      return e === !1 ? t() : this.tabs.eq(e);
    }, _getIndex: function _getIndex(e) {
      return "string" == typeof e && (e = this.anchors.index(this.anchors.filter("[href$='" + t.ui.escapeSelector(e) + "']"))), e;
    }, _destroy: function _destroy() {
      this.xhr && this.xhr.abort(), this.tablist.removeAttr("role").off(this.eventNamespace), this.anchors.removeAttr("role tabIndex").removeUniqueId(), this.tabs.add(this.panels).each(function () {
        t.data(this, "ui-tabs-destroy") ? t(this).remove() : t(this).removeAttr("role tabIndex aria-live aria-busy aria-selected aria-labelledby aria-hidden aria-expanded");
      }), this.tabs.each(function () {
        var e = t(this),
            i = e.data("ui-tabs-aria-controls");i ? e.attr("aria-controls", i).removeData("ui-tabs-aria-controls") : e.removeAttr("aria-controls");
      }), this.panels.show(), "content" !== this.options.heightStyle && this.panels.css("height", "");
    }, enable: function enable(e) {
      var i = this.options.disabled;i !== !1 && (void 0 === e ? i = !1 : (e = this._getIndex(e), i = t.isArray(i) ? t.map(i, function (t) {
        return t !== e ? t : null;
      }) : t.map(this.tabs, function (t, i) {
        return i !== e ? i : null;
      })), this._setOptionDisabled(i));
    }, disable: function disable(e) {
      var i = this.options.disabled;if (i !== !0) {
        if (void 0 === e) i = !0;else {
          if (e = this._getIndex(e), -1 !== t.inArray(e, i)) return;i = t.isArray(i) ? t.merge([e], i).sort() : [e];
        }this._setOptionDisabled(i);
      }
    }, load: function load(e, i) {
      e = this._getIndex(e);var s = this,
          n = this.tabs.eq(e),
          o = n.find(".ui-tabs-anchor"),
          a = this._getPanelForTab(n),
          r = { tab: n, panel: a },
          h = function h(t, e) {
        "abort" === e && s.panels.stop(!1, !0), s._removeClass(n, "ui-tabs-loading"), a.removeAttr("aria-busy"), t === s.xhr && delete s.xhr;
      };this._isLocal(o[0]) || (this.xhr = t.ajax(this._ajaxSettings(o, i, r)), this.xhr && "canceled" !== this.xhr.statusText && (this._addClass(n, "ui-tabs-loading"), a.attr("aria-busy", "true"), this.xhr.done(function (t, e, n) {
        setTimeout(function () {
          a.html(t), s._trigger("load", i, r), h(n, e);
        }, 1);
      }).fail(function (t, e) {
        setTimeout(function () {
          h(t, e);
        }, 1);
      })));
    }, _ajaxSettings: function _ajaxSettings(e, i, s) {
      var n = this;return { url: e.attr("href").replace(/#.*$/, ""), beforeSend: function beforeSend(e, o) {
          return n._trigger("beforeLoad", i, t.extend({ jqXHR: e, ajaxSettings: o }, s));
        } };
    }, _getPanelForTab: function _getPanelForTab(e) {
      var i = t(e).attr("aria-controls");return this.element.find(this._sanitizeSelector("#" + i));
    } }), t.uiBackCompat !== !1 && t.widget("ui.tabs", t.ui.tabs, { _processTabs: function _processTabs() {
      this._superApply(arguments), this._addClass(this.tabs, "ui-tab");
    } }), t.ui.tabs, t.widget("ui.tooltip", { version: "1.12.1", options: { classes: { "ui-tooltip": "ui-corner-all ui-widget-shadow" }, content: function content() {
        var e = t(this).attr("title") || "";return t("<a>").text(e).html();
      }, hide: !0, items: "[title]:not([disabled])", position: { my: "left top+15", at: "left bottom", collision: "flipfit flip" }, show: !0, track: !1, close: null, open: null }, _addDescribedBy: function _addDescribedBy(e, i) {
      var s = (e.attr("aria-describedby") || "").split(/\s+/);s.push(i), e.data("ui-tooltip-id", i).attr("aria-describedby", t.trim(s.join(" ")));
    }, _removeDescribedBy: function _removeDescribedBy(e) {
      var i = e.data("ui-tooltip-id"),
          s = (e.attr("aria-describedby") || "").split(/\s+/),
          n = t.inArray(i, s);-1 !== n && s.splice(n, 1), e.removeData("ui-tooltip-id"), s = t.trim(s.join(" ")), s ? e.attr("aria-describedby", s) : e.removeAttr("aria-describedby");
    }, _create: function _create() {
      this._on({ mouseover: "open", focusin: "open" }), this.tooltips = {}, this.parents = {}, this.liveRegion = t("<div>").attr({ role: "log", "aria-live": "assertive", "aria-relevant": "additions" }).appendTo(this.document[0].body), this._addClass(this.liveRegion, null, "ui-helper-hidden-accessible"), this.disabledTitles = t([]);
    }, _setOption: function _setOption(e, i) {
      var s = this;this._super(e, i), "content" === e && t.each(this.tooltips, function (t, e) {
        s._updateContent(e.element);
      });
    }, _setOptionDisabled: function _setOptionDisabled(t) {
      this[t ? "_disable" : "_enable"]();
    }, _disable: function _disable() {
      var e = this;t.each(this.tooltips, function (i, s) {
        var n = t.Event("blur");n.target = n.currentTarget = s.element[0], e.close(n, !0);
      }), this.disabledTitles = this.disabledTitles.add(this.element.find(this.options.items).addBack().filter(function () {
        var e = t(this);return e.is("[title]") ? e.data("ui-tooltip-title", e.attr("title")).removeAttr("title") : void 0;
      }));
    }, _enable: function _enable() {
      this.disabledTitles.each(function () {
        var e = t(this);e.data("ui-tooltip-title") && e.attr("title", e.data("ui-tooltip-title"));
      }), this.disabledTitles = t([]);
    }, open: function open(e) {
      var i = this,
          s = t(e ? e.target : this.element).closest(this.options.items);s.length && !s.data("ui-tooltip-id") && (s.attr("title") && s.data("ui-tooltip-title", s.attr("title")), s.data("ui-tooltip-open", !0), e && "mouseover" === e.type && s.parents().each(function () {
        var e,
            s = t(this);s.data("ui-tooltip-open") && (e = t.Event("blur"), e.target = e.currentTarget = this, i.close(e, !0)), s.attr("title") && (s.uniqueId(), i.parents[this.id] = { element: this, title: s.attr("title") }, s.attr("title", ""));
      }), this._registerCloseHandlers(e, s), this._updateContent(s, e));
    }, _updateContent: function _updateContent(t, e) {
      var i,
          s = this.options.content,
          n = this,
          o = e ? e.type : null;return "string" == typeof s || s.nodeType || s.jquery ? this._open(e, t, s) : (i = s.call(t[0], function (i) {
        n._delay(function () {
          t.data("ui-tooltip-open") && (e && (e.type = o), this._open(e, t, i));
        });
      }), i && this._open(e, t, i), void 0);
    }, _open: function _open(e, i, s) {
      function n(t) {
        l.of = t, a.is(":hidden") || a.position(l);
      }var o,
          a,
          r,
          h,
          l = t.extend({}, this.options.position);if (s) {
        if (o = this._find(i)) return o.tooltip.find(".ui-tooltip-content").html(s), void 0;i.is("[title]") && (e && "mouseover" === e.type ? i.attr("title", "") : i.removeAttr("title")), o = this._tooltip(i), a = o.tooltip, this._addDescribedBy(i, a.attr("id")), a.find(".ui-tooltip-content").html(s), this.liveRegion.children().hide(), h = t("<div>").html(a.find(".ui-tooltip-content").html()), h.removeAttr("name").find("[name]").removeAttr("name"), h.removeAttr("id").find("[id]").removeAttr("id"), h.appendTo(this.liveRegion), this.options.track && e && /^mouse/.test(e.type) ? (this._on(this.document, { mousemove: n }), n(e)) : a.position(t.extend({ of: i }, this.options.position)), a.hide(), this._show(a, this.options.show), this.options.track && this.options.show && this.options.show.delay && (r = this.delayedShow = setInterval(function () {
          a.is(":visible") && (n(l.of), clearInterval(r));
        }, t.fx.interval)), this._trigger("open", e, { tooltip: a });
      }
    }, _registerCloseHandlers: function _registerCloseHandlers(e, i) {
      var s = { keyup: function keyup(e) {
          if (e.keyCode === t.ui.keyCode.ESCAPE) {
            var s = t.Event(e);s.currentTarget = i[0], this.close(s, !0);
          }
        } };i[0] !== this.element[0] && (s.remove = function () {
        this._removeTooltip(this._find(i).tooltip);
      }), e && "mouseover" !== e.type || (s.mouseleave = "close"), e && "focusin" !== e.type || (s.focusout = "close"), this._on(!0, i, s);
    }, close: function close(e) {
      var i,
          s = this,
          n = t(e ? e.currentTarget : this.element),
          o = this._find(n);return o ? (i = o.tooltip, o.closing || (clearInterval(this.delayedShow), n.data("ui-tooltip-title") && !n.attr("title") && n.attr("title", n.data("ui-tooltip-title")), this._removeDescribedBy(n), o.hiding = !0, i.stop(!0), this._hide(i, this.options.hide, function () {
        s._removeTooltip(t(this));
      }), n.removeData("ui-tooltip-open"), this._off(n, "mouseleave focusout keyup"), n[0] !== this.element[0] && this._off(n, "remove"), this._off(this.document, "mousemove"), e && "mouseleave" === e.type && t.each(this.parents, function (e, i) {
        t(i.element).attr("title", i.title), delete s.parents[e];
      }), o.closing = !0, this._trigger("close", e, { tooltip: i }), o.hiding || (o.closing = !1)), void 0) : (n.removeData("ui-tooltip-open"), void 0);
    }, _tooltip: function _tooltip(e) {
      var i = t("<div>").attr("role", "tooltip"),
          s = t("<div>").appendTo(i),
          n = i.uniqueId().attr("id");return this._addClass(s, "ui-tooltip-content"), this._addClass(i, "ui-tooltip", "ui-widget ui-widget-content"), i.appendTo(this._appendTo(e)), this.tooltips[n] = { element: e, tooltip: i };
    }, _find: function _find(t) {
      var e = t.data("ui-tooltip-id");return e ? this.tooltips[e] : null;
    }, _removeTooltip: function _removeTooltip(t) {
      t.remove(), delete this.tooltips[t.attr("id")];
    }, _appendTo: function _appendTo(t) {
      var e = t.closest(".ui-front, dialog");return e.length || (e = this.document[0].body), e;
    }, _destroy: function _destroy() {
      var e = this;t.each(this.tooltips, function (i, s) {
        var n = t.Event("blur"),
            o = s.element;n.target = n.currentTarget = o[0], e.close(n, !0), t("#" + i).remove(), o.data("ui-tooltip-title") && (o.attr("title") || o.attr("title", o.data("ui-tooltip-title")), o.removeData("ui-tooltip-title"));
      }), this.liveRegion.remove();
    } }), t.uiBackCompat !== !1 && t.widget("ui.tooltip", t.ui.tooltip, { options: { tooltipClass: null }, _tooltip: function _tooltip() {
      var t = this._superApply(arguments);return this.options.tooltipClass && t.tooltip.addClass(this.options.tooltipClass), t;
    } }), t.ui.tooltip;
});

/***/ }),

/***/ "./bower_components/jquery-validation/dist/additional-methods.js":
/*!***********************************************************************!*\
  !*** ./bower_components/jquery-validation/dist/additional-methods.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery Validation Plugin v1.19.1
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2019 Jörn Zaefferer
 * Released under the MIT license
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery"), __webpack_require__(/*! ./jquery.validate */ "./bower_components/jquery-validation/dist/jquery.validate.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
})(function ($) {

	(function () {

		function stripHtml(value) {

			// Remove html tags and space chars
			return value.replace(/<.[^<>]*?>/g, " ").replace(/&nbsp;|&#160;/gi, " ")

			// Remove punctuation
			.replace(/[.(),;:!?%#$'\"_+=\/\-“”’]*/g, "");
		}

		$.validator.addMethod("maxWords", function (value, element, params) {
			return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length <= params;
		}, $.validator.format("Please enter {0} words or less."));

		$.validator.addMethod("minWords", function (value, element, params) {
			return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length >= params;
		}, $.validator.format("Please enter at least {0} words."));

		$.validator.addMethod("rangeWords", function (value, element, params) {
			var valueStripped = stripHtml(value),
			    regex = /\b\w+\b/g;
			return this.optional(element) || valueStripped.match(regex).length >= params[0] && valueStripped.match(regex).length <= params[1];
		}, $.validator.format("Please enter between {0} and {1} words."));
	})();

	/**
  * This is used in the United States to process payments, deposits,
  * or transfers using the Automated Clearing House (ACH) or Fedwire
  * systems. A very common use case would be to validate a form for
  * an ACH bill payment.
  */
	$.validator.addMethod("abaRoutingNumber", function (value) {
		var checksum = 0;
		var tokens = value.split("");
		var length = tokens.length;

		// Length Check
		if (length !== 9) {
			return false;
		}

		// Calc the checksum
		// https://en.wikipedia.org/wiki/ABA_routing_transit_number
		for (var i = 0; i < length; i += 3) {
			checksum += parseInt(tokens[i], 10) * 3 + parseInt(tokens[i + 1], 10) * 7 + parseInt(tokens[i + 2], 10);
		}

		// If not zero and divisible by 10 then valid
		if (checksum !== 0 && checksum % 10 === 0) {
			return true;
		}

		return false;
	}, "Please enter a valid routing number.");

	// Accept a value from a file input based on a required mimetype
	$.validator.addMethod("accept", function (value, element, param) {

		// Split mime on commas in case we have multiple types we can accept
		var typeParam = typeof param === "string" ? param.replace(/\s/g, "") : "image/*",
		    optionalValue = this.optional(element),
		    i,
		    file,
		    regex;

		// Element is optional
		if (optionalValue) {
			return optionalValue;
		}

		if ($(element).attr("type") === "file") {

			// Escape string to be used in the regex
			// see: https://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex
			// Escape also "/*" as "/.*" as a wildcard
			typeParam = typeParam.replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g, "\\$&").replace(/,/g, "|").replace(/\/\*/g, "/.*");

			// Check if the element has a FileList before checking each file
			if (element.files && element.files.length) {
				regex = new RegExp(".?(" + typeParam + ")$", "i");
				for (i = 0; i < element.files.length; i++) {
					file = element.files[i];

					// Grab the mimetype from the loaded file, verify it matches
					if (!file.type.match(regex)) {
						return false;
					}
				}
			}
		}

		// Either return true because we've validated each file, or because the
		// browser does not support element.files and the FileList feature
		return true;
	}, $.validator.format("Please enter a value with a valid mimetype."));

	$.validator.addMethod("alphanumeric", function (value, element) {
		return this.optional(element) || /^\w+$/i.test(value);
	}, "Letters, numbers, and underscores only please");

	/*
  * Dutch bank account numbers (not 'giro' numbers) have 9 digits
  * and pass the '11 check'.
  * We accept the notation with spaces, as that is common.
  * acceptable: 123456789 or 12 34 56 789
  */
	$.validator.addMethod("bankaccountNL", function (value, element) {
		if (this.optional(element)) {
			return true;
		}
		if (!/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(value)) {
			return false;
		}

		// Now '11 check'
		var account = value.replace(/ /g, ""),
		    // Remove spaces
		sum = 0,
		    len = account.length,
		    pos,
		    factor,
		    digit;
		for (pos = 0; pos < len; pos++) {
			factor = len - pos;
			digit = account.substring(pos, pos + 1);
			sum = sum + factor * digit;
		}
		return sum % 11 === 0;
	}, "Please specify a valid bank account number");

	$.validator.addMethod("bankorgiroaccountNL", function (value, element) {
		return this.optional(element) || $.validator.methods.bankaccountNL.call(this, value, element) || $.validator.methods.giroaccountNL.call(this, value, element);
	}, "Please specify a valid bank or giro account number");

	/**
  * BIC is the business identifier code (ISO 9362). This BIC check is not a guarantee for authenticity.
  *
  * BIC pattern: BBBBCCLLbbb (8 or 11 characters long; bbb is optional)
  *
  * Validation is case-insensitive. Please make sure to normalize input yourself.
  *
  * BIC definition in detail:
  * - First 4 characters - bank code (only letters)
  * - Next 2 characters - ISO 3166-1 alpha-2 country code (only letters)
  * - Next 2 characters - location code (letters and digits)
  *   a. shall not start with '0' or '1'
  *   b. second character must be a letter ('O' is not allowed) or digit ('0' for test (therefore not allowed), '1' denoting passive participant, '2' typically reverse-billing)
  * - Last 3 characters - branch code, optional (shall not start with 'X' except in case of 'XXX' for primary office) (letters and digits)
  */
	$.validator.addMethod("bic", function (value, element) {
		return this.optional(element) || /^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/.test(value.toUpperCase());
	}, "Please specify a valid BIC code");

	/*
  * Código de identificación fiscal ( CIF ) is the tax identification code for Spanish legal entities
  * Further rules can be found in Spanish on http://es.wikipedia.org/wiki/C%C3%B3digo_de_identificaci%C3%B3n_fiscal
  *
  * Spanish CIF structure:
  *
  * [ T ][ P ][ P ][ N ][ N ][ N ][ N ][ N ][ C ]
  *
  * Where:
  *
  * T: 1 character. Kind of Organization Letter: [ABCDEFGHJKLMNPQRSUVW]
  * P: 2 characters. Province.
  * N: 5 characters. Secuencial Number within the province.
  * C: 1 character. Control Digit: [0-9A-J].
  *
  * [ T ]: Kind of Organizations. Possible values:
  *
  *   A. Corporations
  *   B. LLCs
  *   C. General partnerships
  *   D. Companies limited partnerships
  *   E. Communities of goods
  *   F. Cooperative Societies
  *   G. Associations
  *   H. Communities of homeowners in horizontal property regime
  *   J. Civil Societies
  *   K. Old format
  *   L. Old format
  *   M. Old format
  *   N. Nonresident entities
  *   P. Local authorities
  *   Q. Autonomous bodies, state or not, and the like, and congregations and religious institutions
  *   R. Congregations and religious institutions (since 2008 ORDER EHA/451/2008)
  *   S. Organs of State Administration and regions
  *   V. Agrarian Transformation
  *   W. Permanent establishments of non-resident in Spain
  *
  * [ C ]: Control Digit. It can be a number or a letter depending on T value:
  * [ T ]  -->  [ C ]
  * ------    ----------
  *   A         Number
  *   B         Number
  *   E         Number
  *   H         Number
  *   K         Letter
  *   P         Letter
  *   Q         Letter
  *   S         Letter
  *
  */
	$.validator.addMethod("cifES", function (value, element) {
		"use strict";

		if (this.optional(element)) {
			return true;
		}

		var cifRegEx = new RegExp(/^([ABCDEFGHJKLMNPQRSUVW])(\d{7})([0-9A-J])$/gi);
		var letter = value.substring(0, 1),
		    // [ T ]
		number = value.substring(1, 8),
		    // [ P ][ P ][ N ][ N ][ N ][ N ][ N ]
		control = value.substring(8, 9),
		    // [ C ]
		all_sum = 0,
		    even_sum = 0,
		    odd_sum = 0,
		    i,
		    n,
		    control_digit,
		    control_letter;

		function isOdd(n) {
			return n % 2 === 0;
		}

		// Quick format test
		if (value.length !== 9 || !cifRegEx.test(value)) {
			return false;
		}

		for (i = 0; i < number.length; i++) {
			n = parseInt(number[i], 10);

			// Odd positions
			if (isOdd(i)) {

				// Odd positions are multiplied first.
				n *= 2;

				// If the multiplication is bigger than 10 we need to adjust
				odd_sum += n < 10 ? n : n - 9;

				// Even positions
				// Just sum them
			} else {
				even_sum += n;
			}
		}

		all_sum = even_sum + odd_sum;
		control_digit = (10 - all_sum.toString().substr(-1)).toString();
		control_digit = parseInt(control_digit, 10) > 9 ? "0" : control_digit;
		control_letter = "JABCDEFGHI".substr(control_digit, 1).toString();

		// Control must be a digit
		if (letter.match(/[ABEH]/)) {
			return control === control_digit;

			// Control must be a letter
		} else if (letter.match(/[KPQS]/)) {
			return control === control_letter;
		}

		// Can be either
		return control === control_digit || control === control_letter;
	}, "Please specify a valid CIF number.");

	/*
  * Brazillian CNH number (Carteira Nacional de Habilitacao) is the License Driver number.
  * CNH numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.
  */
	$.validator.addMethod("cnhBR", function (value) {

		// Removing special characters from value
		value = value.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "");

		// Checking value to have 11 digits only
		if (value.length !== 11) {
			return false;
		}

		var sum = 0,
		    dsc = 0,
		    firstChar,
		    firstCN,
		    secondCN,
		    i,
		    j,
		    v;

		firstChar = value.charAt(0);

		if (new Array(12).join(firstChar) === value) {
			return false;
		}

		// Step 1 - using first Check Number:
		for (i = 0, j = 9, v = 0; i < 9; ++i, --j) {
			sum += +(value.charAt(i) * j);
		}

		firstCN = sum % 11;
		if (firstCN >= 10) {
			firstCN = 0;
			dsc = 2;
		}

		sum = 0;
		for (i = 0, j = 1, v = 0; i < 9; ++i, ++j) {
			sum += +(value.charAt(i) * j);
		}

		secondCN = sum % 11;
		if (secondCN >= 10) {
			secondCN = 0;
		} else {
			secondCN = secondCN - dsc;
		}

		return String(firstCN).concat(secondCN) === value.substr(-2);
	}, "Please specify a valid CNH number");

	/*
  * Brazillian value number (Cadastrado de Pessoas Juridica).
  * value numbers have 14 digits in total: 12 numbers followed by 2 check numbers that are being used for validation.
  */
	$.validator.addMethod("cnpjBR", function (value, element) {
		"use strict";

		if (this.optional(element)) {
			return true;
		}

		// Removing no number
		value = value.replace(/[^\d]+/g, "");

		// Checking value to have 14 digits only
		if (value.length !== 14) {
			return false;
		}

		// Elimina values invalidos conhecidos
		if (value === "00000000000000" || value === "11111111111111" || value === "22222222222222" || value === "33333333333333" || value === "44444444444444" || value === "55555555555555" || value === "66666666666666" || value === "77777777777777" || value === "88888888888888" || value === "99999999999999") {
			return false;
		}

		// Valida DVs
		var tamanho = value.length - 2;
		var numeros = value.substring(0, tamanho);
		var digitos = value.substring(tamanho);
		var soma = 0;
		var pos = tamanho - 7;

		for (var i = tamanho; i >= 1; i--) {
			soma += numeros.charAt(tamanho - i) * pos--;
			if (pos < 2) {
				pos = 9;
			}
		}

		var resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;

		if (resultado !== parseInt(digitos.charAt(0), 10)) {
			return false;
		}

		tamanho = tamanho + 1;
		numeros = value.substring(0, tamanho);
		soma = 0;
		pos = tamanho - 7;

		for (var il = tamanho; il >= 1; il--) {
			soma += numeros.charAt(tamanho - il) * pos--;
			if (pos < 2) {
				pos = 9;
			}
		}

		resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;

		if (resultado !== parseInt(digitos.charAt(1), 10)) {
			return false;
		}

		return true;
	}, "Please specify a CNPJ value number");

	/*
  * Brazillian CPF number (Cadastrado de Pessoas Físicas) is the equivalent of a Brazilian tax registration number.
  * CPF numbers have 11 digits in total: 9 numbers followed by 2 check numbers that are being used for validation.
  */
	$.validator.addMethod("cpfBR", function (value, element) {
		"use strict";

		if (this.optional(element)) {
			return true;
		}

		// Removing special characters from value
		value = value.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "");

		// Checking value to have 11 digits only
		if (value.length !== 11) {
			return false;
		}

		var sum = 0,
		    firstCN,
		    secondCN,
		    checkResult,
		    i;

		firstCN = parseInt(value.substring(9, 10), 10);
		secondCN = parseInt(value.substring(10, 11), 10);

		checkResult = function checkResult(sum, cn) {
			var result = sum * 10 % 11;
			if (result === 10 || result === 11) {
				result = 0;
			}
			return result === cn;
		};

		// Checking for dump data
		if (value === "" || value === "00000000000" || value === "11111111111" || value === "22222222222" || value === "33333333333" || value === "44444444444" || value === "55555555555" || value === "66666666666" || value === "77777777777" || value === "88888888888" || value === "99999999999") {
			return false;
		}

		// Step 1 - using first Check Number:
		for (i = 1; i <= 9; i++) {
			sum = sum + parseInt(value.substring(i - 1, i), 10) * (11 - i);
		}

		// If first Check Number (CN) is valid, move to Step 2 - using second Check Number:
		if (checkResult(sum, firstCN)) {
			sum = 0;
			for (i = 1; i <= 10; i++) {
				sum = sum + parseInt(value.substring(i - 1, i), 10) * (12 - i);
			}
			return checkResult(sum, secondCN);
		}
		return false;
	}, "Please specify a valid CPF number");

	// https://jqueryvalidation.org/creditcard-method/
	// based on https://en.wikipedia.org/wiki/Luhn_algorithm
	$.validator.addMethod("creditcard", function (value, element) {
		if (this.optional(element)) {
			return "dependency-mismatch";
		}

		// Accept only spaces, digits and dashes
		if (/[^0-9 \-]+/.test(value)) {
			return false;
		}

		var nCheck = 0,
		    nDigit = 0,
		    bEven = false,
		    n,
		    cDigit;

		value = value.replace(/\D/g, "");

		// Basing min and max length on
		// https://dev.ean.com/general-info/valid-card-types/
		if (value.length < 13 || value.length > 19) {
			return false;
		}

		for (n = value.length - 1; n >= 0; n--) {
			cDigit = value.charAt(n);
			nDigit = parseInt(cDigit, 10);
			if (bEven) {
				if ((nDigit *= 2) > 9) {
					nDigit -= 9;
				}
			}

			nCheck += nDigit;
			bEven = !bEven;
		}

		return nCheck % 10 === 0;
	}, "Please enter a valid credit card number.");

	/* NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator
  * Redistributed under the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0
  * Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)
  */
	$.validator.addMethod("creditcardtypes", function (value, element, param) {
		if (/[^0-9\-]+/.test(value)) {
			return false;
		}

		value = value.replace(/\D/g, "");

		var validTypes = 0x0000;

		if (param.mastercard) {
			validTypes |= 0x0001;
		}
		if (param.visa) {
			validTypes |= 0x0002;
		}
		if (param.amex) {
			validTypes |= 0x0004;
		}
		if (param.dinersclub) {
			validTypes |= 0x0008;
		}
		if (param.enroute) {
			validTypes |= 0x0010;
		}
		if (param.discover) {
			validTypes |= 0x0020;
		}
		if (param.jcb) {
			validTypes |= 0x0040;
		}
		if (param.unknown) {
			validTypes |= 0x0080;
		}
		if (param.all) {
			validTypes = 0x0001 | 0x0002 | 0x0004 | 0x0008 | 0x0010 | 0x0020 | 0x0040 | 0x0080;
		}
		if (validTypes & 0x0001 && (/^(5[12345])/.test(value) || /^(2[234567])/.test(value))) {
			// Mastercard
			return value.length === 16;
		}
		if (validTypes & 0x0002 && /^(4)/.test(value)) {
			// Visa
			return value.length === 16;
		}
		if (validTypes & 0x0004 && /^(3[47])/.test(value)) {
			// Amex
			return value.length === 15;
		}
		if (validTypes & 0x0008 && /^(3(0[012345]|[68]))/.test(value)) {
			// Dinersclub
			return value.length === 14;
		}
		if (validTypes & 0x0010 && /^(2(014|149))/.test(value)) {
			// Enroute
			return value.length === 15;
		}
		if (validTypes & 0x0020 && /^(6011)/.test(value)) {
			// Discover
			return value.length === 16;
		}
		if (validTypes & 0x0040 && /^(3)/.test(value)) {
			// Jcb
			return value.length === 16;
		}
		if (validTypes & 0x0040 && /^(2131|1800)/.test(value)) {
			// Jcb
			return value.length === 15;
		}
		if (validTypes & 0x0080) {
			// Unknown
			return true;
		}
		return false;
	}, "Please enter a valid credit card number.");

	/**
  * Validates currencies with any given symbols by @jameslouiz
  * Symbols can be optional or required. Symbols required by default
  *
  * Usage examples:
  *  currency: ["£", false] - Use false for soft currency validation
  *  currency: ["$", false]
  *  currency: ["RM", false] - also works with text based symbols such as "RM" - Malaysia Ringgit etc
  *
  *  <input class="currencyInput" name="currencyInput">
  *
  * Soft symbol checking
  *  currencyInput: {
  *     currency: ["$", false]
  *  }
  *
  * Strict symbol checking (default)
  *  currencyInput: {
  *     currency: "$"
  *     //OR
  *     currency: ["$", true]
  *  }
  *
  * Multiple Symbols
  *  currencyInput: {
  *     currency: "$,£,¢"
  *  }
  */
	$.validator.addMethod("currency", function (value, element, param) {
		var isParamString = typeof param === "string",
		    symbol = isParamString ? param : param[0],
		    soft = isParamString ? true : param[1],
		    regex;

		symbol = symbol.replace(/,/g, "");
		symbol = soft ? symbol + "]" : symbol + "]?";
		regex = "^[" + symbol + "([1-9]{1}[0-9]{0,2}(\\,[0-9]{3})*(\\.[0-9]{0,2})?|[1-9]{1}[0-9]{0,}(\\.[0-9]{0,2})?|0(\\.[0-9]{0,2})?|(\\.[0-9]{1,2})?)$";
		regex = new RegExp(regex);
		return this.optional(element) || regex.test(value);
	}, "Please specify a valid currency");

	$.validator.addMethod("dateFA", function (value, element) {
		return this.optional(element) || /^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$/.test(value);
	}, $.validator.messages.date);

	/**
  * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.
  *
  * @example $.validator.methods.date("01/01/1900")
  * @result true
  *
  * @example $.validator.methods.date("01/13/1990")
  * @result false
  *
  * @example $.validator.methods.date("01.01.1900")
  * @result false
  *
  * @example <input name="pippo" class="{dateITA:true}" />
  * @desc Declares an optional input element whose value must be a valid date.
  *
  * @name $.validator.methods.dateITA
  * @type Boolean
  * @cat Plugins/Validate/Methods
  */
	$.validator.addMethod("dateITA", function (value, element) {
		var check = false,
		    re = /^\d{1,2}\/\d{1,2}\/\d{4}$/,
		    adata,
		    gg,
		    mm,
		    aaaa,
		    xdata;
		if (re.test(value)) {
			adata = value.split("/");
			gg = parseInt(adata[0], 10);
			mm = parseInt(adata[1], 10);
			aaaa = parseInt(adata[2], 10);
			xdata = new Date(Date.UTC(aaaa, mm - 1, gg, 12, 0, 0, 0));
			if (xdata.getUTCFullYear() === aaaa && xdata.getUTCMonth() === mm - 1 && xdata.getUTCDate() === gg) {
				check = true;
			} else {
				check = false;
			}
		} else {
			check = false;
		}
		return this.optional(element) || check;
	}, $.validator.messages.date);

	$.validator.addMethod("dateNL", function (value, element) {
		return this.optional(element) || /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/.test(value);
	}, $.validator.messages.date);

	// Older "accept" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept
	$.validator.addMethod("extension", function (value, element, param) {
		param = typeof param === "string" ? param.replace(/,/g, "|") : "png|jpe?g|gif";
		return this.optional(element) || value.match(new RegExp("\\.(" + param + ")$", "i"));
	}, $.validator.format("Please enter a value with a valid extension."));

	/**
  * Dutch giro account numbers (not bank numbers) have max 7 digits
  */
	$.validator.addMethod("giroaccountNL", function (value, element) {
		return this.optional(element) || /^[0-9]{1,7}$/.test(value);
	}, "Please specify a valid giro account number");

	$.validator.addMethod("greaterThan", function (value, element, param) {
		var target = $(param);

		if (this.settings.onfocusout && target.not(".validate-greaterThan-blur").length) {
			target.addClass("validate-greaterThan-blur").on("blur.validate-greaterThan", function () {
				$(element).valid();
			});
		}

		return value > target.val();
	}, "Please enter a greater value.");

	$.validator.addMethod("greaterThanEqual", function (value, element, param) {
		var target = $(param);

		if (this.settings.onfocusout && target.not(".validate-greaterThanEqual-blur").length) {
			target.addClass("validate-greaterThanEqual-blur").on("blur.validate-greaterThanEqual", function () {
				$(element).valid();
			});
		}

		return value >= target.val();
	}, "Please enter a greater value.");

	/**
  * IBAN is the international bank account number.
  * It has a country - specific format, that is checked here too
  *
  * Validation is case-insensitive. Please make sure to normalize input yourself.
  */
	$.validator.addMethod("iban", function (value, element) {

		// Some quick simple tests to prevent needless work
		if (this.optional(element)) {
			return true;
		}

		// Remove spaces and to upper case
		var iban = value.replace(/ /g, "").toUpperCase(),
		    ibancheckdigits = "",
		    leadingZeroes = true,
		    cRest = "",
		    cOperator = "",
		    countrycode,
		    ibancheck,
		    charAt,
		    cChar,
		    bbanpattern,
		    bbancountrypatterns,
		    ibanregexp,
		    i,
		    p;

		// Check for IBAN code length.
		// It contains:
		// country code ISO 3166-1 - two letters,
		// two check digits,
		// Basic Bank Account Number (BBAN) - up to 30 chars
		var minimalIBANlength = 5;
		if (iban.length < minimalIBANlength) {
			return false;
		}

		// Check the country code and find the country specific format
		countrycode = iban.substring(0, 2);
		bbancountrypatterns = {
			"AL": "\\d{8}[\\dA-Z]{16}",
			"AD": "\\d{8}[\\dA-Z]{12}",
			"AT": "\\d{16}",
			"AZ": "[\\dA-Z]{4}\\d{20}",
			"BE": "\\d{12}",
			"BH": "[A-Z]{4}[\\dA-Z]{14}",
			"BA": "\\d{16}",
			"BR": "\\d{23}[A-Z][\\dA-Z]",
			"BG": "[A-Z]{4}\\d{6}[\\dA-Z]{8}",
			"CR": "\\d{17}",
			"HR": "\\d{17}",
			"CY": "\\d{8}[\\dA-Z]{16}",
			"CZ": "\\d{20}",
			"DK": "\\d{14}",
			"DO": "[A-Z]{4}\\d{20}",
			"EE": "\\d{16}",
			"FO": "\\d{14}",
			"FI": "\\d{14}",
			"FR": "\\d{10}[\\dA-Z]{11}\\d{2}",
			"GE": "[\\dA-Z]{2}\\d{16}",
			"DE": "\\d{18}",
			"GI": "[A-Z]{4}[\\dA-Z]{15}",
			"GR": "\\d{7}[\\dA-Z]{16}",
			"GL": "\\d{14}",
			"GT": "[\\dA-Z]{4}[\\dA-Z]{20}",
			"HU": "\\d{24}",
			"IS": "\\d{22}",
			"IE": "[\\dA-Z]{4}\\d{14}",
			"IL": "\\d{19}",
			"IT": "[A-Z]\\d{10}[\\dA-Z]{12}",
			"KZ": "\\d{3}[\\dA-Z]{13}",
			"KW": "[A-Z]{4}[\\dA-Z]{22}",
			"LV": "[A-Z]{4}[\\dA-Z]{13}",
			"LB": "\\d{4}[\\dA-Z]{20}",
			"LI": "\\d{5}[\\dA-Z]{12}",
			"LT": "\\d{16}",
			"LU": "\\d{3}[\\dA-Z]{13}",
			"MK": "\\d{3}[\\dA-Z]{10}\\d{2}",
			"MT": "[A-Z]{4}\\d{5}[\\dA-Z]{18}",
			"MR": "\\d{23}",
			"MU": "[A-Z]{4}\\d{19}[A-Z]{3}",
			"MC": "\\d{10}[\\dA-Z]{11}\\d{2}",
			"MD": "[\\dA-Z]{2}\\d{18}",
			"ME": "\\d{18}",
			"NL": "[A-Z]{4}\\d{10}",
			"NO": "\\d{11}",
			"PK": "[\\dA-Z]{4}\\d{16}",
			"PS": "[\\dA-Z]{4}\\d{21}",
			"PL": "\\d{24}",
			"PT": "\\d{21}",
			"RO": "[A-Z]{4}[\\dA-Z]{16}",
			"SM": "[A-Z]\\d{10}[\\dA-Z]{12}",
			"SA": "\\d{2}[\\dA-Z]{18}",
			"RS": "\\d{18}",
			"SK": "\\d{20}",
			"SI": "\\d{15}",
			"ES": "\\d{20}",
			"SE": "\\d{20}",
			"CH": "\\d{5}[\\dA-Z]{12}",
			"TN": "\\d{20}",
			"TR": "\\d{5}[\\dA-Z]{17}",
			"AE": "\\d{3}\\d{16}",
			"GB": "[A-Z]{4}\\d{14}",
			"VG": "[\\dA-Z]{4}\\d{16}"
		};

		bbanpattern = bbancountrypatterns[countrycode];

		// As new countries will start using IBAN in the
		// future, we only check if the countrycode is known.
		// This prevents false negatives, while almost all
		// false positives introduced by this, will be caught
		// by the checksum validation below anyway.
		// Strict checking should return FALSE for unknown
		// countries.
		if (typeof bbanpattern !== "undefined") {
			ibanregexp = new RegExp("^[A-Z]{2}\\d{2}" + bbanpattern + "$", "");
			if (!ibanregexp.test(iban)) {
				return false; // Invalid country specific format
			}
		}

		// Now check the checksum, first convert to digits
		ibancheck = iban.substring(4, iban.length) + iban.substring(0, 4);
		for (i = 0; i < ibancheck.length; i++) {
			charAt = ibancheck.charAt(i);
			if (charAt !== "0") {
				leadingZeroes = false;
			}
			if (!leadingZeroes) {
				ibancheckdigits += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".indexOf(charAt);
			}
		}

		// Calculate the result of: ibancheckdigits % 97
		for (p = 0; p < ibancheckdigits.length; p++) {
			cChar = ibancheckdigits.charAt(p);
			cOperator = "" + cRest + "" + cChar;
			cRest = cOperator % 97;
		}
		return cRest === 1;
	}, "Please specify a valid IBAN");

	$.validator.addMethod("integer", function (value, element) {
		return this.optional(element) || /^-?\d+$/.test(value);
	}, "A positive or negative non-decimal number please");

	$.validator.addMethod("ipv4", function (value, element) {
		return this.optional(element) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(value);
	}, "Please enter a valid IP v4 address.");

	$.validator.addMethod("ipv6", function (value, element) {
		return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);
	}, "Please enter a valid IP v6 address.");

	$.validator.addMethod("lessThan", function (value, element, param) {
		var target = $(param);

		if (this.settings.onfocusout && target.not(".validate-lessThan-blur").length) {
			target.addClass("validate-lessThan-blur").on("blur.validate-lessThan", function () {
				$(element).valid();
			});
		}

		return value < target.val();
	}, "Please enter a lesser value.");

	$.validator.addMethod("lessThanEqual", function (value, element, param) {
		var target = $(param);

		if (this.settings.onfocusout && target.not(".validate-lessThanEqual-blur").length) {
			target.addClass("validate-lessThanEqual-blur").on("blur.validate-lessThanEqual", function () {
				$(element).valid();
			});
		}

		return value <= target.val();
	}, "Please enter a lesser value.");

	$.validator.addMethod("lettersonly", function (value, element) {
		return this.optional(element) || /^[a-z]+$/i.test(value);
	}, "Letters only please");

	$.validator.addMethod("letterswithbasicpunc", function (value, element) {
		return this.optional(element) || /^[a-z\-.,()'"\s]+$/i.test(value);
	}, "Letters or punctuation only please");

	// Limit the number of files in a FileList.
	$.validator.addMethod("maxfiles", function (value, element, param) {
		if (this.optional(element)) {
			return true;
		}

		if ($(element).attr("type") === "file") {
			if (element.files && element.files.length > param) {
				return false;
			}
		}

		return true;
	}, $.validator.format("Please select no more than {0} files."));

	// Limit the size of each individual file in a FileList.
	$.validator.addMethod("maxsize", function (value, element, param) {
		if (this.optional(element)) {
			return true;
		}

		if ($(element).attr("type") === "file") {
			if (element.files && element.files.length) {
				for (var i = 0; i < element.files.length; i++) {
					if (element.files[i].size > param) {
						return false;
					}
				}
			}
		}

		return true;
	}, $.validator.format("File size must not exceed {0} bytes each."));

	// Limit the size of all files in a FileList.
	$.validator.addMethod("maxsizetotal", function (value, element, param) {
		if (this.optional(element)) {
			return true;
		}

		if ($(element).attr("type") === "file") {
			if (element.files && element.files.length) {
				var totalSize = 0;

				for (var i = 0; i < element.files.length; i++) {
					totalSize += element.files[i].size;
					if (totalSize > param) {
						return false;
					}
				}
			}
		}

		return true;
	}, $.validator.format("Total size of all files must not exceed {0} bytes."));

	$.validator.addMethod("mobileNL", function (value, element) {
		return this.optional(element) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)6((\s|\s?\-\s?)?[0-9]){8}$/.test(value);
	}, "Please specify a valid mobile number");

	$.validator.addMethod("mobileRU", function (phone_number, element) {
		var ruPhone_number = phone_number.replace(/\(|\)|\s+|-/g, "");
		return this.optional(element) || ruPhone_number.length > 9 && /^((\+7|7|8)+([0-9]){10})$/.test(ruPhone_number);
	}, "Please specify a valid mobile number");

	/* For UK phone functions, do the following server side processing:
  * Compare original input with this RegEx pattern:
  * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$
  * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'
  * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.
  * A number of very detailed GB telephone number RegEx patterns can also be found at:
  * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers
  */
	$.validator.addMethod("mobileUK", function (phone_number, element) {
		phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[1345789]\d{2}|624)\s?\d{3}\s?\d{3})$/);
	}, "Please specify a valid mobile number");

	$.validator.addMethod("netmask", function (value, element) {
		return this.optional(element) || /^(254|252|248|240|224|192|128)\.0\.0\.0|255\.(254|252|248|240|224|192|128|0)\.0\.0|255\.255\.(254|252|248|240|224|192|128|0)\.0|255\.255\.255\.(254|252|248|240|224|192|128|0)/i.test(value);
	}, "Please enter a valid netmask.");

	/*
  * The NIE (Número de Identificación de Extranjero) is a Spanish tax identification number assigned by the Spanish
  * authorities to any foreigner.
  *
  * The NIE is the equivalent of a Spaniards Número de Identificación Fiscal (NIF) which serves as a fiscal
  * identification number. The CIF number (Certificado de Identificación Fiscal) is equivalent to the NIF, but applies to
  * companies rather than individuals. The NIE consists of an 'X' or 'Y' followed by 7 or 8 digits then another letter.
  */
	$.validator.addMethod("nieES", function (value, element) {
		"use strict";

		if (this.optional(element)) {
			return true;
		}

		var nieRegEx = new RegExp(/^[MXYZ]{1}[0-9]{7,8}[TRWAGMYFPDXBNJZSQVHLCKET]{1}$/gi);
		var validChars = "TRWAGMYFPDXBNJZSQVHLCKET",
		    letter = value.substr(value.length - 1).toUpperCase(),
		    number;

		value = value.toString().toUpperCase();

		// Quick format test
		if (value.length > 10 || value.length < 9 || !nieRegEx.test(value)) {
			return false;
		}

		// X means same number
		// Y means number + 10000000
		// Z means number + 20000000
		value = value.replace(/^[X]/, "0").replace(/^[Y]/, "1").replace(/^[Z]/, "2");

		number = value.length === 9 ? value.substr(0, 8) : value.substr(0, 9);

		return validChars.charAt(parseInt(number, 10) % 23) === letter;
	}, "Please specify a valid NIE number.");

	/*
  * The Número de Identificación Fiscal ( NIF ) is the way tax identification used in Spain for individuals
  */
	$.validator.addMethod("nifES", function (value, element) {
		"use strict";

		if (this.optional(element)) {
			return true;
		}

		value = value.toUpperCase();

		// Basic format test
		if (!value.match("((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)")) {
			return false;
		}

		// Test NIF
		if (/^[0-9]{8}[A-Z]{1}$/.test(value)) {
			return "TRWAGMYFPDXBNJZSQVHLCKE".charAt(value.substring(8, 0) % 23) === value.charAt(8);
		}

		// Test specials NIF (starts with K, L or M)
		if (/^[KLM]{1}/.test(value)) {
			return value[8] === "TRWAGMYFPDXBNJZSQVHLCKE".charAt(value.substring(8, 1) % 23);
		}

		return false;
	}, "Please specify a valid NIF number.");

	/*
  * Numer identyfikacji podatkowej ( NIP ) is the way tax identification used in Poland for companies
  */
	$.validator.addMethod("nipPL", function (value) {
		"use strict";

		value = value.replace(/[^0-9]/g, "");

		if (value.length !== 10) {
			return false;
		}

		var arrSteps = [6, 5, 7, 2, 3, 4, 5, 6, 7];
		var intSum = 0;
		for (var i = 0; i < 9; i++) {
			intSum += arrSteps[i] * value[i];
		}
		var int2 = intSum % 11;
		var intControlNr = int2 === 10 ? 0 : int2;

		return intControlNr === parseInt(value[9], 10);
	}, "Please specify a valid NIP number.");

	/**
  * Created for project jquery-validation.
  * @Description Brazillian PIS or NIS number (Número de Identificação Social Pis ou Pasep) is the equivalent of a
  * Brazilian tax registration number NIS of PIS numbers have 11 digits in total: 10 numbers followed by 1 check numbers
  * that are being used for validation.
  * @copyright (c) 21/08/2018 13:14, Cleiton da Silva Mendonça
  * @author Cleiton da Silva Mendonça <cleiton.mendonca@gmail.com>
  * @link http://gitlab.com/csmendonca Gitlab of Cleiton da Silva Mendonça
  * @link http://github.com/csmendonca Github of Cleiton da Silva Mendonça
  */
	$.validator.addMethod("nisBR", function (value) {
		var number;
		var cn;
		var sum = 0;
		var dv;
		var count;
		var multiplier;

		// Removing special characters from value
		value = value.replace(/([~!@#$%^&*()_+=`{}\[\]\-|\\:;'<>,.\/? ])+/g, "");

		// Checking value to have 11 digits only
		if (value.length !== 11) {
			return false;
		}

		//Get check number of value
		cn = parseInt(value.substring(10, 11), 10);

		//Get number with 10 digits of the value
		number = parseInt(value.substring(0, 10), 10);

		for (count = 2; count < 12; count++) {
			multiplier = count;
			if (count === 10) {
				multiplier = 2;
			}
			if (count === 11) {
				multiplier = 3;
			}
			sum += number % 10 * multiplier;
			number = parseInt(number / 10, 10);
		}
		dv = sum % 11;

		if (dv > 1) {
			dv = 11 - dv;
		} else {
			dv = 0;
		}

		if (cn === dv) {
			return true;
		} else {
			return false;
		}
	}, "Please specify a valid NIS/PIS number");

	$.validator.addMethod("notEqualTo", function (value, element, param) {
		return this.optional(element) || !$.validator.methods.equalTo.call(this, value, element, param);
	}, "Please enter a different value, values must not be the same.");

	$.validator.addMethod("nowhitespace", function (value, element) {
		return this.optional(element) || /^\S+$/i.test(value);
	}, "No white space please");

	/**
 * Return true if the field value matches the given format RegExp
 *
 * @example $.validator.methods.pattern("AR1004",element,/^AR\d{4}$/)
 * @result true
 *
 * @example $.validator.methods.pattern("BR1004",element,/^AR\d{4}$/)
 * @result false
 *
 * @name $.validator.methods.pattern
 * @type Boolean
 * @cat Plugins/Validate/Methods
 */
	$.validator.addMethod("pattern", function (value, element, param) {
		if (this.optional(element)) {
			return true;
		}
		if (typeof param === "string") {
			param = new RegExp("^(?:" + param + ")$");
		}
		return param.test(value);
	}, "Invalid format.");

	/**
  * Dutch phone numbers have 10 digits (or 11 and start with +31).
  */
	$.validator.addMethod("phoneNL", function (value, element) {
		return this.optional(element) || /^((\+|00(\s|\s?\-\s?)?)31(\s|\s?\-\s?)?(\(0\)[\-\s]?)?|0)[1-9]((\s|\s?\-\s?)?[0-9]){8}$/.test(value);
	}, "Please specify a valid phone number.");

	/**
  * Polish telephone numbers have 9 digits.
  *
  * Mobile phone numbers starts with following digits:
  * 45, 50, 51, 53, 57, 60, 66, 69, 72, 73, 78, 79, 88.
  *
  * Fixed-line numbers starts with area codes:
  * 12, 13, 14, 15, 16, 17, 18, 22, 23, 24, 25, 29, 32, 33,
  * 34, 41, 42, 43, 44, 46, 48, 52, 54, 55, 56, 58, 59, 61,
  * 62, 63, 65, 67, 68, 71, 74, 75, 76, 77, 81, 82, 83, 84,
  * 85, 86, 87, 89, 91, 94, 95.
  *
  * Ministry of National Defence numbers and VoIP numbers starts with 26 and 39.
  *
  * Excludes intelligent networks (premium rate, shared cost, free phone numbers).
  *
  * Poland National Numbering Plan http://www.itu.int/oth/T02020000A8/en
  */
	$.validator.addMethod("phonePL", function (phone_number, element) {
		phone_number = phone_number.replace(/\s+/g, "");
		var regexp = /^(?:(?:(?:\+|00)?48)|(?:\(\+?48\)))?(?:1[2-8]|2[2-69]|3[2-49]|4[1-68]|5[0-9]|6[0-35-9]|[7-8][1-9]|9[145])\d{7}$/;
		return this.optional(element) || regexp.test(phone_number);
	}, "Please specify a valid phone number");

	/* For UK phone functions, do the following server side processing:
  * Compare original input with this RegEx pattern:
  * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$
  * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'
  * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.
  * A number of very detailed GB telephone number RegEx patterns can also be found at:
  * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers
  */

	// Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers
	$.validator.addMethod("phonesUK", function (phone_number, element) {
		phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[1345789]\d{8}|624\d{6})))$/);
	}, "Please specify a valid uk phone number");

	/* For UK phone functions, do the following server side processing:
  * Compare original input with this RegEx pattern:
  * ^\(?(?:(?:00\)?[\s\-]?\(?|\+)(44)\)?[\s\-]?\(?(?:0\)?[\s\-]?\(?)?|0)([1-9]\d{1,4}\)?[\s\d\-]+)$
  * Extract $1 and set $prefix to '+44<space>' if $1 is '44', otherwise set $prefix to '0'
  * Extract $2 and remove hyphens, spaces and parentheses. Phone number is combined $prefix and $2.
  * A number of very detailed GB telephone number RegEx patterns can also be found at:
  * http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers
  */
	$.validator.addMethod("phoneUK", function (phone_number, element) {
		phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:\d{2}\)?\s?\d{4}\s?\d{4}|\d{3}\)?\s?\d{3}\s?\d{3,4}|\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3})|\d{5}\)?\s?\d{4,5})$/);
	}, "Please specify a valid phone number");

	/**
  * Matches US phone number format
  *
  * where the area code may not start with 1 and the prefix may not start with 1
  * allows '-' or ' ' as a separator and allows parens around area code
  * some people may want to put a '1' in front of their number
  *
  * 1(212)-999-2345 or
  * 212 999 2344 or
  * 212-999-0983
  *
  * but not
  * 111-123-5434
  * and not
  * 212 123 4567
  */
	$.validator.addMethod("phoneUS", function (phone_number, element) {
		phone_number = phone_number.replace(/\s+/g, "");
		return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(\+?1-?)?(\([2-9]([02-9]\d|1[02-9])\)|[2-9]([02-9]\d|1[02-9]))-?[2-9]\d{2}-?\d{4}$/);
	}, "Please specify a valid phone number");

	/*
 * Valida CEPs do brasileiros:
 *
 * Formatos aceitos:
 * 99999-999
 * 99.999-999
 * 99999999
 */
	$.validator.addMethod("postalcodeBR", function (cep_value, element) {
		return this.optional(element) || /^\d{2}.\d{3}-\d{3}?$|^\d{5}-?\d{3}?$/.test(cep_value);
	}, "Informe um CEP válido.");

	/**
  * Matches a valid Canadian Postal Code
  *
  * @example jQuery.validator.methods.postalCodeCA( "H0H 0H0", element )
  * @result true
  *
  * @example jQuery.validator.methods.postalCodeCA( "H0H0H0", element )
  * @result false
  *
  * @name jQuery.validator.methods.postalCodeCA
  * @type Boolean
  * @cat Plugins/Validate/Methods
  */
	$.validator.addMethod("postalCodeCA", function (value, element) {
		return this.optional(element) || /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJKLMNPRSTVWXYZ] *\d[ABCEGHJKLMNPRSTVWXYZ]\d$/i.test(value);
	}, "Please specify a valid postal code");

	/* Matches Italian postcode (CAP) */
	$.validator.addMethod("postalcodeIT", function (value, element) {
		return this.optional(element) || /^\d{5}$/.test(value);
	}, "Please specify a valid postal code");

	$.validator.addMethod("postalcodeNL", function (value, element) {
		return this.optional(element) || /^[1-9][0-9]{3}\s?[a-zA-Z]{2}$/.test(value);
	}, "Please specify a valid postal code");

	// Matches UK postcode. Does not match to UK Channel Islands that have their own postcodes (non standard UK)
	$.validator.addMethod("postcodeUK", function (value, element) {
		return this.optional(element) || /^((([A-PR-UWYZ][0-9])|([A-PR-UWYZ][0-9][0-9])|([A-PR-UWYZ][A-HK-Y][0-9])|([A-PR-UWYZ][A-HK-Y][0-9][0-9])|([A-PR-UWYZ][0-9][A-HJKSTUW])|([A-PR-UWYZ][A-HK-Y][0-9][ABEHMNPRVWXY]))\s?([0-9][ABD-HJLNP-UW-Z]{2})|(GIR)\s?(0AA))$/i.test(value);
	}, "Please specify a valid UK postcode");

	/*
  * Lets you say "at least X inputs that match selector Y must be filled."
  *
  * The end result is that neither of these inputs:
  *
  *	<input class="productinfo" name="partnumber">
  *	<input class="productinfo" name="description">
  *
  *	...will validate unless at least one of them is filled.
  *
  * partnumber:	{require_from_group: [1,".productinfo"]},
  * description: {require_from_group: [1,".productinfo"]}
  *
  * options[0]: number of fields that must be filled in the group
  * options[1]: CSS selector that defines the group of conditionally required fields
  */
	$.validator.addMethod("require_from_group", function (value, element, options) {
		var $fields = $(options[1], element.form),
		    $fieldsFirst = $fields.eq(0),
		    validator = $fieldsFirst.data("valid_req_grp") ? $fieldsFirst.data("valid_req_grp") : $.extend({}, this),
		    isValid = $fields.filter(function () {
			return validator.elementValue(this);
		}).length >= options[0];

		// Store the cloned validator for future validation
		$fieldsFirst.data("valid_req_grp", validator);

		// If element isn't being validated, run each require_from_group field's validation rules
		if (!$(element).data("being_validated")) {
			$fields.data("being_validated", true);
			$fields.each(function () {
				validator.element(this);
			});
			$fields.data("being_validated", false);
		}
		return isValid;
	}, $.validator.format("Please fill at least {0} of these fields."));

	/*
  * Lets you say "either at least X inputs that match selector Y must be filled,
  * OR they must all be skipped (left blank)."
  *
  * The end result, is that none of these inputs:
  *
  *	<input class="productinfo" name="partnumber">
  *	<input class="productinfo" name="description">
  *	<input class="productinfo" name="color">
  *
  *	...will validate unless either at least two of them are filled,
  *	OR none of them are.
  *
  * partnumber:	{skip_or_fill_minimum: [2,".productinfo"]},
  * description: {skip_or_fill_minimum: [2,".productinfo"]},
  * color:		{skip_or_fill_minimum: [2,".productinfo"]}
  *
  * options[0]: number of fields that must be filled in the group
  * options[1]: CSS selector that defines the group of conditionally required fields
  *
  */
	$.validator.addMethod("skip_or_fill_minimum", function (value, element, options) {
		var $fields = $(options[1], element.form),
		    $fieldsFirst = $fields.eq(0),
		    validator = $fieldsFirst.data("valid_skip") ? $fieldsFirst.data("valid_skip") : $.extend({}, this),
		    numberFilled = $fields.filter(function () {
			return validator.elementValue(this);
		}).length,
		    isValid = numberFilled === 0 || numberFilled >= options[0];

		// Store the cloned validator for future validation
		$fieldsFirst.data("valid_skip", validator);

		// If element isn't being validated, run each skip_or_fill_minimum field's validation rules
		if (!$(element).data("being_validated")) {
			$fields.data("being_validated", true);
			$fields.each(function () {
				validator.element(this);
			});
			$fields.data("being_validated", false);
		}
		return isValid;
	}, $.validator.format("Please either skip these fields or fill at least {0} of them."));

	/* Validates US States and/or Territories by @jdforsythe
  * Can be case insensitive or require capitalization - default is case insensitive
  * Can include US Territories or not - default does not
  * Can include US Military postal abbreviations (AA, AE, AP) - default does not
  *
  * Note: "States" always includes DC (District of Colombia)
  *
  * Usage examples:
  *
  *  This is the default - case insensitive, no territories, no military zones
  *  stateInput: {
  *     caseSensitive: false,
  *     includeTerritories: false,
  *     includeMilitary: false
  *  }
  *
  *  Only allow capital letters, no territories, no military zones
  *  stateInput: {
  *     caseSensitive: false
  *  }
  *
  *  Case insensitive, include territories but not military zones
  *  stateInput: {
  *     includeTerritories: true
  *  }
  *
  *  Only allow capital letters, include territories and military zones
  *  stateInput: {
  *     caseSensitive: true,
  *     includeTerritories: true,
  *     includeMilitary: true
  *  }
  *
  */
	$.validator.addMethod("stateUS", function (value, element, options) {
		var isDefault = typeof options === "undefined",
		    caseSensitive = isDefault || typeof options.caseSensitive === "undefined" ? false : options.caseSensitive,
		    includeTerritories = isDefault || typeof options.includeTerritories === "undefined" ? false : options.includeTerritories,
		    includeMilitary = isDefault || typeof options.includeMilitary === "undefined" ? false : options.includeMilitary,
		    regex;

		if (!includeTerritories && !includeMilitary) {
			regex = "^(A[KLRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$";
		} else if (includeTerritories && includeMilitary) {
			regex = "^(A[AEKLPRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$";
		} else if (includeTerritories) {
			regex = "^(A[KLRSZ]|C[AOT]|D[CE]|FL|G[AU]|HI|I[ADLN]|K[SY]|LA|M[ADEINOPST]|N[CDEHJMVY]|O[HKR]|P[AR]|RI|S[CD]|T[NX]|UT|V[AIT]|W[AIVY])$";
		} else {
			regex = "^(A[AEKLPRZ]|C[AOT]|D[CE]|FL|GA|HI|I[ADLN]|K[SY]|LA|M[ADEINOST]|N[CDEHJMVY]|O[HKR]|PA|RI|S[CD]|T[NX]|UT|V[AT]|W[AIVY])$";
		}

		regex = caseSensitive ? new RegExp(regex) : new RegExp(regex, "i");
		return this.optional(element) || regex.test(value);
	}, "Please specify a valid state");

	// TODO check if value starts with <, otherwise don't try stripping anything
	$.validator.addMethod("strippedminlength", function (value, element, param) {
		return $(value).text().length >= param;
	}, $.validator.format("Please enter at least {0} characters"));

	$.validator.addMethod("time", function (value, element) {
		return this.optional(element) || /^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test(value);
	}, "Please enter a valid time, between 00:00 and 23:59");

	$.validator.addMethod("time12h", function (value, element) {
		return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i.test(value);
	}, "Please enter a valid time in 12-hour am/pm format");

	// Same as url, but TLD is optional
	$.validator.addMethod("url2", function (value, element) {
		return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
	}, $.validator.messages.url);

	/**
  * Return true, if the value is a valid vehicle identification number (VIN).
  *
  * Works with all kind of text inputs.
  *
  * @example <input type="text" size="20" name="VehicleID" class="{required:true,vinUS:true}" />
  * @desc Declares a required input element whose value must be a valid vehicle identification number.
  *
  * @name $.validator.methods.vinUS
  * @type Boolean
  * @cat Plugins/Validate/Methods
  */
	$.validator.addMethod("vinUS", function (v) {
		if (v.length !== 17) {
			return false;
		}

		var LL = ["A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"],
		    VL = [1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9],
		    FL = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],
		    rs = 0,
		    i,
		    n,
		    d,
		    f,
		    cd,
		    cdv;

		for (i = 0; i < 17; i++) {
			f = FL[i];
			d = v.slice(i, i + 1);
			if (i === 8) {
				cdv = d;
			}
			if (!isNaN(d)) {
				d *= f;
			} else {
				for (n = 0; n < LL.length; n++) {
					if (d.toUpperCase() === LL[n]) {
						d = VL[n];
						d *= f;
						if (isNaN(cdv) && n === 8) {
							cdv = LL[n];
						}
						break;
					}
				}
			}
			rs += d;
		}
		cd = rs % 11;
		if (cd === 10) {
			cd = "X";
		}
		if (cd === cdv) {
			return true;
		}
		return false;
	}, "The specified vehicle identification number (VIN) is invalid.");

	$.validator.addMethod("zipcodeUS", function (value, element) {
		return this.optional(element) || /^\d{5}(-\d{4})?$/.test(value);
	}, "The specified US ZIP Code is invalid");

	$.validator.addMethod("ziprange", function (value, element) {
		return this.optional(element) || /^90[2-5]\d\{2\}-\d{4}$/.test(value);
	}, "Your ZIP-code must be in the range 902xx-xxxx to 905xx-xxxx");
	return $;
});

/***/ }),

/***/ "./bower_components/jquery-validation/dist/jquery.validate.js":
/*!********************************************************************!*\
  !*** ./bower_components/jquery-validation/dist/jquery.validate.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery Validation Plugin v1.19.1
 *
 * https://jqueryvalidation.org/
 *
 * Copyright (c) 2019 Jörn Zaefferer
 * Released under the MIT license
 */
(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
})(function ($) {

	$.extend($.fn, {

		// https://jqueryvalidation.org/validate/
		validate: function validate(options) {

			// If nothing is selected, return nothing; can't chain anyway
			if (!this.length) {
				if (options && options.debug && window.console) {
					console.warn("Nothing selected, can't validate, returning nothing.");
				}
				return;
			}

			// Check if a validator for this form was already created
			var validator = $.data(this[0], "validator");
			if (validator) {
				return validator;
			}

			// Add novalidate tag if HTML5.
			this.attr("novalidate", "novalidate");

			validator = new $.validator(options, this[0]);
			$.data(this[0], "validator", validator);

			if (validator.settings.onsubmit) {

				this.on("click.validate", ":submit", function (event) {

					// Track the used submit button to properly handle scripted
					// submits later.
					validator.submitButton = event.currentTarget;

					// Allow suppressing validation by adding a cancel class to the submit button
					if ($(this).hasClass("cancel")) {
						validator.cancelSubmit = true;
					}

					// Allow suppressing validation by adding the html5 formnovalidate attribute to the submit button
					if ($(this).attr("formnovalidate") !== undefined) {
						validator.cancelSubmit = true;
					}
				});

				// Validate the form on submit
				this.on("submit.validate", function (event) {
					if (validator.settings.debug) {

						// Prevent form submit to be able to see console output
						event.preventDefault();
					}

					function handle() {
						var hidden, result;

						// Insert a hidden input as a replacement for the missing submit button
						// The hidden input is inserted in two cases:
						//   - A user defined a `submitHandler`
						//   - There was a pending request due to `remote` method and `stopRequest()`
						//     was called to submit the form in case it's valid
						if (validator.submitButton && (validator.settings.submitHandler || validator.formSubmitted)) {
							hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val($(validator.submitButton).val()).appendTo(validator.currentForm);
						}

						if (validator.settings.submitHandler && !validator.settings.debug) {
							result = validator.settings.submitHandler.call(validator, validator.currentForm, event);
							if (hidden) {

								// And clean up afterwards; thanks to no-block-scope, hidden can be referenced
								hidden.remove();
							}
							if (result !== undefined) {
								return result;
							}
							return false;
						}
						return true;
					}

					// Prevent submit for invalid forms or custom submit handlers
					if (validator.cancelSubmit) {
						validator.cancelSubmit = false;
						return handle();
					}
					if (validator.form()) {
						if (validator.pendingRequest) {
							validator.formSubmitted = true;
							return false;
						}
						return handle();
					} else {
						validator.focusInvalid();
						return false;
					}
				});
			}

			return validator;
		},

		// https://jqueryvalidation.org/valid/
		valid: function valid() {
			var valid, validator, errorList;

			if ($(this[0]).is("form")) {
				valid = this.validate().form();
			} else {
				errorList = [];
				valid = true;
				validator = $(this[0].form).validate();
				this.each(function () {
					valid = validator.element(this) && valid;
					if (!valid) {
						errorList = errorList.concat(validator.errorList);
					}
				});
				validator.errorList = errorList;
			}
			return valid;
		},

		// https://jqueryvalidation.org/rules/
		rules: function rules(command, argument) {
			var element = this[0],
			    isContentEditable = typeof this.attr("contenteditable") !== "undefined" && this.attr("contenteditable") !== "false",
			    settings,
			    staticRules,
			    existingRules,
			    data,
			    param,
			    filtered;

			// If nothing is selected, return empty object; can't chain anyway
			if (element == null) {
				return;
			}

			if (!element.form && isContentEditable) {
				element.form = this.closest("form")[0];
				element.name = this.attr("name");
			}

			if (element.form == null) {
				return;
			}

			if (command) {
				settings = $.data(element.form, "validator").settings;
				staticRules = settings.rules;
				existingRules = $.validator.staticRules(element);
				switch (command) {
					case "add":
						$.extend(existingRules, $.validator.normalizeRule(argument));

						// Remove messages from rules, but allow them to be set separately
						delete existingRules.messages;
						staticRules[element.name] = existingRules;
						if (argument.messages) {
							settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
						}
						break;
					case "remove":
						if (!argument) {
							delete staticRules[element.name];
							return existingRules;
						}
						filtered = {};
						$.each(argument.split(/\s/), function (index, method) {
							filtered[method] = existingRules[method];
							delete existingRules[method];
						});
						return filtered;
				}
			}

			data = $.validator.normalizeRules($.extend({}, $.validator.classRules(element), $.validator.attributeRules(element), $.validator.dataRules(element), $.validator.staticRules(element)), element);

			// Make sure required is at front
			if (data.required) {
				param = data.required;
				delete data.required;
				data = $.extend({ required: param }, data);
			}

			// Make sure remote is at back
			if (data.remote) {
				param = data.remote;
				delete data.remote;
				data = $.extend(data, { remote: param });
			}

			return data;
		}
	});

	// Custom selectors
	$.extend($.expr.pseudos || $.expr[":"], { // '|| $.expr[ ":" ]' here enables backwards compatibility to jQuery 1.7. Can be removed when dropping jQ 1.7.x support

		// https://jqueryvalidation.org/blank-selector/
		blank: function blank(a) {
			return !$.trim("" + $(a).val());
		},

		// https://jqueryvalidation.org/filled-selector/
		filled: function filled(a) {
			var val = $(a).val();
			return val !== null && !!$.trim("" + val);
		},

		// https://jqueryvalidation.org/unchecked-selector/
		unchecked: function unchecked(a) {
			return !$(a).prop("checked");
		}
	});

	// Constructor for validator
	$.validator = function (options, form) {
		this.settings = $.extend(true, {}, $.validator.defaults, options);
		this.currentForm = form;
		this.init();
	};

	// https://jqueryvalidation.org/jQuery.validator.format/
	$.validator.format = function (source, params) {
		if (arguments.length === 1) {
			return function () {
				var args = $.makeArray(arguments);
				args.unshift(source);
				return $.validator.format.apply(this, args);
			};
		}
		if (params === undefined) {
			return source;
		}
		if (arguments.length > 2 && params.constructor !== Array) {
			params = $.makeArray(arguments).slice(1);
		}
		if (params.constructor !== Array) {
			params = [params];
		}
		$.each(params, function (i, n) {
			source = source.replace(new RegExp("\\{" + i + "\\}", "g"), function () {
				return n;
			});
		});
		return source;
	};

	$.extend($.validator, {

		defaults: {
			messages: {},
			groups: {},
			rules: {},
			errorClass: "error",
			pendingClass: "pending",
			validClass: "valid",
			errorElement: "label",
			focusCleanup: false,
			focusInvalid: true,
			errorContainer: $([]),
			errorLabelContainer: $([]),
			onsubmit: true,
			ignore: ":hidden",
			ignoreTitle: false,
			onfocusin: function onfocusin(element) {
				this.lastActive = element;

				// Hide error label and remove error class on focus if enabled
				if (this.settings.focusCleanup) {
					if (this.settings.unhighlight) {
						this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
					}
					this.hideThese(this.errorsFor(element));
				}
			},
			onfocusout: function onfocusout(element) {
				if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
					this.element(element);
				}
			},
			onkeyup: function onkeyup(element, event) {

				// Avoid revalidate the field when pressing one of the following keys
				// Shift       => 16
				// Ctrl        => 17
				// Alt         => 18
				// Caps lock   => 20
				// End         => 35
				// Home        => 36
				// Left arrow  => 37
				// Up arrow    => 38
				// Right arrow => 39
				// Down arrow  => 40
				// Insert      => 45
				// Num lock    => 144
				// AltGr key   => 225
				var excludedKeys = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];

				if (event.which === 9 && this.elementValue(element) === "" || $.inArray(event.keyCode, excludedKeys) !== -1) {
					return;
				} else if (element.name in this.submitted || element.name in this.invalid) {
					this.element(element);
				}
			},
			onclick: function onclick(element) {

				// Click on selects, radiobuttons and checkboxes
				if (element.name in this.submitted) {
					this.element(element);

					// Or option elements, check parent select in that case
				} else if (element.parentNode.name in this.submitted) {
					this.element(element.parentNode);
				}
			},
			highlight: function highlight(element, errorClass, validClass) {
				if (element.type === "radio") {
					this.findByName(element.name).addClass(errorClass).removeClass(validClass);
				} else {
					$(element).addClass(errorClass).removeClass(validClass);
				}
			},
			unhighlight: function unhighlight(element, errorClass, validClass) {
				if (element.type === "radio") {
					this.findByName(element.name).removeClass(errorClass).addClass(validClass);
				} else {
					$(element).removeClass(errorClass).addClass(validClass);
				}
			}
		},

		// https://jqueryvalidation.org/jQuery.validator.setDefaults/
		setDefaults: function setDefaults(settings) {
			$.extend($.validator.defaults, settings);
		},

		messages: {
			required: "This field is required.",
			remote: "Please fix this field.",
			email: "Please enter a valid email address.",
			url: "Please enter a valid URL.",
			date: "Please enter a valid date.",
			dateISO: "Please enter a valid date (ISO).",
			number: "Please enter a valid number.",
			digits: "Please enter only digits.",
			equalTo: "Please enter the same value again.",
			maxlength: $.validator.format("Please enter no more than {0} characters."),
			minlength: $.validator.format("Please enter at least {0} characters."),
			rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
			range: $.validator.format("Please enter a value between {0} and {1}."),
			max: $.validator.format("Please enter a value less than or equal to {0}."),
			min: $.validator.format("Please enter a value greater than or equal to {0}."),
			step: $.validator.format("Please enter a multiple of {0}.")
		},

		autoCreateRanges: false,

		prototype: {

			init: function init() {
				this.labelContainer = $(this.settings.errorLabelContainer);
				this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
				this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
				this.submitted = {};
				this.valueCache = {};
				this.pendingRequest = 0;
				this.pending = {};
				this.invalid = {};
				this.reset();

				var currentForm = this.currentForm,
				    groups = this.groups = {},
				    rules;
				$.each(this.settings.groups, function (key, value) {
					if (typeof value === "string") {
						value = value.split(/\s/);
					}
					$.each(value, function (index, name) {
						groups[name] = key;
					});
				});
				rules = this.settings.rules;
				$.each(rules, function (key, value) {
					rules[key] = $.validator.normalizeRule(value);
				});

				function delegate(event) {
					var isContentEditable = typeof $(this).attr("contenteditable") !== "undefined" && $(this).attr("contenteditable") !== "false";

					// Set form expando on contenteditable
					if (!this.form && isContentEditable) {
						this.form = $(this).closest("form")[0];
						this.name = $(this).attr("name");
					}

					// Ignore the element if it belongs to another form. This will happen mainly
					// when setting the `form` attribute of an input to the id of another form.
					if (currentForm !== this.form) {
						return;
					}

					var validator = $.data(this.form, "validator"),
					    eventType = "on" + event.type.replace(/^validate/, ""),
					    settings = validator.settings;
					if (settings[eventType] && !$(this).is(settings.ignore)) {
						settings[eventType].call(validator, this, event);
					}
				}

				$(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], " + "[type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], " + "[type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], " + "[type='radio'], [type='checkbox'], [contenteditable], [type='button']", delegate)

				// Support: Chrome, oldIE
				// "select" is provided as event.target when clicking a option
				.on("click.validate", "select, option, [type='radio'], [type='checkbox']", delegate);

				if (this.settings.invalidHandler) {
					$(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler);
				}
			},

			// https://jqueryvalidation.org/Validator.form/
			form: function form() {
				this.checkForm();
				$.extend(this.submitted, this.errorMap);
				this.invalid = $.extend({}, this.errorMap);
				if (!this.valid()) {
					$(this.currentForm).triggerHandler("invalid-form", [this]);
				}
				this.showErrors();
				return this.valid();
			},

			checkForm: function checkForm() {
				this.prepareForm();
				for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) {
					this.check(elements[i]);
				}
				return this.valid();
			},

			// https://jqueryvalidation.org/Validator.element/
			element: function element(_element) {
				var cleanElement = this.clean(_element),
				    checkElement = this.validationTargetFor(cleanElement),
				    v = this,
				    result = true,
				    rs,
				    group;

				if (checkElement === undefined) {
					delete this.invalid[cleanElement.name];
				} else {
					this.prepareElement(checkElement);
					this.currentElements = $(checkElement);

					// If this element is grouped, then validate all group elements already
					// containing a value
					group = this.groups[checkElement.name];
					if (group) {
						$.each(this.groups, function (name, testgroup) {
							if (testgroup === group && name !== checkElement.name) {
								cleanElement = v.validationTargetFor(v.clean(v.findByName(name)));
								if (cleanElement && cleanElement.name in v.invalid) {
									v.currentElements.push(cleanElement);
									result = v.check(cleanElement) && result;
								}
							}
						});
					}

					rs = this.check(checkElement) !== false;
					result = result && rs;
					if (rs) {
						this.invalid[checkElement.name] = false;
					} else {
						this.invalid[checkElement.name] = true;
					}

					if (!this.numberOfInvalids()) {

						// Hide error containers on last error
						this.toHide = this.toHide.add(this.containers);
					}
					this.showErrors();

					// Add aria-invalid status for screen readers
					$(_element).attr("aria-invalid", !rs);
				}

				return result;
			},

			// https://jqueryvalidation.org/Validator.showErrors/
			showErrors: function showErrors(errors) {
				if (errors) {
					var validator = this;

					// Add items to error list and map
					$.extend(this.errorMap, errors);
					this.errorList = $.map(this.errorMap, function (message, name) {
						return {
							message: message,
							element: validator.findByName(name)[0]
						};
					});

					// Remove items from success list
					this.successList = $.grep(this.successList, function (element) {
						return !(element.name in errors);
					});
				}
				if (this.settings.showErrors) {
					this.settings.showErrors.call(this, this.errorMap, this.errorList);
				} else {
					this.defaultShowErrors();
				}
			},

			// https://jqueryvalidation.org/Validator.resetForm/
			resetForm: function resetForm() {
				if ($.fn.resetForm) {
					$(this.currentForm).resetForm();
				}
				this.invalid = {};
				this.submitted = {};
				this.prepareForm();
				this.hideErrors();
				var elements = this.elements().removeData("previousValue").removeAttr("aria-invalid");

				this.resetElements(elements);
			},

			resetElements: function resetElements(elements) {
				var i;

				if (this.settings.unhighlight) {
					for (i = 0; elements[i]; i++) {
						this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, "");
						this.findByName(elements[i].name).removeClass(this.settings.validClass);
					}
				} else {
					elements.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
				}
			},

			numberOfInvalids: function numberOfInvalids() {
				return this.objectLength(this.invalid);
			},

			objectLength: function objectLength(obj) {
				/* jshint unused: false */
				var count = 0,
				    i;
				for (i in obj) {

					// This check allows counting elements with empty error
					// message as invalid elements
					if (obj[i] !== undefined && obj[i] !== null && obj[i] !== false) {
						count++;
					}
				}
				return count;
			},

			hideErrors: function hideErrors() {
				this.hideThese(this.toHide);
			},

			hideThese: function hideThese(errors) {
				errors.not(this.containers).text("");
				this.addWrapper(errors).hide();
			},

			valid: function valid() {
				return this.size() === 0;
			},

			size: function size() {
				return this.errorList.length;
			},

			focusInvalid: function focusInvalid() {
				if (this.settings.focusInvalid) {
					try {
						$(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").trigger("focus")

						// Manually trigger focusin event; without it, focusin handler isn't called, findLastActive won't have anything to find
						.trigger("focusin");
					} catch (e) {

						// Ignore IE throwing errors when focusing hidden elements
					}
				}
			},

			findLastActive: function findLastActive() {
				var lastActive = this.lastActive;
				return lastActive && $.grep(this.errorList, function (n) {
					return n.element.name === lastActive.name;
				}).length === 1 && lastActive;
			},

			elements: function elements() {
				var validator = this,
				    rulesCache = {};

				// Select all valid inputs inside the form (no submit or reset buttons)
				return $(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function () {
					var name = this.name || $(this).attr("name"); // For contenteditable
					var isContentEditable = typeof $(this).attr("contenteditable") !== "undefined" && $(this).attr("contenteditable") !== "false";

					if (!name && validator.settings.debug && window.console) {
						console.error("%o has no name assigned", this);
					}

					// Set form expando on contenteditable
					if (isContentEditable) {
						this.form = $(this).closest("form")[0];
						this.name = name;
					}

					// Ignore elements that belong to other/nested forms
					if (this.form !== validator.currentForm) {
						return false;
					}

					// Select only the first element for each name, and only those with rules specified
					if (name in rulesCache || !validator.objectLength($(this).rules())) {
						return false;
					}

					rulesCache[name] = true;
					return true;
				});
			},

			clean: function clean(selector) {
				return $(selector)[0];
			},

			errors: function errors() {
				var errorClass = this.settings.errorClass.split(" ").join(".");
				return $(this.settings.errorElement + "." + errorClass, this.errorContext);
			},

			resetInternals: function resetInternals() {
				this.successList = [];
				this.errorList = [];
				this.errorMap = {};
				this.toShow = $([]);
				this.toHide = $([]);
			},

			reset: function reset() {
				this.resetInternals();
				this.currentElements = $([]);
			},

			prepareForm: function prepareForm() {
				this.reset();
				this.toHide = this.errors().add(this.containers);
			},

			prepareElement: function prepareElement(element) {
				this.reset();
				this.toHide = this.errorsFor(element);
			},

			elementValue: function elementValue(element) {
				var $element = $(element),
				    type = element.type,
				    isContentEditable = typeof $element.attr("contenteditable") !== "undefined" && $element.attr("contenteditable") !== "false",
				    val,
				    idx;

				if (type === "radio" || type === "checkbox") {
					return this.findByName(element.name).filter(":checked").val();
				} else if (type === "number" && typeof element.validity !== "undefined") {
					return element.validity.badInput ? "NaN" : $element.val();
				}

				if (isContentEditable) {
					val = $element.text();
				} else {
					val = $element.val();
				}

				if (type === "file") {

					// Modern browser (chrome & safari)
					if (val.substr(0, 12) === "C:\\fakepath\\") {
						return val.substr(12);
					}

					// Legacy browsers
					// Unix-based path
					idx = val.lastIndexOf("/");
					if (idx >= 0) {
						return val.substr(idx + 1);
					}

					// Windows-based path
					idx = val.lastIndexOf("\\");
					if (idx >= 0) {
						return val.substr(idx + 1);
					}

					// Just the file name
					return val;
				}

				if (typeof val === "string") {
					return val.replace(/\r/g, "");
				}
				return val;
			},

			check: function check(element) {
				element = this.validationTargetFor(this.clean(element));

				var rules = $(element).rules(),
				    rulesCount = $.map(rules, function (n, i) {
					return i;
				}).length,
				    dependencyMismatch = false,
				    val = this.elementValue(element),
				    result,
				    method,
				    rule,
				    normalizer;

				// Prioritize the local normalizer defined for this element over the global one
				// if the former exists, otherwise user the global one in case it exists.
				if (typeof rules.normalizer === "function") {
					normalizer = rules.normalizer;
				} else if (typeof this.settings.normalizer === "function") {
					normalizer = this.settings.normalizer;
				}

				// If normalizer is defined, then call it to retreive the changed value instead
				// of using the real one.
				// Note that `this` in the normalizer is `element`.
				if (normalizer) {
					val = normalizer.call(element, val);

					// Delete the normalizer from rules to avoid treating it as a pre-defined method.
					delete rules.normalizer;
				}

				for (method in rules) {
					rule = { method: method, parameters: rules[method] };
					try {
						result = $.validator.methods[method].call(this, val, element, rule.parameters);

						// If a method indicates that the field is optional and therefore valid,
						// don't mark it as valid when there are no other rules
						if (result === "dependency-mismatch" && rulesCount === 1) {
							dependencyMismatch = true;
							continue;
						}
						dependencyMismatch = false;

						if (result === "pending") {
							this.toHide = this.toHide.not(this.errorsFor(element));
							return;
						}

						if (!result) {
							this.formatAndAdd(element, rule);
							return false;
						}
					} catch (e) {
						if (this.settings.debug && window.console) {
							console.log("Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.", e);
						}
						if (e instanceof TypeError) {
							e.message += ".  Exception occurred when checking element " + element.id + ", check the '" + rule.method + "' method.";
						}

						throw e;
					}
				}
				if (dependencyMismatch) {
					return;
				}
				if (this.objectLength(rules)) {
					this.successList.push(element);
				}
				return true;
			},

			// Return the custom message for the given element and validation method
			// specified in the element's HTML5 data attribute
			// return the generic message if present and no method specific message is present
			customDataMessage: function customDataMessage(element, method) {
				return $(element).data("msg" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase()) || $(element).data("msg");
			},

			// Return the custom message for the given element name and validation method
			customMessage: function customMessage(name, method) {
				var m = this.settings.messages[name];
				return m && (m.constructor === String ? m : m[method]);
			},

			// Return the first defined argument, allowing empty strings
			findDefined: function findDefined() {
				for (var i = 0; i < arguments.length; i++) {
					if (arguments[i] !== undefined) {
						return arguments[i];
					}
				}
				return undefined;
			},

			// The second parameter 'rule' used to be a string, and extended to an object literal
			// of the following form:
			// rule = {
			//     method: "method name",
			//     parameters: "the given method parameters"
			// }
			//
			// The old behavior still supported, kept to maintain backward compatibility with
			// old code, and will be removed in the next major release.
			defaultMessage: function defaultMessage(element, rule) {
				if (typeof rule === "string") {
					rule = { method: rule };
				}

				var message = this.findDefined(this.customMessage(element.name, rule.method), this.customDataMessage(element, rule.method),

				// 'title' is never undefined, so handle empty string as undefined
				!this.settings.ignoreTitle && element.title || undefined, $.validator.messages[rule.method], "<strong>Warning: No message defined for " + element.name + "</strong>"),
				    theregex = /\$?\{(\d+)\}/g;
				if (typeof message === "function") {
					message = message.call(this, rule.parameters, element);
				} else if (theregex.test(message)) {
					message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
				}

				return message;
			},

			formatAndAdd: function formatAndAdd(element, rule) {
				var message = this.defaultMessage(element, rule);

				this.errorList.push({
					message: message,
					element: element,
					method: rule.method
				});

				this.errorMap[element.name] = message;
				this.submitted[element.name] = message;
			},

			addWrapper: function addWrapper(toToggle) {
				if (this.settings.wrapper) {
					toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
				}
				return toToggle;
			},

			defaultShowErrors: function defaultShowErrors() {
				var i, elements, error;
				for (i = 0; this.errorList[i]; i++) {
					error = this.errorList[i];
					if (this.settings.highlight) {
						this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
					}
					this.showLabel(error.element, error.message);
				}
				if (this.errorList.length) {
					this.toShow = this.toShow.add(this.containers);
				}
				if (this.settings.success) {
					for (i = 0; this.successList[i]; i++) {
						this.showLabel(this.successList[i]);
					}
				}
				if (this.settings.unhighlight) {
					for (i = 0, elements = this.validElements(); elements[i]; i++) {
						this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
					}
				}
				this.toHide = this.toHide.not(this.toShow);
				this.hideErrors();
				this.addWrapper(this.toShow).show();
			},

			validElements: function validElements() {
				return this.currentElements.not(this.invalidElements());
			},

			invalidElements: function invalidElements() {
				return $(this.errorList).map(function () {
					return this.element;
				});
			},

			showLabel: function showLabel(element, message) {
				var place,
				    group,
				    errorID,
				    v,
				    error = this.errorsFor(element),
				    elementID = this.idOrName(element),
				    describedBy = $(element).attr("aria-describedby");

				if (error.length) {

					// Refresh error/success class
					error.removeClass(this.settings.validClass).addClass(this.settings.errorClass);

					// Replace message on existing label
					error.html(message);
				} else {

					// Create error element
					error = $("<" + this.settings.errorElement + ">").attr("id", elementID + "-error").addClass(this.settings.errorClass).html(message || "");

					// Maintain reference to the element to be placed into the DOM
					place = error;
					if (this.settings.wrapper) {

						// Make sure the element is visible, even in IE
						// actually showing the wrapped element is handled elsewhere
						place = error.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
					}
					if (this.labelContainer.length) {
						this.labelContainer.append(place);
					} else if (this.settings.errorPlacement) {
						this.settings.errorPlacement.call(this, place, $(element));
					} else {
						place.insertAfter(element);
					}

					// Link error back to the element
					if (error.is("label")) {

						// If the error is a label, then associate using 'for'
						error.attr("for", elementID);

						// If the element is not a child of an associated label, then it's necessary
						// to explicitly apply aria-describedby
					} else if (error.parents("label[for='" + this.escapeCssMeta(elementID) + "']").length === 0) {
						errorID = error.attr("id");

						// Respect existing non-error aria-describedby
						if (!describedBy) {
							describedBy = errorID;
						} else if (!describedBy.match(new RegExp("\\b" + this.escapeCssMeta(errorID) + "\\b"))) {

							// Add to end of list if not already present
							describedBy += " " + errorID;
						}
						$(element).attr("aria-describedby", describedBy);

						// If this element is grouped, then assign to all elements in the same group
						group = this.groups[element.name];
						if (group) {
							v = this;
							$.each(v.groups, function (name, testgroup) {
								if (testgroup === group) {
									$("[name='" + v.escapeCssMeta(name) + "']", v.currentForm).attr("aria-describedby", error.attr("id"));
								}
							});
						}
					}
				}
				if (!message && this.settings.success) {
					error.text("");
					if (typeof this.settings.success === "string") {
						error.addClass(this.settings.success);
					} else {
						this.settings.success(error, element);
					}
				}
				this.toShow = this.toShow.add(error);
			},

			errorsFor: function errorsFor(element) {
				var name = this.escapeCssMeta(this.idOrName(element)),
				    describer = $(element).attr("aria-describedby"),
				    selector = "label[for='" + name + "'], label[for='" + name + "'] *";

				// 'aria-describedby' should directly reference the error element
				if (describer) {
					selector = selector + ", #" + this.escapeCssMeta(describer).replace(/\s+/g, ", #");
				}

				return this.errors().filter(selector);
			},

			// See https://api.jquery.com/category/selectors/, for CSS
			// meta-characters that should be escaped in order to be used with JQuery
			// as a literal part of a name/id or any selector.
			escapeCssMeta: function escapeCssMeta(string) {
				return string.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
			},

			idOrName: function idOrName(element) {
				return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
			},

			validationTargetFor: function validationTargetFor(element) {

				// If radio/checkbox, validate first element in group instead
				if (this.checkable(element)) {
					element = this.findByName(element.name);
				}

				// Always apply ignore filter
				return $(element).not(this.settings.ignore)[0];
			},

			checkable: function checkable(element) {
				return (/radio|checkbox/i.test(element.type)
				);
			},

			findByName: function findByName(name) {
				return $(this.currentForm).find("[name='" + this.escapeCssMeta(name) + "']");
			},

			getLength: function getLength(value, element) {
				switch (element.nodeName.toLowerCase()) {
					case "select":
						return $("option:selected", element).length;
					case "input":
						if (this.checkable(element)) {
							return this.findByName(element.name).filter(":checked").length;
						}
				}
				return value.length;
			},

			depend: function depend(param, element) {
				return this.dependTypes[typeof param === "undefined" ? "undefined" : _typeof(param)] ? this.dependTypes[typeof param === "undefined" ? "undefined" : _typeof(param)](param, element) : true;
			},

			dependTypes: {
				"boolean": function boolean(param) {
					return param;
				},
				"string": function string(param, element) {
					return !!$(param, element.form).length;
				},
				"function": function _function(param, element) {
					return param(element);
				}
			},

			optional: function optional(element) {
				var val = this.elementValue(element);
				return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
			},

			startRequest: function startRequest(element) {
				if (!this.pending[element.name]) {
					this.pendingRequest++;
					$(element).addClass(this.settings.pendingClass);
					this.pending[element.name] = true;
				}
			},

			stopRequest: function stopRequest(element, valid) {
				this.pendingRequest--;

				// Sometimes synchronization fails, make sure pendingRequest is never < 0
				if (this.pendingRequest < 0) {
					this.pendingRequest = 0;
				}
				delete this.pending[element.name];
				$(element).removeClass(this.settings.pendingClass);
				if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {
					$(this.currentForm).submit();

					// Remove the hidden input that was used as a replacement for the
					// missing submit button. The hidden input is added by `handle()`
					// to ensure that the value of the used submit button is passed on
					// for scripted submits triggered by this method
					if (this.submitButton) {
						$("input:hidden[name='" + this.submitButton.name + "']", this.currentForm).remove();
					}

					this.formSubmitted = false;
				} else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
					$(this.currentForm).triggerHandler("invalid-form", [this]);
					this.formSubmitted = false;
				}
			},

			previousValue: function previousValue(element, method) {
				method = typeof method === "string" && method || "remote";

				return $.data(element, "previousValue") || $.data(element, "previousValue", {
					old: null,
					valid: true,
					message: this.defaultMessage(element, { method: method })
				});
			},

			// Cleans up all forms and elements, removes validator-specific events
			destroy: function destroy() {
				this.resetForm();

				$(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur").find(".validate-lessThan-blur").off(".validate-lessThan").removeClass("validate-lessThan-blur").find(".validate-lessThanEqual-blur").off(".validate-lessThanEqual").removeClass("validate-lessThanEqual-blur").find(".validate-greaterThanEqual-blur").off(".validate-greaterThanEqual").removeClass("validate-greaterThanEqual-blur").find(".validate-greaterThan-blur").off(".validate-greaterThan").removeClass("validate-greaterThan-blur");
			}

		},

		classRuleSettings: {
			required: { required: true },
			email: { email: true },
			url: { url: true },
			date: { date: true },
			dateISO: { dateISO: true },
			number: { number: true },
			digits: { digits: true },
			creditcard: { creditcard: true }
		},

		addClassRules: function addClassRules(className, rules) {
			if (className.constructor === String) {
				this.classRuleSettings[className] = rules;
			} else {
				$.extend(this.classRuleSettings, className);
			}
		},

		classRules: function classRules(element) {
			var rules = {},
			    classes = $(element).attr("class");

			if (classes) {
				$.each(classes.split(" "), function () {
					if (this in $.validator.classRuleSettings) {
						$.extend(rules, $.validator.classRuleSettings[this]);
					}
				});
			}
			return rules;
		},

		normalizeAttributeRule: function normalizeAttributeRule(rules, type, method, value) {

			// Convert the value to a number for number inputs, and for text for backwards compability
			// allows type="date" and others to be compared as strings
			if (/min|max|step/.test(method) && (type === null || /number|range|text/.test(type))) {
				value = Number(value);

				// Support Opera Mini, which returns NaN for undefined minlength
				if (isNaN(value)) {
					value = undefined;
				}
			}

			if (value || value === 0) {
				rules[method] = value;
			} else if (type === method && type !== "range") {

				// Exception: the jquery validate 'range' method
				// does not test for the html5 'range' type
				rules[method] = true;
			}
		},

		attributeRules: function attributeRules(element) {
			var rules = {},
			    $element = $(element),
			    type = element.getAttribute("type"),
			    method,
			    value;

			for (method in $.validator.methods) {

				// Support for <input required> in both html5 and older browsers
				if (method === "required") {
					value = element.getAttribute(method);

					// Some browsers return an empty string for the required attribute
					// and non-HTML5 browsers might have required="" markup
					if (value === "") {
						value = true;
					}

					// Force non-HTML5 browsers to return bool
					value = !!value;
				} else {
					value = $element.attr(method);
				}

				this.normalizeAttributeRule(rules, type, method, value);
			}

			// 'maxlength' may be returned as -1, 2147483647 ( IE ) and 524288 ( safari ) for text inputs
			if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
				delete rules.maxlength;
			}

			return rules;
		},

		dataRules: function dataRules(element) {
			var rules = {},
			    $element = $(element),
			    type = element.getAttribute("type"),
			    method,
			    value;

			for (method in $.validator.methods) {
				value = $element.data("rule" + method.charAt(0).toUpperCase() + method.substring(1).toLowerCase());

				// Cast empty attributes like `data-rule-required` to `true`
				if (value === "") {
					value = true;
				}

				this.normalizeAttributeRule(rules, type, method, value);
			}
			return rules;
		},

		staticRules: function staticRules(element) {
			var rules = {},
			    validator = $.data(element.form, "validator");

			if (validator.settings.rules) {
				rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
			}
			return rules;
		},

		normalizeRules: function normalizeRules(rules, element) {

			// Handle dependency check
			$.each(rules, function (prop, val) {

				// Ignore rule when param is explicitly false, eg. required:false
				if (val === false) {
					delete rules[prop];
					return;
				}
				if (val.param || val.depends) {
					var keepRule = true;
					switch (_typeof(val.depends)) {
						case "string":
							keepRule = !!$(val.depends, element.form).length;
							break;
						case "function":
							keepRule = val.depends.call(element, element);
							break;
					}
					if (keepRule) {
						rules[prop] = val.param !== undefined ? val.param : true;
					} else {
						$.data(element.form, "validator").resetElements($(element));
						delete rules[prop];
					}
				}
			});

			// Evaluate parameters
			$.each(rules, function (rule, parameter) {
				rules[rule] = $.isFunction(parameter) && rule !== "normalizer" ? parameter(element) : parameter;
			});

			// Clean number parameters
			$.each(["minlength", "maxlength"], function () {
				if (rules[this]) {
					rules[this] = Number(rules[this]);
				}
			});
			$.each(["rangelength", "range"], function () {
				var parts;
				if (rules[this]) {
					if ($.isArray(rules[this])) {
						rules[this] = [Number(rules[this][0]), Number(rules[this][1])];
					} else if (typeof rules[this] === "string") {
						parts = rules[this].replace(/[\[\]]/g, "").split(/[\s,]+/);
						rules[this] = [Number(parts[0]), Number(parts[1])];
					}
				}
			});

			if ($.validator.autoCreateRanges) {

				// Auto-create ranges
				if (rules.min != null && rules.max != null) {
					rules.range = [rules.min, rules.max];
					delete rules.min;
					delete rules.max;
				}
				if (rules.minlength != null && rules.maxlength != null) {
					rules.rangelength = [rules.minlength, rules.maxlength];
					delete rules.minlength;
					delete rules.maxlength;
				}
			}

			return rules;
		},

		// Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
		normalizeRule: function normalizeRule(data) {
			if (typeof data === "string") {
				var transformed = {};
				$.each(data.split(/\s/), function () {
					transformed[this] = true;
				});
				data = transformed;
			}
			return data;
		},

		// https://jqueryvalidation.org/jQuery.validator.addMethod/
		addMethod: function addMethod(name, method, message) {
			$.validator.methods[name] = method;
			$.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
			if (method.length < 3) {
				$.validator.addClassRules(name, $.validator.normalizeRule(name));
			}
		},

		// https://jqueryvalidation.org/jQuery.validator.methods/
		methods: {

			// https://jqueryvalidation.org/required-method/
			required: function required(value, element, param) {

				// Check if dependency is met
				if (!this.depend(param, element)) {
					return "dependency-mismatch";
				}
				if (element.nodeName.toLowerCase() === "select") {

					// Could be an array for select-multiple or a string, both are fine this way
					var val = $(element).val();
					return val && val.length > 0;
				}
				if (this.checkable(element)) {
					return this.getLength(value, element) > 0;
				}
				return value !== undefined && value !== null && value.length > 0;
			},

			// https://jqueryvalidation.org/email-method/
			email: function email(value, element) {

				// From https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address
				// Retrieved 2014-01-14
				// If you have a problem with this implementation, report a bug against the above spec
				// Or use custom methods to implement your own email validation
				return this.optional(element) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(value);
			},

			// https://jqueryvalidation.org/url-method/
			url: function url(value, element) {

				// Copyright (c) 2010-2013 Diego Perini, MIT licensed
				// https://gist.github.com/dperini/729294
				// see also https://mathiasbynens.be/demo/url-regex
				// modified to allow protocol-relative URLs
				return this.optional(element) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(value);
			},

			// https://jqueryvalidation.org/date-method/
			date: function () {
				var called = false;

				return function (value, element) {
					if (!called) {
						called = true;
						if (this.settings.debug && window.console) {
							console.warn("The `date` method is deprecated and will be removed in version '2.0.0'.\n" + "Please don't use it, since it relies on the Date constructor, which\n" + "behaves very differently across browsers and locales. Use `dateISO`\n" + "instead or one of the locale specific methods in `localizations/`\n" + "and `additional-methods.js`.");
						}
					}

					return this.optional(element) || !/Invalid|NaN/.test(new Date(value).toString());
				};
			}(),

			// https://jqueryvalidation.org/dateISO-method/
			dateISO: function dateISO(value, element) {
				return this.optional(element) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(value);
			},

			// https://jqueryvalidation.org/number-method/
			number: function number(value, element) {
				return this.optional(element) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
			},

			// https://jqueryvalidation.org/digits-method/
			digits: function digits(value, element) {
				return this.optional(element) || /^\d+$/.test(value);
			},

			// https://jqueryvalidation.org/minlength-method/
			minlength: function minlength(value, element, param) {
				var length = $.isArray(value) ? value.length : this.getLength(value, element);
				return this.optional(element) || length >= param;
			},

			// https://jqueryvalidation.org/maxlength-method/
			maxlength: function maxlength(value, element, param) {
				var length = $.isArray(value) ? value.length : this.getLength(value, element);
				return this.optional(element) || length <= param;
			},

			// https://jqueryvalidation.org/rangelength-method/
			rangelength: function rangelength(value, element, param) {
				var length = $.isArray(value) ? value.length : this.getLength(value, element);
				return this.optional(element) || length >= param[0] && length <= param[1];
			},

			// https://jqueryvalidation.org/min-method/
			min: function min(value, element, param) {
				return this.optional(element) || value >= param;
			},

			// https://jqueryvalidation.org/max-method/
			max: function max(value, element, param) {
				return this.optional(element) || value <= param;
			},

			// https://jqueryvalidation.org/range-method/
			range: function range(value, element, param) {
				return this.optional(element) || value >= param[0] && value <= param[1];
			},

			// https://jqueryvalidation.org/step-method/
			step: function step(value, element, param) {
				var type = $(element).attr("type"),
				    errorMessage = "Step attribute on input type " + type + " is not supported.",
				    supportedTypes = ["text", "number", "range"],
				    re = new RegExp("\\b" + type + "\\b"),
				    notSupported = type && !re.test(supportedTypes.join()),
				    decimalPlaces = function decimalPlaces(num) {
					var match = ("" + num).match(/(?:\.(\d+))?$/);
					if (!match) {
						return 0;
					}

					// Number of digits right of decimal point.
					return match[1] ? match[1].length : 0;
				},
				    toInt = function toInt(num) {
					return Math.round(num * Math.pow(10, decimals));
				},
				    valid = true,
				    decimals;

				// Works only for text, number and range input types
				// TODO find a way to support input types date, datetime, datetime-local, month, time and week
				if (notSupported) {
					throw new Error(errorMessage);
				}

				decimals = decimalPlaces(param);

				// Value can't have too many decimals
				if (decimalPlaces(value) > decimals || toInt(value) % toInt(param) !== 0) {
					valid = false;
				}

				return this.optional(element) || valid;
			},

			// https://jqueryvalidation.org/equalTo-method/
			equalTo: function equalTo(value, element, param) {

				// Bind to the blur event of the target in order to revalidate whenever the target field is updated
				var target = $(param);
				if (this.settings.onfocusout && target.not(".validate-equalTo-blur").length) {
					target.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function () {
						$(element).valid();
					});
				}
				return value === target.val();
			},

			// https://jqueryvalidation.org/remote-method/
			remote: function remote(value, element, param, method) {
				if (this.optional(element)) {
					return "dependency-mismatch";
				}

				method = typeof method === "string" && method || "remote";

				var previous = this.previousValue(element, method),
				    validator,
				    data,
				    optionDataString;

				if (!this.settings.messages[element.name]) {
					this.settings.messages[element.name] = {};
				}
				previous.originalMessage = previous.originalMessage || this.settings.messages[element.name][method];
				this.settings.messages[element.name][method] = previous.message;

				param = typeof param === "string" && { url: param } || param;
				optionDataString = $.param($.extend({ data: value }, param.data));
				if (previous.old === optionDataString) {
					return previous.valid;
				}

				previous.old = optionDataString;
				validator = this;
				this.startRequest(element);
				data = {};
				data[element.name] = value;
				$.ajax($.extend(true, {
					mode: "abort",
					port: "validate" + element.name,
					dataType: "json",
					data: data,
					context: validator.currentForm,
					success: function success(response) {
						var valid = response === true || response === "true",
						    errors,
						    message,
						    submitted;

						validator.settings.messages[element.name][method] = previous.originalMessage;
						if (valid) {
							submitted = validator.formSubmitted;
							validator.resetInternals();
							validator.toHide = validator.errorsFor(element);
							validator.formSubmitted = submitted;
							validator.successList.push(element);
							validator.invalid[element.name] = false;
							validator.showErrors();
						} else {
							errors = {};
							message = response || validator.defaultMessage(element, { method: method, parameters: value });
							errors[element.name] = previous.message = message;
							validator.invalid[element.name] = true;
							validator.showErrors(errors);
						}
						previous.valid = valid;
						validator.stopRequest(element, valid);
					}
				}, param));
				return "pending";
			}
		}

	});

	// Ajax mode: abort
	// usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
	// if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()

	var pendingRequests = {},
	    ajax;

	// Use a prefilter if available (1.5+)
	if ($.ajaxPrefilter) {
		$.ajaxPrefilter(function (settings, _, xhr) {
			var port = settings.port;
			if (settings.mode === "abort") {
				if (pendingRequests[port]) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = xhr;
			}
		});
	} else {

		// Proxy ajax
		ajax = $.ajax;
		$.ajax = function (settings) {
			var mode = ("mode" in settings ? settings : $.ajaxSettings).mode,
			    port = ("port" in settings ? settings : $.ajaxSettings).port;
			if (mode === "abort") {
				if (pendingRequests[port]) {
					pendingRequests[port].abort();
				}
				pendingRequests[port] = ajax.apply(this, arguments);
				return pendingRequests[port];
			}
			return ajax.apply(this, arguments);
		};
	}
	return $;
});

/***/ }),

/***/ "./bower_components/jquery-validation/dist/localization/messages_ru.js":
/*!*****************************************************************************!*\
  !*** ./bower_components/jquery-validation/dist/localization/messages_ru.js ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (factory) {
	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery"), __webpack_require__(/*! ../jquery.validate */ "./bower_components/jquery-validation/dist/jquery.validate.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
})(function ($) {

	/*
  * Translated default messages for the jQuery validation plugin.
  * Locale: RU (Russian; русский язык)
  */
	$.extend($.validator.messages, {
		required: "Это поле необходимо заполнить.",
		remote: "Пожалуйста, введите правильное значение.",
		email: "Пожалуйста, введите корректный адрес электронной почты.",
		url: "Пожалуйста, введите корректный URL.",
		date: "Пожалуйста, введите корректную дату.",
		dateISO: "Пожалуйста, введите корректную дату в формате ISO.",
		number: "Пожалуйста, введите число.",
		digits: "Пожалуйста, вводите только цифры.",
		creditcard: "Пожалуйста, введите правильный номер кредитной карты.",
		equalTo: "Пожалуйста, введите такое же значение ещё раз.",
		extension: "Пожалуйста, выберите файл с правильным расширением.",
		maxlength: $.validator.format("Пожалуйста, введите не больше {0} символов."),
		minlength: $.validator.format("Пожалуйста, введите не меньше {0} символов."),
		rangelength: $.validator.format("Пожалуйста, введите значение длиной от {0} до {1} символов."),
		range: $.validator.format("Пожалуйста, введите число от {0} до {1}."),
		max: $.validator.format("Пожалуйста, введите число, меньшее или равное {0}."),
		min: $.validator.format("Пожалуйста, введите число, большее или равное {0}.")
	});
	return $;
});

/***/ }),

/***/ "./bower_components/jquery.maskedinput/dist/jquery.maskedinput.js":
/*!************************************************************************!*\
  !*** ./bower_components/jquery.maskedinput/dist/jquery.maskedinput.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
    jQuery Masked Input Plugin
    Copyright (c) 2007 - 2015 Josh Bush (digitalbush.com)
    Licensed under the MIT license (http://digitalbush.com/projects/masked-input-plugin/#license)
    Version: 1.4.1
*/
!function (factory) {
     true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(function ($) {
    var caretTimeoutId,
        ua = navigator.userAgent,
        iPhone = /iphone/i.test(ua),
        chrome = /chrome/i.test(ua),
        android = /android/i.test(ua);
    $.mask = {
        definitions: {
            "9": "[0-9]",
            a: "[A-Za-z]",
            "*": "[A-Za-z0-9]"
        },
        autoclear: !0,
        dataName: "rawMaskFn",
        placeholder: "_"
    }, $.fn.extend({
        caret: function caret(begin, end) {
            var range;
            if (0 !== this.length && !this.is(":hidden")) return "number" == typeof begin ? (end = "number" == typeof end ? end : begin, this.each(function () {
                this.setSelectionRange ? this.setSelectionRange(begin, end) : this.createTextRange && (range = this.createTextRange(), range.collapse(!0), range.moveEnd("character", end), range.moveStart("character", begin), range.select());
            })) : (this[0].setSelectionRange ? (begin = this[0].selectionStart, end = this[0].selectionEnd) : document.selection && document.selection.createRange && (range = document.selection.createRange(), begin = 0 - range.duplicate().moveStart("character", -1e5), end = begin + range.text.length), {
                begin: begin,
                end: end
            });
        },
        unmask: function unmask() {
            return this.trigger("unmask");
        },
        mask: function mask(_mask, settings) {
            var input, defs, tests, partialPosition, firstNonMaskPos, lastRequiredNonMaskPos, len, oldVal;
            if (!_mask && this.length > 0) {
                input = $(this[0]);
                var fn = input.data($.mask.dataName);
                return fn ? fn() : void 0;
            }
            return settings = $.extend({
                autoclear: $.mask.autoclear,
                placeholder: $.mask.placeholder,
                completed: null
            }, settings), defs = $.mask.definitions, tests = [], partialPosition = len = _mask.length, firstNonMaskPos = null, $.each(_mask.split(""), function (i, c) {
                "?" == c ? (len--, partialPosition = i) : defs[c] ? (tests.push(new RegExp(defs[c])), null === firstNonMaskPos && (firstNonMaskPos = tests.length - 1), partialPosition > i && (lastRequiredNonMaskPos = tests.length - 1)) : tests.push(null);
            }), this.trigger("unmask").each(function () {
                function tryFireCompleted() {
                    if (settings.completed) {
                        for (var i = firstNonMaskPos; lastRequiredNonMaskPos >= i; i++) {
                            if (tests[i] && buffer[i] === getPlaceholder(i)) return;
                        }settings.completed.call(input);
                    }
                }
                function getPlaceholder(i) {
                    return settings.placeholder.charAt(i < settings.placeholder.length ? i : 0);
                }
                function seekNext(pos) {
                    for (; ++pos < len && !tests[pos];) {}
                    return pos;
                }
                function seekPrev(pos) {
                    for (; --pos >= 0 && !tests[pos];) {}
                    return pos;
                }
                function shiftL(begin, end) {
                    var i, j;
                    if (!(0 > begin)) {
                        for (i = begin, j = seekNext(end); len > i; i++) {
                            if (tests[i]) {
                                if (!(len > j && tests[i].test(buffer[j]))) break;
                                buffer[i] = buffer[j], buffer[j] = getPlaceholder(j), j = seekNext(j);
                            }
                        }writeBuffer(), input.caret(Math.max(firstNonMaskPos, begin));
                    }
                }
                function shiftR(pos) {
                    var i, c, j, t;
                    for (i = pos, c = getPlaceholder(pos); len > i; i++) {
                        if (tests[i]) {
                            if (j = seekNext(i), t = buffer[i], buffer[i] = c, !(len > j && tests[j].test(t))) break;
                            c = t;
                        }
                    }
                }
                function androidInputEvent() {
                    var curVal = input.val(),
                        pos = input.caret();
                    if (oldVal && oldVal.length && oldVal.length > curVal.length) {
                        for (checkVal(!0); pos.begin > 0 && !tests[pos.begin - 1];) {
                            pos.begin--;
                        }if (0 === pos.begin) for (; pos.begin < firstNonMaskPos && !tests[pos.begin];) {
                            pos.begin++;
                        }input.caret(pos.begin, pos.begin);
                    } else {
                        for (checkVal(!0); pos.begin < len && !tests[pos.begin];) {
                            pos.begin++;
                        }input.caret(pos.begin, pos.begin);
                    }
                    tryFireCompleted();
                }
                function blurEvent() {
                    checkVal(), input.val() != focusText && input.change();
                }
                function keydownEvent(e) {
                    if (!input.prop("readonly")) {
                        var pos,
                            begin,
                            end,
                            k = e.which || e.keyCode;
                        oldVal = input.val(), 8 === k || 46 === k || iPhone && 127 === k ? (pos = input.caret(), begin = pos.begin, end = pos.end, end - begin === 0 && (begin = 46 !== k ? seekPrev(begin) : end = seekNext(begin - 1), end = 46 === k ? seekNext(end) : end), clearBuffer(begin, end), shiftL(begin, end - 1), e.preventDefault()) : 13 === k ? blurEvent.call(this, e) : 27 === k && (input.val(focusText), input.caret(0, checkVal()), e.preventDefault());
                    }
                }
                function keypressEvent(e) {
                    if (!input.prop("readonly")) {
                        var p,
                            c,
                            next,
                            k = e.which || e.keyCode,
                            pos = input.caret();
                        if (!(e.ctrlKey || e.altKey || e.metaKey || 32 > k) && k && 13 !== k) {
                            if (pos.end - pos.begin !== 0 && (clearBuffer(pos.begin, pos.end), shiftL(pos.begin, pos.end - 1)), p = seekNext(pos.begin - 1), len > p && (c = String.fromCharCode(k), tests[p].test(c))) {
                                if (shiftR(p), buffer[p] = c, writeBuffer(), next = seekNext(p), android) {
                                    var proxy = function proxy() {
                                        $.proxy($.fn.caret, input, next)();
                                    };
                                    setTimeout(proxy, 0);
                                } else input.caret(next);
                                pos.begin <= lastRequiredNonMaskPos && tryFireCompleted();
                            }
                            e.preventDefault();
                        }
                    }
                }
                function clearBuffer(start, end) {
                    var i;
                    for (i = start; end > i && len > i; i++) {
                        tests[i] && (buffer[i] = getPlaceholder(i));
                    }
                }
                function writeBuffer() {
                    input.val(buffer.join(""));
                }
                function checkVal(allow) {
                    var i,
                        c,
                        pos,
                        test = input.val(),
                        lastMatch = -1;
                    for (i = 0, pos = 0; len > i; i++) {
                        if (tests[i]) {
                            for (buffer[i] = getPlaceholder(i); pos++ < test.length;) {
                                if (c = test.charAt(pos - 1), tests[i].test(c)) {
                                    buffer[i] = c, lastMatch = i;
                                    break;
                                }
                            }if (pos > test.length) {
                                clearBuffer(i + 1, len);
                                break;
                            }
                        } else buffer[i] === test.charAt(pos) && pos++, partialPosition > i && (lastMatch = i);
                    }return allow ? writeBuffer() : partialPosition > lastMatch + 1 ? settings.autoclear || buffer.join("") === defaultBuffer ? (input.val() && input.val(""), clearBuffer(0, len)) : writeBuffer() : (writeBuffer(), input.val(input.val().substring(0, lastMatch + 1))), partialPosition ? i : firstNonMaskPos;
                }
                var input = $(this),
                    buffer = $.map(_mask.split(""), function (c, i) {
                    return "?" != c ? defs[c] ? getPlaceholder(i) : c : void 0;
                }),
                    defaultBuffer = buffer.join(""),
                    focusText = input.val();
                input.data($.mask.dataName, function () {
                    return $.map(buffer, function (c, i) {
                        return tests[i] && c != getPlaceholder(i) ? c : null;
                    }).join("");
                }), input.one("unmask", function () {
                    input.off(".mask").removeData($.mask.dataName);
                }).on("focus.mask", function () {
                    if (!input.prop("readonly")) {
                        clearTimeout(caretTimeoutId);
                        var pos;
                        focusText = input.val(), pos = checkVal(), caretTimeoutId = setTimeout(function () {
                            input.get(0) === document.activeElement && (writeBuffer(), pos == _mask.replace("?", "").length ? input.caret(0, pos) : input.caret(pos));
                        }, 10);
                    }
                }).on("blur.mask", blurEvent).on("keydown.mask", keydownEvent).on("keypress.mask", keypressEvent).on("input.mask paste.mask", function () {
                    input.prop("readonly") || setTimeout(function () {
                        var pos = checkVal(!0);
                        input.caret(pos), tryFireCompleted();
                    }, 0);
                }), chrome && android && input.off("input.mask").on("input.mask", androidInputEvent), checkVal();
            });
        }
    });
});

/***/ }),

/***/ "./bower_components/magnific-popup/dist/jquery.magnific-popup.js":
/*!***********************************************************************!*\
  !*** ./bower_components/magnific-popup/dist/jquery.magnific-popup.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*! Magnific Popup - v1.1.0 - 2016-02-20
* http://dimsemenov.com/plugins/magnific-popup/
* Copyright (c) 2016 Dmitry Semenov; */
;(function (factory) {
	if (true) {
		// AMD. Register as an anonymous module. 
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
})(function ($) {

	/*>>core*/
	/**
  * 
  * Magnific Popup Core JS file
  * 
  */

	/**
  * Private static constants
  */
	var CLOSE_EVENT = 'Close',
	    BEFORE_CLOSE_EVENT = 'BeforeClose',
	    AFTER_CLOSE_EVENT = 'AfterClose',
	    BEFORE_APPEND_EVENT = 'BeforeAppend',
	    MARKUP_PARSE_EVENT = 'MarkupParse',
	    OPEN_EVENT = 'Open',
	    CHANGE_EVENT = 'Change',
	    NS = 'mfp',
	    EVENT_NS = '.' + NS,
	    READY_CLASS = 'mfp-ready',
	    REMOVING_CLASS = 'mfp-removing',
	    PREVENT_CLOSE_CLASS = 'mfp-prevent-close';

	/**
  * Private vars 
  */
	/*jshint -W079 */
	var mfp,
	    // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
	MagnificPopup = function MagnificPopup() {},
	    _isJQ = !!window.jQuery,
	    _prevStatus,
	    _window = $(window),
	    _document,
	    _prevContentType,
	    _wrapClasses,
	    _currPopupType;

	/**
  * Private functions
  */
	var _mfpOn = function _mfpOn(name, f) {
		mfp.ev.on(NS + name + EVENT_NS, f);
	},
	    _getEl = function _getEl(className, appendTo, html, raw) {
		var el = document.createElement('div');
		el.className = 'mfp-' + className;
		if (html) {
			el.innerHTML = html;
		}
		if (!raw) {
			el = $(el);
			if (appendTo) {
				el.appendTo(appendTo);
			}
		} else if (appendTo) {
			appendTo.appendChild(el);
		}
		return el;
	},
	    _mfpTrigger = function _mfpTrigger(e, data) {
		mfp.ev.triggerHandler(NS + e, data);

		if (mfp.st.callbacks) {
			// converts "mfpEventName" to "eventName" callback and triggers it if it's present
			e = e.charAt(0).toLowerCase() + e.slice(1);
			if (mfp.st.callbacks[e]) {
				mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
			}
		}
	},
	    _getCloseBtn = function _getCloseBtn(type) {
		if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
			mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
			_currPopupType = type;
		}
		return mfp.currTemplate.closeBtn;
	},

	// Initialize Magnific Popup only when called at least once
	_checkInstance = function _checkInstance() {
		if (!$.magnificPopup.instance) {
			/*jshint -W020 */
			mfp = new MagnificPopup();
			mfp.init();
			$.magnificPopup.instance = mfp;
		}
	},

	// CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
	supportsTransitions = function supportsTransitions() {
		var s = document.createElement('p').style,
		    // 's' for style. better to create an element if body yet to exist
		v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

		if (s['transition'] !== undefined) {
			return true;
		}

		while (v.length) {
			if (v.pop() + 'Transition' in s) {
				return true;
			}
		}

		return false;
	};

	/**
  * Public functions
  */
	MagnificPopup.prototype = {

		constructor: MagnificPopup,

		/**
   * Initializes Magnific Popup plugin. 
   * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
   */
		init: function init() {
			var appVersion = navigator.appVersion;
			mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;
			mfp.isAndroid = /android/gi.test(appVersion);
			mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
			mfp.supportsTransition = supportsTransitions();

			// We disable fixed positioned lightbox on devices that don't handle it nicely.
			// If you know a better way of detecting this - let me know.
			mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
			_document = $(document);

			mfp.popupsCache = {};
		},

		/**
   * Opens popup
   * @param  data [description]
   */
		open: function open(data) {

			var i;

			if (data.isObj === false) {
				// convert jQuery collection to array to avoid conflicts later
				mfp.items = data.items.toArray();

				mfp.index = 0;
				var items = data.items,
				    item;
				for (i = 0; i < items.length; i++) {
					item = items[i];
					if (item.parsed) {
						item = item.el[0];
					}
					if (item === data.el[0]) {
						mfp.index = i;
						break;
					}
				}
			} else {
				mfp.items = $.isArray(data.items) ? data.items : [data.items];
				mfp.index = data.index || 0;
			}

			// if popup is already opened - we just update the content
			if (mfp.isOpen) {
				mfp.updateItemHTML();
				return;
			}

			mfp.types = [];
			_wrapClasses = '';
			if (data.mainEl && data.mainEl.length) {
				mfp.ev = data.mainEl.eq(0);
			} else {
				mfp.ev = _document;
			}

			if (data.key) {
				if (!mfp.popupsCache[data.key]) {
					mfp.popupsCache[data.key] = {};
				}
				mfp.currTemplate = mfp.popupsCache[data.key];
			} else {
				mfp.currTemplate = {};
			}

			mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
			mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

			if (mfp.st.modal) {
				mfp.st.closeOnContentClick = false;
				mfp.st.closeOnBgClick = false;
				mfp.st.showCloseBtn = false;
				mfp.st.enableEscapeKey = false;
			}

			// Building markup
			// main containers are created only once
			if (!mfp.bgOverlay) {

				// Dark overlay
				mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function () {
					mfp.close();
				});

				mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function (e) {
					if (mfp._checkIfClose(e.target)) {
						mfp.close();
					}
				});

				mfp.container = _getEl('container', mfp.wrap);
			}

			mfp.contentContainer = _getEl('content');
			if (mfp.st.preloader) {
				mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
			}

			// Initializing modules
			var modules = $.magnificPopup.modules;
			for (i = 0; i < modules.length; i++) {
				var n = modules[i];
				n = n.charAt(0).toUpperCase() + n.slice(1);
				mfp['init' + n].call(mfp);
			}
			_mfpTrigger('BeforeOpen');

			if (mfp.st.showCloseBtn) {
				// Close button
				if (!mfp.st.closeBtnInside) {
					mfp.wrap.append(_getCloseBtn());
				} else {
					_mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
						values.close_replaceWith = _getCloseBtn(item.type);
					});
					_wrapClasses += ' mfp-close-btn-in';
				}
			}

			if (mfp.st.alignTop) {
				_wrapClasses += ' mfp-align-top';
			}

			if (mfp.fixedContentPos) {
				mfp.wrap.css({
					overflow: mfp.st.overflowY,
					overflowX: 'hidden',
					overflowY: mfp.st.overflowY
				});
			} else {
				mfp.wrap.css({
					top: _window.scrollTop(),
					position: 'absolute'
				});
			}
			if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) {
				mfp.bgOverlay.css({
					height: _document.height(),
					position: 'absolute'
				});
			}

			if (mfp.st.enableEscapeKey) {
				// Close on ESC key
				_document.on('keyup' + EVENT_NS, function (e) {
					if (e.keyCode === 27) {
						mfp.close();
					}
				});
			}

			_window.on('resize' + EVENT_NS, function () {
				mfp.updateSize();
			});

			if (!mfp.st.closeOnContentClick) {
				_wrapClasses += ' mfp-auto-cursor';
			}

			if (_wrapClasses) mfp.wrap.addClass(_wrapClasses);

			// this triggers recalculation of layout, so we get it once to not to trigger twice
			var windowHeight = mfp.wH = _window.height();

			var windowStyles = {};

			if (mfp.fixedContentPos) {
				if (mfp._hasScrollBar(windowHeight)) {
					var s = mfp._getScrollbarSize();
					if (s) {
						windowStyles.marginRight = s;
					}
				}
			}

			if (mfp.fixedContentPos) {
				if (!mfp.isIE7) {
					windowStyles.overflow = 'hidden';
				} else {
					// ie7 double-scroll bug
					$('body, html').css('overflow', 'hidden');
				}
			}

			var classesToadd = mfp.st.mainClass;
			if (mfp.isIE7) {
				classesToadd += ' mfp-ie7';
			}
			if (classesToadd) {
				mfp._addClassToMFP(classesToadd);
			}

			// add content
			mfp.updateItemHTML();

			_mfpTrigger('BuildControls');

			// remove scrollbar, add margin e.t.c
			$('html').css(windowStyles);

			// add everything to DOM
			mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));

			// Save last focused element
			mfp._lastFocusedEl = document.activeElement;

			// Wait for next cycle to allow CSS transition
			setTimeout(function () {

				if (mfp.content) {
					mfp._addClassToMFP(READY_CLASS);
					mfp._setFocus();
				} else {
					// if content is not defined (not loaded e.t.c) we add class only for BG
					mfp.bgOverlay.addClass(READY_CLASS);
				}

				// Trap the focus in popup
				_document.on('focusin' + EVENT_NS, mfp._onFocusIn);
			}, 16);

			mfp.isOpen = true;
			mfp.updateSize(windowHeight);
			_mfpTrigger(OPEN_EVENT);

			return data;
		},

		/**
   * Closes the popup
   */
		close: function close() {
			if (!mfp.isOpen) return;
			_mfpTrigger(BEFORE_CLOSE_EVENT);

			mfp.isOpen = false;
			// for CSS3 animation
			if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
				mfp._addClassToMFP(REMOVING_CLASS);
				setTimeout(function () {
					mfp._close();
				}, mfp.st.removalDelay);
			} else {
				mfp._close();
			}
		},

		/**
   * Helper for close() function
   */
		_close: function _close() {
			_mfpTrigger(CLOSE_EVENT);

			var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

			mfp.bgOverlay.detach();
			mfp.wrap.detach();
			mfp.container.empty();

			if (mfp.st.mainClass) {
				classesToRemove += mfp.st.mainClass + ' ';
			}

			mfp._removeClassFromMFP(classesToRemove);

			if (mfp.fixedContentPos) {
				var windowStyles = { marginRight: '' };
				if (mfp.isIE7) {
					$('body, html').css('overflow', '');
				} else {
					windowStyles.overflow = '';
				}
				$('html').css(windowStyles);
			}

			_document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
			mfp.ev.off(EVENT_NS);

			// clean up DOM elements that aren't removed
			mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
			mfp.bgOverlay.attr('class', 'mfp-bg');
			mfp.container.attr('class', 'mfp-container');

			// remove close button from target element
			if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
				if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
			}

			if (mfp.st.autoFocusLast && mfp._lastFocusedEl) {
				$(mfp._lastFocusedEl).focus(); // put tab focus back
			}
			mfp.currItem = null;
			mfp.content = null;
			mfp.currTemplate = null;
			mfp.prevHeight = 0;

			_mfpTrigger(AFTER_CLOSE_EVENT);
		},

		updateSize: function updateSize(winHeight) {

			if (mfp.isIOS) {
				// fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
				var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
				var height = window.innerHeight * zoomLevel;
				mfp.wrap.css('height', height);
				mfp.wH = height;
			} else {
				mfp.wH = winHeight || _window.height();
			}
			// Fixes #84: popup incorrectly positioned with position:relative on body
			if (!mfp.fixedContentPos) {
				mfp.wrap.css('height', mfp.wH);
			}

			_mfpTrigger('Resize');
		},

		/**
   * Set content of popup based on current index
   */
		updateItemHTML: function updateItemHTML() {
			var item = mfp.items[mfp.index];

			// Detach and perform modifications
			mfp.contentContainer.detach();

			if (mfp.content) mfp.content.detach();

			if (!item.parsed) {
				item = mfp.parseEl(mfp.index);
			}

			var type = item.type;

			_mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
			// BeforeChange event works like so:
			// _mfpOn('BeforeChange', function(e, prevType, newType) { });

			mfp.currItem = item;

			if (!mfp.currTemplate[type]) {
				var markup = mfp.st[type] ? mfp.st[type].markup : false;

				// allows to modify markup
				_mfpTrigger('FirstMarkupParse', markup);

				if (markup) {
					mfp.currTemplate[type] = $(markup);
				} else {
					// if there is no markup found we just define that template is parsed
					mfp.currTemplate[type] = true;
				}
			}

			if (_prevContentType && _prevContentType !== item.type) {
				mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
			}

			var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
			mfp.appendContent(newContent, type);

			item.preloaded = true;

			_mfpTrigger(CHANGE_EVENT, item);
			_prevContentType = item.type;

			// Append container back after its content changed
			mfp.container.prepend(mfp.contentContainer);

			_mfpTrigger('AfterChange');
		},

		/**
   * Set HTML content of popup
   */
		appendContent: function appendContent(newContent, type) {
			mfp.content = newContent;

			if (newContent) {
				if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
					// if there is no markup, we just append close button element inside
					if (!mfp.content.find('.mfp-close').length) {
						mfp.content.append(_getCloseBtn());
					}
				} else {
					mfp.content = newContent;
				}
			} else {
				mfp.content = '';
			}

			_mfpTrigger(BEFORE_APPEND_EVENT);
			mfp.container.addClass('mfp-' + type + '-holder');

			mfp.contentContainer.append(mfp.content);
		},

		/**
   * Creates Magnific Popup data object based on given data
   * @param  {int} index Index of item to parse
   */
		parseEl: function parseEl(index) {
			var item = mfp.items[index],
			    type;

			if (item.tagName) {
				item = { el: $(item) };
			} else {
				type = item.type;
				item = { data: item, src: item.src };
			}

			if (item.el) {
				var types = mfp.types;

				// check for 'mfp-TYPE' class
				for (var i = 0; i < types.length; i++) {
					if (item.el.hasClass('mfp-' + types[i])) {
						type = types[i];
						break;
					}
				}

				item.src = item.el.attr('data-mfp-src');
				if (!item.src) {
					item.src = item.el.attr('href');
				}
			}

			item.type = type || mfp.st.type || 'inline';
			item.index = index;
			item.parsed = true;
			mfp.items[index] = item;
			_mfpTrigger('ElementParse', item);

			return mfp.items[index];
		},

		/**
   * Initializes single popup or a group of popups
   */
		addGroup: function addGroup(el, options) {
			var eHandler = function eHandler(e) {
				e.mfpEl = this;
				mfp._openClick(e, el, options);
			};

			if (!options) {
				options = {};
			}

			var eName = 'click.magnificPopup';
			options.mainEl = el;

			if (options.items) {
				options.isObj = true;
				el.off(eName).on(eName, eHandler);
			} else {
				options.isObj = false;
				if (options.delegate) {
					el.off(eName).on(eName, options.delegate, eHandler);
				} else {
					options.items = el;
					el.off(eName).on(eName, eHandler);
				}
			}
		},
		_openClick: function _openClick(e, el, options) {
			var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;

			if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
				return;
			}

			var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

			if (disableOn) {
				if ($.isFunction(disableOn)) {
					if (!disableOn.call(mfp)) {
						return true;
					}
				} else {
					// else it's number
					if (_window.width() < disableOn) {
						return true;
					}
				}
			}

			if (e.type) {
				e.preventDefault();

				// This will prevent popup from closing if element is inside and popup is already opened
				if (mfp.isOpen) {
					e.stopPropagation();
				}
			}

			options.el = $(e.mfpEl);
			if (options.delegate) {
				options.items = el.find(options.delegate);
			}
			mfp.open(options);
		},

		/**
   * Updates text on preloader
   */
		updateStatus: function updateStatus(status, text) {

			if (mfp.preloader) {
				if (_prevStatus !== status) {
					mfp.container.removeClass('mfp-s-' + _prevStatus);
				}

				if (!text && status === 'loading') {
					text = mfp.st.tLoading;
				}

				var data = {
					status: status,
					text: text
				};
				// allows to modify status
				_mfpTrigger('UpdateStatus', data);

				status = data.status;
				text = data.text;

				mfp.preloader.html(text);

				mfp.preloader.find('a').on('click', function (e) {
					e.stopImmediatePropagation();
				});

				mfp.container.addClass('mfp-s-' + status);
				_prevStatus = status;
			}
		},

		/*
  	"Private" helpers that aren't private at all
   */
		// Check to close popup or not
		// "target" is an element that was clicked
		_checkIfClose: function _checkIfClose(target) {

			if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
				return;
			}

			var closeOnContent = mfp.st.closeOnContentClick;
			var closeOnBg = mfp.st.closeOnBgClick;

			if (closeOnContent && closeOnBg) {
				return true;
			} else {

				// We close the popup if click is on close button or on preloader. Or if there is no content.
				if (!mfp.content || $(target).hasClass('mfp-close') || mfp.preloader && target === mfp.preloader[0]) {
					return true;
				}

				// if click is outside the content
				if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
					if (closeOnBg) {
						// last check, if the clicked element is in DOM, (in case it's removed onclick)
						if ($.contains(document, target)) {
							return true;
						}
					}
				} else if (closeOnContent) {
					return true;
				}
			}
			return false;
		},
		_addClassToMFP: function _addClassToMFP(cName) {
			mfp.bgOverlay.addClass(cName);
			mfp.wrap.addClass(cName);
		},
		_removeClassFromMFP: function _removeClassFromMFP(cName) {
			this.bgOverlay.removeClass(cName);
			mfp.wrap.removeClass(cName);
		},
		_hasScrollBar: function _hasScrollBar(winHeight) {
			return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
		},
		_setFocus: function _setFocus() {
			(mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
		},
		_onFocusIn: function _onFocusIn(e) {
			if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
				mfp._setFocus();
				return false;
			}
		},
		_parseMarkup: function _parseMarkup(template, values, item) {
			var arr;
			if (item.data) {
				values = $.extend(item.data, values);
			}
			_mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

			$.each(values, function (key, value) {
				if (value === undefined || value === false) {
					return true;
				}
				arr = key.split('_');
				if (arr.length > 1) {
					var el = template.find(EVENT_NS + '-' + arr[0]);

					if (el.length > 0) {
						var attr = arr[1];
						if (attr === 'replaceWith') {
							if (el[0] !== value[0]) {
								el.replaceWith(value);
							}
						} else if (attr === 'img') {
							if (el.is('img')) {
								el.attr('src', value);
							} else {
								el.replaceWith($('<img>').attr('src', value).attr('class', el.attr('class')));
							}
						} else {
							el.attr(arr[1], value);
						}
					}
				} else {
					template.find(EVENT_NS + '-' + key).html(value);
				}
			});
		},

		_getScrollbarSize: function _getScrollbarSize() {
			// thx David
			if (mfp.scrollbarSize === undefined) {
				var scrollDiv = document.createElement("div");
				scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
				document.body.appendChild(scrollDiv);
				mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
				document.body.removeChild(scrollDiv);
			}
			return mfp.scrollbarSize;
		}

	}; /* MagnificPopup core prototype end */

	/**
  * Public static functions
  */
	$.magnificPopup = {
		instance: null,
		proto: MagnificPopup.prototype,
		modules: [],

		open: function open(options, index) {
			_checkInstance();

			if (!options) {
				options = {};
			} else {
				options = $.extend(true, {}, options);
			}

			options.isObj = true;
			options.index = index || 0;
			return this.instance.open(options);
		},

		close: function close() {
			return $.magnificPopup.instance && $.magnificPopup.instance.close();
		},

		registerModule: function registerModule(name, module) {
			if (module.options) {
				$.magnificPopup.defaults[name] = module.options;
			}
			$.extend(this.proto, module.proto);
			this.modules.push(name);
		},

		defaults: {

			// Info about options is in docs:
			// http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

			disableOn: 0,

			key: null,

			midClick: false,

			mainClass: '',

			preloader: true,

			focus: '', // CSS selector of input to focus after popup is opened

			closeOnContentClick: false,

			closeOnBgClick: true,

			closeBtnInside: true,

			showCloseBtn: true,

			enableEscapeKey: true,

			modal: false,

			alignTop: false,

			removalDelay: 0,

			prependTo: null,

			fixedContentPos: 'auto',

			fixedBgPos: 'auto',

			overflowY: 'auto',

			closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

			tClose: 'Close (Esc)',

			tLoading: 'Loading...',

			autoFocusLast: true

		}
	};

	$.fn.magnificPopup = function (options) {
		_checkInstance();

		var jqEl = $(this);

		// We call some API method of first param is a string
		if (typeof options === "string") {

			if (options === 'open') {
				var items,
				    itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
				    index = parseInt(arguments[1], 10) || 0;

				if (itemOpts.items) {
					items = itemOpts.items[index];
				} else {
					items = jqEl;
					if (itemOpts.delegate) {
						items = items.find(itemOpts.delegate);
					}
					items = items.eq(index);
				}
				mfp._openClick({ mfpEl: items }, jqEl, itemOpts);
			} else {
				if (mfp.isOpen) mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
			}
		} else {
			// clone options obj
			options = $.extend(true, {}, options);

			/*
    * As Zepto doesn't support .data() method for objects
    * and it works only in normal browsers
    * we assign "options" object directly to the DOM element. FTW!
    */
			if (_isJQ) {
				jqEl.data('magnificPopup', options);
			} else {
				jqEl[0].magnificPopup = options;
			}

			mfp.addGroup(jqEl, options);
		}
		return jqEl;
	};

	/*>>core*/

	/*>>inline*/

	var INLINE_NS = 'inline',
	    _hiddenClass,
	    _inlinePlaceholder,
	    _lastInlineElement,
	    _putInlineElementsBack = function _putInlineElementsBack() {
		if (_lastInlineElement) {
			_inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
			_lastInlineElement = null;
		}
	};

	$.magnificPopup.registerModule(INLINE_NS, {
		options: {
			hiddenClass: 'hide', // will be appended with `mfp-` prefix
			markup: '',
			tNotFound: 'Content not found'
		},
		proto: {

			initInline: function initInline() {
				mfp.types.push(INLINE_NS);

				_mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function () {
					_putInlineElementsBack();
				});
			},

			getInline: function getInline(item, template) {

				_putInlineElementsBack();

				if (item.src) {
					var inlineSt = mfp.st.inline,
					    el = $(item.src);

					if (el.length) {

						// If target element has parent - we replace it with placeholder and put it back after popup is closed
						var parent = el[0].parentNode;
						if (parent && parent.tagName) {
							if (!_inlinePlaceholder) {
								_hiddenClass = inlineSt.hiddenClass;
								_inlinePlaceholder = _getEl(_hiddenClass);
								_hiddenClass = 'mfp-' + _hiddenClass;
							}
							// replace target inline element with placeholder
							_lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
						}

						mfp.updateStatus('ready');
					} else {
						mfp.updateStatus('error', inlineSt.tNotFound);
						el = $('<div>');
					}

					item.inlineElement = el;
					return el;
				}

				mfp.updateStatus('ready');
				mfp._parseMarkup(template, {}, item);
				return template;
			}
		}
	});

	/*>>inline*/

	/*>>ajax*/
	var AJAX_NS = 'ajax',
	    _ajaxCur,
	    _removeAjaxCursor = function _removeAjaxCursor() {
		if (_ajaxCur) {
			$(document.body).removeClass(_ajaxCur);
		}
	},
	    _destroyAjaxRequest = function _destroyAjaxRequest() {
		_removeAjaxCursor();
		if (mfp.req) {
			mfp.req.abort();
		}
	};

	$.magnificPopup.registerModule(AJAX_NS, {

		options: {
			settings: null,
			cursor: 'mfp-ajax-cur',
			tError: '<a href="%url%">The content</a> could not be loaded.'
		},

		proto: {
			initAjax: function initAjax() {
				mfp.types.push(AJAX_NS);
				_ajaxCur = mfp.st.ajax.cursor;

				_mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
				_mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
			},
			getAjax: function getAjax(item) {

				if (_ajaxCur) {
					$(document.body).addClass(_ajaxCur);
				}

				mfp.updateStatus('loading');

				var opts = $.extend({
					url: item.src,
					success: function success(data, textStatus, jqXHR) {
						var temp = {
							data: data,
							xhr: jqXHR
						};

						_mfpTrigger('ParseAjax', temp);

						mfp.appendContent($(temp.data), AJAX_NS);

						item.finished = true;

						_removeAjaxCursor();

						mfp._setFocus();

						setTimeout(function () {
							mfp.wrap.addClass(READY_CLASS);
						}, 16);

						mfp.updateStatus('ready');

						_mfpTrigger('AjaxContentAdded');
					},
					error: function error() {
						_removeAjaxCursor();
						item.finished = item.loadError = true;
						mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
					}
				}, mfp.st.ajax.settings);

				mfp.req = $.ajax(opts);

				return '';
			}
		}
	});

	/*>>ajax*/

	/*>>image*/
	var _imgInterval,
	    _getTitle = function _getTitle(item) {
		if (item.data && item.data.title !== undefined) return item.data.title;

		var src = mfp.st.image.titleSrc;

		if (src) {
			if ($.isFunction(src)) {
				return src.call(mfp, item);
			} else if (item.el) {
				return item.el.attr(src) || '';
			}
		}
		return '';
	};

	$.magnificPopup.registerModule('image', {

		options: {
			markup: '<div class="mfp-figure">' + '<div class="mfp-close"></div>' + '<figure>' + '<div class="mfp-img"></div>' + '<figcaption>' + '<div class="mfp-bottom-bar">' + '<div class="mfp-title"></div>' + '<div class="mfp-counter"></div>' + '</div>' + '</figcaption>' + '</figure>' + '</div>',
			cursor: 'mfp-zoom-out-cur',
			titleSrc: 'title',
			verticalFit: true,
			tError: '<a href="%url%">The image</a> could not be loaded.'
		},

		proto: {
			initImage: function initImage() {
				var imgSt = mfp.st.image,
				    ns = '.image';

				mfp.types.push('image');

				_mfpOn(OPEN_EVENT + ns, function () {
					if (mfp.currItem.type === 'image' && imgSt.cursor) {
						$(document.body).addClass(imgSt.cursor);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (imgSt.cursor) {
						$(document.body).removeClass(imgSt.cursor);
					}
					_window.off('resize' + EVENT_NS);
				});

				_mfpOn('Resize' + ns, mfp.resizeImage);
				if (mfp.isLowIE) {
					_mfpOn('AfterChange', mfp.resizeImage);
				}
			},
			resizeImage: function resizeImage() {
				var item = mfp.currItem;
				if (!item || !item.img) return;

				if (mfp.st.image.verticalFit) {
					var decr = 0;
					// fix box-sizing in ie7/8
					if (mfp.isLowIE) {
						decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'), 10);
					}
					item.img.css('max-height', mfp.wH - decr);
				}
			},
			_onImageHasSize: function _onImageHasSize(item) {
				if (item.img) {

					item.hasSize = true;

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}

					item.isCheckingImgSize = false;

					_mfpTrigger('ImageHasSize', item);

					if (item.imgHidden) {
						if (mfp.content) mfp.content.removeClass('mfp-loading');

						item.imgHidden = false;
					}
				}
			},

			/**
    * Function that loops until the image has size to display elements that rely on it asap
    */
			findImageSize: function findImageSize(item) {

				var counter = 0,
				    img = item.img[0],
				    mfpSetInterval = function mfpSetInterval(delay) {

					if (_imgInterval) {
						clearInterval(_imgInterval);
					}
					// decelerating interval that checks for size of an image
					_imgInterval = setInterval(function () {
						if (img.naturalWidth > 0) {
							mfp._onImageHasSize(item);
							return;
						}

						if (counter > 200) {
							clearInterval(_imgInterval);
						}

						counter++;
						if (counter === 3) {
							mfpSetInterval(10);
						} else if (counter === 40) {
							mfpSetInterval(50);
						} else if (counter === 100) {
							mfpSetInterval(500);
						}
					}, delay);
				};

				mfpSetInterval(1);
			},

			getImage: function getImage(item, template) {

				var guard = 0,


				// image load complete handler
				onLoadComplete = function onLoadComplete() {
					if (item) {
						if (item.img[0].complete) {
							item.img.off('.mfploader');

							if (item === mfp.currItem) {
								mfp._onImageHasSize(item);

								mfp.updateStatus('ready');
							}

							item.hasSize = true;
							item.loaded = true;

							_mfpTrigger('ImageLoadComplete');
						} else {
							// if image complete check fails 200 times (20 sec), we assume that there was an error.
							guard++;
							if (guard < 200) {
								setTimeout(onLoadComplete, 100);
							} else {
								onLoadError();
							}
						}
					}
				},


				// image error handler
				onLoadError = function onLoadError() {
					if (item) {
						item.img.off('.mfploader');
						if (item === mfp.currItem) {
							mfp._onImageHasSize(item);
							mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
						}

						item.hasSize = true;
						item.loaded = true;
						item.loadError = true;
					}
				},
				    imgSt = mfp.st.image;

				var el = template.find('.mfp-img');
				if (el.length) {
					var img = document.createElement('img');
					img.className = 'mfp-img';
					if (item.el && item.el.find('img').length) {
						img.alt = item.el.find('img').attr('alt');
					}
					item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);
					img.src = item.src;

					// without clone() "error" event is not firing when IMG is replaced by new IMG
					// TODO: find a way to avoid such cloning
					if (el.is('img')) {
						item.img = item.img.clone();
					}

					img = item.img[0];
					if (img.naturalWidth > 0) {
						item.hasSize = true;
					} else if (!img.width) {
						item.hasSize = false;
					}
				}

				mfp._parseMarkup(template, {
					title: _getTitle(item),
					img_replaceWith: item.img
				}, item);

				mfp.resizeImage();

				if (item.hasSize) {
					if (_imgInterval) clearInterval(_imgInterval);

					if (item.loadError) {
						template.addClass('mfp-loading');
						mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src));
					} else {
						template.removeClass('mfp-loading');
						mfp.updateStatus('ready');
					}
					return template;
				}

				mfp.updateStatus('loading');
				item.loading = true;

				if (!item.hasSize) {
					item.imgHidden = true;
					template.addClass('mfp-loading');
					mfp.findImageSize(item);
				}

				return template;
			}
		}
	});

	/*>>image*/

	/*>>zoom*/
	var hasMozTransform,
	    getHasMozTransform = function getHasMozTransform() {
		if (hasMozTransform === undefined) {
			hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
		}
		return hasMozTransform;
	};

	$.magnificPopup.registerModule('zoom', {

		options: {
			enabled: false,
			easing: 'ease-in-out',
			duration: 300,
			opener: function opener(element) {
				return element.is('img') ? element : element.find('img');
			}
		},

		proto: {

			initZoom: function initZoom() {
				var zoomSt = mfp.st.zoom,
				    ns = '.zoom',
				    image;

				if (!zoomSt.enabled || !mfp.supportsTransition) {
					return;
				}

				var duration = zoomSt.duration,
				    getElToAnimate = function getElToAnimate(image) {
					var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
					    transition = 'all ' + zoomSt.duration / 1000 + 's ' + zoomSt.easing,
					    cssObj = {
						position: 'fixed',
						zIndex: 9999,
						left: 0,
						top: 0,
						'-webkit-backface-visibility': 'hidden'
					},
					    t = 'transition';

					cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

					newImg.css(cssObj);
					return newImg;
				},
				    showMainContent = function showMainContent() {
					mfp.content.css('visibility', 'visible');
				},
				    openTimeout,
				    animatedImg;

				_mfpOn('BuildControls' + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);
						mfp.content.css('visibility', 'hidden');

						// Basically, all code below does is clones existing image, puts in on top of the current one and animated it

						image = mfp._getItemToZoom();

						if (!image) {
							showMainContent();
							return;
						}

						animatedImg = getElToAnimate(image);

						animatedImg.css(mfp._getOffset());

						mfp.wrap.append(animatedImg);

						openTimeout = setTimeout(function () {
							animatedImg.css(mfp._getOffset(true));
							openTimeout = setTimeout(function () {

								showMainContent();

								setTimeout(function () {
									animatedImg.remove();
									image = animatedImg = null;
									_mfpTrigger('ZoomAnimationEnded');
								}, 16); // avoid blink when switching images
							}, duration); // this timeout equals animation duration
						}, 16); // by adding this timeout we avoid short glitch at the beginning of animation


						// Lots of timeouts...
					}
				});
				_mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {

						clearTimeout(openTimeout);

						mfp.st.removalDelay = duration;

						if (!image) {
							image = mfp._getItemToZoom();
							if (!image) {
								return;
							}
							animatedImg = getElToAnimate(image);
						}

						animatedImg.css(mfp._getOffset(true));
						mfp.wrap.append(animatedImg);
						mfp.content.css('visibility', 'hidden');

						setTimeout(function () {
							animatedImg.css(mfp._getOffset());
						}, 16);
					}
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					if (mfp._allowZoom()) {
						showMainContent();
						if (animatedImg) {
							animatedImg.remove();
						}
						image = null;
					}
				});
			},

			_allowZoom: function _allowZoom() {
				return mfp.currItem.type === 'image';
			},

			_getItemToZoom: function _getItemToZoom() {
				if (mfp.currItem.hasSize) {
					return mfp.currItem.img;
				} else {
					return false;
				}
			},

			// Get element postion relative to viewport
			_getOffset: function _getOffset(isLarge) {
				var el;
				if (isLarge) {
					el = mfp.currItem.img;
				} else {
					el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
				}

				var offset = el.offset();
				var paddingTop = parseInt(el.css('padding-top'), 10);
				var paddingBottom = parseInt(el.css('padding-bottom'), 10);
				offset.top -= $(window).scrollTop() - paddingTop;

				/*
    	Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.
    	 */
				var obj = {
					width: el.width(),
					// fix Zepto height+padding issue
					height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
				};

				// I hate to do this, but there is no another option
				if (getHasMozTransform()) {
					obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
				} else {
					obj.left = offset.left;
					obj.top = offset.top;
				}
				return obj;
			}

		}
	});

	/*>>zoom*/

	/*>>iframe*/

	var IFRAME_NS = 'iframe',
	    _emptyPage = '//about:blank',
	    _fixIframeBugs = function _fixIframeBugs(isShowing) {
		if (mfp.currTemplate[IFRAME_NS]) {
			var el = mfp.currTemplate[IFRAME_NS].find('iframe');
			if (el.length) {
				// reset src after the popup is closed to avoid "video keeps playing after popup is closed" bug
				if (!isShowing) {
					el[0].src = _emptyPage;
				}

				// IE8 black screen bug fix
				if (mfp.isIE8) {
					el.css('display', isShowing ? 'block' : 'none');
				}
			}
		}
	};

	$.magnificPopup.registerModule(IFRAME_NS, {

		options: {
			markup: '<div class="mfp-iframe-scaler">' + '<div class="mfp-close"></div>' + '<iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe>' + '</div>',

			srcAction: 'iframe_src',

			// we don't care and support only one default type of URL by default
			patterns: {
				youtube: {
					index: 'youtube.com',
					id: 'v=',
					src: '//www.youtube.com/embed/%id%?autoplay=1'
				},
				vimeo: {
					index: 'vimeo.com/',
					id: '/',
					src: '//player.vimeo.com/video/%id%?autoplay=1'
				},
				gmaps: {
					index: '//maps.google.',
					src: '%id%&output=embed'
				}
			}
		},

		proto: {
			initIframe: function initIframe() {
				mfp.types.push(IFRAME_NS);

				_mfpOn('BeforeChange', function (e, prevType, newType) {
					if (prevType !== newType) {
						if (prevType === IFRAME_NS) {
							_fixIframeBugs(); // iframe if removed
						} else if (newType === IFRAME_NS) {
							_fixIframeBugs(true); // iframe is showing
						}
					} // else {
					// iframe source is switched, don't do anything
					//}
				});

				_mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function () {
					_fixIframeBugs();
				});
			},

			getIframe: function getIframe(item, template) {
				var embedSrc = item.src;
				var iframeSt = mfp.st.iframe;

				$.each(iframeSt.patterns, function () {
					if (embedSrc.indexOf(this.index) > -1) {
						if (this.id) {
							if (typeof this.id === 'string') {
								embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id) + this.id.length, embedSrc.length);
							} else {
								embedSrc = this.id.call(this, embedSrc);
							}
						}
						embedSrc = this.src.replace('%id%', embedSrc);
						return false; // break;
					}
				});

				var dataObj = {};
				if (iframeSt.srcAction) {
					dataObj[iframeSt.srcAction] = embedSrc;
				}
				mfp._parseMarkup(template, dataObj, item);

				mfp.updateStatus('ready');

				return template;
			}
		}
	});

	/*>>iframe*/

	/*>>gallery*/
	/**
  * Get looped index depending on number of slides
  */
	var _getLoopedId = function _getLoopedId(index) {
		var numSlides = mfp.items.length;
		if (index > numSlides - 1) {
			return index - numSlides;
		} else if (index < 0) {
			return numSlides + index;
		}
		return index;
	},
	    _replaceCurrTotal = function _replaceCurrTotal(text, curr, total) {
		return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);
	};

	$.magnificPopup.registerModule('gallery', {

		options: {
			enabled: false,
			arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',
			preload: [0, 2],
			navigateByImgClick: true,
			arrows: true,

			tPrev: 'Previous (Left arrow key)',
			tNext: 'Next (Right arrow key)',
			tCounter: '%curr% of %total%'
		},

		proto: {
			initGallery: function initGallery() {

				var gSt = mfp.st.gallery,
				    ns = '.mfp-gallery';

				mfp.direction = true; // true - next, false - prev

				if (!gSt || !gSt.enabled) return false;

				_wrapClasses += ' mfp-gallery';

				_mfpOn(OPEN_EVENT + ns, function () {

					if (gSt.navigateByImgClick) {
						mfp.wrap.on('click' + ns, '.mfp-img', function () {
							if (mfp.items.length > 1) {
								mfp.next();
								return false;
							}
						});
					}

					_document.on('keydown' + ns, function (e) {
						if (e.keyCode === 37) {
							mfp.prev();
						} else if (e.keyCode === 39) {
							mfp.next();
						}
					});
				});

				_mfpOn('UpdateStatus' + ns, function (e, data) {
					if (data.text) {
						data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);
					}
				});

				_mfpOn(MARKUP_PARSE_EVENT + ns, function (e, element, values, item) {
					var l = mfp.items.length;
					values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';
				});

				_mfpOn('BuildControls' + ns, function () {
					if (mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {
						var markup = gSt.arrowMarkup,
						    arrowLeft = mfp.arrowLeft = $(markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left')).addClass(PREVENT_CLOSE_CLASS),
						    arrowRight = mfp.arrowRight = $(markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right')).addClass(PREVENT_CLOSE_CLASS);

						arrowLeft.click(function () {
							mfp.prev();
						});
						arrowRight.click(function () {
							mfp.next();
						});

						mfp.container.append(arrowLeft.add(arrowRight));
					}
				});

				_mfpOn(CHANGE_EVENT + ns, function () {
					if (mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);

					mfp._preloadTimeout = setTimeout(function () {
						mfp.preloadNearbyImages();
						mfp._preloadTimeout = null;
					}, 16);
				});

				_mfpOn(CLOSE_EVENT + ns, function () {
					_document.off(ns);
					mfp.wrap.off('click' + ns);
					mfp.arrowRight = mfp.arrowLeft = null;
				});
			},
			next: function next() {
				mfp.direction = true;
				mfp.index = _getLoopedId(mfp.index + 1);
				mfp.updateItemHTML();
			},
			prev: function prev() {
				mfp.direction = false;
				mfp.index = _getLoopedId(mfp.index - 1);
				mfp.updateItemHTML();
			},
			goTo: function goTo(newIndex) {
				mfp.direction = newIndex >= mfp.index;
				mfp.index = newIndex;
				mfp.updateItemHTML();
			},
			preloadNearbyImages: function preloadNearbyImages() {
				var p = mfp.st.gallery.preload,
				    preloadBefore = Math.min(p[0], mfp.items.length),
				    preloadAfter = Math.min(p[1], mfp.items.length),
				    i;

				for (i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {
					mfp._preloadItem(mfp.index + i);
				}
				for (i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {
					mfp._preloadItem(mfp.index - i);
				}
			},
			_preloadItem: function _preloadItem(index) {
				index = _getLoopedId(index);

				if (mfp.items[index].preloaded) {
					return;
				}

				var item = mfp.items[index];
				if (!item.parsed) {
					item = mfp.parseEl(index);
				}

				_mfpTrigger('LazyLoad', item);

				if (item.type === 'image') {
					item.img = $('<img class="mfp-img" />').on('load.mfploader', function () {
						item.hasSize = true;
					}).on('error.mfploader', function () {
						item.hasSize = true;
						item.loadError = true;
						_mfpTrigger('LazyLoadError', item);
					}).attr('src', item.src);
				}

				item.preloaded = true;
			}
		}
	});

	/*>>gallery*/

	/*>>retina*/

	var RETINA_NS = 'retina';

	$.magnificPopup.registerModule(RETINA_NS, {
		options: {
			replaceSrc: function replaceSrc(item) {
				return item.src.replace(/\.\w+$/, function (m) {
					return '@2x' + m;
				});
			},
			ratio: 1 // Function or number.  Set to 1 to disable.
		},
		proto: {
			initRetina: function initRetina() {
				if (window.devicePixelRatio > 1) {

					var st = mfp.st.retina,
					    ratio = st.ratio;

					ratio = !isNaN(ratio) ? ratio : ratio();

					if (ratio > 1) {
						_mfpOn('ImageHasSize' + '.' + RETINA_NS, function (e, item) {
							item.img.css({
								'max-width': item.img[0].naturalWidth / ratio,
								'width': '100%'
							});
						});
						_mfpOn('ElementParse' + '.' + RETINA_NS, function (e, item) {
							item.src = st.replaceSrc(item, ratio);
						});
					}
				}
			}
		}
	});

	/*>>retina*/
	_checkInstance();
});

/***/ }),

/***/ "./bower_components/slick-carousel/slick/slick.js":
/*!********************************************************!*\
  !*** ./bower_components/slick-carousel/slick/slick.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.8.0
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
;(function (factory) {
    'use strict';

    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
})(function ($) {
    'use strict';

    var Slick = window.Slick || {};

    Slick = function () {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this,
                dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function customPaging(slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;

            _.registerBreakpoints();
            _.init(true);
        }

        return Slick;
    }();

    Slick.prototype.activateADA = function () {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });
    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function (markup, index, addBefore) {

        var _ = this;

        if (typeof index === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || index >= _.slideCount) {
            return false;
        }

        _.unload();

        if (typeof index === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.animateHeight = function () {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function (targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }
        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -_.currentLeft;
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function step(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' + now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' + now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function complete() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });
            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function () {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }
            }
        }
    };

    Slick.prototype.getNavTarget = function () {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if (asNavFor && asNavFor !== null) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;
    };

    Slick.prototype.asNavFor = function (index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if (asNavFor !== null && (typeof asNavFor === 'undefined' ? 'undefined' : _typeof(asNavFor)) === 'object') {
            asNavFor.each(function () {
                var target = $(this).slick('getSlick');
                if (!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }
    };

    Slick.prototype.applyTransition = function (slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.autoPlay = function () {

        var _ = this;

        _.autoPlayClear();

        if (_.slideCount > _.options.slidesToShow) {
            _.autoPlayTimer = setInterval(_.autoPlayIterator, _.options.autoplaySpeed);
        }
    };

    Slick.prototype.autoPlayClear = function () {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }
    };

    Slick.prototype.autoPlayIterator = function () {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if (!_.paused && !_.interrupted && !_.focussed) {

            if (_.options.infinite === false) {

                if (_.direction === 1 && _.currentSlide + 1 === _.slideCount - 1) {
                    _.direction = 0;
                } else if (_.direction === 0) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if (_.currentSlide - 1 === 0) {
                        _.direction = 1;
                    }
                }
            }

            _.slideHandler(slideTo);
        }
    };

    Slick.prototype.buildArrows = function () {

        var _ = this;

        if (_.options.arrows === true) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if (_.slideCount > _.options.slidesToShow) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                }
            } else {

                _.$prevArrow.add(_.$nextArrow).addClass('slick-hidden').attr({
                    'aria-disabled': 'true',
                    'tabindex': '-1'
                });
            }
        }
    };

    Slick.prototype.buildDots = function () {

        var _ = this,
            i,
            dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active');
        }
    };

    Slick.prototype.buildOut = function () {

        var _ = this;

        _.$slides = _.$slider.children(_.options.slide + ':not(.slick-cloned)').addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function (index, element) {
            $(element).attr('data-slick-index', index).data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = _.slideCount === 0 ? $('<div class="slick-track"/>').appendTo(_.$slider) : _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap('<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }
    };

    Slick.prototype.buildRows = function () {

        var _ = this,
            a,
            b,
            c,
            newSlides,
            numOfSlides,
            originalSlides,
            slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if (_.options.rows > 0) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(originalSlides.length / slidesPerSection);

            for (a = 0; a < numOfSlides; a++) {
                var slide = document.createElement('div');
                for (b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for (c = 0; c < _.options.slidesPerRow; c++) {
                        var target = a * slidesPerSection + (b * _.options.slidesPerRow + c);
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children().css({
                'width': 100 / _.options.slidesPerRow + '%',
                'display': 'inline-block'
            });
        }
    };

    Slick.prototype.checkResponsive = function (initial, forceUpdate) {

        var _ = this,
            breakpoint,
            targetBreakpoint,
            respondToWidth,
            triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if (_.options.responsive && _.options.responsive.length && _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint = targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings, _.breakpointSettings[targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if (!initial && triggerBreakpoint !== false) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }
    };

    Slick.prototype.changeSlide = function (event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset,
            slideOffset,
            unevenOffset;

        // If target is a link, prevent default action.
        if ($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if (!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = _.slideCount % _.options.slidesToScroll !== 0;
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 : event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }
    };

    Slick.prototype.checkNavigable = function (index) {

        var _ = this,
            navigables,
            prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function () {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots).off('click.slick', _.changeSlide).off('mouseenter.slick', $.proxy(_.interrupt, _, true)).off('mouseleave.slick', $.proxy(_.interrupt, _, false));

            if (_.options.accessibility === true) {
                _.$dots.off('keydown.slick', _.keyHandler);
            }
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
            }
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);
    };

    Slick.prototype.cleanUpSlideEvents = function () {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));
    };

    Slick.prototype.cleanUpRows = function () {

        var _ = this,
            originalSlides;

        if (_.options.rows > 0) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }
    };

    Slick.prototype.clickHandler = function (event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }
    };

    Slick.prototype.destroy = function (refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.$prevArrow.length) {

            _.$prevArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.prevArrow)) {
                _.$prevArrow.remove();
            }
        }

        if (_.$nextArrow && _.$nextArrow.length) {

            _.$nextArrow.removeClass('slick-disabled slick-arrow slick-hidden').removeAttr('aria-hidden aria-disabled tabindex').css('display', '');

            if (_.htmlExpr.test(_.options.nextArrow)) {
                _.$nextArrow.remove();
            }
        }

        if (_.$slides) {

            _.$slides.removeClass('slick-slide slick-active slick-center slick-visible slick-current').removeAttr('aria-hidden').removeAttr('data-slick-index').each(function () {
                $(this).attr('style', $(this).data('originalStyling'));
            });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if (!refresh) {
            _.$slider.trigger('destroy', [_]);
        }
    };

    Slick.prototype.disableTransition = function (slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }
    };

    Slick.prototype.fadeSlide = function (slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function () {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }
        }
    };

    Slick.prototype.fadeSlideOut = function (slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);
        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });
        }
    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function (filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.focusHandler = function () {

        var _ = this;

        _.$slider.off('focus.slick blur.slick').on('focus.slick blur.slick', '*', function (event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function () {

                if (_.options.pauseOnFocus) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }
            }, 0);
        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function () {

        var _ = this;
        return _.currentSlide;
    };

    Slick.prototype.getDotCount = function () {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            if (_.slideCount <= _.options.slidesToShow) {
                ++pagerQty;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if (!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        } else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;
    };

    Slick.prototype.getLeft = function (slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide,
            coef;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = _.slideWidth * _.options.slidesToShow * -1;
                coef = -1;

                if (_.options.vertical === true && _.options.centerMode === true) {
                    if (_.options.slidesToShow === 2) {
                        coef = -1.5;
                    } else if (_.options.slidesToShow === 1) {
                        coef = -2;
                    }
                }
                verticalOffset = verticalHeight * _.options.slidesToShow * coef;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth * -1;
                        verticalOffset = (_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight * -1;
                    } else {
                        _.slideOffset = _.slideCount % _.options.slidesToScroll * _.slideWidth * -1;
                        verticalOffset = _.slideCount % _.options.slidesToScroll * verticalHeight * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * _.slideWidth;
                verticalOffset = (slideIndex + _.options.slidesToShow - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
            _.slideOffset = _.slideWidth * Math.floor(_.options.slidesToShow) / 2 - _.slideWidth * _.slideCount / 2;
        } else if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = slideIndex * _.slideWidth * -1 + _.slideOffset;
        } else {
            targetLeft = slideIndex * verticalHeight * -1 + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft = 0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft = 0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;
    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function (option) {

        var _ = this;

        return _.options[option];
    };

    Slick.prototype.getNavigableIndexes = function () {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;
    };

    Slick.prototype.getSlick = function () {

        return this;
    };

    Slick.prototype.getSlideCount = function () {

        var _ = this,
            slidesTraversed,
            swipedSlide,
            centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function (index, slide) {
                if (slide.offsetLeft - centerOffset + $(slide).outerWidth() / 2 > _.swipeLeft * -1) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;
        } else {
            return _.options.slidesToScroll;
        }
    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function (slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);
    };

    Slick.prototype.init = function (creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();
        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if (_.options.autoplay) {

            _.paused = false;
            _.autoPlay();
        }
    };

    Slick.prototype.initADA = function () {
        var _ = this,
            numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
            tabControlIndexes = _.getNavigableIndexes().filter(function (val) {
            return val >= 0 && val < _.slideCount;
        });

        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        if (_.$dots !== null) {
            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function (i) {
                var slideControlIndex = tabControlIndexes.indexOf(i);

                $(this).attr({
                    'role': 'tabpanel',
                    'id': 'slick-slide' + _.instanceUid + i,
                    'tabindex': -1
                });

                if (slideControlIndex !== -1) {
                    var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex;
                    if ($('#' + ariaButtonControl).length) {
                        $(this).attr({
                            'aria-describedby': ariaButtonControl
                        });
                    }
                }
            });

            _.$dots.attr('role', 'tablist').find('li').each(function (i) {
                var mappedSlideIndex = tabControlIndexes[i];

                $(this).attr({
                    'role': 'presentation'
                });

                $(this).find('button').first().attr({
                    'role': 'tab',
                    'id': 'slick-slide-control' + _.instanceUid + i,
                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                    'aria-label': i + 1 + ' of ' + numDotGroups,
                    'aria-selected': null,
                    'tabindex': '-1'
                });
            }).eq(_.currentSlide).find('button').attr({
                'aria-selected': 'true',
                'tabindex': '0'
            }).end();
        }

        for (var i = _.currentSlide, max = i + _.options.slidesToShow; i < max; i++) {
            if (_.options.focusOnChange) {
                _.$slides.eq(i).attr({ 'tabindex': '0' });
            } else {
                _.$slides.eq(i).removeAttr('tabindex');
            }
        }

        _.activateADA();
    };

    Slick.prototype.initArrowEvents = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow.off('click.slick').on('click.slick', {
                message: 'previous'
            }, _.changeSlide);
            _.$nextArrow.off('click.slick').on('click.slick', {
                message: 'next'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.on('keydown.slick', _.keyHandler);
                _.$nextArrow.on('keydown.slick', _.keyHandler);
            }
        }
    };

    Slick.prototype.initDotEvents = function () {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$dots.on('keydown.slick', _.keyHandler);
            }
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {

            $('li', _.$dots).on('mouseenter.slick', $.proxy(_.interrupt, _, true)).on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initSlideEvents = function () {

        var _ = this;

        if (_.options.pauseOnHover) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));
        }
    };

    Slick.prototype.initializeEvents = function () {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(_.setPosition);
    };

    Slick.prototype.initUI = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();
        }
    };

    Slick.prototype.keyHandler = function (event) {

        var _ = this;
        //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if (!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' : 'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }
    };

    Slick.prototype.lazyLoad = function () {

        var _ = this,
            loadRange,
            cloneRange,
            rangeStart,
            rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function () {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageSrcSet = $(this).attr('data-srcset'),
                    imageSizes = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function () {

                    image.animate({ opacity: 0 }, 100, function () {

                        if (imageSrcSet) {
                            image.attr('srcset', imageSrcSet);

                            if (imageSizes) {
                                image.attr('sizes', imageSizes);
                            }
                        }

                        image.attr('src', imageSource).animate({ opacity: 1 }, 200, function () {
                            image.removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');
                        });
                        _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                    });
                };

                imageToLoad.onerror = function () {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);
                };

                imageToLoad.src = imageSource;
            });
        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

        if (_.options.lazyLoad === 'anticipated') {
            var prevSlide = rangeStart - 1,
                nextSlide = rangeEnd,
                $slides = _.$slider.find('.slick-slide');

            for (var i = 0; i < _.options.slidesToScroll; i++) {
                if (prevSlide < 0) prevSlide = _.slideCount - 1;
                loadRange = loadRange.add($slides.eq(prevSlide));
                loadRange = loadRange.add($slides.eq(nextSlide));
                prevSlide--;
                nextSlide++;
            }
        }

        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }
    };

    Slick.prototype.loadSlider = function () {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }
    };

    Slick.prototype.next = Slick.prototype.slickNext = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });
    };

    Slick.prototype.orientationChange = function () {

        var _ = this;

        _.checkResponsive();
        _.setPosition();
    };

    Slick.prototype.pause = Slick.prototype.slickPause = function () {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;
    };

    Slick.prototype.play = Slick.prototype.slickPlay = function () {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;
    };

    Slick.prototype.postSlide = function (index) {

        var _ = this;

        if (!_.unslicked) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            if (_.slideCount > _.options.slidesToShow) {
                _.setPosition();
            }

            _.swipeLeft = null;

            if (_.options.autoplay) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();

                if (_.options.focusOnChange) {
                    var $currentSlide = $(_.$slides.get(_.currentSlide));
                    $currentSlide.attr('tabindex', 0).focus();
                }
            }
        }
    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function () {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });
    };

    Slick.prototype.preventDefault = function (event) {

        event.preventDefault();
    };

    Slick.prototype.progressiveLazyLoad = function (tryCount) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $('img[data-lazy]', _.$slider),
            image,
            imageSource,
            imageSrcSet,
            imageSizes,
            imageToLoad;

        if ($imgsToLoad.length) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageSrcSet = image.attr('data-srcset');
            imageSizes = image.attr('data-sizes') || _.$slider.attr('data-sizes');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function () {

                if (imageSrcSet) {
                    image.attr('srcset', imageSrcSet);

                    if (imageSizes) {
                        image.attr('sizes', imageSizes);
                    }
                }

                image.attr('src', imageSource).removeAttr('data-lazy data-srcset data-sizes').removeClass('slick-loading');

                if (_.options.adaptiveHeight === true) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                _.progressiveLazyLoad();
            };

            imageToLoad.onerror = function () {

                if (tryCount < 3) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout(function () {
                        _.progressiveLazyLoad(tryCount + 1);
                    }, 500);
                } else {

                    image.removeAttr('data-lazy').removeClass('slick-loading').addClass('slick-lazyload-error');

                    _.$slider.trigger('lazyLoadError', [_, image, imageSource]);

                    _.progressiveLazyLoad();
                }
            };

            imageToLoad.src = imageSource;
        } else {

            _.$slider.trigger('allImagesLoaded', [_]);
        }
    };

    Slick.prototype.refresh = function (initializing) {

        var _ = this,
            currentSlide,
            lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if (!_.options.infinite && _.currentSlide > lastVisibleIndex) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if (!initializing) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);
        }
    };

    Slick.prototype.registerBreakpoints = function () {

        var _ = this,
            breakpoint,
            currentBreakpoint,
            l,
            responsiveSettings = _.options.responsive || null;

        if ($.type(responsiveSettings) === 'array' && responsiveSettings.length) {

            _.respondTo = _.options.respondTo || 'window';

            for (breakpoint in responsiveSettings) {

                l = _.breakpoints.length - 1;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while (l >= 0) {
                        if (_.breakpoints[l] && _.breakpoints[l] === currentBreakpoint) {
                            _.breakpoints.splice(l, 1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;
                }
            }

            _.breakpoints.sort(function (a, b) {
                return _.options.mobileFirst ? a - b : b - a;
            });
        }
    };

    Slick.prototype.reinit = function () {

        var _ = this;

        _.$slides = _.$slideTrack.children(_.options.slide).addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);
    };

    Slick.prototype.resize = function () {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function () {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if (!_.unslicked) {
                    _.setPosition();
                }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function (index, removeBefore, removeAll) {

        var _ = this;

        if (typeof index === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();
    };

    Slick.prototype.setCSS = function (position) {

        var _ = this,
            positionProps = {},
            x,
            y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }
    };

    Slick.prototype.setDimensions = function () {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: '0px ' + _.options.centerPadding
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: _.options.centerPadding + ' 0px'
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();

        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil(_.slideWidth * _.$slideTrack.children('.slick-slide').length));
        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil(_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);
    };

    Slick.prototype.setFade = function () {

        var _ = this,
            targetLeft;

        _.$slides.each(function (index, element) {
            targetLeft = _.slideWidth * index * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });
    };

    Slick.prototype.setHeight = function () {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }
    };

    Slick.prototype.setOption = Slick.prototype.slickSetOption = function () {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this,
            l,
            item,
            option,
            value,
            refresh = false,
            type;

        if ($.type(arguments[0]) === 'object') {

            option = arguments[0];
            refresh = arguments[1];
            type = 'multiple';
        } else if ($.type(arguments[0]) === 'string') {

            option = arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if (arguments[0] === 'responsive' && $.type(arguments[1]) === 'array') {

                type = 'responsive';
            } else if (typeof arguments[1] !== 'undefined') {

                type = 'single';
            }
        }

        if (type === 'single') {

            _.options[option] = value;
        } else if (type === 'multiple') {

            $.each(option, function (opt, val) {

                _.options[opt] = val;
            });
        } else if (type === 'responsive') {

            for (item in value) {

                if ($.type(_.options.responsive) !== 'array') {

                    _.options.responsive = [value[item]];
                } else {

                    l = _.options.responsive.length - 1;

                    // loop through the responsive object and splice out duplicates.
                    while (l >= 0) {

                        if (_.options.responsive[l].breakpoint === value[item].breakpoint) {

                            _.options.responsive.splice(l, 1);
                        }

                        l--;
                    }

                    _.options.responsive.push(value[item]);
                }
            }
        }

        if (refresh) {

            _.unload();
            _.reinit();
        }
    };

    Slick.prototype.setPosition = function () {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);
    };

    Slick.prototype.setProps = function () {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined || bodyStyle.MozTransition !== undefined || bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if (_.options.fade) {
            if (typeof _.options.zIndex === 'number') {
                if (_.options.zIndex < 3) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && _.animType !== null && _.animType !== false;
    };

    Slick.prototype.setSlideClasses = function (index) {

        var _ = this,
            centerOffset,
            allSlides,
            indexOffset,
            remainder;

        allSlides = _.$slider.find('.slick-slide').removeClass('slick-active slick-center slick-current').attr('aria-hidden', 'true');

        _.$slides.eq(index).addClass('slick-current');

        if (_.options.centerMode === true) {

            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= _.slideCount - 1 - centerOffset) {
                    _.$slides.slice(index - centerOffset + evenCoef, index + centerOffset + 1).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides.slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2).addClass('slick-active').attr('aria-hidden', 'false');
                }

                if (index === 0) {

                    allSlides.eq(allSlides.length - 1 - _.options.slidesToShow).addClass('slick-center');
                } else if (index === _.slideCount - 1) {

                    allSlides.eq(_.options.slidesToShow).addClass('slick-center');
                }
            }

            _.$slides.eq(index).addClass('slick-center');
        } else {

            if (index >= 0 && index <= _.slideCount - _.options.slidesToShow) {

                _.$slides.slice(index, index + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides.addClass('slick-active').attr('aria-hidden', 'false');
            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && _.slideCount - index < _.options.slidesToShow) {

                    allSlides.slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder).addClass('slick-active').attr('aria-hidden', 'false');
                } else {

                    allSlides.slice(indexOffset, indexOffset + _.options.slidesToShow).addClass('slick-active').attr('aria-hidden', 'false');
                }
            }
        }

        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function () {

        var _ = this,
            i,
            slideIndex,
            infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > _.slideCount - infiniteCount; i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex - _.slideCount).prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount + _.slideCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '').attr('data-slick-index', slideIndex + _.slideCount).appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function () {
                    $(this).attr('id', '');
                });
            }
        }
    };

    Slick.prototype.interrupt = function (toggle) {

        var _ = this;

        if (!toggle) {
            _.autoPlay();
        }
        _.interrupted = toggle;
    };

    Slick.prototype.selectHandler = function (event) {

        var _ = this;

        var targetElement = $(event.target).is('.slick-slide') ? $(event.target) : $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.slideHandler(index, false, true);
            return;
        }

        _.slideHandler(index);
    };

    Slick.prototype.slideHandler = function (index, sync, dontAnimate) {

        var targetSlide,
            animSlide,
            oldSlide,
            slideLeft,
            targetLeft = null,
            _ = this,
            navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > _.slideCount - _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function () {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if (_.options.autoplay) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - _.slideCount % _.options.slidesToScroll;
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if (_.options.asNavFor) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if (navTarget.slideCount <= navTarget.options.slidesToShow) {
                navTarget.setSlideClasses(_.currentSlide);
            }
        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function () {
                    _.postSlide(animSlide);
                });
            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
            _.animateSlide(targetLeft, function () {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }
    };

    Slick.prototype.startLoad = function () {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();
        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();
        }

        _.$slider.addClass('slick-loading');
    };

    Slick.prototype.swipeDirection = function () {

        var xDist,
            yDist,
            r,
            swipeAngle,
            _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if (swipeAngle <= 45 && swipeAngle >= 0) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle <= 360 && swipeAngle >= 315) {
            return _.options.rtl === false ? 'left' : 'right';
        }
        if (swipeAngle >= 135 && swipeAngle <= 225) {
            return _.options.rtl === false ? 'right' : 'left';
        }
        if (_.options.verticalSwiping === true) {
            if (swipeAngle >= 35 && swipeAngle <= 135) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';
    };

    Slick.prototype.swipeEnd = function (event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.swiping = false;

        if (_.scrolling) {
            _.scrolling = false;
            return false;
        }

        _.interrupted = false;
        _.shouldClick = _.touchObject.swipeLength > 10 ? false : true;

        if (_.touchObject.curX === undefined) {
            return false;
        }

        if (_.touchObject.edgeHit === true) {
            _.$slider.trigger('edge', [_, _.swipeDirection()]);
        }

        if (_.touchObject.swipeLength >= _.touchObject.minSwipe) {

            direction = _.swipeDirection();

            switch (direction) {

                case 'left':
                case 'down':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide + _.getSlideCount()) : _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount = _.options.swipeToSlide ? _.checkNavigable(_.currentSlide - _.getSlideCount()) : _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:

            }

            if (direction != 'vertical') {

                _.slideHandler(slideCount);
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction]);
            }
        } else {

            if (_.touchObject.startX !== _.touchObject.curX) {

                _.slideHandler(_.currentSlide);
                _.touchObject = {};
            }
        }
    };

    Slick.prototype.swipeHandler = function (event) {

        var _ = this;

        if (_.options.swipe === false || 'ontouchend' in document && _.options.swipe === false) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ? event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options.touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options.touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }
    };

    Slick.prototype.swipeMove = function (event) {

        var _ = this,
            edgeWasHit = false,
            curLeft,
            swipeDirection,
            swipeLength,
            positionOffset,
            touches,
            verticalSwipeLength;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        verticalSwipeLength = Math.round(Math.sqrt(Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
            _.scrolling = true;
            return false;
        }

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = verticalSwipeLength;
        }

        swipeDirection = _.swipeDirection();

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            _.swiping = true;
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }

        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if (_.currentSlide === 0 && swipeDirection === 'right' || _.currentSlide >= _.getDotCount() && swipeDirection === 'left') {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + swipeLength * (_.$list.height() / _.listWidth) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);
    };

    Slick.prototype.swipeStart = function (event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;
    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function () {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();
        }
    };

    Slick.prototype.unload = function () {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides.removeClass('slick-slide slick-active slick-visible slick-current').attr('aria-hidden', 'true').css('width', '');
    };

    Slick.prototype.unslick = function (fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();
    };

    Slick.prototype.updateArrows = function () {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow && !_.options.infinite) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            }
        }
    };

    Slick.prototype.updateDots = function () {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots.find('li').removeClass('slick-active').end();

            _.$dots.find('li').eq(Math.floor(_.currentSlide / _.options.slidesToScroll)).addClass('slick-active');
        }
    };

    Slick.prototype.visibility = function () {

        var _ = this;

        if (_.options.autoplay) {

            if (document[_.hidden]) {

                _.interrupted = true;
            } else {

                _.interrupted = false;
            }
        }
    };

    $.fn.slick = function () {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if ((typeof opt === 'undefined' ? 'undefined' : _typeof(opt)) == 'object' || typeof opt == 'undefined') _[i].slick = new Slick(_[i], opt);else ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };
});

/***/ }),

/***/ "./bower_components/svgxuse/svgxuse.min.js":
/*!*************************************************!*\
  !*** ./bower_components/svgxuse/svgxuse.min.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*!
 * @copyright Copyright (c) 2017 IcoMoon.io
 * @license   Licensed under MIT license
 *            See https://github.com/Keyamoon/svgxuse
 * @version   1.2.6
 */
(function () {
  if ("undefined" !== typeof window && window.addEventListener) {
    var e = Object.create(null),
        l,
        d = function d() {
      clearTimeout(l);l = setTimeout(n, 100);
    },
        m = function m() {},
        t = function t() {
      window.addEventListener("resize", d, !1);window.addEventListener("orientationchange", d, !1);if (window.MutationObserver) {
        var k = new MutationObserver(d);k.observe(document.documentElement, { childList: !0, subtree: !0, attributes: !0 });m = function m() {
          try {
            k.disconnect(), window.removeEventListener("resize", d, !1), window.removeEventListener("orientationchange", d, !1);
          } catch (v) {}
        };
      } else document.documentElement.addEventListener("DOMSubtreeModified", d, !1), m = function m() {
        document.documentElement.removeEventListener("DOMSubtreeModified", d, !1);window.removeEventListener("resize", d, !1);window.removeEventListener("orientationchange", d, !1);
      };
    },
        u = function u(k) {
      function e(a) {
        if (void 0 !== a.protocol) var c = a;else c = document.createElement("a"), c.href = a;return c.protocol.replace(/:/g, "") + c.host;
      }if (window.XMLHttpRequest) {
        var d = new XMLHttpRequest();var m = e(location);k = e(k);d = void 0 === d.withCredentials && "" !== k && k !== m ? XDomainRequest || void 0 : XMLHttpRequest;
      }return d;
    };var n = function n() {
      function d() {
        --q;0 === q && (m(), t());
      }function l(a) {
        return function () {
          !0 !== e[a.base] && (a.useEl.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", "#" + a.hash), a.useEl.hasAttribute("href") && a.useEl.setAttribute("href", "#" + a.hash));
        };
      }function p(a) {
        return function () {
          var c = document.body,
              b = document.createElement("x");a.onload = null;b.innerHTML = a.responseText;if (b = b.getElementsByTagName("svg")[0]) b.setAttribute("aria-hidden", "true"), b.style.position = "absolute", b.style.width = 0, b.style.height = 0, b.style.overflow = "hidden", c.insertBefore(b, c.firstChild);d();
        };
      }function n(a) {
        return function () {
          a.onerror = null;a.ontimeout = null;d();
        };
      }var a,
          c,
          q = 0;m();var f = document.getElementsByTagName("use");for (c = 0; c < f.length; c += 1) {
        try {
          var g = f[c].getBoundingClientRect();
        } catch (w) {
          g = !1;
        }var h = (a = f[c].getAttribute("href") || f[c].getAttributeNS("http://www.w3.org/1999/xlink", "href") || f[c].getAttribute("xlink:href")) && a.split ? a.split("#") : ["", ""];var b = h[0];h = h[1];var r = g && 0 === g.left && 0 === g.right && 0 === g.top && 0 === g.bottom;g && 0 === g.width && 0 === g.height && !r ? (f[c].hasAttribute("href") && f[c].setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", a), b.length && (a = e[b], !0 !== a && setTimeout(l({ useEl: f[c], base: b, hash: h }), 0), void 0 === a && (h = u(b), void 0 !== h && (a = new h(), e[b] = a, a.onload = p(a), a.onerror = n(a), a.ontimeout = n(a), a.open("GET", b), a.send(), q += 1)))) : r ? b.length && e[b] && setTimeout(l({ useEl: f[c], base: b, hash: h }), 0) : void 0 === e[b] ? e[b] = !0 : e[b].onload && (e[b].abort(), delete e[b].onload, e[b] = !0);
      }f = "";q += 1;d();
    };var p = function p() {
      window.removeEventListener("load", p, !1);l = setTimeout(n, 0);
    };"complete" !== document.readyState ? window.addEventListener("load", p, !1) : p();
  }
})();

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NvbXBvbmVudHMvbGlicy5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2Fpci1kYXRlcGlja2VyL2Rpc3QvanMvZGF0ZXBpY2tlci5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9ib290c3RyYXAtc2VsZWN0L2Rpc3QvanMvYm9vdHN0cmFwLXNlbGVjdC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9ib290c3RyYXAtc2VsZWN0L2Rpc3QvanMvaTE4bi9kZWZhdWx0cy1ydV9SVS5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9qcXVlcnktdWkvanF1ZXJ5LXVpLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2pxdWVyeS12YWxpZGF0aW9uL2Rpc3QvYWRkaXRpb25hbC1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5LXZhbGlkYXRpb24vZGlzdC9qcXVlcnkudmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9qcXVlcnktdmFsaWRhdGlvbi9kaXN0L2xvY2FsaXphdGlvbi9tZXNzYWdlc19ydS5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL2pxdWVyeS5tYXNrZWRpbnB1dC9kaXN0L2pxdWVyeS5tYXNrZWRpbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9ib3dlcl9jb21wb25lbnRzL21hZ25pZmljLXBvcHVwL2Rpc3QvanF1ZXJ5Lm1hZ25pZmljLXBvcHVwLmpzIiwid2VicGFjazovLy8uL2Jvd2VyX2NvbXBvbmVudHMvc2xpY2stY2Fyb3VzZWwvc2xpY2svc2xpY2suanMiLCJ3ZWJwYWNrOi8vLy4vYm93ZXJfY29tcG9uZW50cy9zdmd4dXNlL3N2Z3h1c2UubWluLmpzIiwid2VicGFjazovLy9leHRlcm5hbCBcImpRdWVyeVwiIl0sIm5hbWVzIjpbInQiLCJlIiwiaSIsInMiLCJhIiwibiIsImgiLCJvIiwiciIsImMiLCJkIiwibCIsImNsYXNzZXMiLCJpbmxpbmUiLCJsYW5ndWFnZSIsInN0YXJ0RGF0ZSIsIkRhdGUiLCJmaXJzdERheSIsIndlZWtlbmRzIiwiZGF0ZUZvcm1hdCIsImFsdEZpZWxkIiwiYWx0RmllbGREYXRlRm9ybWF0IiwidG9nZ2xlU2VsZWN0ZWQiLCJrZXlib2FyZE5hdiIsInBvc2l0aW9uIiwib2Zmc2V0IiwidmlldyIsIm1pblZpZXciLCJzaG93T3RoZXJNb250aHMiLCJzZWxlY3RPdGhlck1vbnRocyIsIm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QiLCJzaG93T3RoZXJZZWFycyIsInNlbGVjdE90aGVyWWVhcnMiLCJtb3ZlVG9PdGhlclllYXJzT25TZWxlY3QiLCJtaW5EYXRlIiwibWF4RGF0ZSIsImRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZSIsIm11bHRpcGxlRGF0ZXMiLCJtdWx0aXBsZURhdGVzU2VwYXJhdG9yIiwicmFuZ2UiLCJ0b2RheUJ1dHRvbiIsImNsZWFyQnV0dG9uIiwic2hvd0V2ZW50IiwiYXV0b0Nsb3NlIiwibW9udGhzRmllbGQiLCJwcmV2SHRtbCIsIm5leHRIdG1sIiwibmF2VGl0bGVzIiwiZGF5cyIsIm1vbnRocyIsInllYXJzIiwidGltZXBpY2tlciIsIm9ubHlUaW1lcGlja2VyIiwiZGF0ZVRpbWVTZXBhcmF0b3IiLCJ0aW1lRm9ybWF0IiwibWluSG91cnMiLCJtYXhIb3VycyIsIm1pbk1pbnV0ZXMiLCJtYXhNaW51dGVzIiwiaG91cnNTdGVwIiwibWludXRlc1N0ZXAiLCJvblNlbGVjdCIsIm9uU2hvdyIsIm9uSGlkZSIsIm9uQ2hhbmdlTW9udGgiLCJvbkNoYW5nZVllYXIiLCJvbkNoYW5nZURlY2FkZSIsIm9uQ2hhbmdlVmlldyIsIm9uUmVuZGVyQ2VsbCIsInUiLCJjdHJsUmlnaHQiLCJjdHJsVXAiLCJjdHJsTGVmdCIsImN0cmxEb3duIiwic2hpZnRSaWdodCIsInNoaWZ0VXAiLCJzaGlmdExlZnQiLCJzaGlmdERvd24iLCJhbHRVcCIsImFsdFJpZ2h0IiwiYWx0TGVmdCIsImFsdERvd24iLCJjdHJsU2hpZnRVcCIsIm0iLCJlbCIsIiRlbCIsIm9wdHMiLCJleHRlbmQiLCJkYXRhIiwibm9kZU5hbWUiLCJlbElzSW5wdXQiLCIkYWx0RmllbGQiLCJpbml0ZWQiLCJ2aXNpYmxlIiwic2lsZW50IiwiY3VycmVudERhdGUiLCJjdXJyZW50VmlldyIsIl9jcmVhdGVTaG9ydEN1dHMiLCJzZWxlY3RlZERhdGVzIiwidmlld3MiLCJrZXlzIiwibWluUmFuZ2UiLCJtYXhSYW5nZSIsIl9wcmV2T25TZWxlY3RWYWx1ZSIsImluaXQiLCJwcm90b3R5cGUiLCJWRVJTSU9OIiwidmlld0luZGV4ZXMiLCJfYnVpbGREYXRlcGlja2Vyc0NvbnRhaW5lciIsIl9idWlsZEJhc2VIdG1sIiwiX2RlZmluZUxvY2FsZSIsIl9zeW5jV2l0aE1pbk1heERhdGVzIiwiX3NldFBvc2l0aW9uQ2xhc3NlcyIsIl9iaW5kRXZlbnRzIiwiX2JpbmRLZXlib2FyZEV2ZW50cyIsIiRkYXRlcGlja2VyIiwib24iLCJfb25Nb3VzZURvd25EYXRlcGlja2VyIiwiYmluZCIsIl9vbk1vdXNlVXBEYXRlcGlja2VyIiwiYWRkQ2xhc3MiLCJmbiIsImRhdGVwaWNrZXIiLCJUaW1lcGlja2VyIiwiX2JpbmRUaW1lcGlja2VyRXZlbnRzIiwiQm9keSIsInNob3ciLCJuYXYiLCJOYXZpZ2F0aW9uIiwiX29uQ2xpY2tDZWxsIiwiX29uTW91c2VFbnRlckNlbGwiLCJfb25Nb3VzZUxlYXZlQ2VsbCIsIl9vblNob3dFdmVudCIsIl9vbk1vdXNlVXBFbCIsIl9vbkJsdXIiLCJfb25LZXlVcEdlbmVyYWwiLCJfb25SZXNpemUiLCJfb25Nb3VzZVVwQm9keSIsIl9vbktleURvd24iLCJfb25LZXlVcCIsIl9vbkhvdEtleSIsIl9vblRpbWVDaGFuZ2UiLCJpc1dlZWtlbmQiLCJpbmRleE9mIiwibG9jIiwiY29uc29sZSIsIndhcm4iLCJydSIsImpvaW4iLCJfZ2V0V29yZEJvdW5kYXJ5UmVnRXhwIiwibWF0Y2giLCJhbXBtIiwiYXBwZW5kIiwiaW5zZXJ0QWZ0ZXIiLCJhcHBlbmRUbyIsIiRjb250ZW50IiwiJG5hdiIsIl90cmlnZ2VyT25DaGFuZ2UiLCJsZW5ndGgiLCJnZXRQYXJzZWREYXRlIiwieWVhciIsIm1vbnRoIiwiZGF0ZSIsImhvdXJzIiwibWludXRlcyIsIm1hcCIsImZvcm1hdERhdGUiLCJuZXh0IiwicGFyc2VkRGF0ZSIsImN1ckRlY2FkZSIsInByZXYiLCJnZXRMZWFkaW5nWmVyb051bSIsImdldERlY2FkZSIsImZ1bGxIb3VycyIsInAiLCJfcmVwbGFjZXIiLCJfZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlIiwiZGF5UGVyaW9kIiwidGVzdCIsInJlcGxhY2UiLCJnZXRUaW1lIiwidG9VcHBlckNhc2UiLCJmdWxsRGF0ZSIsImRheSIsImRheXNTaG9ydCIsImZ1bGxNb250aCIsIm1vbnRoc1Nob3J0IiwiZnVsbE1pbnV0ZXMiLCJ0b1N0cmluZyIsInNsaWNlIiwiUmVnRXhwIiwic2VsZWN0RGF0ZSIsIkFycmF5IiwiaXNBcnJheSIsImZvckVhY2giLCJsYXN0U2VsZWN0ZWREYXRlIiwiX3NldFRpbWUiLCJfdHJpZ2dlciIsInNldEhvdXJzIiwic2V0TWludXRlcyIsImdldE1vbnRoIiwiZ2V0RnVsbFllYXIiLCJfcmVuZGVyIiwiX2lzU2VsZWN0ZWQiLCJwdXNoIiwiYmlnZ2VyIiwiX3NldElucHV0VmFsdWUiLCJ0aW1lcGlja2VySXNBY3RpdmUiLCJoaWRlIiwicmVtb3ZlRGF0ZSIsInNvbWUiLCJpc1NhbWUiLCJzcGxpY2UiLCJ0b2RheSIsImNsZWFyIiwidXBkYXRlIiwiYXJndW1lbnRzIiwiX2FkZEJ1dHRvbnNJZk5lZWQiLCJzZXRQb3NpdGlvbiIsIl9oYW5kbGVEYXRlIiwiX3VwZGF0ZVJhbmdlcyIsIl91cGRhdGVDdXJyZW50VGltZSIsIm1pblRpbWUiLCJtYXhUaW1lIiwidmFsIiwiX2lzSW5SYW5nZSIsIl9nZXREaW1lbnNpb25zIiwid2lkdGgiLCJvdXRlcldpZHRoIiwiaGVpZ2h0Iiwib3V0ZXJIZWlnaHQiLCJsZWZ0IiwidG9wIiwiX2dldERhdGVGcm9tQ2VsbCIsInNwbGl0IiwicmVtb3ZlQXR0ciIsImNzcyIsIl9iaW5kVmlzaW9uRXZlbnRzIiwicmVtb3ZlQ2xhc3MiLCJmb2N1c2VkIiwiaW5Gb2N1cyIsImJsdXIiLCJkb3duIiwiX2NoYW5nZVZpZXciLCJ1cCIsIm9mZiIsIm9uZSIsInZpZXdJbmRleCIsIl9oYW5kbGVIb3RLZXkiLCJfZ2V0Rm9jdXNlZERhdGUiLCJnZXREYXlzQ291bnQiLCJfcmVnaXN0ZXJLZXkiLCJfdW5SZWdpc3RlcktleSIsIl9pc0hvdEtleVByZXNzZWQiLCJzb3J0IiwiZXZlcnkiLCJ0cmlnZ2VyIiwiX2ZvY3VzTmV4dENlbGwiLCJjZWxsVHlwZSIsImdldERhdGUiLCJfZ2V0Q2VsbCIsImZpbmQiLCJkZXN0cm95IiwiY2xvc2VzdCIsInJlbW92ZSIsIl9oYW5kbGVBbHJlYWR5U2VsZWN0ZWREYXRlcyIsIm9yaWdpbmFsRXZlbnQiLCJ0aW1lcGlja2VyRm9jdXMiLCJmb2N1cyIsInNldFRpbWVvdXQiLCJ3aGljaCIsInByZXZlbnREZWZhdWx0IiwiaGFzQ2xhc3MiLCJ0YXJnZXQiLCJsZXNzIiwiX3VwZGF0ZSIsIl9mb2N1c2VkIiwicHJldlZpZXciLCJzdWJzdHJpbmciLCJnZXREYXkiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJNYXRoIiwiZmxvb3IiLCJ0ZW1wbGF0ZSIsInBhcnNlSW50IiwicmVzZXRUaW1lIiwiZWFjaCIsIkNvbnN0cnVjdG9yIiwiZGF5c01pbiIsInR5cGUiLCJwcm94eSIsIiRuYW1lcyIsIiRjZWxscyIsIl9nZXREYXlOYW1lc0h0bWwiLCJfZ2V0Q2VsbENvbnRlbnRzIiwiaHRtbCIsImRpc2FibGVkIiwiX2dldERheXNIdG1sIiwiX2dldERheUh0bWwiLCJfZ2V0TW9udGhzSHRtbCIsIl9nZXRNb250aEh0bWwiLCJfZ2V0WWVhcnNIdG1sIiwiX2dldFllYXJIdG1sIiwiX3JlbmRlclR5cGVzIiwiYXR0ciIsImFjaXR2ZSIsImFjdGl2ZSIsIl9oYW5kbGVDbGljayIsIiRidXR0b25zQ29udGFpbmVyIiwiX29uQ2xpY2tOYXZCdXR0b24iLCJfb25DbGlja05hdlRpdGxlIiwiX2FkZEJ1dHRvbiIsIl9nZXRUaXRsZSIsInRpdGxlIiwic2V0TmF2U3RhdHVzIiwiX2FkZEJ1dHRvbnNDb250YWluZXIiLCJhY3Rpb24iLCJsYWJlbCIsIl9kaXNhYmxlTmF2IiwiX2FjdGl2YXRlTmF2IiwiX2J1aWxkSFRNTCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIl9vblNlbGVjdERhdGUiLCIkcmFuZ2VzIiwiX29uQ2hhbmdlUmFuZ2UiLCJfb25Nb3VzZVVwUmFuZ2UiLCJfb25Nb3VzZUVudGVyUmFuZ2UiLCJfb25Nb3VzZU91dFJhbmdlIiwiX3NldE1pblRpbWVGcm9tRGF0ZSIsIl9zZXRNYXhUaW1lRnJvbURhdGUiLCJfc2V0RGVmYXVsdE1pbk1heFRpbWUiLCJfdmFsaWRhdGVIb3Vyc01pbnV0ZXMiLCJob3VyTWluIiwiaG91ck1heCIsImhvdXJTdGVwIiwiaG91clZhbHVlIiwiaG91clZpc2libGUiLCJkaXNwbGF5SG91cnMiLCJtaW5NaW4iLCJtaW5NYXgiLCJtaW5TdGVwIiwibWluVmFsdWUiLCIkdGltZXBpY2tlciIsIiRob3VycyIsIiRtaW51dGVzIiwiJGhvdXJzVGV4dCIsIiRtaW51dGVzVGV4dCIsIiRhbXBtIiwibWluIiwibWF4IiwiX2hvdXJzIiwid2luZG93IiwialF1ZXJ5IiwiZGVmaW5lIiwieiIsImFyZWEiLCJiIiwiYnIiLCJjb2wiLCJjb2RlIiwiZGl2IiwiZW0iLCJociIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImltZyIsImxpIiwib2wiLCJwcmUiLCJzbWFsbCIsInNwYW4iLCJzdWIiLCJzdXAiLCJzdHJvbmciLCJ1bCIsInYiLCJ0b0xvd2VyQ2FzZSIsImluQXJyYXkiLCJCb29sZWFuIiwibm9kZVZhbHVlIiwiZmlsdGVyIiwiUCIsIk9iamVjdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjYWxsIiwiYXR0cmlidXRlcyIsImNvbmNhdCIsImYiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJFbGVtZW50IiwiYWRkIiwidG9nZ2xlIiwidG9nZ2xlQ2xhc3MiLCJjb250YWlucyIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIm51bWJlciIsIl9fZGVmaW5lR2V0dGVyX18iLCJjbGFzc0xpc3QiLCJET01Ub2tlbkxpc3QiLCJPIiwic2VsZWN0ZWRPcHRpb25zIiwidGFnTmFtZSIsInZhbHVlIiwidGV4dCIsIm11bHRpcGxlIiwiU3RyaW5nIiwic3RhcnRzV2l0aCIsIlR5cGVFcnJvciIsIk51bWJlciIsImNoYXJDb2RlQXQiLCJ3cml0YWJsZSIsImhhc093blByb3BlcnR5IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJ1c2VEZWZhdWx0IiwiX3NldCIsInZhbEhvb2tzIiwic2VsZWN0Iiwic2V0IiwiYXBwbHkiLCJUIiwiRXZlbnQiLCJrIiwidyIsIkEiLCJ0cmlnZ2VyTmF0aXZlIiwiZGlzcGF0Y2hFdmVudCIsImJ1YmJsZXMiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImZpcmVFdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiZXZlbnRUeXBlIiwiZyIsIkkiLCJ4IiwiJCIsInkiLCJTIiwiRSIsIkMiLCJMIiwiTiIsIkQiLCJIIiwiQiIsIlciLCJNIiwic3VjY2VzcyIsIm1ham9yIiwiZnVsbCIsImRyb3Bkb3duIiwiUiIsIlUiLCJqIiwiRElTQUJMRUQiLCJESVZJREVSIiwiU0hPVyIsIkRST1BVUCIsIk1FTlUiLCJNRU5VUklHSFQiLCJNRU5VTEVGVCIsIkJVVFRPTkNMQVNTIiwiUE9QT1ZFUkhFQURFUiIsIklDT05CQVNFIiwiVElDS0lDT04iLCJWIiwiRiIsInN1YnRleHQiLCJ3aGl0ZXNwYWNlIiwiY3JlYXRlVGV4dE5vZGUiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc05hbWUiLCJjbG9uZU5vZGUiLCJjaGVja01hcmsiLCJfIiwiRyIsInEiLCJub2RlVHlwZSIsImFwcGVuZENoaWxkIiwiaW5uZXJIVE1MIiwiSyIsImluc2VydEFkamFjZW50SFRNTCIsIlkiLCJjb250ZW50IiwidGV4dENvbnRlbnQiLCJpY29uIiwiaWNvbkJhc2UiLCJjaGlsZE5vZGVzIiwiWiIsIkoiLCIkZWxlbWVudCIsIiRuZXdFbGVtZW50IiwiJGJ1dHRvbiIsIiRtZW51Iiwib3B0aW9ucyIsInNlbGVjdHBpY2tlciIsIm1haW4iLCJzZWFyY2giLCJjdXJyZW50Iiwia2V5ZG93biIsImtleUhpc3RvcnkiLCJyZXNldEtleUhpc3RvcnkiLCJzdGFydCIsIndpbmRvd1BhZGRpbmciLCJyZW5kZXIiLCJyZWZyZXNoIiwic2V0U3R5bGUiLCJzZWxlY3RBbGwiLCJkZXNlbGVjdEFsbCIsIlEiLCJzaGlmdCIsIkJvb3RzdHJhcFZlcnNpb24iLCJERUZBVUxUUyIsInN0eWxlIiwibmFtZSIsInRpY2tJY29uIiwiaXMiLCJkZWZhdWx0cyIsIkZ1bmN0aW9uIiwibm9uZVNlbGVjdGVkVGV4dCIsIm5vbmVSZXN1bHRzVGV4dCIsImNvdW50U2VsZWN0ZWRUZXh0IiwibWF4T3B0aW9uc1RleHQiLCJzZWxlY3RBbGxUZXh0IiwiZGVzZWxlY3RBbGxUZXh0IiwiZG9uZUJ1dHRvbiIsImRvbmVCdXR0b25UZXh0IiwibXVsdGlwbGVTZXBhcmF0b3IiLCJzdHlsZUJhc2UiLCJzaXplIiwic2VsZWN0ZWRUZXh0Rm9ybWF0IiwiY29udGFpbmVyIiwiaGlkZURpc2FibGVkIiwic2hvd1N1YnRleHQiLCJzaG93SWNvbiIsInNob3dDb250ZW50IiwiZHJvcHVwQXV0byIsImhlYWRlciIsImxpdmVTZWFyY2giLCJsaXZlU2VhcmNoUGxhY2Vob2xkZXIiLCJsaXZlU2VhcmNoTm9ybWFsaXplIiwibGl2ZVNlYXJjaFN0eWxlIiwiYWN0aW9uc0JveCIsInNob3dUaWNrIiwiY2FyZXQiLCJtYXhPcHRpb25zIiwibW9iaWxlIiwic2VsZWN0T25UYWIiLCJkcm9wZG93bkFsaWduUmlnaHQiLCJ2aXJ0dWFsU2Nyb2xsIiwiZGlzcGxheSIsInNhbml0aXplIiwic2FuaXRpemVGbiIsIndoaXRlTGlzdCIsImNvbnN0cnVjdG9yIiwic2VsZWN0SWQiLCJwcm9wIiwiYXV0b2ZvY3VzIiwiY3JlYXRlRHJvcGRvd24iLCJhZnRlciIsInByZXBlbmRUbyIsImNoaWxkcmVuIiwiJG1lbnVJbm5lciIsIiRzZWFyY2hib3giLCJjaGVja0Rpc2FibGVkIiwiY2xpY2tMaXN0ZW5lciIsImxpdmVTZWFyY2hMaXN0ZW5lciIsImZvY3VzZWRQYXJlbnQiLCJzZXRXaWR0aCIsInNlbGVjdFBvc2l0aW9uIiwiaXNWaXJ0dWFsIiwiZmlyc3RDaGlsZCIsInJlcGxhY2VDaGlsZCIsInNjcm9sbFRvcCIsImhhc0F0dHJpYnV0ZSIsInZhbGlkaXR5IiwidmFsaWQiLCJjcmVhdGVMaSIsInBhcmVudCIsInNldFBvc2l0aW9uRGF0YSIsImNhbkhpZ2hsaWdodCIsInNpemVJbmZvIiwiZGl2aWRlckhlaWdodCIsImRyb3Bkb3duSGVhZGVySGVpZ2h0IiwibGlIZWlnaHQiLCJwb3NpbnNldCIsImVsZW1lbnRzIiwiY3JlYXRlVmlldyIsInNlbGVjdGVkSW5kZXgiLCJsaUluZGV4IiwibWVudUlubmVySGVpZ2h0IiwiaGFzU2Nyb2xsQmFyIiwib2Zmc2V0V2lkdGgiLCJ0b3RhbE1lbnVXaWR0aCIsIm1lbnVXaWR0aCIsInNjcm9sbEJhcldpZHRoIiwiY2VpbCIsInJvdW5kIiwicG9zaXRpb24wIiwicG9zaXRpb24xIiwiYWN0aXZlSW5kZXgiLCJwcmV2QWN0aXZlSW5kZXgiLCJkZWZvY3VzSXRlbSIsInZpc2libGVFbGVtZW50cyIsInNldE9wdGlvblN0YXR1cyIsImxhc3RDaGlsZCIsInNhbml0aXplZCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpblRvcCIsImN1cnJlbnRBY3RpdmUiLCJpbmRleCIsImZvY3VzSXRlbSIsIm5vU2Nyb2xsIiwiaWQiLCJzZXRQbGFjZWhvbGRlciIsInRpdGxlT3B0aW9uIiwiaW5zZXJ0QmVmb3JlIiwib3B0SUQiLCJkaXZpZGVyIiwiZ2V0QXR0cmlidXRlIiwiY3NzVGV4dCIsIm9wdGdyb3VwQ2xhc3MiLCJ0b2tlbnMiLCJvcHRpb24iLCJ3aWRlc3RPcHRpb24iLCJoZWFkZXJJbmRleCIsImxhc3RJbmRleCIsImZpbmRMaXMiLCJxdWVyeVNlbGVjdG9yIiwidGFiSW5kZXgiLCJ0cmltIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsIm5leHRFbGVtZW50U2libGluZyIsInNlbGVjdFdpZHRoIiwibWluV2lkdGgiLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInZlcnQiLCJwYWRkaW5nVG9wIiwicGFkZGluZ0JvdHRvbSIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJob3JpeiIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyUmlnaHRXaWR0aCIsIm1hcmdpbkxlZnQiLCJtYXJnaW5SaWdodCIsIm92ZXJmbG93WSIsImhlYWRlckhlaWdodCIsInNlYXJjaEhlaWdodCIsImFjdGlvbnNIZWlnaHQiLCJkb25lQnV0dG9uSGVpZ2h0IiwibWVudVBhZGRpbmciLCJtZW51RXh0cmFzIiwic2VsZWN0SGVpZ2h0IiwiZ2V0U2VsZWN0UG9zaXRpb24iLCJzZWxlY3RPZmZzZXRUb3AiLCJzZWxlY3RPZmZzZXRCb3QiLCJzZWxlY3RPZmZzZXRMZWZ0Iiwic2Nyb2xsTGVmdCIsInNlbGVjdE9mZnNldFJpZ2h0Iiwic2V0TWVudVNpemUiLCJvdmVyZmxvdyIsIl9wb3BwZXIiLCJzZXRTaXplIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xvbmUiLCIkYnNDb250YWluZXIiLCJEZWZhdWx0IiwiaXNEaXNhYmxlZCIsImRldGFjaCIsInNldERpc2FibGVkIiwic2V0U2VsZWN0ZWQiLCJzZWxlY3RlZCIsInN0YXRlIiwiaXNDcmVhdGVkIiwia2V5Q29kZSIsIl9tZW51IiwicGFyZW50RWxlbWVudCIsInN0b3BQcm9wYWdhdGlvbiIsImRlbGF5IiwiZmFkZU91dCIsImN1cnJlbnRUYXJnZXQiLCJfc2VhcmNoU3R5bGUiLCJfJGxpc1NlbGVjdGVkIiwiY2hhbmdlQWxsIiwiZXZlbnQiLCJsYXN0SW5kZXhPZiIsInNjcm9sbEhlaWdodCIsImNhbmNlbCIsImNsZWFyVGltZW91dCIsImNoYXJBdCIsImJlZm9yZSIsInJlbW92ZURhdGEiLCJYIiwibm9Db25mbGljdCIsImlzTmFOIiwiX2N1ckluc3QiLCJfa2V5RXZlbnQiLCJfZGlzYWJsZWRJbnB1dHMiLCJfZGF0ZXBpY2tlclNob3dpbmciLCJfaW5EaWFsb2ciLCJfbWFpbkRpdklkIiwiX2lubGluZUNsYXNzIiwiX2FwcGVuZENsYXNzIiwiX3RyaWdnZXJDbGFzcyIsIl9kaWFsb2dDbGFzcyIsIl9kaXNhYmxlQ2xhc3MiLCJfdW5zZWxlY3RhYmxlQ2xhc3MiLCJfY3VycmVudENsYXNzIiwiX2RheU92ZXJDbGFzcyIsInJlZ2lvbmFsIiwiY2xvc2VUZXh0IiwicHJldlRleHQiLCJuZXh0VGV4dCIsImN1cnJlbnRUZXh0IiwibW9udGhOYW1lcyIsIm1vbnRoTmFtZXNTaG9ydCIsImRheU5hbWVzIiwiZGF5TmFtZXNTaG9ydCIsImRheU5hbWVzTWluIiwid2Vla0hlYWRlciIsImlzUlRMIiwic2hvd01vbnRoQWZ0ZXJZZWFyIiwieWVhclN1ZmZpeCIsIl9kZWZhdWx0cyIsInNob3dPbiIsInNob3dBbmltIiwic2hvd09wdGlvbnMiLCJkZWZhdWx0RGF0ZSIsImFwcGVuZFRleHQiLCJidXR0b25UZXh0IiwiYnV0dG9uSW1hZ2UiLCJidXR0b25JbWFnZU9ubHkiLCJoaWRlSWZOb1ByZXZOZXh0IiwibmF2aWdhdGlvbkFzRGF0ZUZvcm1hdCIsImdvdG9DdXJyZW50IiwiY2hhbmdlTW9udGgiLCJjaGFuZ2VZZWFyIiwieWVhclJhbmdlIiwic2hvd1dlZWsiLCJjYWxjdWxhdGVXZWVrIiwiaXNvODYwMVdlZWsiLCJzaG9ydFllYXJDdXRvZmYiLCJkdXJhdGlvbiIsImJlZm9yZVNob3dEYXkiLCJiZWZvcmVTaG93Iiwib25DaGFuZ2VNb250aFllYXIiLCJvbkNsb3NlIiwibnVtYmVyT2ZNb250aHMiLCJzaG93Q3VycmVudEF0UG9zIiwic3RlcE1vbnRocyIsInN0ZXBCaWdNb250aHMiLCJhbHRGb3JtYXQiLCJjb25zdHJhaW5JbnB1dCIsInNob3dCdXR0b25QYW5lbCIsImF1dG9TaXplIiwiZW4iLCJkcERpdiIsIl9pc0Rpc2FibGVkRGF0ZXBpY2tlciIsImlucHV0IiwicGFyZW50cyIsImVsZW1lbnQiLCJfcmVmcmVzaCIsInVpIiwidmVyc2lvbiIsImNsZWFuRGF0YSIsIl9kYXRhIiwidHJpZ2dlckhhbmRsZXIiLCJ3aWRnZXQiLCJXaWRnZXQiLCJleHByIiwiX2NyZWF0ZVdpZGdldCIsIl9wcm90byIsIl9jaGlsZENvbnN0cnVjdG9ycyIsImlzRnVuY3Rpb24iLCJfc3VwZXIiLCJfc3VwZXJBcHBseSIsIndpZGdldEV2ZW50UHJlZml4IiwibmFtZXNwYWNlIiwid2lkZ2V0TmFtZSIsIndpZGdldEZ1bGxOYW1lIiwiYnJpZGdlIiwiaXNQbGFpbk9iamVjdCIsImpxdWVyeSIsInB1c2hTdGFjayIsImVycm9yIiwiX2luaXQiLCJkZWZhdWx0RWxlbWVudCIsImNyZWF0ZSIsInV1aWQiLCJldmVudE5hbWVzcGFjZSIsImJpbmRpbmdzIiwiaG92ZXJhYmxlIiwiZm9jdXNhYmxlIiwiY2xhc3Nlc0VsZW1lbnRMb29rdXAiLCJfb24iLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJfZ2V0Q3JlYXRlT3B0aW9ucyIsIl9jcmVhdGUiLCJfc2V0T3B0aW9uRGlzYWJsZWQiLCJfZ2V0Q3JlYXRlRXZlbnREYXRhIiwibm9vcCIsIl9kZXN0cm95IiwiX3JlbW92ZUNsYXNzIiwicG9wIiwiX3NldE9wdGlvbnMiLCJfc2V0T3B0aW9uIiwiX3NldE9wdGlvbkNsYXNzZXMiLCJfY2xhc3NlcyIsIl90b2dnbGVDbGFzcyIsImVuYWJsZSIsImRpc2FibGUiLCJ1bmlxdWUiLCJub3QiLCJleHRyYSIsIl91bnRyYWNrQ2xhc3Nlc0VsZW1lbnQiLCJfYWRkQ2xhc3MiLCJndWlkIiwiX29mZiIsIl9kZWxheSIsIl9ob3ZlcmFibGUiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIl9mb2N1c2FibGUiLCJmb2N1c2luIiwiZm9jdXNvdXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJlZmZlY3QiLCJpc0VtcHR5T2JqZWN0IiwiY29tcGxldGUiLCJlZmZlY3RzIiwiZWFzaW5nIiwicXVldWUiLCJwYXJzZUZsb2F0IiwiaXNXaW5kb3ciLCJwYWdlWSIsInBhZ2VYIiwiYWJzIiwic2Nyb2xsYmFyV2lkdGgiLCJjbGllbnRXaWR0aCIsImdldFNjcm9sbEluZm8iLCJpc0RvY3VtZW50Iiwic2Nyb2xsV2lkdGgiLCJnZXRXaXRoaW5JbmZvIiwib2YiLCJ3aXRoaW4iLCJjb2xsaXNpb24iLCJhdCIsImV4ZWMiLCJteSIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiZWxlbVdpZHRoIiwiZWxlbUhlaWdodCIsImNvbGxpc2lvblBvc2l0aW9uIiwiY29sbGlzaW9uV2lkdGgiLCJjb2xsaXNpb25IZWlnaHQiLCJlbGVtIiwidXNpbmciLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJpbXBvcnRhbnQiLCJmaXQiLCJmbGlwIiwiZmxpcGZpdCIsImNyZWF0ZVBzZXVkbyIsImRpc2FibGVTZWxlY3Rpb24iLCJlbmFibGVTZWxlY3Rpb24iLCJkZWYiLCJtb2QiLCJfcmdiYSIsInJlIiwicGFyc2UiLCJzcGFjZSIsImNhY2hlIiwidHJhbnNwYXJlbnQiLCJDb2xvciIsInJnYmEiLCJwcm9wcyIsInJlZCIsImlkeCIsImdyZWVuIiwiYmx1ZSIsImhzbGEiLCJodWUiLCJzYXR1cmF0aW9uIiwibGlnaHRuZXNzIiwicGVyY2VudCIsImRlZ3JlZXMiLCJzdXBwb3J0IiwiYmFja2dyb3VuZENvbG9yIiwiYWxwaGEiLCJfZGVmYXVsdCIsInRvIiwiZnJvbSIsIl9zcGFjZSIsInRyYW5zaXRpb24iLCJibGVuZCIsInRvUmdiYVN0cmluZyIsInRvSHNsYVN0cmluZyIsInRvSGV4U3RyaW5nIiwiX2hzbGEiLCJlbXB0eSIsImhvb2siLCJjc3NIb29rcyIsImZ4Iiwic3RlcCIsImNvbG9ySW5pdCIsImVuZCIsInBvcyIsImJvcmRlckNvbG9yIiwiZXhwYW5kIiwibmFtZXMiLCJhcXVhIiwiYmxhY2siLCJmdWNoc2lhIiwiZ3JheSIsImxpbWUiLCJtYXJvb24iLCJuYXZ5Iiwib2xpdmUiLCJwdXJwbGUiLCJzaWx2ZXIiLCJ0ZWFsIiwid2hpdGUiLCJ5ZWxsb3ciLCJjdXJyZW50U3R5bGUiLCJjYW1lbENhc2UiLCJib3JkZXIiLCJib3JkZXJCb3R0b20iLCJib3JkZXJMZWZ0IiwiYm9yZGVyUmlnaHQiLCJib3JkZXJUb3AiLCJib3JkZXJXaWR0aCIsIm1hcmdpbiIsInBhZGRpbmciLCJzZXRBdHRyIiwiYWRkQmFjayIsInByZXZPYmplY3QiLCJhbmltYXRlQ2xhc3MiLCJzcGVlZCIsImRpZmYiLCJEZWZlcnJlZCIsInJlc29sdmUiLCJhbmltYXRlIiwicHJvbWlzZSIsIndoZW4iLCJkb25lIiwic3dpdGNoQ2xhc3MiLCJzcGVlZHMiLCJyaWdodCIsImJvdHRvbSIsImZpbHRlcnMiLCJhbmltYXRlZCIsInVpQmFja0NvbXBhdCIsInNhdmUiLCJyZXN0b3JlIiwic2V0TW9kZSIsImNyZWF0ZVdyYXBwZXIiLCJmb250U2l6ZSIsImJhY2tncm91bmQiLCJhY3RpdmVFbGVtZW50Iiwid3JhcCIsInpJbmRleCIsInJlbW92ZVdyYXBwZXIiLCJyZXBsYWNlV2l0aCIsIm1vZGUiLCJzY2FsZWREaW1lbnNpb25zIiwiY2xpcFRvQm94IiwiY2xpcCIsInVuc2hpZnQiLCJkZXF1ZXVlIiwic2F2ZVN0eWxlIiwicmVzdG9yZVN0eWxlIiwiZ2V0QmFzZWxpbmUiLCJjcmVhdGVQbGFjZWhvbGRlciIsInZpc2liaWxpdHkiLCJyZW1vdmVQbGFjZWhvbGRlciIsImNsZWFuVXAiLCJzZXRUcmFuc2l0aW9uIiwiY3NzVW5pdCIsImNzc0NsaXAiLCJ0cmFuc2ZlciIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsImNsaXBJbml0IiwicG93IiwiU2luZSIsImNvcyIsIlBJIiwiQ2lyYyIsInNxcnQiLCJFbGFzdGljIiwic2luIiwiQmFjayIsIkJvdW5jZSIsImRpcmVjdGlvbiIsImRpc3RhbmNlIiwidGltZXMiLCJvcGFjaXR5IiwicGllY2VzIiwiaG9yaXpGaXJzdCIsImJhY2tncm91bmRJbWFnZSIsImNvbG9yIiwic2NhbGUiLCJvcmlnaW4iLCJmYWRlIiwiaHJlZiIsImZvcm0iLCJmb3JtUmVzZXRNaXhpbiIsIl9mb3JtUmVzZXRIYW5kbGVyIiwiX2JpbmRGb3JtUmVzZXRIYW5kbGVyIiwiX3VuYmluZEZvcm1SZXNldEhhbmRsZXIiLCJCQUNLU1BBQ0UiLCJDT01NQSIsIkRFTEVURSIsIkRPV04iLCJFTkQiLCJFTlRFUiIsIkVTQ0FQRSIsIkhPTUUiLCJMRUZUIiwiUEFHRV9ET1dOIiwiUEFHRV9VUCIsIlBFUklPRCIsIlJJR0hUIiwiU1BBQ0UiLCJUQUIiLCJVUCIsImVzY2FwZVNlbGVjdG9yIiwibGFiZWxzIiwiZXEiLCJsYXN0Iiwic2libGluZ3MiLCJzY3JvbGxQYXJlbnQiLCJ0YWJiYWJsZSIsInVuaXF1ZUlkIiwicmVtb3ZlVW5pcXVlSWQiLCJjb2xsYXBzaWJsZSIsImhlaWdodFN0eWxlIiwiaWNvbnMiLCJhY3RpdmVIZWFkZXIiLCJhY3RpdmF0ZSIsImJlZm9yZUFjdGl2YXRlIiwiaGlkZVByb3BzIiwic2hvd1Byb3BzIiwicHJldlNob3ciLCJwcmV2SGlkZSIsIl9wcm9jZXNzUGFuZWxzIiwiaGVhZGVycyIsInBhbmVsIiwiX2NyZWF0ZUljb25zIiwiX2Rlc3Ryb3lJY29ucyIsIl9hY3RpdmF0ZSIsIl9zZXR1cEV2ZW50cyIsIl9rZXlkb3duIiwiYWx0S2V5IiwiY3RybEtleSIsIl9ldmVudEhhbmRsZXIiLCJfcGFuZWxLZXlEb3duIiwicGFuZWxzIiwiX2ZpbmRBY3RpdmUiLCJvbGRIZWFkZXIiLCJvbGRQYW5lbCIsIm5ld0hlYWRlciIsIm5ld1BhbmVsIiwiX3RvZ2dsZSIsInN0b3AiLCJfYW5pbWF0ZSIsIl90b2dnbGVDb21wbGV0ZSIsIm5vdyIsInNhZmVBY3RpdmVFbGVtZW50Iiwic3VibWVudSIsIml0ZW1zIiwibWVudXMiLCJyb2xlIiwiYWN0aXZlTWVudSIsIm1vdXNlSGFuZGxlZCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaGFzIiwidGltZXIiLCJwcmV2aW91c0ZpbHRlciIsImNvbGxhcHNlQWxsIiwiY2xpY2siLCJfY2xvc2VPbkRvY3VtZW50Q2xpY2siLCJwcmV2aW91c1BhZ2UiLCJuZXh0UGFnZSIsIl9tb3ZlIiwicHJldmlvdXMiLCJjb2xsYXBzZSIsImZyb21DaGFyQ29kZSIsImZpbHRlclRpbWVyIiwiX2ZpbHRlck1lbnVJdGVtcyIsIm5leHRBbGwiLCJwcmVwZW5kIiwiX2lzRGl2aWRlciIsIl9pdGVtUm9sZSIsIm1lbnUiLCJsaXN0Ym94IiwiX3Njcm9sbEludG9WaWV3IiwiZmlyc3QiLCJfY2xvc2UiLCJfc3RhcnRPcGVuaW5nIiwiaXRlbSIsIl9oYXNTY3JvbGwiLCJfb3BlbiIsImlzRmlyc3RJdGVtIiwicHJldkFsbCIsImlzTGFzdEl0ZW0iLCJhdXRvRm9jdXMiLCJtaW5MZW5ndGgiLCJzb3VyY2UiLCJjaGFuZ2UiLCJjbG9zZSIsIm9wZW4iLCJyZXNwb25zZSIsInJlcXVlc3RJbmRleCIsInBlbmRpbmciLCJpc011bHRpTGluZSIsIl9pc0NvbnRlbnRFZGl0YWJsZSIsInZhbHVlTWV0aG9kIiwiaXNOZXdNZW51IiwiX3ZhbHVlIiwidGVybSIsIl9zZWFyY2hUaW1lb3V0Iiwia2V5cHJlc3MiLCJzZWxlY3RlZEl0ZW0iLCJjYW5jZWxCbHVyIiwic2VhcmNoaW5nIiwiX2NoYW5nZSIsIl9pbml0U291cmNlIiwiX2FwcGVuZFRvIiwibW91c2Vkb3duIiwibWVudWZvY3VzIiwibGl2ZVJlZ2lvbiIsIm1lbnVzZWxlY3QiLCJiZWZvcmV1bmxvYWQiLCJ4aHIiLCJhYm9ydCIsIl9pc0V2ZW50VGFyZ2V0SW5XaWRnZXQiLCJfY2xvc2VPbkNsaWNrT3V0c2lkZSIsImF1dG9jb21wbGV0ZSIsImFqYXgiLCJ1cmwiLCJkYXRhVHlwZSIsIm1ldGFLZXkiLCJzaGlmdEtleSIsIl9zZWFyY2giLCJjYW5jZWxTZWFyY2giLCJfcmVzcG9uc2UiLCJfX3Jlc3BvbnNlIiwiX25vcm1hbGl6ZSIsIl9zdWdnZXN0IiwiX3JlbmRlck1lbnUiLCJfcmVzaXplTWVudSIsIl9yZW5kZXJJdGVtRGF0YSIsIl9yZW5kZXJJdGVtIiwiZXNjYXBlUmVnZXgiLCJncmVwIiwibWVzc2FnZXMiLCJub1Jlc3VsdHMiLCJyZXN1bHRzIiwib25seVZpc2libGUiLCJidXR0b24iLCJjb250cm9sZ3JvdXBMYWJlbCIsImNoZWNrYm94cmFkaW8iLCJzZWxlY3RtZW51Iiwic3Bpbm5lciIsIl9lbmhhbmNlIiwiX2NhbGxDaGlsZE1ldGhvZCIsImNoaWxkV2lkZ2V0cyIsImNvbnRlbnRzIiwidW53cmFwIiwiX2luaXRXaWRnZXRzIiwid3JhcEFsbCIsIl9yZXNvbHZlQ2xhc3Nlc1ZhbHVlcyIsIl91cGRhdGVDb3JuZXJDbGFzcyIsIl9idWlsZFNpbXBsZU9wdGlvbnMiLCJtaWRkbGUiLCJvbmx5IiwiX3NwaW5uZXJPcHRpb25zIiwiX2J1dHRvbk9wdGlvbnMiLCJfY2hlY2tib3hyYWRpb09wdGlvbnMiLCJfc2VsZWN0bWVudU9wdGlvbnMiLCJfcmVhZFR5cGUiLCJvcmlnaW5hbExhYmVsIiwib3V0ZXJIVE1MIiwiY2hlY2tlZCIsIl91cGRhdGVMYWJlbCIsIl91cGRhdGVJY29uIiwiX2dldFJhZGlvR3JvdXAiLCJfdG9nZ2xlQ2xhc3NlcyIsImljb25TcGFjZSIsImljb25Qb3NpdGlvbiIsInNob3dMYWJlbCIsImlzSW5wdXQiLCJoYXNUaXRsZSIsImtleXVwIiwiX3VwZGF0ZVRvb2x0aXAiLCJfYXR0YWNoSWNvbiIsIl9hdHRhY2hJY29uU3BhY2UiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5IiwiYnV0dG9uc2V0IiwiY29udHJvbGdyb3VwIiwibWFya2VyQ2xhc3NOYW1lIiwibWF4Um93cyIsIl93aWRnZXREYXRlcGlja2VyIiwic2V0RGVmYXVsdHMiLCJfYXR0YWNoRGF0ZXBpY2tlciIsIl9uZXdJbnN0Iiwic2V0dGluZ3MiLCJfY29ubmVjdERhdGVwaWNrZXIiLCJfaW5saW5lRGF0ZXBpY2tlciIsInNlbGVjdGVkRGF5Iiwic2VsZWN0ZWRNb250aCIsInNlbGVjdGVkWWVhciIsImRyYXdNb250aCIsImRyYXdZZWFyIiwiX2F0dGFjaG1lbnRzIiwiX2RvS2V5RG93biIsIl9kb0tleVByZXNzIiwiX2RvS2V5VXAiLCJfYXV0b1NpemUiLCJfZGlzYWJsZURhdGVwaWNrZXIiLCJfZ2V0IiwiX3Nob3dEYXRlcGlja2VyIiwic3JjIiwiYWx0IiwiX2xhc3RJbnB1dCIsIl9oaWRlRGF0ZXBpY2tlciIsInNldE1vbnRoIiwic2V0RGF0ZSIsIl9mb3JtYXREYXRlIiwiX3NldERhdGUiLCJfZ2V0RGVmYXVsdERhdGUiLCJfdXBkYXRlRGF0ZXBpY2tlciIsIl91cGRhdGVBbHRlcm5hdGUiLCJfZGlhbG9nRGF0ZXBpY2tlciIsIl9kaWFsb2dJbnN0IiwiX2RpYWxvZ0lucHV0IiwiX3BvcyIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsImJsb2NrVUkiLCJfZGVzdHJveURhdGVwaWNrZXIiLCJfZW5hYmxlRGF0ZXBpY2tlciIsImN1cnNvciIsIl9nZXRJbnN0IiwiX29wdGlvbkRhdGVwaWNrZXIiLCJfZ2V0RGF0ZURhdGVwaWNrZXIiLCJfZ2V0TWluTWF4RGF0ZSIsIl9jaGFuZ2VEYXRlcGlja2VyIiwiX3JlZnJlc2hEYXRlcGlja2VyIiwiX3NldERhdGVEYXRlcGlja2VyIiwiX3NldERhdGVGcm9tRmllbGQiLCJfZ2V0RGF0ZSIsIl9zZWxlY3REYXkiLCJfYWRqdXN0RGF0ZSIsIl9jbGVhckRhdGUiLCJfZ290b1RvZGF5IiwiX3Bvc3NpYmxlQ2hhcnMiLCJjaGFyQ29kZSIsImxhc3RWYWwiLCJwYXJzZURhdGUiLCJfZ2V0Rm9ybWF0Q29uZmlnIiwiX2ZpbmRQb3MiLCJfY2hlY2tPZmZzZXQiLCJfc2hvdWxkRm9jdXNJbnB1dCIsIl9nZW5lcmF0ZUhUTUwiLCJfYXR0YWNoSGFuZGxlcnMiLCJfZ2V0TnVtYmVyT2ZNb250aHMiLCJ5ZWFyc2h0bWwiLCJoaWRkZW4iLCJfdGlkeURpYWxvZyIsInVuYmxvY2tVSSIsIl9jaGVja0V4dGVybmFsQ2xpY2siLCJfYWRqdXN0SW5zdERhdGUiLCJjdXJyZW50RGF5IiwiY3VycmVudE1vbnRoIiwiY3VycmVudFllYXIiLCJfbm90aWZ5Q2hhbmdlIiwiX3NlbGVjdE1vbnRoWWVhciIsIl9zZWxlY3REYXRlIiwibm9XZWVrZW5kcyIsInN1YnN0ciIsIl90aWNrc1RvMTk3MCIsIl9nZXREYXlzSW5Nb250aCIsIl9kYXlsaWdodFNhdmluZ0FkanVzdCIsIkFUT00iLCJDT09LSUUiLCJJU09fODYwMSIsIlJGQ184MjIiLCJSRkNfODUwIiwiUkZDXzEwMzYiLCJSRkNfMTEyMyIsIlJGQ18yODIyIiwiUlNTIiwiVElDS1MiLCJUSU1FU1RBTVAiLCJXM0MiLCJfcmVzdHJpY3RNaW5NYXgiLCJfZGV0ZXJtaW5lRGF0ZSIsInNldFNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJzZWxlY3REYXkiLCJzZWxlY3RNb250aCIsInNlbGVjdFllYXIiLCJ0ZSIsIl9jYW5BZGp1c3RNb250aCIsIl9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlciIsIl9nZXRGaXJzdERheU9mTW9udGgiLCJpbml0aWFsaXplZCIsImllIiwiX21vdXNlSW5pdCIsIl9tb3VzZURvd24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdGFydGVkIiwiX21vdXNlRGVzdHJveSIsIl9tb3VzZU1vdmVEZWxlZ2F0ZSIsIl9tb3VzZVVwRGVsZWdhdGUiLCJfbW91c2VNb3ZlZCIsIl9tb3VzZVN0YXJ0ZWQiLCJfbW91c2VVcCIsIl9tb3VzZURvd25FdmVudCIsIl9tb3VzZUNhcHR1cmUiLCJtb3VzZURlbGF5TWV0IiwiX21vdXNlRGVsYXlUaW1lciIsIl9tb3VzZURpc3RhbmNlTWV0IiwiX21vdXNlRGVsYXlNZXQiLCJfbW91c2VTdGFydCIsIl9tb3VzZU1vdmUiLCJkb2N1bWVudE1vZGUiLCJpZ25vcmVNaXNzaW5nV2hpY2giLCJfbW91c2VEcmFnIiwiX21vdXNlU3RvcCIsInBsdWdpbiIsInBsdWdpbnMiLCJzYWZlQmx1ciIsIm1vdXNlIiwiYWRkQ2xhc3NlcyIsImF4aXMiLCJjb25uZWN0VG9Tb3J0YWJsZSIsImNvbnRhaW5tZW50IiwiY3Vyc29yQXQiLCJncmlkIiwiaGFuZGxlIiwiaGVscGVyIiwiaWZyYW1lRml4IiwicmVmcmVzaFBvc2l0aW9ucyIsInJldmVydCIsInJldmVydER1cmF0aW9uIiwic2NvcGUiLCJzY3JvbGwiLCJzY3JvbGxTZW5zaXRpdml0eSIsInNjcm9sbFNwZWVkIiwic25hcCIsInNuYXBNb2RlIiwic25hcFRvbGVyYW5jZSIsInN0YWNrIiwiZHJhZyIsIl9zZXRQb3NpdGlvblJlbGF0aXZlIiwiX3NldEhhbmRsZUNsYXNzTmFtZSIsIl9yZW1vdmVIYW5kbGVDbGFzc05hbWUiLCJkZXN0cm95T25DbGVhciIsIl9nZXRIYW5kbGUiLCJfYmx1ckFjdGl2ZUVsZW1lbnQiLCJfYmxvY2tGcmFtZXMiLCJpZnJhbWVCbG9ja3MiLCJfdW5ibG9ja0ZyYW1lcyIsIl9jcmVhdGVIZWxwZXIiLCJfY2FjaGVIZWxwZXJQcm9wb3J0aW9ucyIsImRkbWFuYWdlciIsIl9jYWNoZU1hcmdpbnMiLCJjc3NQb3NpdGlvbiIsIm9mZnNldFBhcmVudCIsImhhc0ZpeGVkQW5jZXN0b3IiLCJwb3NpdGlvbkFicyIsIl9yZWZyZXNoT2Zmc2V0cyIsIm9yaWdpbmFsUG9zaXRpb24iLCJfZ2VuZXJhdGVQb3NpdGlvbiIsIm9yaWdpbmFsUGFnZVgiLCJvcmlnaW5hbFBhZ2VZIiwiX2FkanVzdE9mZnNldEZyb21IZWxwZXIiLCJfc2V0Q29udGFpbm1lbnQiLCJfY2xlYXIiLCJkcm9wQmVoYXZpb3VyIiwicHJlcGFyZU9mZnNldHMiLCJkcmFnU3RhcnQiLCJtYXJnaW5zIiwiX2dldFBhcmVudE9mZnNldCIsInJlbGF0aXZlIiwiX2dldFJlbGF0aXZlT2Zmc2V0IiwiX2NvbnZlcnRQb3NpdGlvblRvIiwiX3VpSGFzaCIsImRyb3AiLCJkcm9wcGVkIiwiZHJhZ1N0b3AiLCJoYW5kbGVFbGVtZW50IiwiaGVscGVyUHJvcG9ydGlvbnMiLCJfaXNSb290Tm9kZSIsInJlbGF0aXZlQ29udGFpbmVyIiwiY2FuY2VsSGVscGVyUmVtb3ZhbCIsInNvcnRhYmxlcyIsInNvcnRhYmxlIiwiaXNPdmVyIiwiX3N0b3JlZENTUyIsInBsYWNlaG9sZGVyIiwiX2hlbHBlciIsIl9pbnRlcnNlY3RzV2l0aCIsImNvbnRhaW5lckNhY2hlIiwiX3BhcmVudCIsImN1cnJlbnRJdGVtIiwiZnJvbU91dHNpZGUiLCJfcmV2ZXJ0IiwiX2N1cnNvciIsIl9vcGFjaXR5Iiwic2Nyb2xsUGFyZW50Tm90SGlkZGVuIiwib3ZlcmZsb3dPZmZzZXQiLCJzbmFwRWxlbWVudHMiLCJzbmFwcGluZyIsInJlbGVhc2UiLCJzbmFwSXRlbSIsIm1ha2VBcnJheSIsIl96SW5kZXgiLCJkcmFnZ2FibGUiLCJhbHNvUmVzaXplIiwiYW5pbWF0ZUR1cmF0aW9uIiwiYW5pbWF0ZUVhc2luZyIsImFzcGVjdFJhdGlvIiwiYXV0b0hpZGUiLCJnaG9zdCIsImhhbmRsZXMiLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsIm1pbkhlaWdodCIsInJlc2l6ZSIsIl9udW0iLCJfaXNOdW1iZXIiLCJfYXNwZWN0UmF0aW8iLCJvcmlnaW5hbEVsZW1lbnQiLCJfcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50cyIsInJlc2l6YWJsZSIsImVsZW1lbnRJc1dyYXBwZXIiLCJvcmlnaW5hbFJlc2l6ZVN0eWxlIiwiem9vbSIsIl9wcm9wb3J0aW9uYWxseVJlc2l6ZSIsIl9zZXR1cEhhbmRsZXMiLCJfaGFuZGxlcyIsInJlc2l6aW5nIiwiX3JlbW92ZUhhbmRsZXMiLCJzZSIsInN3IiwibmUiLCJudyIsIl9yZW5kZXJBeGlzIiwiX3JlbmRlclByb3h5Iiwib3JpZ2luYWxTaXplIiwic2l6ZURpZmYiLCJvcmlnaW5hbE1vdXNlUG9zaXRpb24iLCJfcHJvcGFnYXRlIiwiX3VwZGF0ZVByZXZQcm9wZXJ0aWVzIiwiX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzIiwiX3VwZGF0ZVJhdGlvIiwiX3Jlc3BlY3RTaXplIiwiX3VwZGF0ZUNhY2hlIiwiX2FwcGx5Q2hhbmdlcyIsInByZXZQb3NpdGlvbiIsInByZXZTaXplIiwiX3ZCb3VuZGFyaWVzIiwiX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyIsIm91dGVyRGltZW5zaW9ucyIsImVsZW1lbnRPZmZzZXQiLCJjb250YWluZXJFbGVtZW50IiwiY29udGFpbmVyT2Zmc2V0IiwiY29udGFpbmVyUG9zaXRpb24iLCJwYXJlbnREYXRhIiwiY29udGFpbmVyU2l6ZSIsImF1dG9PcGVuIiwiYnV0dG9ucyIsImNsb3NlT25Fc2NhcGUiLCJtb2RhbCIsImJlZm9yZUNsb3NlIiwicmVzaXplU3RhcnQiLCJyZXNpemVTdG9wIiwic2l6ZVJlbGF0ZWRPcHRpb25zIiwicmVzaXphYmxlUmVsYXRlZE9wdGlvbnMiLCJvcmlnaW5hbENzcyIsIm9yaWdpbmFsVGl0bGUiLCJfY3JlYXRlV3JhcHBlciIsInVpRGlhbG9nIiwiX2NyZWF0ZVRpdGxlYmFyIiwiX2NyZWF0ZUJ1dHRvblBhbmUiLCJfbWFrZURyYWdnYWJsZSIsIl9tYWtlUmVzaXphYmxlIiwiX2lzT3BlbiIsIl90cmFja0ZvY3VzIiwiX3VudHJhY2tJbnN0YW5jZSIsIl9kZXN0cm95T3ZlcmxheSIsIl9mb2N1c2VkRWxlbWVudCIsIm9wZW5lciIsIl9oaWRlIiwiaXNPcGVuIiwibW92ZVRvVG9wIiwiX21vdmVUb1RvcCIsIl9mb2N1c1RhYmJhYmxlIiwiX3NpemUiLCJfcG9zaXRpb24iLCJfY3JlYXRlT3ZlcmxheSIsIm92ZXJsYXkiLCJfc2hvdyIsIl9tYWtlRm9jdXNUYXJnZXQiLCJ1aURpYWxvZ0J1dHRvblBhbmUiLCJ1aURpYWxvZ1RpdGxlYmFyQ2xvc2UiLCJfa2VlcEZvY3VzIiwidWlEaWFsb2dUaXRsZWJhciIsIl90aXRsZSIsInVpQnV0dG9uU2V0IiwiX2NyZWF0ZUJ1dHRvbnMiLCJfbWluSGVpZ2h0IiwiX3RyYWNraW5nSW5zdGFuY2VzIiwiX2FsbG93SW50ZXJhY3Rpb24iLCJkaWFsb2ciLCJkaWFsb2dDbGFzcyIsImFjY2VwdCIsImdyZWVkeSIsInRvbGVyYW5jZSIsImRlYWN0aXZhdGUiLCJvdXQiLCJvdmVyIiwiaXNvdmVyIiwiaXNvdXQiLCJwcm9wb3J0aW9ucyIsIl9hZGRUb01hbmFnZXIiLCJkcm9wcGFibGVzIiwiX3NwbGljZSIsIl9hZGRBY3RpdmVDbGFzcyIsIl9kZWFjdGl2YXRlIiwiX3JlbW92ZUFjdGl2ZUNsYXNzIiwiX292ZXIiLCJfYWRkSG92ZXJDbGFzcyIsIl9vdXQiLCJfcmVtb3ZlSG92ZXJDbGFzcyIsIl9kcm9wIiwiZHJvcHBhYmxlIiwiaW50ZXJzZWN0IiwiYWJzb2x1dGUiLCJwYXJlbnRzVW50aWwiLCJncmVlZHlDaGlsZCIsImhvdmVyQ2xhc3MiLCJhY3RpdmVDbGFzcyIsIm9sZFZhbHVlIiwiX2NvbnN0cmFpbmVkVmFsdWUiLCJ2YWx1ZURpdiIsIl9yZWZyZXNoVmFsdWUiLCJpbmRldGVybWluYXRlIiwiX3BlcmNlbnRhZ2UiLCJ0b0ZpeGVkIiwib3ZlcmxheURpdiIsImF1dG9SZWZyZXNoIiwic2VsZWN0aW5nIiwidW5zZWxlY3RlZCIsInVuc2VsZWN0aW5nIiwiZHJhZ2dlZCIsImVsZW1lbnRQb3MiLCJzZWxlY3RlZXMiLCJzdGFydHNlbGVjdGVkIiwib3BvcyIsImlkcyIsIl9kcmF3QnV0dG9uIiwiX2RyYXdNZW51IiwiX3JlbmRlcmVkIiwibWVudUl0ZW1zIiwiX3BhcnNlT3B0aW9uIiwidGFiaW5kZXgiLCJidXR0b25JdGVtIiwiX3JlbmRlckJ1dHRvbkl0ZW0iLCJfcmVzaXplQnV0dG9uIiwiX2J1dHRvbkV2ZW50cyIsIl9yZWZyZXNoTWVudSIsIm1lbnVXcmFwIiwibWVudUluc3RhbmNlIiwiX3NldFNlbGVjdGlvbiIsIl9zZWxlY3QiLCJmb2N1c0luZGV4IiwiX2dldFNlbGVjdGVkSXRlbSIsIl9wYXJzZU9wdGlvbnMiLCJfc2V0QXJpYSIsIl90b2dnbGVBdHRyIiwiX2RvY3VtZW50Q2xpY2siLCJtZW51V2lkZ2V0IiwiX3NldFRleHQiLCJvcHRncm91cCIsImdldFNlbGVjdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwicmFuZ2VDb3VudCIsImdldFJhbmdlQXQiLCJzZWxlY3Rpb24iLCJjcmVhdGVSYW5nZSIsIl9zZWxlY3RGb2N1c2VkSXRlbSIsIm9yaWVudGF0aW9uIiwidmFsdWVzIiwic2xpZGUiLCJudW1QYWdlcyIsIl9rZXlTbGlkaW5nIiwiX21vdXNlU2xpZGluZyIsIl9hbmltYXRlT2ZmIiwiX2hhbmRsZUluZGV4IiwiX2RldGVjdE9yaWVudGF0aW9uIiwiX2NhbGN1bGF0ZU5ld01heCIsIl9jcmVhdGVSYW5nZSIsIl9jcmVhdGVIYW5kbGVzIiwiX3ZhbHVlTWluIiwiX2hhbmRsZUV2ZW50cyIsImVsZW1lbnRTaXplIiwiX25vcm1WYWx1ZUZyb21Nb3VzZSIsIl92YWx1ZU1heCIsIl9sYXN0Q2hhbmdlZFZhbHVlIiwiX3N0YXJ0IiwiX2NsaWNrT2Zmc2V0IiwiX3NsaWRlIiwiX3N0b3AiLCJfdHJpbUFsaWduVmFsdWUiLCJoYW5kbGVJbmRleCIsIl9oYXNNdWx0aXBsZVZhbHVlcyIsIl92YWx1ZXMiLCJfcmVmcmVzaFJhbmdlIiwiX3ByZWNpc2lvbiIsIl9wcmVjaXNpb25PZiIsInJlYWR5IiwiY29ubmVjdFdpdGgiLCJkcm9wT25FbXB0eSIsImZvcmNlUGxhY2Vob2xkZXJTaXplIiwiZm9yY2VIZWxwZXJTaXplIiwiYmVmb3JlU3RvcCIsInJlY2VpdmUiLCJfaXNPdmVyQXhpcyIsIl9pc0Zsb2F0aW5nIiwiaW5zdGFuY2UiLCJyZXZlcnRpbmciLCJfcmVmcmVzaEl0ZW1zIiwiX3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zIiwiY3VycmVudENvbnRhaW5lciIsImRvbVBvc2l0aW9uIiwiX2NyZWF0ZVBsYWNlaG9sZGVyIiwic3RvcmVkQ3Vyc29yIiwic3RvcmVkU3R5bGVzaGVldCIsIl9zdG9yZWRPcGFjaXR5IiwiX3N0b3JlZFpJbmRleCIsIl9wcmVzZXJ2ZUhlbHBlclByb3BvcnRpb25zIiwiY29udGFpbmVycyIsImRyYWdnaW5nIiwibGFzdFBvc2l0aW9uQWJzIiwiX2ludGVyc2VjdHNXaXRoUG9pbnRlciIsIl9pbnRlcnNlY3RzV2l0aFNpZGVzIiwiX3JlYXJyYW5nZSIsIl9jb250YWN0Q29udGFpbmVycyIsIl9ub0ZpbmFsU29ydCIsInNlcmlhbGl6ZSIsIl9nZXRJdGVtc0FzalF1ZXJ5IiwiY29ubmVjdGVkIiwiYXR0cmlidXRlIiwiZXhwcmVzc2lvbiIsImtleSIsInRvQXJyYXkiLCJmb3JjZVBvaW50ZXJGb3JDb250YWluZXJzIiwiZmxvYXRpbmciLCJfZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uIiwiX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uIiwiX2Nvbm5lY3RXaXRoIiwidG9sZXJhbmNlRWxlbWVudCIsImN1c3RvbSIsInJlZnJlc2hDb250YWluZXJzIiwiX2NyZWF0ZVRyUGxhY2Vob2xkZXIiLCJuZXh0U2libGluZyIsImNvdW50ZXIiLCJzZW5kZXIiLCJjdWx0dXJlIiwiaW5jcmVtZW50YWwiLCJudW1iZXJGb3JtYXQiLCJwYWdlIiwic3BpbiIsIl9kcmF3IiwiX2V2ZW50cyIsIm1vdXNld2hlZWwiLCJzcGlubmluZyIsIl9zcGluIiwibW91c2V3aGVlbFRpbWVyIiwiX3JlcGVhdCIsInVpU3Bpbm5lciIsIl9hZGp1c3RWYWx1ZSIsIl9pbmNyZW1lbnQiLCJfcGFyc2UiLCJfZm9ybWF0IiwiR2xvYmFsaXplIiwiZm9ybWF0IiwiaXNWYWxpZCIsInN0ZXBVcCIsIl9zdGVwVXAiLCJzdGVwRG93biIsIl9zdGVwRG93biIsInBhZ2VVcCIsInBhZ2VEb3duIiwiX3VpU3Bpbm5lckh0bWwiLCJfYnV0dG9uSHRtbCIsImJlZm9yZUxvYWQiLCJsb2FkIiwiX2lzTG9jYWwiLCJsb2NhdGlvbiIsImRlY29kZVVSSUNvbXBvbmVudCIsImhhc2giLCJydW5uaW5nIiwiX3Byb2Nlc3NUYWJzIiwiX2luaXRpYWxBY3RpdmUiLCJ0YWJzIiwiYW5jaG9ycyIsInRhYiIsIl9nZXRQYW5lbEZvclRhYiIsIl90YWJLZXlkb3duIiwiX2hhbmRsZVBhZ2VOYXYiLCJhY3RpdmF0aW5nIiwiX2ZvY3VzTmV4dFRhYiIsIl9wYW5lbEtleWRvd24iLCJfZmluZE5leHRUYWIiLCJfc2V0dXBIZWlnaHRTdHlsZSIsIl9zYW5pdGl6ZVNlbGVjdG9yIiwidGFibGlzdCIsIl9nZXRMaXN0IiwiX2NyZWF0ZVBhbmVsIiwib2xkVGFiIiwibmV3VGFiIiwiX2dldEluZGV4IiwibWVyZ2UiLCJfYWpheFNldHRpbmdzIiwic3RhdHVzVGV4dCIsImZhaWwiLCJiZWZvcmVTZW5kIiwianFYSFIiLCJhamF4U2V0dGluZ3MiLCJ0cmFjayIsIl9hZGREZXNjcmliZWRCeSIsIl9yZW1vdmVEZXNjcmliZWRCeSIsIm1vdXNlb3ZlciIsInRvb2x0aXBzIiwiZGlzYWJsZWRUaXRsZXMiLCJfdXBkYXRlQ29udGVudCIsIl9kaXNhYmxlIiwiX2VuYWJsZSIsIl9yZWdpc3RlckNsb3NlSGFuZGxlcnMiLCJfZmluZCIsInRvb2x0aXAiLCJfdG9vbHRpcCIsIm1vdXNlbW92ZSIsImRlbGF5ZWRTaG93Iiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwiaW50ZXJ2YWwiLCJfcmVtb3ZlVG9vbHRpcCIsImNsb3NpbmciLCJoaWRpbmciLCJ0b29sdGlwQ2xhc3MiLCJmYWN0b3J5Iiwic3RyaXBIdG1sIiwidmFsaWRhdG9yIiwiYWRkTWV0aG9kIiwicGFyYW1zIiwib3B0aW9uYWwiLCJ2YWx1ZVN0cmlwcGVkIiwicmVnZXgiLCJjaGVja3N1bSIsInBhcmFtIiwidHlwZVBhcmFtIiwib3B0aW9uYWxWYWx1ZSIsImZpbGUiLCJmaWxlcyIsImFjY291bnQiLCJzdW0iLCJsZW4iLCJmYWN0b3IiLCJkaWdpdCIsIm1ldGhvZHMiLCJiYW5rYWNjb3VudE5MIiwiZ2lyb2FjY291bnROTCIsImNpZlJlZ0V4IiwibGV0dGVyIiwiY29udHJvbCIsImFsbF9zdW0iLCJldmVuX3N1bSIsIm9kZF9zdW0iLCJjb250cm9sX2RpZ2l0IiwiY29udHJvbF9sZXR0ZXIiLCJpc09kZCIsImRzYyIsImZpcnN0Q2hhciIsImZpcnN0Q04iLCJzZWNvbmRDTiIsInRhbWFuaG8iLCJudW1lcm9zIiwiZGlnaXRvcyIsInNvbWEiLCJyZXN1bHRhZG8iLCJpbCIsImNoZWNrUmVzdWx0IiwiY24iLCJyZXN1bHQiLCJuQ2hlY2siLCJuRGlnaXQiLCJiRXZlbiIsImNEaWdpdCIsInZhbGlkVHlwZXMiLCJtYXN0ZXJjYXJkIiwidmlzYSIsImFtZXgiLCJkaW5lcnNjbHViIiwiZW5yb3V0ZSIsImRpc2NvdmVyIiwiamNiIiwidW5rbm93biIsImFsbCIsImlzUGFyYW1TdHJpbmciLCJzeW1ib2wiLCJzb2Z0IiwiY2hlY2siLCJhZGF0YSIsImdnIiwibW0iLCJhYWFhIiwieGRhdGEiLCJVVEMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsIm9uZm9jdXNvdXQiLCJpYmFuIiwiaWJhbmNoZWNrZGlnaXRzIiwibGVhZGluZ1plcm9lcyIsImNSZXN0IiwiY09wZXJhdG9yIiwiY291bnRyeWNvZGUiLCJpYmFuY2hlY2siLCJjQ2hhciIsImJiYW5wYXR0ZXJuIiwiYmJhbmNvdW50cnlwYXR0ZXJucyIsImliYW5yZWdleHAiLCJtaW5pbWFsSUJBTmxlbmd0aCIsInRvdGFsU2l6ZSIsInBob25lX251bWJlciIsInJ1UGhvbmVfbnVtYmVyIiwibmllUmVnRXgiLCJ2YWxpZENoYXJzIiwiYXJyU3RlcHMiLCJpbnRTdW0iLCJpbnQyIiwiaW50Q29udHJvbE5yIiwiZHYiLCJjb3VudCIsIm11bHRpcGxpZXIiLCJlcXVhbFRvIiwicmVnZXhwIiwiY2VwX3ZhbHVlIiwiJGZpZWxkcyIsIiRmaWVsZHNGaXJzdCIsImVsZW1lbnRWYWx1ZSIsIm51bWJlckZpbGxlZCIsImlzRGVmYXVsdCIsImNhc2VTZW5zaXRpdmUiLCJpbmNsdWRlVGVycml0b3JpZXMiLCJpbmNsdWRlTWlsaXRhcnkiLCJMTCIsIlZMIiwiRkwiLCJycyIsImNkIiwiY2R2IiwidmFsaWRhdGUiLCJkZWJ1ZyIsIm9uc3VibWl0Iiwic3VibWl0QnV0dG9uIiwiY2FuY2VsU3VibWl0IiwidW5kZWZpbmVkIiwic3VibWl0SGFuZGxlciIsImZvcm1TdWJtaXR0ZWQiLCJjdXJyZW50Rm9ybSIsInBlbmRpbmdSZXF1ZXN0IiwiZm9jdXNJbnZhbGlkIiwiZXJyb3JMaXN0IiwicnVsZXMiLCJjb21tYW5kIiwiYXJndW1lbnQiLCJpc0NvbnRlbnRFZGl0YWJsZSIsInN0YXRpY1J1bGVzIiwiZXhpc3RpbmdSdWxlcyIsImZpbHRlcmVkIiwibm9ybWFsaXplUnVsZSIsIm1ldGhvZCIsIm5vcm1hbGl6ZVJ1bGVzIiwiY2xhc3NSdWxlcyIsImF0dHJpYnV0ZVJ1bGVzIiwiZGF0YVJ1bGVzIiwicmVxdWlyZWQiLCJyZW1vdGUiLCJwc2V1ZG9zIiwiYmxhbmsiLCJmaWxsZWQiLCJ1bmNoZWNrZWQiLCJhcmdzIiwiZ3JvdXBzIiwiZXJyb3JDbGFzcyIsInBlbmRpbmdDbGFzcyIsInZhbGlkQ2xhc3MiLCJlcnJvckVsZW1lbnQiLCJmb2N1c0NsZWFudXAiLCJlcnJvckNvbnRhaW5lciIsImVycm9yTGFiZWxDb250YWluZXIiLCJpZ25vcmUiLCJpZ25vcmVUaXRsZSIsIm9uZm9jdXNpbiIsImxhc3RBY3RpdmUiLCJ1bmhpZ2hsaWdodCIsImhpZGVUaGVzZSIsImVycm9yc0ZvciIsImNoZWNrYWJsZSIsInN1Ym1pdHRlZCIsIm9ua2V5dXAiLCJleGNsdWRlZEtleXMiLCJpbnZhbGlkIiwib25jbGljayIsImhpZ2hsaWdodCIsImZpbmRCeU5hbWUiLCJlbWFpbCIsImRhdGVJU08iLCJkaWdpdHMiLCJtYXhsZW5ndGgiLCJtaW5sZW5ndGgiLCJyYW5nZWxlbmd0aCIsImF1dG9DcmVhdGVSYW5nZXMiLCJsYWJlbENvbnRhaW5lciIsImVycm9yQ29udGV4dCIsInZhbHVlQ2FjaGUiLCJyZXNldCIsImRlbGVnYXRlIiwiaW52YWxpZEhhbmRsZXIiLCJjaGVja0Zvcm0iLCJlcnJvck1hcCIsInNob3dFcnJvcnMiLCJwcmVwYXJlRm9ybSIsImN1cnJlbnRFbGVtZW50cyIsImNsZWFuRWxlbWVudCIsImNsZWFuIiwiY2hlY2tFbGVtZW50IiwidmFsaWRhdGlvblRhcmdldEZvciIsImdyb3VwIiwicHJlcGFyZUVsZW1lbnQiLCJ0ZXN0Z3JvdXAiLCJudW1iZXJPZkludmFsaWRzIiwidG9IaWRlIiwiZXJyb3JzIiwibWVzc2FnZSIsInN1Y2Nlc3NMaXN0IiwiZGVmYXVsdFNob3dFcnJvcnMiLCJyZXNldEZvcm0iLCJoaWRlRXJyb3JzIiwicmVzZXRFbGVtZW50cyIsIm9iamVjdExlbmd0aCIsIm9iaiIsImFkZFdyYXBwZXIiLCJmaW5kTGFzdEFjdGl2ZSIsInJ1bGVzQ2FjaGUiLCJzZWxlY3RvciIsInJlc2V0SW50ZXJuYWxzIiwidG9TaG93IiwiYmFkSW5wdXQiLCJydWxlc0NvdW50IiwiZGVwZW5kZW5jeU1pc21hdGNoIiwicnVsZSIsIm5vcm1hbGl6ZXIiLCJwYXJhbWV0ZXJzIiwiZm9ybWF0QW5kQWRkIiwibG9nIiwiY3VzdG9tRGF0YU1lc3NhZ2UiLCJjdXN0b21NZXNzYWdlIiwiZmluZERlZmluZWQiLCJkZWZhdWx0TWVzc2FnZSIsInRoZXJlZ2V4IiwidG9Ub2dnbGUiLCJ3cmFwcGVyIiwidmFsaWRFbGVtZW50cyIsImludmFsaWRFbGVtZW50cyIsInBsYWNlIiwiZXJyb3JJRCIsImVsZW1lbnRJRCIsImlkT3JOYW1lIiwiZGVzY3JpYmVkQnkiLCJlcnJvclBsYWNlbWVudCIsImVzY2FwZUNzc01ldGEiLCJkZXNjcmliZXIiLCJzdHJpbmciLCJnZXRMZW5ndGgiLCJkZXBlbmQiLCJkZXBlbmRUeXBlcyIsInN0YXJ0UmVxdWVzdCIsInN0b3BSZXF1ZXN0Iiwic3VibWl0IiwicHJldmlvdXNWYWx1ZSIsIm9sZCIsImNsYXNzUnVsZVNldHRpbmdzIiwiY3JlZGl0Y2FyZCIsImFkZENsYXNzUnVsZXMiLCJub3JtYWxpemVBdHRyaWJ1dGVSdWxlIiwiZGVwZW5kcyIsImtlZXBSdWxlIiwicGFyYW1ldGVyIiwicGFydHMiLCJ0cmFuc2Zvcm1lZCIsImNhbGxlZCIsImVycm9yTWVzc2FnZSIsInN1cHBvcnRlZFR5cGVzIiwibm90U3VwcG9ydGVkIiwiZGVjaW1hbFBsYWNlcyIsIm51bSIsInRvSW50IiwiZGVjaW1hbHMiLCJFcnJvciIsIm9wdGlvbkRhdGFTdHJpbmciLCJvcmlnaW5hbE1lc3NhZ2UiLCJwb3J0IiwiY29udGV4dCIsInBlbmRpbmdSZXF1ZXN0cyIsImFqYXhQcmVmaWx0ZXIiLCJleHRlbnNpb24iLCJjYXJldFRpbWVvdXRJZCIsInVhIiwiaVBob25lIiwiY2hyb21lIiwiYW5kcm9pZCIsIm1hc2siLCJkZWZpbml0aW9ucyIsImF1dG9jbGVhciIsImRhdGFOYW1lIiwiYmVnaW4iLCJzZXRTZWxlY3Rpb25SYW5nZSIsImNyZWF0ZVRleHRSYW5nZSIsIm1vdmVFbmQiLCJtb3ZlU3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImR1cGxpY2F0ZSIsInVubWFzayIsImRlZnMiLCJ0ZXN0cyIsInBhcnRpYWxQb3NpdGlvbiIsImZpcnN0Tm9uTWFza1BvcyIsImxhc3RSZXF1aXJlZE5vbk1hc2tQb3MiLCJvbGRWYWwiLCJjb21wbGV0ZWQiLCJ0cnlGaXJlQ29tcGxldGVkIiwiYnVmZmVyIiwiZ2V0UGxhY2Vob2xkZXIiLCJzZWVrTmV4dCIsInNlZWtQcmV2Iiwic2hpZnRMIiwid3JpdGVCdWZmZXIiLCJzaGlmdFIiLCJhbmRyb2lkSW5wdXRFdmVudCIsImN1clZhbCIsImNoZWNrVmFsIiwiYmx1ckV2ZW50IiwiZm9jdXNUZXh0Iiwia2V5ZG93bkV2ZW50IiwiY2xlYXJCdWZmZXIiLCJrZXlwcmVzc0V2ZW50IiwiYWxsb3ciLCJsYXN0TWF0Y2giLCJkZWZhdWx0QnVmZmVyIiwiQ0xPU0VfRVZFTlQiLCJCRUZPUkVfQ0xPU0VfRVZFTlQiLCJBRlRFUl9DTE9TRV9FVkVOVCIsIkJFRk9SRV9BUFBFTkRfRVZFTlQiLCJNQVJLVVBfUEFSU0VfRVZFTlQiLCJPUEVOX0VWRU5UIiwiQ0hBTkdFX0VWRU5UIiwiTlMiLCJFVkVOVF9OUyIsIlJFQURZX0NMQVNTIiwiUkVNT1ZJTkdfQ0xBU1MiLCJQUkVWRU5UX0NMT1NFX0NMQVNTIiwibWZwIiwiTWFnbmlmaWNQb3B1cCIsIl9pc0pRIiwiX3ByZXZTdGF0dXMiLCJfd2luZG93IiwiX2RvY3VtZW50IiwiX3ByZXZDb250ZW50VHlwZSIsIl93cmFwQ2xhc3NlcyIsIl9jdXJyUG9wdXBUeXBlIiwiX21mcE9uIiwiZXYiLCJfZ2V0RWwiLCJyYXciLCJfbWZwVHJpZ2dlciIsInN0IiwiY2FsbGJhY2tzIiwiX2dldENsb3NlQnRuIiwiY3VyclRlbXBsYXRlIiwiY2xvc2VCdG4iLCJjbG9zZU1hcmt1cCIsInRDbG9zZSIsIl9jaGVja0luc3RhbmNlIiwibWFnbmlmaWNQb3B1cCIsInN1cHBvcnRzVHJhbnNpdGlvbnMiLCJhcHBWZXJzaW9uIiwiaXNMb3dJRSIsImlzSUU4IiwiYWRkRXZlbnRMaXN0ZW5lciIsImlzQW5kcm9pZCIsImlzSU9TIiwic3VwcG9ydHNUcmFuc2l0aW9uIiwicHJvYmFibHlNb2JpbGUiLCJwb3B1cHNDYWNoZSIsImlzT2JqIiwicGFyc2VkIiwidXBkYXRlSXRlbUhUTUwiLCJ0eXBlcyIsIm1haW5FbCIsImZpeGVkQ29udGVudFBvcyIsImNsb3NlT25Db250ZW50Q2xpY2siLCJjbG9zZU9uQmdDbGljayIsInNob3dDbG9zZUJ0biIsImVuYWJsZUVzY2FwZUtleSIsImJnT3ZlcmxheSIsIl9jaGVja0lmQ2xvc2UiLCJjb250ZW50Q29udGFpbmVyIiwicHJlbG9hZGVyIiwidExvYWRpbmciLCJtb2R1bGVzIiwiY2xvc2VCdG5JbnNpZGUiLCJjbG9zZV9yZXBsYWNlV2l0aCIsImFsaWduVG9wIiwib3ZlcmZsb3dYIiwiZml4ZWRCZ1BvcyIsInVwZGF0ZVNpemUiLCJ3aW5kb3dIZWlnaHQiLCJ3SCIsIndpbmRvd1N0eWxlcyIsIl9oYXNTY3JvbGxCYXIiLCJfZ2V0U2Nyb2xsYmFyU2l6ZSIsImlzSUU3IiwiY2xhc3Nlc1RvYWRkIiwibWFpbkNsYXNzIiwiX2FkZENsYXNzVG9NRlAiLCJfbGFzdEZvY3VzZWRFbCIsIl9zZXRGb2N1cyIsIl9vbkZvY3VzSW4iLCJyZW1vdmFsRGVsYXkiLCJjbGFzc2VzVG9SZW1vdmUiLCJfcmVtb3ZlQ2xhc3NGcm9tTUZQIiwiY3Vyckl0ZW0iLCJhdXRvRm9jdXNMYXN0IiwicHJldkhlaWdodCIsIndpbkhlaWdodCIsInpvb21MZXZlbCIsInBhcnNlRWwiLCJtYXJrdXAiLCJuZXdDb250ZW50IiwiYXBwZW5kQ29udGVudCIsInByZWxvYWRlZCIsImFkZEdyb3VwIiwiZUhhbmRsZXIiLCJtZnBFbCIsIl9vcGVuQ2xpY2siLCJlTmFtZSIsIm1pZENsaWNrIiwiZGlzYWJsZU9uIiwidXBkYXRlU3RhdHVzIiwic3RhdHVzIiwiY2xvc2VPbkNvbnRlbnQiLCJjbG9zZU9uQmciLCJjTmFtZSIsIl9wYXJzZU1hcmt1cCIsImFyciIsInNjcm9sbGJhclNpemUiLCJzY3JvbGxEaXYiLCJwcm90byIsInJlZ2lzdGVyTW9kdWxlIiwibW9kdWxlIiwianFFbCIsIml0ZW1PcHRzIiwiSU5MSU5FX05TIiwiX2hpZGRlbkNsYXNzIiwiX2lubGluZVBsYWNlaG9sZGVyIiwiX2xhc3RJbmxpbmVFbGVtZW50IiwiX3B1dElubGluZUVsZW1lbnRzQmFjayIsImhpZGRlbkNsYXNzIiwidE5vdEZvdW5kIiwiaW5pdElubGluZSIsImdldElubGluZSIsImlubGluZVN0IiwiaW5saW5lRWxlbWVudCIsIkFKQVhfTlMiLCJfYWpheEN1ciIsIl9yZW1vdmVBamF4Q3Vyc29yIiwiX2Rlc3Ryb3lBamF4UmVxdWVzdCIsInJlcSIsInRFcnJvciIsImluaXRBamF4IiwiZ2V0QWpheCIsInRleHRTdGF0dXMiLCJ0ZW1wIiwiZmluaXNoZWQiLCJsb2FkRXJyb3IiLCJfaW1nSW50ZXJ2YWwiLCJpbWFnZSIsInRpdGxlU3JjIiwidmVydGljYWxGaXQiLCJpbml0SW1hZ2UiLCJpbWdTdCIsIm5zIiwicmVzaXplSW1hZ2UiLCJkZWNyIiwiX29uSW1hZ2VIYXNTaXplIiwiaGFzU2l6ZSIsImlzQ2hlY2tpbmdJbWdTaXplIiwiaW1nSGlkZGVuIiwiZmluZEltYWdlU2l6ZSIsIm1mcFNldEludGVydmFsIiwibmF0dXJhbFdpZHRoIiwiZ2V0SW1hZ2UiLCJndWFyZCIsIm9uTG9hZENvbXBsZXRlIiwibG9hZGVkIiwib25Mb2FkRXJyb3IiLCJpbWdfcmVwbGFjZVdpdGgiLCJsb2FkaW5nIiwiaGFzTW96VHJhbnNmb3JtIiwiZ2V0SGFzTW96VHJhbnNmb3JtIiwiTW96VHJhbnNmb3JtIiwiZW5hYmxlZCIsImluaXRab29tIiwiem9vbVN0IiwiZ2V0RWxUb0FuaW1hdGUiLCJuZXdJbWciLCJjc3NPYmoiLCJzaG93TWFpbkNvbnRlbnQiLCJvcGVuVGltZW91dCIsImFuaW1hdGVkSW1nIiwiX2FsbG93Wm9vbSIsIl9nZXRJdGVtVG9ab29tIiwiX2dldE9mZnNldCIsImlzTGFyZ2UiLCJJRlJBTUVfTlMiLCJfZW1wdHlQYWdlIiwiX2ZpeElmcmFtZUJ1Z3MiLCJpc1Nob3dpbmciLCJzcmNBY3Rpb24iLCJwYXR0ZXJucyIsInlvdXR1YmUiLCJ2aW1lbyIsImdtYXBzIiwiaW5pdElmcmFtZSIsInByZXZUeXBlIiwibmV3VHlwZSIsImdldElmcmFtZSIsImVtYmVkU3JjIiwiaWZyYW1lU3QiLCJpZnJhbWUiLCJkYXRhT2JqIiwiX2dldExvb3BlZElkIiwibnVtU2xpZGVzIiwiX3JlcGxhY2VDdXJyVG90YWwiLCJjdXJyIiwidG90YWwiLCJhcnJvd01hcmt1cCIsInByZWxvYWQiLCJuYXZpZ2F0ZUJ5SW1nQ2xpY2siLCJhcnJvd3MiLCJ0UHJldiIsInROZXh0IiwidENvdW50ZXIiLCJpbml0R2FsbGVyeSIsImdTdCIsImdhbGxlcnkiLCJhcnJvd0xlZnQiLCJhcnJvd1JpZ2h0IiwiX3ByZWxvYWRUaW1lb3V0IiwicHJlbG9hZE5lYXJieUltYWdlcyIsImdvVG8iLCJuZXdJbmRleCIsInByZWxvYWRCZWZvcmUiLCJwcmVsb2FkQWZ0ZXIiLCJfcHJlbG9hZEl0ZW0iLCJSRVRJTkFfTlMiLCJyZXBsYWNlU3JjIiwicmF0aW8iLCJpbml0UmV0aW5hIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInJldGluYSIsIlNsaWNrIiwiaW5zdGFuY2VVaWQiLCJkYXRhU2V0dGluZ3MiLCJhY2Nlc3NpYmlsaXR5IiwiYWRhcHRpdmVIZWlnaHQiLCJhcHBlbmRBcnJvd3MiLCJhcHBlbmREb3RzIiwiYXNOYXZGb3IiLCJwcmV2QXJyb3ciLCJuZXh0QXJyb3ciLCJhdXRvcGxheSIsImF1dG9wbGF5U3BlZWQiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsImNzc0Vhc2UiLCJjdXN0b21QYWdpbmciLCJzbGlkZXIiLCJkb3RzIiwiZG90c0NsYXNzIiwiZWRnZUZyaWN0aW9uIiwiZm9jdXNPblNlbGVjdCIsImZvY3VzT25DaGFuZ2UiLCJpbmZpbml0ZSIsImluaXRpYWxTbGlkZSIsImxhenlMb2FkIiwibW9iaWxlRmlyc3QiLCJwYXVzZU9uSG92ZXIiLCJwYXVzZU9uRm9jdXMiLCJwYXVzZU9uRG90c0hvdmVyIiwicmVzcG9uZFRvIiwicmVzcG9uc2l2ZSIsInJvd3MiLCJydGwiLCJzbGlkZXNQZXJSb3ciLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWxTd2lwaW5nIiwid2FpdEZvckFuaW1hdGUiLCJpbml0aWFscyIsImFuaW1hdGluZyIsImF1dG9QbGF5VGltZXIiLCJjdXJyZW50RGlyZWN0aW9uIiwiY3VycmVudExlZnQiLCJjdXJyZW50U2xpZGUiLCIkZG90cyIsImxpc3RXaWR0aCIsImxpc3RIZWlnaHQiLCJsb2FkSW5kZXgiLCIkbmV4dEFycm93IiwiJHByZXZBcnJvdyIsInNjcm9sbGluZyIsInNsaWRlQ291bnQiLCJzbGlkZVdpZHRoIiwiJHNsaWRlVHJhY2siLCIkc2xpZGVzIiwic2xpZGluZyIsInNsaWRlT2Zmc2V0Iiwic3dpcGVMZWZ0Iiwic3dpcGluZyIsIiRsaXN0IiwidG91Y2hPYmplY3QiLCJ0cmFuc2Zvcm1zRW5hYmxlZCIsInVuc2xpY2tlZCIsImFjdGl2ZUJyZWFrcG9pbnQiLCJhbmltVHlwZSIsImFuaW1Qcm9wIiwiYnJlYWtwb2ludHMiLCJicmVha3BvaW50U2V0dGluZ3MiLCJjc3NUcmFuc2l0aW9ucyIsImZvY3Vzc2VkIiwiaW50ZXJydXB0ZWQiLCJwYXVzZWQiLCJwb3NpdGlvblByb3AiLCJyb3dDb3VudCIsInNob3VsZENsaWNrIiwiJHNsaWRlciIsIiRzbGlkZXNDYWNoZSIsInRyYW5zZm9ybVR5cGUiLCJ0cmFuc2l0aW9uVHlwZSIsInZpc2liaWxpdHlDaGFuZ2UiLCJ3aW5kb3dXaWR0aCIsIndpbmRvd1RpbWVyIiwib3JpZ2luYWxTZXR0aW5ncyIsIm1vekhpZGRlbiIsIndlYmtpdEhpZGRlbiIsImF1dG9QbGF5IiwiYXV0b1BsYXlDbGVhciIsImF1dG9QbGF5SXRlcmF0b3IiLCJjaGFuZ2VTbGlkZSIsImNsaWNrSGFuZGxlciIsInNlbGVjdEhhbmRsZXIiLCJzd2lwZUhhbmRsZXIiLCJkcmFnSGFuZGxlciIsImtleUhhbmRsZXIiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJhY3RpdmF0ZUFEQSIsImFkZFNsaWRlIiwic2xpY2tBZGQiLCJhZGRCZWZvcmUiLCJ1bmxvYWQiLCJyZWluaXQiLCJhbmltYXRlSGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImNhbGxiYWNrIiwiYW5pbVByb3BzIiwiYW5pbVN0YXJ0IiwiYXBwbHlUcmFuc2l0aW9uIiwiZGlzYWJsZVRyYW5zaXRpb24iLCJnZXROYXZUYXJnZXQiLCJzbGljayIsInNsaWRlSGFuZGxlciIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsImJ1aWxkRG90cyIsImRvdCIsImdldERvdENvdW50IiwiYnVpbGRPdXQiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsIm5ld1NsaWRlcyIsIm51bU9mU2xpZGVzIiwib3JpZ2luYWxTbGlkZXMiLCJzbGlkZXNQZXJTZWN0aW9uIiwicm93IiwiY2hlY2tSZXNwb25zaXZlIiwiaW5pdGlhbCIsImZvcmNlVXBkYXRlIiwiYnJlYWtwb2ludCIsInRhcmdldEJyZWFrcG9pbnQiLCJyZXNwb25kVG9XaWR0aCIsInRyaWdnZXJCcmVha3BvaW50Iiwic2xpZGVyV2lkdGgiLCJ1bnNsaWNrIiwiZG9udEFuaW1hdGUiLCIkdGFyZ2V0IiwiaW5kZXhPZmZzZXQiLCJ1bmV2ZW5PZmZzZXQiLCJjaGVja05hdmlnYWJsZSIsIm5hdmlnYWJsZXMiLCJwcmV2TmF2aWdhYmxlIiwiZ2V0TmF2aWdhYmxlSW5kZXhlcyIsImNsZWFuVXBFdmVudHMiLCJpbnRlcnJ1cHQiLCJjbGVhblVwU2xpZGVFdmVudHMiLCJvcmllbnRhdGlvbkNoYW5nZSIsImNsZWFuVXBSb3dzIiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsImZhZGVTbGlkZU91dCIsImZpbHRlclNsaWRlcyIsInNsaWNrRmlsdGVyIiwiZm9jdXNIYW5kbGVyIiwiJHNmIiwiZ2V0Q3VycmVudCIsInNsaWNrQ3VycmVudFNsaWRlIiwiYnJlYWtQb2ludCIsInBhZ2VyUXR5IiwiZ2V0TGVmdCIsInZlcnRpY2FsSGVpZ2h0IiwidmVydGljYWxPZmZzZXQiLCJ0YXJnZXRTbGlkZSIsImNvZWYiLCJvZmZzZXRMZWZ0IiwiZ2V0T3B0aW9uIiwic2xpY2tHZXRPcHRpb24iLCJpbmRleGVzIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50Iiwic2xpZGVzVHJhdmVyc2VkIiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJzbGlja0dvVG8iLCJjcmVhdGlvbiIsInNldFByb3BzIiwic3RhcnRMb2FkIiwibG9hZFNsaWRlciIsImluaXRpYWxpemVFdmVudHMiLCJ1cGRhdGVBcnJvd3MiLCJpbml0QURBIiwibnVtRG90R3JvdXBzIiwidGFiQ29udHJvbEluZGV4ZXMiLCJzbGlkZUNvbnRyb2xJbmRleCIsImFyaWFCdXR0b25Db250cm9sIiwibWFwcGVkU2xpZGVJbmRleCIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJpbml0U2xpZGVFdmVudHMiLCJpbml0VUkiLCJsb2FkUmFuZ2UiLCJjbG9uZVJhbmdlIiwicmFuZ2VTdGFydCIsInJhbmdlRW5kIiwibG9hZEltYWdlcyIsImltYWdlc1Njb3BlIiwiaW1hZ2VTb3VyY2UiLCJpbWFnZVNyY1NldCIsImltYWdlU2l6ZXMiLCJpbWFnZVRvTG9hZCIsIm9ubG9hZCIsIm9uZXJyb3IiLCJwcmV2U2xpZGUiLCJuZXh0U2xpZGUiLCJwcm9ncmVzc2l2ZUxhenlMb2FkIiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwicGxheSIsInNsaWNrUGxheSIsInBvc3RTbGlkZSIsIiRjdXJyZW50U2xpZGUiLCJzbGlja1ByZXYiLCJ0cnlDb3VudCIsIiRpbWdzVG9Mb2FkIiwiaW5pdGlhbGl6aW5nIiwibGFzdFZpc2libGVJbmRleCIsImN1cnJlbnRCcmVha3BvaW50IiwicmVzcG9uc2l2ZVNldHRpbmdzIiwid2luZG93RGVsYXkiLCJyZW1vdmVTbGlkZSIsInNsaWNrUmVtb3ZlIiwicmVtb3ZlQmVmb3JlIiwicmVtb3ZlQWxsIiwic2V0Q1NTIiwicG9zaXRpb25Qcm9wcyIsInNldERpbWVuc2lvbnMiLCJzZXRGYWRlIiwic2V0SGVpZ2h0Iiwic2V0T3B0aW9uIiwic2xpY2tTZXRPcHRpb24iLCJvcHQiLCJib2R5U3R5bGUiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIm1zVHJhbnNpdGlvbiIsIk9UcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVByb3BlcnR5Iiwid2Via2l0UGVyc3BlY3RpdmUiLCJNb3pQZXJzcGVjdGl2ZSIsIndlYmtpdFRyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwidHJhbnNmb3JtIiwiYWxsU2xpZGVzIiwicmVtYWluZGVyIiwiZXZlbkNvZWYiLCJpbmZpbml0ZUNvdW50IiwidGFyZ2V0RWxlbWVudCIsInN5bmMiLCJhbmltU2xpZGUiLCJvbGRTbGlkZSIsInNsaWRlTGVmdCIsIm5hdlRhcmdldCIsInN3aXBlRGlyZWN0aW9uIiwieERpc3QiLCJ5RGlzdCIsInN3aXBlQW5nbGUiLCJzdGFydFgiLCJjdXJYIiwic3RhcnRZIiwiY3VyWSIsImF0YW4yIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50IiwidG91Y2hlcyIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJlZGdlV2FzSGl0IiwiY3VyTGVmdCIsInBvc2l0aW9uT2Zmc2V0IiwidmVydGljYWxTd2lwZUxlbmd0aCIsImNsaWVudFgiLCJjbGllbnRZIiwidW5maWx0ZXJTbGlkZXMiLCJzbGlja1VuZmlsdGVyIiwiZnJvbUJyZWFrcG9pbnQiLCJyZXQiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJkaXNjb25uZWN0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByb3RvY29sIiwiaG9zdCIsIlhNTEh0dHBSZXF1ZXN0Iiwid2l0aENyZWRlbnRpYWxzIiwiWERvbWFpblJlcXVlc3QiLCJiYXNlIiwidXNlRWwiLCJzZXRBdHRyaWJ1dGVOUyIsInJlc3BvbnNlVGV4dCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwib250aW1lb3V0Iiwi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SUFBc1VuZSxJQUFFOFYsRUFBRXhNLE1BQUYsSUFBVTdKLEVBQUVxVyxDQUFGLENBQVYsSUFBZ0J6RixXQUFXbFEsRUFBRSxFQUFDZ2pGLE9BQU1sckUsRUFBRWhZLENBQUYsQ0FBUCxFQUFZaWpGLE1BQUtwdEUsQ0FBakIsRUFBbUI4MUMsTUFBSzlyRCxDQUF4QixFQUFGLENBQVgsRUFBeUMsQ0FBekMsQ0FBbEIsR0FBOEQsS0FBSyxDQUFMLEtBQVNMLEVBQUVxVyxDQUFGLENBQVQsR0FBY3JXLEVBQUVxVyxDQUFGLElBQUssQ0FBQyxDQUFwQixHQUFzQnJXLEVBQUVxVyxDQUFGLEVBQUt5bkUsTUFBTCxLQUFjOTlFLEVBQUVxVyxDQUFGLEVBQUtpeUIsS0FBTCxJQUM5ZSxPQUFPdG9DLEVBQUVxVyxDQUFGLEVBQUt5bkUsTUFEa2UsRUFDM2Q5OUUsRUFBRXFXLENBQUYsSUFBSyxDQUFDLENBRHVjLENBQTFaO0FBQzFDLFdBQUUsRUFBRixDQUFLcUksS0FBRyxDQUFILENBQUtqZTtBQUFJLEtBSHVDLENBR3RDLElBQUlvSyxJQUFFLFNBQUZBLENBQUUsR0FBVTtBQUFDbUwsYUFBT210RSxtQkFBUCxDQUEyQixNQUEzQixFQUFrQ3Q0RSxDQUFsQyxFQUFvQyxDQUFDLENBQXJDLEVBQXdDbkssSUFBRWtRLFdBQVd4USxDQUFYLEVBQWEsQ0FBYixDQUFGO0FBQWtCLEtBQTNFLENBQTRFLGVBQWF3WSxTQUFTc3JFLFVBQXRCLEdBQWlDbHVFLE9BQU9zdkQsZ0JBQVAsQ0FBd0IsTUFBeEIsRUFBK0J6NkQsQ0FBL0IsRUFBaUMsQ0FBQyxDQUFsQyxDQUFqQyxHQUFzRUEsR0FBdEU7QUFBMEU7QUFBQyxDQUxsTSxJOzs7Ozs7Ozs7OztBQ05BLHdCIiwiZmlsZSI6ImxpYnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2FwcC9jb21wb25lbnRzL2xpYnMuanNcIik7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAnLi4vLi4vYm93ZXJfY29tcG9uZW50cy9qcXVlcnktdWkvanF1ZXJ5LXVpLm1pbi5qcyc7XG4vLyBpbXBvcnQgJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5LWF1dG9jb21wbGV0ZS9qcXVlcnkuYXV0b2NvbXBsZXRlLmpzJztcbmltcG9ydCAnLi4vLi4vYm93ZXJfY29tcG9uZW50cy9zbGljay1jYXJvdXNlbC9zbGljay9zbGljay5qcyc7XG5pbXBvcnQgJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvbWFnbmlmaWMtcG9wdXAvZGlzdC9qcXVlcnkubWFnbmlmaWMtcG9wdXAuanMnO1xuaW1wb3J0ICcuLi8uLi9ib3dlcl9jb21wb25lbnRzL2pxdWVyeS5tYXNrZWRpbnB1dC9kaXN0L2pxdWVyeS5tYXNrZWRpbnB1dC5qcyc7XG5pbXBvcnQgJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvanF1ZXJ5LXZhbGlkYXRpb24vZGlzdC9qcXVlcnkudmFsaWRhdGUuanMnO1xuaW1wb3J0ICcuLi8uLi9ib3dlcl9jb21wb25lbnRzL2pxdWVyeS12YWxpZGF0aW9uL2Rpc3QvYWRkaXRpb25hbC1tZXRob2RzLmpzJztcbmltcG9ydCAnLi4vLi4vYm93ZXJfY29tcG9uZW50cy9qcXVlcnktdmFsaWRhdGlvbi9kaXN0L2xvY2FsaXphdGlvbi9tZXNzYWdlc19ydS5qcyc7XG5pbXBvcnQgJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvYm9vdHN0cmFwLXNlbGVjdC9kaXN0L2pzL2Jvb3RzdHJhcC1zZWxlY3QubWluLmpzJztcbmltcG9ydCAnLi4vLi4vYm93ZXJfY29tcG9uZW50cy9ib290c3RyYXAtc2VsZWN0L2Rpc3QvanMvaTE4bi9kZWZhdWx0cy1ydV9SVS5taW4uanMnO1xuXG5pbXBvcnQgJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvYWlyLWRhdGVwaWNrZXIvZGlzdC9qcy9kYXRlcGlja2VyLm1pbi5qcyc7XG5pbXBvcnQgJy4uLy4uL2Jvd2VyX2NvbXBvbmVudHMvc3ZneHVzZS9zdmd4dXNlLm1pbi5qcyc7XG5cbiIsIiFmdW5jdGlvbih0LGUsaSl7IWZ1bmN0aW9uKCl7dmFyIHMsYSxuLGg9XCIyLjIuM1wiLG89XCJkYXRlcGlja2VyXCIscj1cIi5kYXRlcGlja2VyLWhlcmVcIixjPSExLGQ9JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyXCI+PGkgY2xhc3M9XCJkYXRlcGlja2VyLS1wb2ludGVyXCI+PC9pPjxuYXYgY2xhc3M9XCJkYXRlcGlja2VyLS1uYXZcIj48L25hdj48ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tY29udGVudFwiPjwvZGl2PjwvZGl2PicsbD17Y2xhc3NlczpcIlwiLGlubGluZTohMSxsYW5ndWFnZTpcInJ1XCIsc3RhcnREYXRlOm5ldyBEYXRlLGZpcnN0RGF5OlwiXCIsd2Vla2VuZHM6WzYsMF0sZGF0ZUZvcm1hdDpcIlwiLGFsdEZpZWxkOlwiXCIsYWx0RmllbGREYXRlRm9ybWF0OlwiQFwiLHRvZ2dsZVNlbGVjdGVkOiEwLGtleWJvYXJkTmF2OiEwLHBvc2l0aW9uOlwiYm90dG9tIGxlZnRcIixvZmZzZXQ6MTIsdmlldzpcImRheXNcIixtaW5WaWV3OlwiZGF5c1wiLHNob3dPdGhlck1vbnRoczohMCxzZWxlY3RPdGhlck1vbnRoczohMCxtb3ZlVG9PdGhlck1vbnRoc09uU2VsZWN0OiEwLHNob3dPdGhlclllYXJzOiEwLHNlbGVjdE90aGVyWWVhcnM6ITAsbW92ZVRvT3RoZXJZZWFyc09uU2VsZWN0OiEwLG1pbkRhdGU6XCJcIixtYXhEYXRlOlwiXCIsZGlzYWJsZU5hdldoZW5PdXRPZlJhbmdlOiEwLG11bHRpcGxlRGF0ZXM6ITEsbXVsdGlwbGVEYXRlc1NlcGFyYXRvcjpcIixcIixyYW5nZTohMSx0b2RheUJ1dHRvbjohMSxjbGVhckJ1dHRvbjohMSxzaG93RXZlbnQ6XCJmb2N1c1wiLGF1dG9DbG9zZTohMSxtb250aHNGaWVsZDpcIm1vbnRoc1Nob3J0XCIscHJldkh0bWw6Jzxzdmc+PHBhdGggZD1cIk0gMTcsMTIgbCAtNSw1IGwgNSw1XCI+PC9wYXRoPjwvc3ZnPicsbmV4dEh0bWw6Jzxzdmc+PHBhdGggZD1cIk0gMTQsMTIgbCA1LDUgbCAtNSw1XCI+PC9wYXRoPjwvc3ZnPicsbmF2VGl0bGVzOntkYXlzOlwiTU0sIDxpPnl5eXk8L2k+XCIsbW9udGhzOlwieXl5eVwiLHllYXJzOlwieXl5eTEgLSB5eXl5MlwifSx0aW1lcGlja2VyOiExLG9ubHlUaW1lcGlja2VyOiExLGRhdGVUaW1lU2VwYXJhdG9yOlwiIFwiLHRpbWVGb3JtYXQ6XCJcIixtaW5Ib3VyczowLG1heEhvdXJzOjI0LG1pbk1pbnV0ZXM6MCxtYXhNaW51dGVzOjU5LGhvdXJzU3RlcDoxLG1pbnV0ZXNTdGVwOjEsb25TZWxlY3Q6XCJcIixvblNob3c6XCJcIixvbkhpZGU6XCJcIixvbkNoYW5nZU1vbnRoOlwiXCIsb25DaGFuZ2VZZWFyOlwiXCIsb25DaGFuZ2VEZWNhZGU6XCJcIixvbkNoYW5nZVZpZXc6XCJcIixvblJlbmRlckNlbGw6XCJcIn0sdT17Y3RybFJpZ2h0OlsxNywzOV0sY3RybFVwOlsxNywzOF0sY3RybExlZnQ6WzE3LDM3XSxjdHJsRG93bjpbMTcsNDBdLHNoaWZ0UmlnaHQ6WzE2LDM5XSxzaGlmdFVwOlsxNiwzOF0sc2hpZnRMZWZ0OlsxNiwzN10sc2hpZnREb3duOlsxNiw0MF0sYWx0VXA6WzE4LDM4XSxhbHRSaWdodDpbMTgsMzldLGFsdExlZnQ6WzE4LDM3XSxhbHREb3duOlsxOCw0MF0sY3RybFNoaWZ0VXA6WzE2LDE3LDM4XX0sbT1mdW5jdGlvbih0LGEpe3RoaXMuZWw9dCx0aGlzLiRlbD1lKHQpLHRoaXMub3B0cz1lLmV4dGVuZCghMCx7fSxsLGEsdGhpcy4kZWwuZGF0YSgpKSxzPT1pJiYocz1lKFwiYm9keVwiKSksdGhpcy5vcHRzLnN0YXJ0RGF0ZXx8KHRoaXMub3B0cy5zdGFydERhdGU9bmV3IERhdGUpLFwiSU5QVVRcIj09dGhpcy5lbC5ub2RlTmFtZSYmKHRoaXMuZWxJc0lucHV0PSEwKSx0aGlzLm9wdHMuYWx0RmllbGQmJih0aGlzLiRhbHRGaWVsZD1cInN0cmluZ1wiPT10eXBlb2YgdGhpcy5vcHRzLmFsdEZpZWxkP2UodGhpcy5vcHRzLmFsdEZpZWxkKTp0aGlzLm9wdHMuYWx0RmllbGQpLHRoaXMuaW5pdGVkPSExLHRoaXMudmlzaWJsZT0hMSx0aGlzLnNpbGVudD0hMSx0aGlzLmN1cnJlbnREYXRlPXRoaXMub3B0cy5zdGFydERhdGUsdGhpcy5jdXJyZW50Vmlldz10aGlzLm9wdHMudmlldyx0aGlzLl9jcmVhdGVTaG9ydEN1dHMoKSx0aGlzLnNlbGVjdGVkRGF0ZXM9W10sdGhpcy52aWV3cz17fSx0aGlzLmtleXM9W10sdGhpcy5taW5SYW5nZT1cIlwiLHRoaXMubWF4UmFuZ2U9XCJcIix0aGlzLl9wcmV2T25TZWxlY3RWYWx1ZT1cIlwiLHRoaXMuaW5pdCgpfTtuPW0sbi5wcm90b3R5cGU9e1ZFUlNJT046aCx2aWV3SW5kZXhlczpbXCJkYXlzXCIsXCJtb250aHNcIixcInllYXJzXCJdLGluaXQ6ZnVuY3Rpb24oKXtjfHx0aGlzLm9wdHMuaW5saW5lfHwhdGhpcy5lbElzSW5wdXR8fHRoaXMuX2J1aWxkRGF0ZXBpY2tlcnNDb250YWluZXIoKSx0aGlzLl9idWlsZEJhc2VIdG1sKCksdGhpcy5fZGVmaW5lTG9jYWxlKHRoaXMub3B0cy5sYW5ndWFnZSksdGhpcy5fc3luY1dpdGhNaW5NYXhEYXRlcygpLHRoaXMuZWxJc0lucHV0JiYodGhpcy5vcHRzLmlubGluZXx8KHRoaXMuX3NldFBvc2l0aW9uQ2xhc3Nlcyh0aGlzLm9wdHMucG9zaXRpb24pLHRoaXMuX2JpbmRFdmVudHMoKSksdGhpcy5vcHRzLmtleWJvYXJkTmF2JiYhdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyJiZ0aGlzLl9iaW5kS2V5Ym9hcmRFdmVudHMoKSx0aGlzLiRkYXRlcGlja2VyLm9uKFwibW91c2Vkb3duXCIsdGhpcy5fb25Nb3VzZURvd25EYXRlcGlja2VyLmJpbmQodGhpcykpLHRoaXMuJGRhdGVwaWNrZXIub24oXCJtb3VzZXVwXCIsdGhpcy5fb25Nb3VzZVVwRGF0ZXBpY2tlci5iaW5kKHRoaXMpKSksdGhpcy5vcHRzLmNsYXNzZXMmJnRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3ModGhpcy5vcHRzLmNsYXNzZXMpLHRoaXMub3B0cy50aW1lcGlja2VyJiYodGhpcy50aW1lcGlja2VyPW5ldyBlLmZuLmRhdGVwaWNrZXIuVGltZXBpY2tlcih0aGlzLHRoaXMub3B0cyksdGhpcy5fYmluZFRpbWVwaWNrZXJFdmVudHMoKSksdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyJiZ0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKFwiLW9ubHktdGltZXBpY2tlci1cIiksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XT1uZXcgZS5mbi5kYXRlcGlja2VyLkJvZHkodGhpcyx0aGlzLmN1cnJlbnRWaWV3LHRoaXMub3B0cyksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5zaG93KCksdGhpcy5uYXY9bmV3IGUuZm4uZGF0ZXBpY2tlci5OYXZpZ2F0aW9uKHRoaXMsdGhpcy5vcHRzKSx0aGlzLnZpZXc9dGhpcy5jdXJyZW50Vmlldyx0aGlzLiRlbC5vbihcImNsaWNrQ2VsbC5hZHBcIix0aGlzLl9vbkNsaWNrQ2VsbC5iaW5kKHRoaXMpKSx0aGlzLiRkYXRlcGlja2VyLm9uKFwibW91c2VlbnRlclwiLFwiLmRhdGVwaWNrZXItLWNlbGxcIix0aGlzLl9vbk1vdXNlRW50ZXJDZWxsLmJpbmQodGhpcykpLHRoaXMuJGRhdGVwaWNrZXIub24oXCJtb3VzZWxlYXZlXCIsXCIuZGF0ZXBpY2tlci0tY2VsbFwiLHRoaXMuX29uTW91c2VMZWF2ZUNlbGwuYmluZCh0aGlzKSksdGhpcy5pbml0ZWQ9ITB9LF9jcmVhdGVTaG9ydEN1dHM6ZnVuY3Rpb24oKXt0aGlzLm1pbkRhdGU9dGhpcy5vcHRzLm1pbkRhdGU/dGhpcy5vcHRzLm1pbkRhdGU6bmV3IERhdGUoLTg2Mzk5OTk5MTM2ZTUpLHRoaXMubWF4RGF0ZT10aGlzLm9wdHMubWF4RGF0ZT90aGlzLm9wdHMubWF4RGF0ZTpuZXcgRGF0ZSg4NjM5OTk5OTEzNmU1KX0sX2JpbmRFdmVudHM6ZnVuY3Rpb24oKXt0aGlzLiRlbC5vbih0aGlzLm9wdHMuc2hvd0V2ZW50K1wiLmFkcFwiLHRoaXMuX29uU2hvd0V2ZW50LmJpbmQodGhpcykpLHRoaXMuJGVsLm9uKFwibW91c2V1cC5hZHBcIix0aGlzLl9vbk1vdXNlVXBFbC5iaW5kKHRoaXMpKSx0aGlzLiRlbC5vbihcImJsdXIuYWRwXCIsdGhpcy5fb25CbHVyLmJpbmQodGhpcykpLHRoaXMuJGVsLm9uKFwia2V5dXAuYWRwXCIsdGhpcy5fb25LZXlVcEdlbmVyYWwuYmluZCh0aGlzKSksZSh0KS5vbihcInJlc2l6ZS5hZHBcIix0aGlzLl9vblJlc2l6ZS5iaW5kKHRoaXMpKSxlKFwiYm9keVwiKS5vbihcIm1vdXNldXAuYWRwXCIsdGhpcy5fb25Nb3VzZVVwQm9keS5iaW5kKHRoaXMpKX0sX2JpbmRLZXlib2FyZEV2ZW50czpmdW5jdGlvbigpe3RoaXMuJGVsLm9uKFwia2V5ZG93bi5hZHBcIix0aGlzLl9vbktleURvd24uYmluZCh0aGlzKSksdGhpcy4kZWwub24oXCJrZXl1cC5hZHBcIix0aGlzLl9vbktleVVwLmJpbmQodGhpcykpLHRoaXMuJGVsLm9uKFwiaG90S2V5LmFkcFwiLHRoaXMuX29uSG90S2V5LmJpbmQodGhpcykpfSxfYmluZFRpbWVwaWNrZXJFdmVudHM6ZnVuY3Rpb24oKXt0aGlzLiRlbC5vbihcInRpbWVDaGFuZ2UuYWRwXCIsdGhpcy5fb25UaW1lQ2hhbmdlLmJpbmQodGhpcykpfSxpc1dlZWtlbmQ6ZnVuY3Rpb24odCl7cmV0dXJuLTEhPT10aGlzLm9wdHMud2Vla2VuZHMuaW5kZXhPZih0KX0sX2RlZmluZUxvY2FsZTpmdW5jdGlvbih0KXtcInN0cmluZ1wiPT10eXBlb2YgdD8odGhpcy5sb2M9ZS5mbi5kYXRlcGlja2VyLmxhbmd1YWdlW3RdLHRoaXMubG9jfHwoY29uc29sZS53YXJuKFwiQ2FuJ3QgZmluZCBsYW5ndWFnZSBcXFwiXCIrdCsnXCIgaW4gRGF0ZXBpY2tlci5sYW5ndWFnZSwgd2lsbCB1c2UgXCJydVwiIGluc3RlYWQnKSx0aGlzLmxvYz1lLmV4dGVuZCghMCx7fSxlLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UucnUpKSx0aGlzLmxvYz1lLmV4dGVuZCghMCx7fSxlLmZuLmRhdGVwaWNrZXIubGFuZ3VhZ2UucnUsZS5mbi5kYXRlcGlja2VyLmxhbmd1YWdlW3RdKSk6dGhpcy5sb2M9ZS5leHRlbmQoITAse30sZS5mbi5kYXRlcGlja2VyLmxhbmd1YWdlLnJ1LHQpLHRoaXMub3B0cy5kYXRlRm9ybWF0JiYodGhpcy5sb2MuZGF0ZUZvcm1hdD10aGlzLm9wdHMuZGF0ZUZvcm1hdCksdGhpcy5vcHRzLnRpbWVGb3JtYXQmJih0aGlzLmxvYy50aW1lRm9ybWF0PXRoaXMub3B0cy50aW1lRm9ybWF0KSxcIlwiIT09dGhpcy5vcHRzLmZpcnN0RGF5JiYodGhpcy5sb2MuZmlyc3REYXk9dGhpcy5vcHRzLmZpcnN0RGF5KSx0aGlzLm9wdHMudGltZXBpY2tlciYmKHRoaXMubG9jLmRhdGVGb3JtYXQ9W3RoaXMubG9jLmRhdGVGb3JtYXQsdGhpcy5sb2MudGltZUZvcm1hdF0uam9pbih0aGlzLm9wdHMuZGF0ZVRpbWVTZXBhcmF0b3IpKSx0aGlzLm9wdHMub25seVRpbWVwaWNrZXImJih0aGlzLmxvYy5kYXRlRm9ybWF0PXRoaXMubG9jLnRpbWVGb3JtYXQpO3ZhciBpPXRoaXMuX2dldFdvcmRCb3VuZGFyeVJlZ0V4cDsodGhpcy5sb2MudGltZUZvcm1hdC5tYXRjaChpKFwiYWFcIikpfHx0aGlzLmxvYy50aW1lRm9ybWF0Lm1hdGNoKGkoXCJBQVwiKSkpJiYodGhpcy5hbXBtPSEwKX0sX2J1aWxkRGF0ZXBpY2tlcnNDb250YWluZXI6ZnVuY3Rpb24oKXtjPSEwLHMuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlcnMtY29udGFpbmVyXCIgaWQ9XCJkYXRlcGlja2Vycy1jb250YWluZXJcIj48L2Rpdj4nKSxhPWUoXCIjZGF0ZXBpY2tlcnMtY29udGFpbmVyXCIpfSxfYnVpbGRCYXNlSHRtbDpmdW5jdGlvbigpe3ZhciB0LGk9ZSgnPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItaW5saW5lXCI+Jyk7dD1cIklOUFVUXCI9PXRoaXMuZWwubm9kZU5hbWU/dGhpcy5vcHRzLmlubGluZT9pLmluc2VydEFmdGVyKHRoaXMuJGVsKTphOmkuYXBwZW5kVG8odGhpcy4kZWwpLHRoaXMuJGRhdGVwaWNrZXI9ZShkKS5hcHBlbmRUbyh0KSx0aGlzLiRjb250ZW50PWUoXCIuZGF0ZXBpY2tlci0tY29udGVudFwiLHRoaXMuJGRhdGVwaWNrZXIpLHRoaXMuJG5hdj1lKFwiLmRhdGVwaWNrZXItLW5hdlwiLHRoaXMuJGRhdGVwaWNrZXIpfSxfdHJpZ2dlck9uQ2hhbmdlOmZ1bmN0aW9uKCl7aWYoIXRoaXMuc2VsZWN0ZWREYXRlcy5sZW5ndGgpe2lmKFwiXCI9PT10aGlzLl9wcmV2T25TZWxlY3RWYWx1ZSlyZXR1cm47cmV0dXJuIHRoaXMuX3ByZXZPblNlbGVjdFZhbHVlPVwiXCIsdGhpcy5vcHRzLm9uU2VsZWN0KFwiXCIsXCJcIix0aGlzKX12YXIgdCxlPXRoaXMuc2VsZWN0ZWREYXRlcyxpPW4uZ2V0UGFyc2VkRGF0ZShlWzBdKSxzPXRoaXMsYT1uZXcgRGF0ZShpLnllYXIsaS5tb250aCxpLmRhdGUsaS5ob3VycyxpLm1pbnV0ZXMpO3Q9ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHMuZm9ybWF0RGF0ZShzLmxvYy5kYXRlRm9ybWF0LHQpfSkuam9pbih0aGlzLm9wdHMubXVsdGlwbGVEYXRlc1NlcGFyYXRvciksKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzfHx0aGlzLm9wdHMucmFuZ2UpJiYoYT1lLm1hcChmdW5jdGlvbih0KXt2YXIgZT1uLmdldFBhcnNlZERhdGUodCk7cmV0dXJuIG5ldyBEYXRlKGUueWVhcixlLm1vbnRoLGUuZGF0ZSxlLmhvdXJzLGUubWludXRlcyl9KSksdGhpcy5fcHJldk9uU2VsZWN0VmFsdWU9dCx0aGlzLm9wdHMub25TZWxlY3QodCxhLHRoaXMpfSxuZXh0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wYXJzZWREYXRlLGU9dGhpcy5vcHRzO3N3aXRjaCh0aGlzLnZpZXcpe2Nhc2VcImRheXNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyLHQubW9udGgrMSwxKSxlLm9uQ2hhbmdlTW9udGgmJmUub25DaGFuZ2VNb250aCh0aGlzLnBhcnNlZERhdGUubW9udGgsdGhpcy5wYXJzZWREYXRlLnllYXIpO2JyZWFrO2Nhc2VcIm1vbnRoc1wiOnRoaXMuZGF0ZT1uZXcgRGF0ZSh0LnllYXIrMSx0Lm1vbnRoLDEpLGUub25DaGFuZ2VZZWFyJiZlLm9uQ2hhbmdlWWVhcih0aGlzLnBhcnNlZERhdGUueWVhcik7YnJlYWs7Y2FzZVwieWVhcnNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyKzEwLDAsMSksZS5vbkNoYW5nZURlY2FkZSYmZS5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSl9fSxwcmV2OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wYXJzZWREYXRlLGU9dGhpcy5vcHRzO3N3aXRjaCh0aGlzLnZpZXcpe2Nhc2VcImRheXNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyLHQubW9udGgtMSwxKSxlLm9uQ2hhbmdlTW9udGgmJmUub25DaGFuZ2VNb250aCh0aGlzLnBhcnNlZERhdGUubW9udGgsdGhpcy5wYXJzZWREYXRlLnllYXIpO2JyZWFrO2Nhc2VcIm1vbnRoc1wiOnRoaXMuZGF0ZT1uZXcgRGF0ZSh0LnllYXItMSx0Lm1vbnRoLDEpLGUub25DaGFuZ2VZZWFyJiZlLm9uQ2hhbmdlWWVhcih0aGlzLnBhcnNlZERhdGUueWVhcik7YnJlYWs7Y2FzZVwieWVhcnNcIjp0aGlzLmRhdGU9bmV3IERhdGUodC55ZWFyLTEwLDAsMSksZS5vbkNoYW5nZURlY2FkZSYmZS5vbkNoYW5nZURlY2FkZSh0aGlzLmN1ckRlY2FkZSl9fSxmb3JtYXREYXRlOmZ1bmN0aW9uKHQsZSl7ZT1lfHx0aGlzLmRhdGU7dmFyIGkscz10LGE9dGhpcy5fZ2V0V29yZEJvdW5kYXJ5UmVnRXhwLGg9dGhpcy5sb2Msbz1uLmdldExlYWRpbmdaZXJvTnVtLHI9bi5nZXREZWNhZGUoZSksYz1uLmdldFBhcnNlZERhdGUoZSksZD1jLmZ1bGxIb3VycyxsPWMuaG91cnMsdT10Lm1hdGNoKGEoXCJhYVwiKSl8fHQubWF0Y2goYShcIkFBXCIpKSxtPVwiYW1cIixwPXRoaXMuX3JlcGxhY2VyO3N3aXRjaCh0aGlzLm9wdHMudGltZXBpY2tlciYmdGhpcy50aW1lcGlja2VyJiZ1JiYoaT10aGlzLnRpbWVwaWNrZXIuX2dldFZhbGlkSG91cnNGcm9tRGF0ZShlLHUpLGQ9byhpLmhvdXJzKSxsPWkuaG91cnMsbT1pLmRheVBlcmlvZCksITApe2Nhc2UvQC8udGVzdChzKTpzPXMucmVwbGFjZSgvQC8sZS5nZXRUaW1lKCkpO2Nhc2UvYWEvLnRlc3Qocyk6cz1wKHMsYShcImFhXCIpLG0pO2Nhc2UvQUEvLnRlc3Qocyk6cz1wKHMsYShcIkFBXCIpLG0udG9VcHBlckNhc2UoKSk7Y2FzZS9kZC8udGVzdChzKTpzPXAocyxhKFwiZGRcIiksYy5mdWxsRGF0ZSk7Y2FzZS9kLy50ZXN0KHMpOnM9cChzLGEoXCJkXCIpLGMuZGF0ZSk7Y2FzZS9ERC8udGVzdChzKTpzPXAocyxhKFwiRERcIiksaC5kYXlzW2MuZGF5XSk7Y2FzZS9ELy50ZXN0KHMpOnM9cChzLGEoXCJEXCIpLGguZGF5c1Nob3J0W2MuZGF5XSk7Y2FzZS9tbS8udGVzdChzKTpzPXAocyxhKFwibW1cIiksYy5mdWxsTW9udGgpO2Nhc2UvbS8udGVzdChzKTpzPXAocyxhKFwibVwiKSxjLm1vbnRoKzEpO2Nhc2UvTU0vLnRlc3Qocyk6cz1wKHMsYShcIk1NXCIpLHRoaXMubG9jLm1vbnRoc1tjLm1vbnRoXSk7Y2FzZS9NLy50ZXN0KHMpOnM9cChzLGEoXCJNXCIpLGgubW9udGhzU2hvcnRbYy5tb250aF0pO2Nhc2UvaWkvLnRlc3Qocyk6cz1wKHMsYShcImlpXCIpLGMuZnVsbE1pbnV0ZXMpO2Nhc2UvaS8udGVzdChzKTpzPXAocyxhKFwiaVwiKSxjLm1pbnV0ZXMpO2Nhc2UvaGgvLnRlc3Qocyk6cz1wKHMsYShcImhoXCIpLGQpO2Nhc2UvaC8udGVzdChzKTpzPXAocyxhKFwiaFwiKSxsKTtjYXNlL3l5eXkvLnRlc3Qocyk6cz1wKHMsYShcInl5eXlcIiksYy55ZWFyKTtjYXNlL3l5eXkxLy50ZXN0KHMpOnM9cChzLGEoXCJ5eXl5MVwiKSxyWzBdKTtjYXNlL3l5eXkyLy50ZXN0KHMpOnM9cChzLGEoXCJ5eXl5MlwiKSxyWzFdKTtjYXNlL3l5Ly50ZXN0KHMpOnM9cChzLGEoXCJ5eVwiKSxjLnllYXIudG9TdHJpbmcoKS5zbGljZSgtMikpfXJldHVybiBzfSxfcmVwbGFjZXI6ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0LnJlcGxhY2UoZSxmdW5jdGlvbih0LGUscyxhKXtyZXR1cm4gZStpK2F9KX0sX2dldFdvcmRCb3VuZGFyeVJlZ0V4cDpmdW5jdGlvbih0KXt2YXIgZT1cIlxcXFxzfFxcXFwufC18L3xcXFxcXFxcXHwsfFxcXFwkfFxcXFwhfFxcXFw/fDp8O1wiO3JldHVybiBuZXcgUmVnRXhwKFwiKF58PnxcIitlK1wiKShcIit0K1wiKSgkfDx8XCIrZStcIilcIixcImdcIil9LHNlbGVjdERhdGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxpPWUub3B0cyxzPWUucGFyc2VkRGF0ZSxhPWUuc2VsZWN0ZWREYXRlcyxoPWEubGVuZ3RoLG89XCJcIjtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiB2b2lkIHQuZm9yRWFjaChmdW5jdGlvbih0KXtlLnNlbGVjdERhdGUodCl9KTtpZih0IGluc3RhbmNlb2YgRGF0ZSl7aWYodGhpcy5sYXN0U2VsZWN0ZWREYXRlPXQsdGhpcy50aW1lcGlja2VyJiZ0aGlzLnRpbWVwaWNrZXIuX3NldFRpbWUodCksZS5fdHJpZ2dlcihcInNlbGVjdERhdGVcIix0KSx0aGlzLnRpbWVwaWNrZXImJih0LnNldEhvdXJzKHRoaXMudGltZXBpY2tlci5ob3VycyksdC5zZXRNaW51dGVzKHRoaXMudGltZXBpY2tlci5taW51dGVzKSksXCJkYXlzXCI9PWUudmlldyYmdC5nZXRNb250aCgpIT1zLm1vbnRoJiZpLm1vdmVUb090aGVyTW9udGhzT25TZWxlY3QmJihvPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCksMSkpLFwieWVhcnNcIj09ZS52aWV3JiZ0LmdldEZ1bGxZZWFyKCkhPXMueWVhciYmaS5tb3ZlVG9PdGhlclllYXJzT25TZWxlY3QmJihvPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSwwLDEpKSxvJiYoZS5zaWxlbnQ9ITAsZS5kYXRlPW8sZS5zaWxlbnQ9ITEsZS5uYXYuX3JlbmRlcigpKSxpLm11bHRpcGxlRGF0ZXMmJiFpLnJhbmdlKXtpZihoPT09aS5tdWx0aXBsZURhdGVzKXJldHVybjtlLl9pc1NlbGVjdGVkKHQpfHxlLnNlbGVjdGVkRGF0ZXMucHVzaCh0KX1lbHNlIGkucmFuZ2U/Mj09aD8oZS5zZWxlY3RlZERhdGVzPVt0XSxlLm1pblJhbmdlPXQsZS5tYXhSYW5nZT1cIlwiKToxPT1oPyhlLnNlbGVjdGVkRGF0ZXMucHVzaCh0KSxlLm1heFJhbmdlP2UubWluUmFuZ2U9dDplLm1heFJhbmdlPXQsbi5iaWdnZXIoZS5tYXhSYW5nZSxlLm1pblJhbmdlKSYmKGUubWF4UmFuZ2U9ZS5taW5SYW5nZSxlLm1pblJhbmdlPXQpLGUuc2VsZWN0ZWREYXRlcz1bZS5taW5SYW5nZSxlLm1heFJhbmdlXSk6KGUuc2VsZWN0ZWREYXRlcz1bdF0sZS5taW5SYW5nZT10KTplLnNlbGVjdGVkRGF0ZXM9W3RdO2UuX3NldElucHV0VmFsdWUoKSxpLm9uU2VsZWN0JiZlLl90cmlnZ2VyT25DaGFuZ2UoKSxpLmF1dG9DbG9zZSYmIXRoaXMudGltZXBpY2tlcklzQWN0aXZlJiYoaS5tdWx0aXBsZURhdGVzfHxpLnJhbmdlP2kucmFuZ2UmJjI9PWUuc2VsZWN0ZWREYXRlcy5sZW5ndGgmJmUuaGlkZSgpOmUuaGlkZSgpKSxlLnZpZXdzW3RoaXMuY3VycmVudFZpZXddLl9yZW5kZXIoKX19LHJlbW92ZURhdGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zZWxlY3RlZERhdGVzLGk9dGhpcztpZih0IGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gZS5zb21lKGZ1bmN0aW9uKHMsYSl7cmV0dXJuIG4uaXNTYW1lKHMsdCk/KGUuc3BsaWNlKGEsMSksaS5zZWxlY3RlZERhdGVzLmxlbmd0aD9pLmxhc3RTZWxlY3RlZERhdGU9aS5zZWxlY3RlZERhdGVzW2kuc2VsZWN0ZWREYXRlcy5sZW5ndGgtMV06KGkubWluUmFuZ2U9XCJcIixpLm1heFJhbmdlPVwiXCIsaS5sYXN0U2VsZWN0ZWREYXRlPVwiXCIpLGkudmlld3NbaS5jdXJyZW50Vmlld10uX3JlbmRlcigpLGkuX3NldElucHV0VmFsdWUoKSxpLm9wdHMub25TZWxlY3QmJmkuX3RyaWdnZXJPbkNoYW5nZSgpLCEwKTp2b2lkIDB9KX0sdG9kYXk6ZnVuY3Rpb24oKXt0aGlzLnNpbGVudD0hMCx0aGlzLnZpZXc9dGhpcy5vcHRzLm1pblZpZXcsdGhpcy5zaWxlbnQ9ITEsdGhpcy5kYXRlPW5ldyBEYXRlLHRoaXMub3B0cy50b2RheUJ1dHRvbiBpbnN0YW5jZW9mIERhdGUmJnRoaXMuc2VsZWN0RGF0ZSh0aGlzLm9wdHMudG9kYXlCdXR0b24pfSxjbGVhcjpmdW5jdGlvbigpe3RoaXMuc2VsZWN0ZWREYXRlcz1bXSx0aGlzLm1pblJhbmdlPVwiXCIsdGhpcy5tYXhSYW5nZT1cIlwiLHRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uX3JlbmRlcigpLHRoaXMuX3NldElucHV0VmFsdWUoKSx0aGlzLm9wdHMub25TZWxlY3QmJnRoaXMuX3RyaWdnZXJPbkNoYW5nZSgpfSx1cGRhdGU6ZnVuY3Rpb24odCxpKXt2YXIgcz1hcmd1bWVudHMubGVuZ3RoLGE9dGhpcy5sYXN0U2VsZWN0ZWREYXRlO3JldHVybiAyPT1zP3RoaXMub3B0c1t0XT1pOjE9PXMmJlwib2JqZWN0XCI9PXR5cGVvZiB0JiYodGhpcy5vcHRzPWUuZXh0ZW5kKCEwLHRoaXMub3B0cyx0KSksdGhpcy5fY3JlYXRlU2hvcnRDdXRzKCksdGhpcy5fc3luY1dpdGhNaW5NYXhEYXRlcygpLHRoaXMuX2RlZmluZUxvY2FsZSh0aGlzLm9wdHMubGFuZ3VhZ2UpLHRoaXMubmF2Ll9hZGRCdXR0b25zSWZOZWVkKCksdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHx0aGlzLm5hdi5fcmVuZGVyKCksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fcmVuZGVyKCksdGhpcy5lbElzSW5wdXQmJiF0aGlzLm9wdHMuaW5saW5lJiYodGhpcy5fc2V0UG9zaXRpb25DbGFzc2VzKHRoaXMub3B0cy5wb3NpdGlvbiksdGhpcy52aXNpYmxlJiZ0aGlzLnNldFBvc2l0aW9uKHRoaXMub3B0cy5wb3NpdGlvbikpLHRoaXMub3B0cy5jbGFzc2VzJiZ0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKHRoaXMub3B0cy5jbGFzc2VzKSx0aGlzLm9wdHMub25seVRpbWVwaWNrZXImJnRoaXMuJGRhdGVwaWNrZXIuYWRkQ2xhc3MoXCItb25seS10aW1lcGlja2VyLVwiKSx0aGlzLm9wdHMudGltZXBpY2tlciYmKGEmJnRoaXMudGltZXBpY2tlci5faGFuZGxlRGF0ZShhKSx0aGlzLnRpbWVwaWNrZXIuX3VwZGF0ZVJhbmdlcygpLHRoaXMudGltZXBpY2tlci5fdXBkYXRlQ3VycmVudFRpbWUoKSxhJiYoYS5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpLGEuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcykpKSx0aGlzLl9zZXRJbnB1dFZhbHVlKCksdGhpc30sX3N5bmNXaXRoTWluTWF4RGF0ZXM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmRhdGUuZ2V0VGltZSgpO3RoaXMuc2lsZW50PSEwLHRoaXMubWluVGltZT50JiYodGhpcy5kYXRlPXRoaXMubWluRGF0ZSksdGhpcy5tYXhUaW1lPHQmJih0aGlzLmRhdGU9dGhpcy5tYXhEYXRlKSx0aGlzLnNpbGVudD0hMX0sX2lzU2VsZWN0ZWQ6ZnVuY3Rpb24odCxlKXt2YXIgaT0hMTtyZXR1cm4gdGhpcy5zZWxlY3RlZERhdGVzLnNvbWUoZnVuY3Rpb24ocyl7cmV0dXJuIG4uaXNTYW1lKHMsdCxlKT8oaT1zLCEwKTp2b2lkIDB9KSxpfSxfc2V0SW5wdXRWYWx1ZTpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcyxpPWUub3B0cyxzPWUubG9jLmRhdGVGb3JtYXQsYT1pLmFsdEZpZWxkRGF0ZUZvcm1hdCxuPWUuc2VsZWN0ZWREYXRlcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGUuZm9ybWF0RGF0ZShzLHQpfSk7aS5hbHRGaWVsZCYmZS4kYWx0RmllbGQubGVuZ3RoJiYodD10aGlzLnNlbGVjdGVkRGF0ZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBlLmZvcm1hdERhdGUoYSx0KX0pLHQ9dC5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKSx0aGlzLiRhbHRGaWVsZC52YWwodCkpLG49bi5qb2luKHRoaXMub3B0cy5tdWx0aXBsZURhdGVzU2VwYXJhdG9yKSx0aGlzLiRlbC52YWwobil9LF9pc0luUmFuZ2U6ZnVuY3Rpb24odCxlKXt2YXIgaT10LmdldFRpbWUoKSxzPW4uZ2V0UGFyc2VkRGF0ZSh0KSxhPW4uZ2V0UGFyc2VkRGF0ZSh0aGlzLm1pbkRhdGUpLGg9bi5nZXRQYXJzZWREYXRlKHRoaXMubWF4RGF0ZSksbz1uZXcgRGF0ZShzLnllYXIscy5tb250aCxhLmRhdGUpLmdldFRpbWUoKSxyPW5ldyBEYXRlKHMueWVhcixzLm1vbnRoLGguZGF0ZSkuZ2V0VGltZSgpLGM9e2RheTppPj10aGlzLm1pblRpbWUmJmk8PXRoaXMubWF4VGltZSxtb250aDpvPj10aGlzLm1pblRpbWUmJnI8PXRoaXMubWF4VGltZSx5ZWFyOnMueWVhcj49YS55ZWFyJiZzLnllYXI8PWgueWVhcn07cmV0dXJuIGU/Y1tlXTpjLmRheX0sX2dldERpbWVuc2lvbnM6ZnVuY3Rpb24odCl7dmFyIGU9dC5vZmZzZXQoKTtyZXR1cm57d2lkdGg6dC5vdXRlcldpZHRoKCksaGVpZ2h0OnQub3V0ZXJIZWlnaHQoKSxsZWZ0OmUubGVmdCx0b3A6ZS50b3B9fSxfZ2V0RGF0ZUZyb21DZWxsOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucGFyc2VkRGF0ZSxzPXQuZGF0YShcInllYXJcIil8fGUueWVhcixhPXQuZGF0YShcIm1vbnRoXCIpPT1pP2UubW9udGg6dC5kYXRhKFwibW9udGhcIiksbj10LmRhdGEoXCJkYXRlXCIpfHwxO3JldHVybiBuZXcgRGF0ZShzLGEsbil9LF9zZXRQb3NpdGlvbkNsYXNzZXM6ZnVuY3Rpb24odCl7dD10LnNwbGl0KFwiIFwiKTt2YXIgZT10WzBdLGk9dFsxXSxzPVwiZGF0ZXBpY2tlciAtXCIrZStcIi1cIitpK1wiLSAtZnJvbS1cIitlK1wiLVwiO3RoaXMudmlzaWJsZSYmKHMrPVwiIGFjdGl2ZVwiKSx0aGlzLiRkYXRlcGlja2VyLnJlbW92ZUF0dHIoXCJjbGFzc1wiKS5hZGRDbGFzcyhzKX0sc2V0UG9zaXRpb246ZnVuY3Rpb24odCl7dD10fHx0aGlzLm9wdHMucG9zaXRpb247dmFyIGUsaSxzPXRoaXMuX2dldERpbWVuc2lvbnModGhpcy4kZWwpLGE9dGhpcy5fZ2V0RGltZW5zaW9ucyh0aGlzLiRkYXRlcGlja2VyKSxuPXQuc3BsaXQoXCIgXCIpLGg9dGhpcy5vcHRzLm9mZnNldCxvPW5bMF0scj1uWzFdO3N3aXRjaChvKXtjYXNlXCJ0b3BcIjplPXMudG9wLWEuaGVpZ2h0LWg7YnJlYWs7Y2FzZVwicmlnaHRcIjppPXMubGVmdCtzLndpZHRoK2g7YnJlYWs7Y2FzZVwiYm90dG9tXCI6ZT1zLnRvcCtzLmhlaWdodCtoO2JyZWFrO2Nhc2VcImxlZnRcIjppPXMubGVmdC1hLndpZHRoLWh9c3dpdGNoKHIpe2Nhc2VcInRvcFwiOmU9cy50b3A7YnJlYWs7Y2FzZVwicmlnaHRcIjppPXMubGVmdCtzLndpZHRoLWEud2lkdGg7YnJlYWs7Y2FzZVwiYm90dG9tXCI6ZT1zLnRvcCtzLmhlaWdodC1hLmhlaWdodDticmVhaztjYXNlXCJsZWZ0XCI6aT1zLmxlZnQ7YnJlYWs7Y2FzZVwiY2VudGVyXCI6L2xlZnR8cmlnaHQvLnRlc3Qobyk/ZT1zLnRvcCtzLmhlaWdodC8yLWEuaGVpZ2h0LzI6aT1zLmxlZnQrcy53aWR0aC8yLWEud2lkdGgvMn10aGlzLiRkYXRlcGlja2VyLmNzcyh7bGVmdDppLHRvcDplfSl9LHNob3c6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdHMub25TaG93O3RoaXMuc2V0UG9zaXRpb24odGhpcy5vcHRzLnBvc2l0aW9uKSx0aGlzLiRkYXRlcGlja2VyLmFkZENsYXNzKFwiYWN0aXZlXCIpLHRoaXMudmlzaWJsZT0hMCx0JiZ0aGlzLl9iaW5kVmlzaW9uRXZlbnRzKHQpfSxoaWRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRzLm9uSGlkZTt0aGlzLiRkYXRlcGlja2VyLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLmNzcyh7bGVmdDpcIi0xMDAwMDBweFwifSksdGhpcy5mb2N1c2VkPVwiXCIsdGhpcy5rZXlzPVtdLHRoaXMuaW5Gb2N1cz0hMSx0aGlzLnZpc2libGU9ITEsdGhpcy4kZWwuYmx1cigpLHQmJnRoaXMuX2JpbmRWaXNpb25FdmVudHModCl9LGRvd246ZnVuY3Rpb24odCl7dGhpcy5fY2hhbmdlVmlldyh0LFwiZG93blwiKX0sdXA6ZnVuY3Rpb24odCl7dGhpcy5fY2hhbmdlVmlldyh0LFwidXBcIil9LF9iaW5kVmlzaW9uRXZlbnRzOmZ1bmN0aW9uKHQpe3RoaXMuJGRhdGVwaWNrZXIub2ZmKFwidHJhbnNpdGlvbmVuZC5kcFwiKSx0KHRoaXMsITEpLHRoaXMuJGRhdGVwaWNrZXIub25lKFwidHJhbnNpdGlvbmVuZC5kcFwiLHQuYmluZCh0aGlzLHRoaXMsITApKX0sX2NoYW5nZVZpZXc6ZnVuY3Rpb24odCxlKXt0PXR8fHRoaXMuZm9jdXNlZHx8dGhpcy5kYXRlO3ZhciBpPVwidXBcIj09ZT90aGlzLnZpZXdJbmRleCsxOnRoaXMudmlld0luZGV4LTE7aT4yJiYoaT0yKSwwPmkmJihpPTApLHRoaXMuc2lsZW50PSEwLHRoaXMuZGF0ZT1uZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksdC5nZXRNb250aCgpLDEpLHRoaXMuc2lsZW50PSExLHRoaXMudmlldz10aGlzLnZpZXdJbmRleGVzW2ldfSxfaGFuZGxlSG90S2V5OmZ1bmN0aW9uKHQpe3ZhciBlLGkscyxhPW4uZ2V0UGFyc2VkRGF0ZSh0aGlzLl9nZXRGb2N1c2VkRGF0ZSgpKSxoPXRoaXMub3B0cyxvPSExLHI9ITEsYz0hMSxkPWEueWVhcixsPWEubW9udGgsdT1hLmRhdGU7c3dpdGNoKHQpe2Nhc2VcImN0cmxSaWdodFwiOmNhc2VcImN0cmxVcFwiOmwrPTEsbz0hMDticmVhaztjYXNlXCJjdHJsTGVmdFwiOmNhc2VcImN0cmxEb3duXCI6bC09MSxvPSEwO2JyZWFrO2Nhc2VcInNoaWZ0UmlnaHRcIjpjYXNlXCJzaGlmdFVwXCI6cj0hMCxkKz0xO2JyZWFrO2Nhc2VcInNoaWZ0TGVmdFwiOmNhc2VcInNoaWZ0RG93blwiOnI9ITAsZC09MTticmVhaztjYXNlXCJhbHRSaWdodFwiOmNhc2VcImFsdFVwXCI6Yz0hMCxkKz0xMDticmVhaztjYXNlXCJhbHRMZWZ0XCI6Y2FzZVwiYWx0RG93blwiOmM9ITAsZC09MTA7YnJlYWs7Y2FzZVwiY3RybFNoaWZ0VXBcIjp0aGlzLnVwKCl9cz1uLmdldERheXNDb3VudChuZXcgRGF0ZShkLGwpKSxpPW5ldyBEYXRlKGQsbCx1KSx1PnMmJih1PXMpLGkuZ2V0VGltZSgpPHRoaXMubWluVGltZT9pPXRoaXMubWluRGF0ZTppLmdldFRpbWUoKT50aGlzLm1heFRpbWUmJihpPXRoaXMubWF4RGF0ZSksdGhpcy5mb2N1c2VkPWksZT1uLmdldFBhcnNlZERhdGUoaSksbyYmaC5vbkNoYW5nZU1vbnRoJiZoLm9uQ2hhbmdlTW9udGgoZS5tb250aCxlLnllYXIpLHImJmgub25DaGFuZ2VZZWFyJiZoLm9uQ2hhbmdlWWVhcihlLnllYXIpLGMmJmgub25DaGFuZ2VEZWNhZGUmJmgub25DaGFuZ2VEZWNhZGUodGhpcy5jdXJEZWNhZGUpfSxfcmVnaXN0ZXJLZXk6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5rZXlzLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PXR9KTtlfHx0aGlzLmtleXMucHVzaCh0KX0sX3VuUmVnaXN0ZXJLZXk6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5rZXlzLmluZGV4T2YodCk7dGhpcy5rZXlzLnNwbGljZShlLDEpfSxfaXNIb3RLZXlQcmVzc2VkOmZ1bmN0aW9uKCl7dmFyIHQsZT0hMSxpPXRoaXMscz10aGlzLmtleXMuc29ydCgpO2Zvcih2YXIgYSBpbiB1KXQ9dVthXSxzLmxlbmd0aD09dC5sZW5ndGgmJnQuZXZlcnkoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09c1tlXX0pJiYoaS5fdHJpZ2dlcihcImhvdEtleVwiLGEpLGU9ITApO3JldHVybiBlfSxfdHJpZ2dlcjpmdW5jdGlvbih0LGUpe3RoaXMuJGVsLnRyaWdnZXIodCxlKX0sX2ZvY3VzTmV4dENlbGw6ZnVuY3Rpb24odCxlKXtlPWV8fHRoaXMuY2VsbFR5cGU7dmFyIGk9bi5nZXRQYXJzZWREYXRlKHRoaXMuX2dldEZvY3VzZWREYXRlKCkpLHM9aS55ZWFyLGE9aS5tb250aCxoPWkuZGF0ZTtpZighdGhpcy5faXNIb3RLZXlQcmVzc2VkKCkpe3N3aXRjaCh0KXtjYXNlIDM3OlwiZGF5XCI9PWU/aC09MTpcIlwiLFwibW9udGhcIj09ZT9hLT0xOlwiXCIsXCJ5ZWFyXCI9PWU/cy09MTpcIlwiO2JyZWFrO2Nhc2UgMzg6XCJkYXlcIj09ZT9oLT03OlwiXCIsXCJtb250aFwiPT1lP2EtPTM6XCJcIixcInllYXJcIj09ZT9zLT00OlwiXCI7YnJlYWs7Y2FzZSAzOTpcImRheVwiPT1lP2grPTE6XCJcIixcIm1vbnRoXCI9PWU/YSs9MTpcIlwiLFwieWVhclwiPT1lP3MrPTE6XCJcIjticmVhaztjYXNlIDQwOlwiZGF5XCI9PWU/aCs9NzpcIlwiLFwibW9udGhcIj09ZT9hKz0zOlwiXCIsXCJ5ZWFyXCI9PWU/cys9NDpcIlwifXZhciBvPW5ldyBEYXRlKHMsYSxoKTtvLmdldFRpbWUoKTx0aGlzLm1pblRpbWU/bz10aGlzLm1pbkRhdGU6by5nZXRUaW1lKCk+dGhpcy5tYXhUaW1lJiYobz10aGlzLm1heERhdGUpLHRoaXMuZm9jdXNlZD1vfX0sX2dldEZvY3VzZWREYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5mb2N1c2VkfHx0aGlzLnNlbGVjdGVkRGF0ZXNbdGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aC0xXSxlPXRoaXMucGFyc2VkRGF0ZTtpZighdClzd2l0Y2godGhpcy52aWV3KXtjYXNlXCJkYXlzXCI6dD1uZXcgRGF0ZShlLnllYXIsZS5tb250aCwobmV3IERhdGUpLmdldERhdGUoKSk7YnJlYWs7Y2FzZVwibW9udGhzXCI6dD1uZXcgRGF0ZShlLnllYXIsZS5tb250aCwxKTticmVhaztjYXNlXCJ5ZWFyc1wiOnQ9bmV3IERhdGUoZS55ZWFyLDAsMSl9cmV0dXJuIHR9LF9nZXRDZWxsOmZ1bmN0aW9uKHQsaSl7aT1pfHx0aGlzLmNlbGxUeXBlO3ZhciBzLGE9bi5nZXRQYXJzZWREYXRlKHQpLGg9Jy5kYXRlcGlja2VyLS1jZWxsW2RhdGEteWVhcj1cIicrYS55ZWFyKydcIl0nO3N3aXRjaChpKXtjYXNlXCJtb250aFwiOmg9J1tkYXRhLW1vbnRoPVwiJythLm1vbnRoKydcIl0nO2JyZWFrO2Nhc2VcImRheVwiOmgrPSdbZGF0YS1tb250aD1cIicrYS5tb250aCsnXCJdW2RhdGEtZGF0ZT1cIicrYS5kYXRlKydcIl0nfXJldHVybiBzPXRoaXMudmlld3NbdGhpcy5jdXJyZW50Vmlld10uJGVsLmZpbmQoaCkscy5sZW5ndGg/czplKFwiXCIpfSxkZXN0cm95OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0LiRlbC5vZmYoXCIuYWRwXCIpLmRhdGEoXCJkYXRlcGlja2VyXCIsXCJcIiksdC5zZWxlY3RlZERhdGVzPVtdLHQuZm9jdXNlZD1cIlwiLHQudmlld3M9e30sdC5rZXlzPVtdLHQubWluUmFuZ2U9XCJcIix0Lm1heFJhbmdlPVwiXCIsdC5vcHRzLmlubGluZXx8IXQuZWxJc0lucHV0P3QuJGRhdGVwaWNrZXIuY2xvc2VzdChcIi5kYXRlcGlja2VyLWlubGluZVwiKS5yZW1vdmUoKTp0LiRkYXRlcGlja2VyLnJlbW92ZSgpfSxfaGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXM6ZnVuY3Rpb24odCxlKXt0aGlzLm9wdHMucmFuZ2U/dGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkP3RoaXMucmVtb3ZlRGF0ZShlKToyIT10aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiZ0aGlzLl90cmlnZ2VyKFwiY2xpY2tDZWxsXCIsZSk6dGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkJiZ0aGlzLnJlbW92ZURhdGUoZSksdGhpcy5vcHRzLnRvZ2dsZVNlbGVjdGVkfHwodGhpcy5sYXN0U2VsZWN0ZWREYXRlPXQsdGhpcy5vcHRzLnRpbWVwaWNrZXImJih0aGlzLnRpbWVwaWNrZXIuX3NldFRpbWUodCksdGhpcy50aW1lcGlja2VyLnVwZGF0ZSgpKSl9LF9vblNob3dFdmVudDpmdW5jdGlvbih0KXt0aGlzLnZpc2libGV8fHRoaXMuc2hvdygpfSxfb25CbHVyOmZ1bmN0aW9uKCl7IXRoaXMuaW5Gb2N1cyYmdGhpcy52aXNpYmxlJiZ0aGlzLmhpZGUoKX0sX29uTW91c2VEb3duRGF0ZXBpY2tlcjpmdW5jdGlvbih0KXt0aGlzLmluRm9jdXM9ITB9LF9vbk1vdXNlVXBEYXRlcGlja2VyOmZ1bmN0aW9uKHQpe3RoaXMuaW5Gb2N1cz0hMSx0Lm9yaWdpbmFsRXZlbnQuaW5Gb2N1cz0hMCx0Lm9yaWdpbmFsRXZlbnQudGltZXBpY2tlckZvY3VzfHx0aGlzLiRlbC5mb2N1cygpfSxfb25LZXlVcEdlbmVyYWw6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy4kZWwudmFsKCk7ZXx8dGhpcy5jbGVhcigpfSxfb25SZXNpemU6ZnVuY3Rpb24oKXt0aGlzLnZpc2libGUmJnRoaXMuc2V0UG9zaXRpb24oKX0sX29uTW91c2VVcEJvZHk6ZnVuY3Rpb24odCl7dC5vcmlnaW5hbEV2ZW50LmluRm9jdXN8fHRoaXMudmlzaWJsZSYmIXRoaXMuaW5Gb2N1cyYmdGhpcy5oaWRlKCl9LF9vbk1vdXNlVXBFbDpmdW5jdGlvbih0KXt0Lm9yaWdpbmFsRXZlbnQuaW5Gb2N1cz0hMCxzZXRUaW1lb3V0KHRoaXMuX29uS2V5VXBHZW5lcmFsLmJpbmQodGhpcyksNCl9LF9vbktleURvd246ZnVuY3Rpb24odCl7dmFyIGU9dC53aGljaDtpZih0aGlzLl9yZWdpc3RlcktleShlKSxlPj0zNyYmNDA+PWUmJih0LnByZXZlbnREZWZhdWx0KCksdGhpcy5fZm9jdXNOZXh0Q2VsbChlKSksMTM9PWUmJnRoaXMuZm9jdXNlZCl7aWYodGhpcy5fZ2V0Q2VsbCh0aGlzLmZvY3VzZWQpLmhhc0NsYXNzKFwiLWRpc2FibGVkLVwiKSlyZXR1cm47aWYodGhpcy52aWV3IT10aGlzLm9wdHMubWluVmlldyl0aGlzLmRvd24oKTtlbHNle3ZhciBpPXRoaXMuX2lzU2VsZWN0ZWQodGhpcy5mb2N1c2VkLHRoaXMuY2VsbFR5cGUpO2lmKCFpKXJldHVybiB0aGlzLnRpbWVwaWNrZXImJih0aGlzLmZvY3VzZWQuc2V0SG91cnModGhpcy50aW1lcGlja2VyLmhvdXJzKSx0aGlzLmZvY3VzZWQuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcykpLHZvaWQgdGhpcy5zZWxlY3REYXRlKHRoaXMuZm9jdXNlZCk7dGhpcy5faGFuZGxlQWxyZWFkeVNlbGVjdGVkRGF0ZXMoaSx0aGlzLmZvY3VzZWQpfX0yNz09ZSYmdGhpcy5oaWRlKCl9LF9vbktleVVwOmZ1bmN0aW9uKHQpe3ZhciBlPXQud2hpY2g7dGhpcy5fdW5SZWdpc3RlcktleShlKX0sX29uSG90S2V5OmZ1bmN0aW9uKHQsZSl7dGhpcy5faGFuZGxlSG90S2V5KGUpfSxfb25Nb3VzZUVudGVyQ2VsbDpmdW5jdGlvbih0KXt2YXIgaT1lKHQudGFyZ2V0KS5jbG9zZXN0KFwiLmRhdGVwaWNrZXItLWNlbGxcIikscz10aGlzLl9nZXREYXRlRnJvbUNlbGwoaSk7dGhpcy5zaWxlbnQ9ITAsdGhpcy5mb2N1c2VkJiYodGhpcy5mb2N1c2VkPVwiXCIpLGkuYWRkQ2xhc3MoXCItZm9jdXMtXCIpLHRoaXMuZm9jdXNlZD1zLHRoaXMuc2lsZW50PSExLHRoaXMub3B0cy5yYW5nZSYmMT09dGhpcy5zZWxlY3RlZERhdGVzLmxlbmd0aCYmKHRoaXMubWluUmFuZ2U9dGhpcy5zZWxlY3RlZERhdGVzWzBdLHRoaXMubWF4UmFuZ2U9XCJcIixuLmxlc3ModGhpcy5taW5SYW5nZSx0aGlzLmZvY3VzZWQpJiYodGhpcy5tYXhSYW5nZT10aGlzLm1pblJhbmdlLHRoaXMubWluUmFuZ2U9XCJcIiksdGhpcy52aWV3c1t0aGlzLmN1cnJlbnRWaWV3XS5fdXBkYXRlKCkpfSxfb25Nb3VzZUxlYXZlQ2VsbDpmdW5jdGlvbih0KXt2YXIgaT1lKHQudGFyZ2V0KS5jbG9zZXN0KFwiLmRhdGVwaWNrZXItLWNlbGxcIik7aS5yZW1vdmVDbGFzcyhcIi1mb2N1cy1cIiksdGhpcy5zaWxlbnQ9ITAsdGhpcy5mb2N1c2VkPVwiXCIsdGhpcy5zaWxlbnQ9ITF9LF9vblRpbWVDaGFuZ2U6ZnVuY3Rpb24odCxlLGkpe3ZhciBzPW5ldyBEYXRlLGE9dGhpcy5zZWxlY3RlZERhdGVzLG49ITE7YS5sZW5ndGgmJihuPSEwLHM9dGhpcy5sYXN0U2VsZWN0ZWREYXRlKSxzLnNldEhvdXJzKGUpLHMuc2V0TWludXRlcyhpKSxufHx0aGlzLl9nZXRDZWxsKHMpLmhhc0NsYXNzKFwiLWRpc2FibGVkLVwiKT8odGhpcy5fc2V0SW5wdXRWYWx1ZSgpLHRoaXMub3B0cy5vblNlbGVjdCYmdGhpcy5fdHJpZ2dlck9uQ2hhbmdlKCkpOnRoaXMuc2VsZWN0RGF0ZShzKX0sX29uQ2xpY2tDZWxsOmZ1bmN0aW9uKHQsZSl7dGhpcy50aW1lcGlja2VyJiYoZS5zZXRIb3Vycyh0aGlzLnRpbWVwaWNrZXIuaG91cnMpLGUuc2V0TWludXRlcyh0aGlzLnRpbWVwaWNrZXIubWludXRlcykpLHRoaXMuc2VsZWN0RGF0ZShlKX0sc2V0IGZvY3VzZWQodCl7aWYoIXQmJnRoaXMuZm9jdXNlZCl7dmFyIGU9dGhpcy5fZ2V0Q2VsbCh0aGlzLmZvY3VzZWQpO2UubGVuZ3RoJiZlLnJlbW92ZUNsYXNzKFwiLWZvY3VzLVwiKX10aGlzLl9mb2N1c2VkPXQsdGhpcy5vcHRzLnJhbmdlJiYxPT10aGlzLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiYodGhpcy5taW5SYW5nZT10aGlzLnNlbGVjdGVkRGF0ZXNbMF0sdGhpcy5tYXhSYW5nZT1cIlwiLG4ubGVzcyh0aGlzLm1pblJhbmdlLHRoaXMuX2ZvY3VzZWQpJiYodGhpcy5tYXhSYW5nZT10aGlzLm1pblJhbmdlLHRoaXMubWluUmFuZ2U9XCJcIikpLHRoaXMuc2lsZW50fHwodGhpcy5kYXRlPXQpfSxnZXQgZm9jdXNlZCgpe3JldHVybiB0aGlzLl9mb2N1c2VkfSxnZXQgcGFyc2VkRGF0ZSgpe3JldHVybiBuLmdldFBhcnNlZERhdGUodGhpcy5kYXRlKX0sc2V0IGRhdGUodCl7cmV0dXJuIHQgaW5zdGFuY2VvZiBEYXRlPyh0aGlzLmN1cnJlbnREYXRlPXQsdGhpcy5pbml0ZWQmJiF0aGlzLnNpbGVudCYmKHRoaXMudmlld3NbdGhpcy52aWV3XS5fcmVuZGVyKCksdGhpcy5uYXYuX3JlbmRlcigpLHRoaXMudmlzaWJsZSYmdGhpcy5lbElzSW5wdXQmJnRoaXMuc2V0UG9zaXRpb24oKSksdCk6dm9pZCAwfSxnZXQgZGF0ZSgpe3JldHVybiB0aGlzLmN1cnJlbnREYXRlfSxzZXQgdmlldyh0KXtyZXR1cm4gdGhpcy52aWV3SW5kZXg9dGhpcy52aWV3SW5kZXhlcy5pbmRleE9mKHQpLHRoaXMudmlld0luZGV4PDA/dm9pZCAwOih0aGlzLnByZXZWaWV3PXRoaXMuY3VycmVudFZpZXcsdGhpcy5jdXJyZW50Vmlldz10LHRoaXMuaW5pdGVkJiYodGhpcy52aWV3c1t0XT90aGlzLnZpZXdzW3RdLl9yZW5kZXIoKTp0aGlzLnZpZXdzW3RdPW5ldyBlLmZuLmRhdGVwaWNrZXIuQm9keSh0aGlzLHQsdGhpcy5vcHRzKSx0aGlzLnZpZXdzW3RoaXMucHJldlZpZXddLmhpZGUoKSx0aGlzLnZpZXdzW3RdLnNob3coKSx0aGlzLm5hdi5fcmVuZGVyKCksdGhpcy5vcHRzLm9uQ2hhbmdlVmlldyYmdGhpcy5vcHRzLm9uQ2hhbmdlVmlldyh0KSx0aGlzLmVsSXNJbnB1dCYmdGhpcy52aXNpYmxlJiZ0aGlzLnNldFBvc2l0aW9uKCkpLHQpfSxnZXQgdmlldygpe3JldHVybiB0aGlzLmN1cnJlbnRWaWV3fSxnZXQgY2VsbFR5cGUoKXtyZXR1cm4gdGhpcy52aWV3LnN1YnN0cmluZygwLHRoaXMudmlldy5sZW5ndGgtMSl9LGdldCBtaW5UaW1lKCl7dmFyIHQ9bi5nZXRQYXJzZWREYXRlKHRoaXMubWluRGF0ZSk7cmV0dXJuIG5ldyBEYXRlKHQueWVhcix0Lm1vbnRoLHQuZGF0ZSkuZ2V0VGltZSgpfSxnZXQgbWF4VGltZSgpe3ZhciB0PW4uZ2V0UGFyc2VkRGF0ZSh0aGlzLm1heERhdGUpO3JldHVybiBuZXcgRGF0ZSh0LnllYXIsdC5tb250aCx0LmRhdGUpLmdldFRpbWUoKX0sZ2V0IGN1ckRlY2FkZSgpe3JldHVybiBuLmdldERlY2FkZSh0aGlzLmRhdGUpfX0sbi5nZXREYXlzQ291bnQ9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCkrMSwwKS5nZXREYXRlKCl9LG4uZ2V0UGFyc2VkRGF0ZT1mdW5jdGlvbih0KXtyZXR1cm57eWVhcjp0LmdldEZ1bGxZZWFyKCksbW9udGg6dC5nZXRNb250aCgpLGZ1bGxNb250aDp0LmdldE1vbnRoKCkrMTwxMD9cIjBcIisodC5nZXRNb250aCgpKzEpOnQuZ2V0TW9udGgoKSsxLGRhdGU6dC5nZXREYXRlKCksZnVsbERhdGU6dC5nZXREYXRlKCk8MTA/XCIwXCIrdC5nZXREYXRlKCk6dC5nZXREYXRlKCksZGF5OnQuZ2V0RGF5KCksaG91cnM6dC5nZXRIb3VycygpLGZ1bGxIb3Vyczp0LmdldEhvdXJzKCk8MTA/XCIwXCIrdC5nZXRIb3VycygpOnQuZ2V0SG91cnMoKSxtaW51dGVzOnQuZ2V0TWludXRlcygpLGZ1bGxNaW51dGVzOnQuZ2V0TWludXRlcygpPDEwP1wiMFwiK3QuZ2V0TWludXRlcygpOnQuZ2V0TWludXRlcygpfX0sbi5nZXREZWNhZGU9ZnVuY3Rpb24odCl7dmFyIGU9MTAqTWF0aC5mbG9vcih0LmdldEZ1bGxZZWFyKCkvMTApO3JldHVybltlLGUrOV19LG4udGVtcGxhdGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5yZXBsYWNlKC8jXFx7KFtcXHddKylcXH0vZyxmdW5jdGlvbih0LGkpe3JldHVybiBlW2ldfHwwPT09ZVtpXT9lW2ldOnZvaWQgMH0pfSxuLmlzU2FtZT1mdW5jdGlvbih0LGUsaSl7aWYoIXR8fCFlKXJldHVybiExO3ZhciBzPW4uZ2V0UGFyc2VkRGF0ZSh0KSxhPW4uZ2V0UGFyc2VkRGF0ZShlKSxoPWk/aTpcImRheVwiLG89e2RheTpzLmRhdGU9PWEuZGF0ZSYmcy5tb250aD09YS5tb250aCYmcy55ZWFyPT1hLnllYXIsbW9udGg6cy5tb250aD09YS5tb250aCYmcy55ZWFyPT1hLnllYXIseWVhcjpzLnllYXI9PWEueWVhcn07cmV0dXJuIG9baF19LG4ubGVzcz1mdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQmJmU/ZS5nZXRUaW1lKCk8dC5nZXRUaW1lKCk6ITF9LG4uYmlnZ2VyPWZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdCYmZT9lLmdldFRpbWUoKT50LmdldFRpbWUoKTohMX0sbi5nZXRMZWFkaW5nWmVyb051bT1mdW5jdGlvbih0KXtyZXR1cm4gcGFyc2VJbnQodCk8MTA/XCIwXCIrdDp0fSxuLnJlc2V0VGltZT1mdW5jdGlvbih0KXtyZXR1cm5cIm9iamVjdFwiPT10eXBlb2YgdD8odD1uLmdldFBhcnNlZERhdGUodCksbmV3IERhdGUodC55ZWFyLHQubW9udGgsdC5kYXRlKSk6dm9pZCAwfSxlLmZuLmRhdGVwaWNrZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2lmKGUuZGF0YSh0aGlzLG8pKXt2YXIgaT1lLmRhdGEodGhpcyxvKTtpLm9wdHM9ZS5leHRlbmQoITAsaS5vcHRzLHQpLGkudXBkYXRlKCl9ZWxzZSBlLmRhdGEodGhpcyxvLG5ldyBtKHRoaXMsdCkpfSl9LGUuZm4uZGF0ZXBpY2tlci5Db25zdHJ1Y3Rvcj1tLGUuZm4uZGF0ZXBpY2tlci5sYW5ndWFnZT17cnU6e2RheXM6W1wi0JLQvtGB0LrRgNC10YHQtdC90YzQtVwiLFwi0J/QvtC90LXQtNC10LvRjNC90LjQulwiLFwi0JLRgtC+0YDQvdC40LpcIixcItCh0YDQtdC00LBcIixcItCn0LXRgtCy0LXRgNCzXCIsXCLQn9GP0YLQvdC40YbQsFwiLFwi0KHRg9Cx0LHQvtGC0LBcIl0sZGF5c1Nob3J0OltcItCS0L7RgVwiLFwi0J/QvtC9XCIsXCLQktGC0L5cIixcItCh0YDQtVwiLFwi0KfQtdGCXCIsXCLQn9GP0YJcIixcItCh0YPQsVwiXSxkYXlzTWluOltcItCS0YFcIixcItCf0L1cIixcItCS0YJcIixcItCh0YBcIixcItCn0YJcIixcItCf0YJcIixcItCh0LFcIl0sbW9udGhzOltcItCv0L3QstCw0YDRjFwiLFwi0KTQtdCy0YDQsNC70YxcIixcItCc0LDRgNGCXCIsXCLQkNC/0YDQtdC70YxcIixcItCc0LDQuVwiLFwi0JjRjtC90YxcIixcItCY0Y7Qu9GMXCIsXCLQkNCy0LPRg9GB0YJcIixcItCh0LXQvdGC0Y/QsdGA0YxcIixcItCe0LrRgtGP0LHRgNGMXCIsXCLQndC+0Y/QsdGA0YxcIixcItCU0LXQutCw0LHRgNGMXCJdLG1vbnRoc1Nob3J0OltcItCv0L3QslwiLFwi0KTQtdCyXCIsXCLQnNCw0YBcIixcItCQ0L/RgFwiLFwi0JzQsNC5XCIsXCLQmNGO0L1cIixcItCY0Y7Qu1wiLFwi0JDQstCzXCIsXCLQodC10L1cIixcItCe0LrRglwiLFwi0J3QvtGPXCIsXCLQlNC10LpcIl0sdG9kYXk6XCLQodC10LPQvtC00L3Rj1wiLGNsZWFyOlwi0J7Rh9C40YHRgtC40YLRjFwiLGRhdGVGb3JtYXQ6XCJkZC5tbS55eXl5XCIsdGltZUZvcm1hdDpcImhoOmlpXCIsZmlyc3REYXk6MX19LGUoZnVuY3Rpb24oKXtlKHIpLmRhdGVwaWNrZXIoKX0pfSgpLGZ1bmN0aW9uKCl7dmFyIHQ9e2RheXM6JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1kYXlzIGRhdGVwaWNrZXItLWJvZHlcIj48ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tZGF5cy1uYW1lc1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy1kYXlzXCI+PC9kaXY+PC9kaXY+Jyxtb250aHM6JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1tb250aHMgZGF0ZXBpY2tlci0tYm9keVwiPjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy1tb250aHNcIj48L2Rpdj48L2Rpdj4nLHllYXJzOic8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0teWVhcnMgZGF0ZXBpY2tlci0tYm9keVwiPjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1jZWxscyBkYXRlcGlja2VyLS1jZWxscy15ZWFyc1wiPjwvZGl2PjwvZGl2Pid9LHM9ZS5mbi5kYXRlcGlja2VyLGE9cy5Db25zdHJ1Y3RvcjtzLkJvZHk9ZnVuY3Rpb24odCxpLHMpe3RoaXMuZD10LHRoaXMudHlwZT1pLHRoaXMub3B0cz1zLHRoaXMuJGVsPWUoXCJcIiksdGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHx0aGlzLmluaXQoKX0scy5Cb2R5LnByb3RvdHlwZT17aW5pdDpmdW5jdGlvbigpe3RoaXMuX2J1aWxkQmFzZUh0bWwoKSx0aGlzLl9yZW5kZXIoKSx0aGlzLl9iaW5kRXZlbnRzKCl9LF9iaW5kRXZlbnRzOmZ1bmN0aW9uKCl7dGhpcy4kZWwub24oXCJjbGlja1wiLFwiLmRhdGVwaWNrZXItLWNlbGxcIixlLnByb3h5KHRoaXMuX29uQ2xpY2tDZWxsLHRoaXMpKX0sX2J1aWxkQmFzZUh0bWw6ZnVuY3Rpb24oKXt0aGlzLiRlbD1lKHRbdGhpcy50eXBlXSkuYXBwZW5kVG8odGhpcy5kLiRjb250ZW50KSx0aGlzLiRuYW1lcz1lKFwiLmRhdGVwaWNrZXItLWRheXMtbmFtZXNcIix0aGlzLiRlbCksdGhpcy4kY2VsbHM9ZShcIi5kYXRlcGlja2VyLS1jZWxsc1wiLHRoaXMuJGVsKX0sX2dldERheU5hbWVzSHRtbDpmdW5jdGlvbih0LGUscyxhKXtyZXR1cm4gZT1lIT1pP2U6dCxzPXM/czpcIlwiLGE9YSE9aT9hOjAsYT43P3M6Nz09ZT90aGlzLl9nZXREYXlOYW1lc0h0bWwodCwwLHMsKythKToocys9JzxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS1kYXktbmFtZScrKHRoaXMuZC5pc1dlZWtlbmQoZSk/XCIgLXdlZWtlbmQtXCI6XCJcIikrJ1wiPicrdGhpcy5kLmxvYy5kYXlzTWluW2VdK1wiPC9kaXY+XCIsdGhpcy5fZ2V0RGF5TmFtZXNIdG1sKHQsKytlLHMsKythKSl9LF9nZXRDZWxsQ29udGVudHM6ZnVuY3Rpb24odCxlKXt2YXIgaT1cImRhdGVwaWNrZXItLWNlbGwgZGF0ZXBpY2tlci0tY2VsbC1cIitlLHM9bmV3IERhdGUsbj10aGlzLmQsaD1hLnJlc2V0VGltZShuLm1pblJhbmdlKSxvPWEucmVzZXRUaW1lKG4ubWF4UmFuZ2UpLHI9bi5vcHRzLGM9YS5nZXRQYXJzZWREYXRlKHQpLGQ9e30sbD1jLmRhdGU7c3dpdGNoKGUpe2Nhc2VcImRheVwiOm4uaXNXZWVrZW5kKGMuZGF5KSYmKGkrPVwiIC13ZWVrZW5kLVwiKSxjLm1vbnRoIT10aGlzLmQucGFyc2VkRGF0ZS5tb250aCYmKGkrPVwiIC1vdGhlci1tb250aC1cIixyLnNlbGVjdE90aGVyTW9udGhzfHwoaSs9XCIgLWRpc2FibGVkLVwiKSxyLnNob3dPdGhlck1vbnRoc3x8KGw9XCJcIikpO2JyZWFrO2Nhc2VcIm1vbnRoXCI6bD1uLmxvY1tuLm9wdHMubW9udGhzRmllbGRdW2MubW9udGhdO2JyZWFrO2Nhc2VcInllYXJcIjp2YXIgdT1uLmN1ckRlY2FkZTtsPWMueWVhciwoYy55ZWFyPHVbMF18fGMueWVhcj51WzFdKSYmKGkrPVwiIC1vdGhlci1kZWNhZGUtXCIsci5zZWxlY3RPdGhlclllYXJzfHwoaSs9XCIgLWRpc2FibGVkLVwiKSxyLnNob3dPdGhlclllYXJzfHwobD1cIlwiKSl9cmV0dXJuIHIub25SZW5kZXJDZWxsJiYoZD1yLm9uUmVuZGVyQ2VsbCh0LGUpfHx7fSxsPWQuaHRtbD9kLmh0bWw6bCxpKz1kLmNsYXNzZXM/XCIgXCIrZC5jbGFzc2VzOlwiXCIpLHIucmFuZ2UmJihhLmlzU2FtZShoLHQsZSkmJihpKz1cIiAtcmFuZ2UtZnJvbS1cIiksYS5pc1NhbWUobyx0LGUpJiYoaSs9XCIgLXJhbmdlLXRvLVwiKSwxPT1uLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiZuLmZvY3VzZWQ/KChhLmJpZ2dlcihoLHQpJiZhLmxlc3Mobi5mb2N1c2VkLHQpfHxhLmxlc3Mobyx0KSYmYS5iaWdnZXIobi5mb2N1c2VkLHQpKSYmKGkrPVwiIC1pbi1yYW5nZS1cIiksYS5sZXNzKG8sdCkmJmEuaXNTYW1lKG4uZm9jdXNlZCx0KSYmKGkrPVwiIC1yYW5nZS1mcm9tLVwiKSxhLmJpZ2dlcihoLHQpJiZhLmlzU2FtZShuLmZvY3VzZWQsdCkmJihpKz1cIiAtcmFuZ2UtdG8tXCIpKToyPT1uLnNlbGVjdGVkRGF0ZXMubGVuZ3RoJiZhLmJpZ2dlcihoLHQpJiZhLmxlc3Mobyx0KSYmKGkrPVwiIC1pbi1yYW5nZS1cIikpLGEuaXNTYW1lKHMsdCxlKSYmKGkrPVwiIC1jdXJyZW50LVwiKSxuLmZvY3VzZWQmJmEuaXNTYW1lKHQsbi5mb2N1c2VkLGUpJiYoaSs9XCIgLWZvY3VzLVwiKSxuLl9pc1NlbGVjdGVkKHQsZSkmJihpKz1cIiAtc2VsZWN0ZWQtXCIpLCghbi5faXNJblJhbmdlKHQsZSl8fGQuZGlzYWJsZWQpJiYoaSs9XCIgLWRpc2FibGVkLVwiKSx7aHRtbDpsLGNsYXNzZXM6aX19LF9nZXREYXlzSHRtbDpmdW5jdGlvbih0KXt2YXIgZT1hLmdldERheXNDb3VudCh0KSxpPW5ldyBEYXRlKHQuZ2V0RnVsbFllYXIoKSx0LmdldE1vbnRoKCksMSkuZ2V0RGF5KCkscz1uZXcgRGF0ZSh0LmdldEZ1bGxZZWFyKCksdC5nZXRNb250aCgpLGUpLmdldERheSgpLG49aS10aGlzLmQubG9jLmZpcnN0RGF5LGg9Ni1zK3RoaXMuZC5sb2MuZmlyc3REYXk7bj0wPm4/bis3Om4saD1oPjY/aC03Omg7Zm9yKHZhciBvLHIsYz0tbisxLGQ9XCJcIixsPWMsdT1lK2g7dT49bDtsKyspcj10LmdldEZ1bGxZZWFyKCksbz10LmdldE1vbnRoKCksZCs9dGhpcy5fZ2V0RGF5SHRtbChuZXcgRGF0ZShyLG8sbCkpO3JldHVybiBkfSxfZ2V0RGF5SHRtbDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9nZXRDZWxsQ29udGVudHModCxcImRheVwiKTtyZXR1cm4nPGRpdiBjbGFzcz1cIicrZS5jbGFzc2VzKydcIiBkYXRhLWRhdGU9XCInK3QuZ2V0RGF0ZSgpKydcIiBkYXRhLW1vbnRoPVwiJyt0LmdldE1vbnRoKCkrJ1wiIGRhdGEteWVhcj1cIicrdC5nZXRGdWxsWWVhcigpKydcIj4nK2UuaHRtbCtcIjwvZGl2PlwifSxfZ2V0TW9udGhzSHRtbDpmdW5jdGlvbih0KXtmb3IodmFyIGU9XCJcIixpPWEuZ2V0UGFyc2VkRGF0ZSh0KSxzPTA7MTI+czspZSs9dGhpcy5fZ2V0TW9udGhIdG1sKG5ldyBEYXRlKGkueWVhcixzKSkscysrO3JldHVybiBlfSxfZ2V0TW9udGhIdG1sOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2dldENlbGxDb250ZW50cyh0LFwibW9udGhcIik7cmV0dXJuJzxkaXYgY2xhc3M9XCInK2UuY2xhc3NlcysnXCIgZGF0YS1tb250aD1cIicrdC5nZXRNb250aCgpKydcIj4nK2UuaHRtbCtcIjwvZGl2PlwifSxfZ2V0WWVhcnNIdG1sOmZ1bmN0aW9uKHQpe3ZhciBlPShhLmdldFBhcnNlZERhdGUodCksYS5nZXREZWNhZGUodCkpLGk9ZVswXS0xLHM9XCJcIixuPWk7Zm9yKG47bjw9ZVsxXSsxO24rKylzKz10aGlzLl9nZXRZZWFySHRtbChuZXcgRGF0ZShuLDApKTtyZXR1cm4gc30sX2dldFllYXJIdG1sOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2dldENlbGxDb250ZW50cyh0LFwieWVhclwiKTtyZXR1cm4nPGRpdiBjbGFzcz1cIicrZS5jbGFzc2VzKydcIiBkYXRhLXllYXI9XCInK3QuZ2V0RnVsbFllYXIoKSsnXCI+JytlLmh0bWwrXCI8L2Rpdj5cIn0sX3JlbmRlclR5cGVzOntkYXlzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZ2V0RGF5TmFtZXNIdG1sKHRoaXMuZC5sb2MuZmlyc3REYXkpLGU9dGhpcy5fZ2V0RGF5c0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTt0aGlzLiRjZWxscy5odG1sKGUpLHRoaXMuJG5hbWVzLmh0bWwodCl9LG1vbnRoczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldE1vbnRoc0h0bWwodGhpcy5kLmN1cnJlbnREYXRlKTt0aGlzLiRjZWxscy5odG1sKHQpfSx5ZWFyczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX2dldFllYXJzSHRtbCh0aGlzLmQuY3VycmVudERhdGUpO3RoaXMuJGNlbGxzLmh0bWwodCl9fSxfcmVuZGVyOmZ1bmN0aW9uKCl7dGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHx0aGlzLl9yZW5kZXJUeXBlc1t0aGlzLnR5cGVdLmJpbmQodGhpcykoKX0sX3VwZGF0ZTpmdW5jdGlvbigpe3ZhciB0LGkscyxhPWUoXCIuZGF0ZXBpY2tlci0tY2VsbFwiLHRoaXMuJGNlbGxzKSxuPXRoaXM7YS5lYWNoKGZ1bmN0aW9uKGEsaCl7aT1lKHRoaXMpLHM9bi5kLl9nZXREYXRlRnJvbUNlbGwoZSh0aGlzKSksdD1uLl9nZXRDZWxsQ29udGVudHMocyxuLmQuY2VsbFR5cGUpLGkuYXR0cihcImNsYXNzXCIsdC5jbGFzc2VzKX0pfSxzaG93OmZ1bmN0aW9uKCl7dGhpcy5vcHRzLm9ubHlUaW1lcGlja2VyfHwodGhpcy4kZWwuYWRkQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy5hY2l0dmU9ITApfSxoaWRlOmZ1bmN0aW9uKCl7dGhpcy4kZWwucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIiksdGhpcy5hY3RpdmU9ITF9LF9oYW5kbGVDbGljazpmdW5jdGlvbih0KXt2YXIgZT10LmRhdGEoXCJkYXRlXCIpfHwxLGk9dC5kYXRhKFwibW9udGhcIil8fDAscz10LmRhdGEoXCJ5ZWFyXCIpfHx0aGlzLmQucGFyc2VkRGF0ZS55ZWFyLGE9dGhpcy5kO2lmKGEudmlldyE9dGhpcy5vcHRzLm1pblZpZXcpcmV0dXJuIHZvaWQgYS5kb3duKG5ldyBEYXRlKHMsaSxlKSk7dmFyIG49bmV3IERhdGUocyxpLGUpLGg9dGhpcy5kLl9pc1NlbGVjdGVkKG4sdGhpcy5kLmNlbGxUeXBlKTtyZXR1cm4gaD92b2lkIGEuX2hhbmRsZUFscmVhZHlTZWxlY3RlZERhdGVzLmJpbmQoYSxoLG4pKCk6dm9pZCBhLl90cmlnZ2VyKFwiY2xpY2tDZWxsXCIsbil9LF9vbkNsaWNrQ2VsbDpmdW5jdGlvbih0KXt2YXIgaT1lKHQudGFyZ2V0KS5jbG9zZXN0KFwiLmRhdGVwaWNrZXItLWNlbGxcIik7aS5oYXNDbGFzcyhcIi1kaXNhYmxlZC1cIil8fHRoaXMuX2hhbmRsZUNsaWNrLmJpbmQodGhpcykoaSl9fX0oKSxmdW5jdGlvbigpe3ZhciB0PSc8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tbmF2LWFjdGlvblwiIGRhdGEtYWN0aW9uPVwicHJldlwiPiN7cHJldkh0bWx9PC9kaXY+PGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi10aXRsZVwiPiN7dGl0bGV9PC9kaXY+PGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLW5hdi1hY3Rpb25cIiBkYXRhLWFjdGlvbj1cIm5leHRcIj4je25leHRIdG1sfTwvZGl2PicsaT0nPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLWJ1dHRvbnNcIj48L2Rpdj4nLHM9JzxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tYnV0dG9uXCIgZGF0YS1hY3Rpb249XCIje2FjdGlvbn1cIj4je2xhYmVsfTwvc3Bhbj4nLGE9ZS5mbi5kYXRlcGlja2VyLG49YS5Db25zdHJ1Y3RvcjthLk5hdmlnYXRpb249ZnVuY3Rpb24odCxlKXt0aGlzLmQ9dCx0aGlzLm9wdHM9ZSx0aGlzLiRidXR0b25zQ29udGFpbmVyPVwiXCIsdGhpcy5pbml0KCl9LGEuTmF2aWdhdGlvbi5wcm90b3R5cGU9e2luaXQ6ZnVuY3Rpb24oKXt0aGlzLl9idWlsZEJhc2VIdG1sKCksdGhpcy5fYmluZEV2ZW50cygpfSxfYmluZEV2ZW50czpmdW5jdGlvbigpe3RoaXMuZC4kbmF2Lm9uKFwiY2xpY2tcIixcIi5kYXRlcGlja2VyLS1uYXYtYWN0aW9uXCIsZS5wcm94eSh0aGlzLl9vbkNsaWNrTmF2QnV0dG9uLHRoaXMpKSx0aGlzLmQuJG5hdi5vbihcImNsaWNrXCIsXCIuZGF0ZXBpY2tlci0tbmF2LXRpdGxlXCIsZS5wcm94eSh0aGlzLl9vbkNsaWNrTmF2VGl0bGUsdGhpcykpLHRoaXMuZC4kZGF0ZXBpY2tlci5vbihcImNsaWNrXCIsXCIuZGF0ZXBpY2tlci0tYnV0dG9uXCIsZS5wcm94eSh0aGlzLl9vbkNsaWNrTmF2QnV0dG9uLHRoaXMpKX0sX2J1aWxkQmFzZUh0bWw6ZnVuY3Rpb24oKXt0aGlzLm9wdHMub25seVRpbWVwaWNrZXJ8fHRoaXMuX3JlbmRlcigpLHRoaXMuX2FkZEJ1dHRvbnNJZk5lZWQoKX0sX2FkZEJ1dHRvbnNJZk5lZWQ6ZnVuY3Rpb24oKXt0aGlzLm9wdHMudG9kYXlCdXR0b24mJnRoaXMuX2FkZEJ1dHRvbihcInRvZGF5XCIpLHRoaXMub3B0cy5jbGVhckJ1dHRvbiYmdGhpcy5fYWRkQnV0dG9uKFwiY2xlYXJcIil9LF9yZW5kZXI6ZnVuY3Rpb24oKXt2YXIgaT10aGlzLl9nZXRUaXRsZSh0aGlzLmQuY3VycmVudERhdGUpLHM9bi50ZW1wbGF0ZSh0LGUuZXh0ZW5kKHt0aXRsZTppfSx0aGlzLm9wdHMpKTt0aGlzLmQuJG5hdi5odG1sKHMpLFwieWVhcnNcIj09dGhpcy5kLnZpZXcmJmUoXCIuZGF0ZXBpY2tlci0tbmF2LXRpdGxlXCIsdGhpcy5kLiRuYXYpLmFkZENsYXNzKFwiLWRpc2FibGVkLVwiKSx0aGlzLnNldE5hdlN0YXR1cygpfSxfZ2V0VGl0bGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZC5mb3JtYXREYXRlKHRoaXMub3B0cy5uYXZUaXRsZXNbdGhpcy5kLnZpZXddLHQpfSxfYWRkQnV0dG9uOmZ1bmN0aW9uKHQpe3RoaXMuJGJ1dHRvbnNDb250YWluZXIubGVuZ3RofHx0aGlzLl9hZGRCdXR0b25zQ29udGFpbmVyKCk7dmFyIGk9e2FjdGlvbjp0LGxhYmVsOnRoaXMuZC5sb2NbdF19LGE9bi50ZW1wbGF0ZShzLGkpO2UoXCJbZGF0YS1hY3Rpb249XCIrdCtcIl1cIix0aGlzLiRidXR0b25zQ29udGFpbmVyKS5sZW5ndGh8fHRoaXMuJGJ1dHRvbnNDb250YWluZXIuYXBwZW5kKGEpfSxfYWRkQnV0dG9uc0NvbnRhaW5lcjpmdW5jdGlvbigpe3RoaXMuZC4kZGF0ZXBpY2tlci5hcHBlbmQoaSksdGhpcy4kYnV0dG9uc0NvbnRhaW5lcj1lKFwiLmRhdGVwaWNrZXItLWJ1dHRvbnNcIix0aGlzLmQuJGRhdGVwaWNrZXIpfSxzZXROYXZTdGF0dXM6ZnVuY3Rpb24oKXtpZigodGhpcy5vcHRzLm1pbkRhdGV8fHRoaXMub3B0cy5tYXhEYXRlKSYmdGhpcy5vcHRzLmRpc2FibGVOYXZXaGVuT3V0T2ZSYW5nZSl7dmFyIHQ9dGhpcy5kLnBhcnNlZERhdGUsZT10Lm1vbnRoLGk9dC55ZWFyLHM9dC5kYXRlO3N3aXRjaCh0aGlzLmQudmlldyl7Y2FzZVwiZGF5c1wiOnRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGksZS0xLDEpLFwibW9udGhcIil8fHRoaXMuX2Rpc2FibGVOYXYoXCJwcmV2XCIpLHRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGksZSsxLDEpLFwibW9udGhcIil8fHRoaXMuX2Rpc2FibGVOYXYoXCJuZXh0XCIpO2JyZWFrO2Nhc2VcIm1vbnRoc1wiOnRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGktMSxlLHMpLFwieWVhclwiKXx8dGhpcy5fZGlzYWJsZU5hdihcInByZXZcIiksdGhpcy5kLl9pc0luUmFuZ2UobmV3IERhdGUoaSsxLGUscyksXCJ5ZWFyXCIpfHx0aGlzLl9kaXNhYmxlTmF2KFwibmV4dFwiKTticmVhaztjYXNlXCJ5ZWFyc1wiOnZhciBhPW4uZ2V0RGVjYWRlKHRoaXMuZC5kYXRlKTt0aGlzLmQuX2lzSW5SYW5nZShuZXcgRGF0ZShhWzBdLTEsMCwxKSxcInllYXJcIil8fHRoaXMuX2Rpc2FibGVOYXYoXCJwcmV2XCIpLHRoaXMuZC5faXNJblJhbmdlKG5ldyBEYXRlKGFbMV0rMSwwLDEpLFwieWVhclwiKXx8dGhpcy5fZGlzYWJsZU5hdihcIm5leHRcIil9fX0sX2Rpc2FibGVOYXY6ZnVuY3Rpb24odCl7ZSgnW2RhdGEtYWN0aW9uPVwiJyt0KydcIl0nLHRoaXMuZC4kbmF2KS5hZGRDbGFzcyhcIi1kaXNhYmxlZC1cIil9LF9hY3RpdmF0ZU5hdjpmdW5jdGlvbih0KXtlKCdbZGF0YS1hY3Rpb249XCInK3QrJ1wiXScsdGhpcy5kLiRuYXYpLnJlbW92ZUNsYXNzKFwiLWRpc2FibGVkLVwiKX0sX29uQ2xpY2tOYXZCdXR0b246ZnVuY3Rpb24odCl7dmFyIGk9ZSh0LnRhcmdldCkuY2xvc2VzdChcIltkYXRhLWFjdGlvbl1cIikscz1pLmRhdGEoXCJhY3Rpb25cIik7dGhpcy5kW3NdKCl9LF9vbkNsaWNrTmF2VGl0bGU6ZnVuY3Rpb24odCl7cmV0dXJuIGUodC50YXJnZXQpLmhhc0NsYXNzKFwiLWRpc2FibGVkLVwiKT92b2lkIDA6XCJkYXlzXCI9PXRoaXMuZC52aWV3P3RoaXMuZC52aWV3PVwibW9udGhzXCI6dm9pZCh0aGlzLmQudmlldz1cInllYXJzXCIpfX19KCksZnVuY3Rpb24oKXt2YXIgdD0nPGRpdiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWVcIj48ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50XCI+ICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtaG91cnNcIj4je2hvdXJWaXNpYmxlfTwvc3Bhbj4gICA8c3BhbiBjbGFzcz1cImRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1jb2xvblwiPjo8L3NwYW4+ICAgPHNwYW4gY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtbWludXRlc1wiPiN7bWluVmFsdWV9PC9zcGFuPjwvZGl2PjxkaXYgY2xhc3M9XCJkYXRlcGlja2VyLS10aW1lLXNsaWRlcnNcIj4gICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4gICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cImhvdXJzXCIgdmFsdWU9XCIje2hvdXJWYWx1ZX1cIiBtaW49XCIje2hvdXJNaW59XCIgbWF4PVwiI3tob3VyTWF4fVwiIHN0ZXA9XCIje2hvdXJTdGVwfVwiLz4gICA8L2Rpdj4gICA8ZGl2IGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1yb3dcIj4gICAgICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbmFtZT1cIm1pbnV0ZXNcIiB2YWx1ZT1cIiN7bWluVmFsdWV9XCIgbWluPVwiI3ttaW5NaW59XCIgbWF4PVwiI3ttaW5NYXh9XCIgc3RlcD1cIiN7bWluU3RlcH1cIi8+ICAgPC9kaXY+PC9kaXY+PC9kaXY+JyxpPWUuZm4uZGF0ZXBpY2tlcixzPWkuQ29uc3RydWN0b3I7aS5UaW1lcGlja2VyPWZ1bmN0aW9uKHQsZSl7dGhpcy5kPXQsdGhpcy5vcHRzPWUsdGhpcy5pbml0KCl9LGkuVGltZXBpY2tlci5wcm90b3R5cGU9e2luaXQ6ZnVuY3Rpb24oKXt2YXIgdD1cImlucHV0XCI7dGhpcy5fc2V0VGltZSh0aGlzLmQuZGF0ZSksdGhpcy5fYnVpbGRIVE1MKCksbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvdHJpZGVudC9naSkmJih0PVwiY2hhbmdlXCIpLHRoaXMuZC4kZWwub24oXCJzZWxlY3REYXRlXCIsdGhpcy5fb25TZWxlY3REYXRlLmJpbmQodGhpcykpLHRoaXMuJHJhbmdlcy5vbih0LHRoaXMuX29uQ2hhbmdlUmFuZ2UuYmluZCh0aGlzKSksdGhpcy4kcmFuZ2VzLm9uKFwibW91c2V1cFwiLHRoaXMuX29uTW91c2VVcFJhbmdlLmJpbmQodGhpcykpLHRoaXMuJHJhbmdlcy5vbihcIm1vdXNlbW92ZSBmb2N1cyBcIix0aGlzLl9vbk1vdXNlRW50ZXJSYW5nZS5iaW5kKHRoaXMpKSx0aGlzLiRyYW5nZXMub24oXCJtb3VzZW91dCBibHVyXCIsdGhpcy5fb25Nb3VzZU91dFJhbmdlLmJpbmQodGhpcykpfSxfc2V0VGltZTpmdW5jdGlvbih0KXt2YXIgZT1zLmdldFBhcnNlZERhdGUodCk7dGhpcy5faGFuZGxlRGF0ZSh0KSx0aGlzLmhvdXJzPWUuaG91cnM8dGhpcy5taW5Ib3Vycz90aGlzLm1pbkhvdXJzOmUuaG91cnMsdGhpcy5taW51dGVzPWUubWludXRlczx0aGlzLm1pbk1pbnV0ZXM/dGhpcy5taW5NaW51dGVzOmUubWludXRlc30sX3NldE1pblRpbWVGcm9tRGF0ZTpmdW5jdGlvbih0KXt0aGlzLm1pbkhvdXJzPXQuZ2V0SG91cnMoKSx0aGlzLm1pbk1pbnV0ZXM9dC5nZXRNaW51dGVzKCksdGhpcy5kLmxhc3RTZWxlY3RlZERhdGUmJnRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlLmdldEhvdXJzKCk+dC5nZXRIb3VycygpJiYodGhpcy5taW5NaW51dGVzPXRoaXMub3B0cy5taW5NaW51dGVzKX0sX3NldE1heFRpbWVGcm9tRGF0ZTpmdW5jdGlvbih0KXtcbnRoaXMubWF4SG91cnM9dC5nZXRIb3VycygpLHRoaXMubWF4TWludXRlcz10LmdldE1pbnV0ZXMoKSx0aGlzLmQubGFzdFNlbGVjdGVkRGF0ZSYmdGhpcy5kLmxhc3RTZWxlY3RlZERhdGUuZ2V0SG91cnMoKTx0LmdldEhvdXJzKCkmJih0aGlzLm1heE1pbnV0ZXM9dGhpcy5vcHRzLm1heE1pbnV0ZXMpfSxfc2V0RGVmYXVsdE1pbk1heFRpbWU6ZnVuY3Rpb24oKXt2YXIgdD0yMyxlPTU5LGk9dGhpcy5vcHRzO3RoaXMubWluSG91cnM9aS5taW5Ib3VyczwwfHxpLm1pbkhvdXJzPnQ/MDppLm1pbkhvdXJzLHRoaXMubWluTWludXRlcz1pLm1pbk1pbnV0ZXM8MHx8aS5taW5NaW51dGVzPmU/MDppLm1pbk1pbnV0ZXMsdGhpcy5tYXhIb3Vycz1pLm1heEhvdXJzPDB8fGkubWF4SG91cnM+dD90OmkubWF4SG91cnMsdGhpcy5tYXhNaW51dGVzPWkubWF4TWludXRlczwwfHxpLm1heE1pbnV0ZXM+ZT9lOmkubWF4TWludXRlc30sX3ZhbGlkYXRlSG91cnNNaW51dGVzOmZ1bmN0aW9uKHQpe3RoaXMuaG91cnM8dGhpcy5taW5Ib3Vycz90aGlzLmhvdXJzPXRoaXMubWluSG91cnM6dGhpcy5ob3Vycz50aGlzLm1heEhvdXJzJiYodGhpcy5ob3Vycz10aGlzLm1heEhvdXJzKSx0aGlzLm1pbnV0ZXM8dGhpcy5taW5NaW51dGVzP3RoaXMubWludXRlcz10aGlzLm1pbk1pbnV0ZXM6dGhpcy5taW51dGVzPnRoaXMubWF4TWludXRlcyYmKHRoaXMubWludXRlcz10aGlzLm1heE1pbnV0ZXMpfSxfYnVpbGRIVE1MOmZ1bmN0aW9uKCl7dmFyIGk9cy5nZXRMZWFkaW5nWmVyb051bSxhPXtob3VyTWluOnRoaXMubWluSG91cnMsaG91ck1heDppKHRoaXMubWF4SG91cnMpLGhvdXJTdGVwOnRoaXMub3B0cy5ob3Vyc1N0ZXAsaG91clZhbHVlOnRoaXMuaG91cnMsaG91clZpc2libGU6aSh0aGlzLmRpc3BsYXlIb3VycyksbWluTWluOnRoaXMubWluTWludXRlcyxtaW5NYXg6aSh0aGlzLm1heE1pbnV0ZXMpLG1pblN0ZXA6dGhpcy5vcHRzLm1pbnV0ZXNTdGVwLG1pblZhbHVlOmkodGhpcy5taW51dGVzKX0sbj1zLnRlbXBsYXRlKHQsYSk7dGhpcy4kdGltZXBpY2tlcj1lKG4pLmFwcGVuZFRvKHRoaXMuZC4kZGF0ZXBpY2tlciksdGhpcy4kcmFuZ2VzPWUoJ1t0eXBlPVwicmFuZ2VcIl0nLHRoaXMuJHRpbWVwaWNrZXIpLHRoaXMuJGhvdXJzPWUoJ1tuYW1lPVwiaG91cnNcIl0nLHRoaXMuJHRpbWVwaWNrZXIpLHRoaXMuJG1pbnV0ZXM9ZSgnW25hbWU9XCJtaW51dGVzXCJdJyx0aGlzLiR0aW1lcGlja2VyKSx0aGlzLiRob3Vyc1RleHQ9ZShcIi5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtaG91cnNcIix0aGlzLiR0aW1lcGlja2VyKSx0aGlzLiRtaW51dGVzVGV4dD1lKFwiLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudC1taW51dGVzXCIsdGhpcy4kdGltZXBpY2tlciksdGhpcy5kLmFtcG0mJih0aGlzLiRhbXBtPWUoJzxzcGFuIGNsYXNzPVwiZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LWFtcG1cIj4nKS5hcHBlbmRUbyhlKFwiLmRhdGVwaWNrZXItLXRpbWUtY3VycmVudFwiLHRoaXMuJHRpbWVwaWNrZXIpKS5odG1sKHRoaXMuZGF5UGVyaW9kKSx0aGlzLiR0aW1lcGlja2VyLmFkZENsYXNzKFwiLWFtLXBtLVwiKSl9LF91cGRhdGVDdXJyZW50VGltZTpmdW5jdGlvbigpe3ZhciB0PXMuZ2V0TGVhZGluZ1plcm9OdW0odGhpcy5kaXNwbGF5SG91cnMpLGU9cy5nZXRMZWFkaW5nWmVyb051bSh0aGlzLm1pbnV0ZXMpO3RoaXMuJGhvdXJzVGV4dC5odG1sKHQpLHRoaXMuJG1pbnV0ZXNUZXh0Lmh0bWwoZSksdGhpcy5kLmFtcG0mJnRoaXMuJGFtcG0uaHRtbCh0aGlzLmRheVBlcmlvZCl9LF91cGRhdGVSYW5nZXM6ZnVuY3Rpb24oKXt0aGlzLiRob3Vycy5hdHRyKHttaW46dGhpcy5taW5Ib3VycyxtYXg6dGhpcy5tYXhIb3Vyc30pLnZhbCh0aGlzLmhvdXJzKSx0aGlzLiRtaW51dGVzLmF0dHIoe21pbjp0aGlzLm1pbk1pbnV0ZXMsbWF4OnRoaXMubWF4TWludXRlc30pLnZhbCh0aGlzLm1pbnV0ZXMpfSxfaGFuZGxlRGF0ZTpmdW5jdGlvbih0KXt0aGlzLl9zZXREZWZhdWx0TWluTWF4VGltZSgpLHQmJihzLmlzU2FtZSh0LHRoaXMuZC5vcHRzLm1pbkRhdGUpP3RoaXMuX3NldE1pblRpbWVGcm9tRGF0ZSh0aGlzLmQub3B0cy5taW5EYXRlKTpzLmlzU2FtZSh0LHRoaXMuZC5vcHRzLm1heERhdGUpJiZ0aGlzLl9zZXRNYXhUaW1lRnJvbURhdGUodGhpcy5kLm9wdHMubWF4RGF0ZSkpLHRoaXMuX3ZhbGlkYXRlSG91cnNNaW51dGVzKHQpfSx1cGRhdGU6ZnVuY3Rpb24oKXt0aGlzLl91cGRhdGVSYW5nZXMoKSx0aGlzLl91cGRhdGVDdXJyZW50VGltZSgpfSxfZ2V0VmFsaWRIb3Vyc0Zyb21EYXRlOmZ1bmN0aW9uKHQsZSl7dmFyIGk9dCxhPXQ7dCBpbnN0YW5jZW9mIERhdGUmJihpPXMuZ2V0UGFyc2VkRGF0ZSh0KSxhPWkuaG91cnMpO3ZhciBuPWV8fHRoaXMuZC5hbXBtLGg9XCJhbVwiO2lmKG4pc3dpdGNoKCEwKXtjYXNlIDA9PWE6YT0xMjticmVhaztjYXNlIDEyPT1hOmg9XCJwbVwiO2JyZWFrO2Nhc2UgYT4xMTphLT0xMixoPVwicG1cIn1yZXR1cm57aG91cnM6YSxkYXlQZXJpb2Q6aH19LHNldCBob3Vycyh0KXt0aGlzLl9ob3Vycz10O3ZhciBlPXRoaXMuX2dldFZhbGlkSG91cnNGcm9tRGF0ZSh0KTt0aGlzLmRpc3BsYXlIb3Vycz1lLmhvdXJzLHRoaXMuZGF5UGVyaW9kPWUuZGF5UGVyaW9kfSxnZXQgaG91cnMoKXtyZXR1cm4gdGhpcy5faG91cnN9LF9vbkNoYW5nZVJhbmdlOmZ1bmN0aW9uKHQpe3ZhciBpPWUodC50YXJnZXQpLHM9aS5hdHRyKFwibmFtZVwiKTt0aGlzLmQudGltZXBpY2tlcklzQWN0aXZlPSEwLHRoaXNbc109aS52YWwoKSx0aGlzLl91cGRhdGVDdXJyZW50VGltZSgpLHRoaXMuZC5fdHJpZ2dlcihcInRpbWVDaGFuZ2VcIixbdGhpcy5ob3Vycyx0aGlzLm1pbnV0ZXNdKSx0aGlzLl9oYW5kbGVEYXRlKHRoaXMuZC5sYXN0U2VsZWN0ZWREYXRlKSx0aGlzLnVwZGF0ZSgpfSxfb25TZWxlY3REYXRlOmZ1bmN0aW9uKHQsZSl7dGhpcy5faGFuZGxlRGF0ZShlKSx0aGlzLnVwZGF0ZSgpfSxfb25Nb3VzZUVudGVyUmFuZ2U6ZnVuY3Rpb24odCl7dmFyIGk9ZSh0LnRhcmdldCkuYXR0cihcIm5hbWVcIik7ZShcIi5kYXRlcGlja2VyLS10aW1lLWN1cnJlbnQtXCIraSx0aGlzLiR0aW1lcGlja2VyKS5hZGRDbGFzcyhcIi1mb2N1cy1cIil9LF9vbk1vdXNlT3V0UmFuZ2U6ZnVuY3Rpb24odCl7dmFyIGk9ZSh0LnRhcmdldCkuYXR0cihcIm5hbWVcIik7dGhpcy5kLmluRm9jdXN8fGUoXCIuZGF0ZXBpY2tlci0tdGltZS1jdXJyZW50LVwiK2ksdGhpcy4kdGltZXBpY2tlcikucmVtb3ZlQ2xhc3MoXCItZm9jdXMtXCIpfSxfb25Nb3VzZVVwUmFuZ2U6ZnVuY3Rpb24odCl7dGhpcy5kLnRpbWVwaWNrZXJJc0FjdGl2ZT0hMX19fSgpfSh3aW5kb3csalF1ZXJ5KTsiLCIvKiFcbiAqIEJvb3RzdHJhcC1zZWxlY3QgdjEuMTMuMTAgKGh0dHBzOi8vZGV2ZWxvcGVyLnNuYXBhcHBvaW50bWVudHMuY29tL2Jvb3RzdHJhcC1zZWxlY3QpXG4gKlxuICogQ29weXJpZ2h0IDIwMTItMjAxOSBTbmFwQXBwb2ludG1lbnRzLCBMTENcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3NuYXBhcHBvaW50bWVudHMvYm9vdHN0cmFwLXNlbGVjdC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICovXG5cbiFmdW5jdGlvbihlLHQpe3ZvaWQgMD09PWUmJnZvaWQgMCE9PXdpbmRvdyYmKGU9d2luZG93KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImpxdWVyeVwiXSxmdW5jdGlvbihlKXtyZXR1cm4gdChlKX0pOlwib2JqZWN0XCI9PXR5cGVvZiBtb2R1bGUmJm1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPXQocmVxdWlyZShcImpxdWVyeVwiKSk6dChlLmpRdWVyeSl9KHRoaXMsZnVuY3Rpb24oZSl7IWZ1bmN0aW9uKHope1widXNlIHN0cmljdFwiO3ZhciBkPVtcInNhbml0aXplXCIsXCJ3aGl0ZUxpc3RcIixcInNhbml0aXplRm5cIl0scj1bXCJiYWNrZ3JvdW5kXCIsXCJjaXRlXCIsXCJocmVmXCIsXCJpdGVtdHlwZVwiLFwibG9uZ2Rlc2NcIixcInBvc3RlclwiLFwic3JjXCIsXCJ4bGluazpocmVmXCJdLGU9e1wiKlwiOltcImNsYXNzXCIsXCJkaXJcIixcImlkXCIsXCJsYW5nXCIsXCJyb2xlXCIsXCJ0YWJpbmRleFwiLFwic3R5bGVcIiwvXmFyaWEtW1xcdy1dKiQvaV0sYTpbXCJ0YXJnZXRcIixcImhyZWZcIixcInRpdGxlXCIsXCJyZWxcIl0sYXJlYTpbXSxiOltdLGJyOltdLGNvbDpbXSxjb2RlOltdLGRpdjpbXSxlbTpbXSxocjpbXSxoMTpbXSxoMjpbXSxoMzpbXSxoNDpbXSxoNTpbXSxoNjpbXSxpOltdLGltZzpbXCJzcmNcIixcImFsdFwiLFwidGl0bGVcIixcIndpZHRoXCIsXCJoZWlnaHRcIl0sbGk6W10sb2w6W10scDpbXSxwcmU6W10sczpbXSxzbWFsbDpbXSxzcGFuOltdLHN1YjpbXSxzdXA6W10sc3Ryb25nOltdLHU6W10sdWw6W119LGw9L14oPzooPzpodHRwcz98bWFpbHRvfGZ0cHx0ZWx8ZmlsZSk6fFteJjovPyNdKig/OlsvPyNdfCQpKS9naSxhPS9eZGF0YTooPzppbWFnZVxcLyg/OmJtcHxnaWZ8anBlZ3xqcGd8cG5nfHRpZmZ8d2VicCl8dmlkZW9cXC8oPzptcGVnfG1wNHxvZ2d8d2VibSl8YXVkaW9cXC8oPzptcDN8b2dhfG9nZ3xvcHVzKSk7YmFzZTY0LFthLXowLTkrL10rPSokL2k7ZnVuY3Rpb24gdihlLHQpe3ZhciBpPWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZigtMSE9PXouaW5BcnJheShpLHQpKXJldHVybi0xPT09ei5pbkFycmF5KGkscil8fEJvb2xlYW4oZS5ub2RlVmFsdWUubWF0Y2gobCl8fGUubm9kZVZhbHVlLm1hdGNoKGEpKTtmb3IodmFyIHM9eih0KS5maWx0ZXIoZnVuY3Rpb24oZSx0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIFJlZ0V4cH0pLG49MCxvPXMubGVuZ3RoO248bztuKyspaWYoaS5tYXRjaChzW25dKSlyZXR1cm4hMDtyZXR1cm4hMX1mdW5jdGlvbiBQKGUsdCxpKXtpZihpJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBpKXJldHVybiBpKGUpO2Zvcih2YXIgcz1PYmplY3Qua2V5cyh0KSxuPTAsbz1lLmxlbmd0aDtuPG87bisrKWZvcih2YXIgcj1lW25dLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqXCIpLGw9MCxhPXIubGVuZ3RoO2w8YTtsKyspe3ZhciBjPXJbbF0sZD1jLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoLTEhPT1zLmluZGV4T2YoZCkpZm9yKHZhciBoPVtdLnNsaWNlLmNhbGwoYy5hdHRyaWJ1dGVzKSxwPVtdLmNvbmNhdCh0W1wiKlwiXXx8W10sdFtkXXx8W10pLHU9MCxmPWgubGVuZ3RoO3U8Zjt1Kyspe3ZhciBtPWhbdV07dihtLHApfHxjLnJlbW92ZUF0dHJpYnV0ZShtLm5vZGVOYW1lKX1lbHNlIGMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKX19XCJjbGFzc0xpc3RcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJfXCIpfHxmdW5jdGlvbihlKXtpZihcIkVsZW1lbnRcImluIGUpe3ZhciB0PVwiY2xhc3NMaXN0XCIsaT1cInByb3RvdHlwZVwiLHM9ZS5FbGVtZW50W2ldLG49T2JqZWN0LG89ZnVuY3Rpb24oKXt2YXIgaT16KHRoaXMpO3JldHVybnthZGQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKSxpLmFkZENsYXNzKGUpfSxyZW1vdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKS5qb2luKFwiIFwiKSxpLnJlbW92ZUNsYXNzKGUpfSx0b2dnbGU6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gaS50b2dnbGVDbGFzcyhlLHQpfSxjb250YWluczpmdW5jdGlvbihlKXtyZXR1cm4gaS5oYXNDbGFzcyhlKX19fTtpZihuLmRlZmluZVByb3BlcnR5KXt2YXIgcj17Z2V0Om8sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9O3RyeXtuLmRlZmluZVByb3BlcnR5KHMsdCxyKX1jYXRjaChlKXt2b2lkIDAhPT1lLm51bWJlciYmLTIxNDY4MjMyNTIhPT1lLm51bWJlcnx8KHIuZW51bWVyYWJsZT0hMSxuLmRlZmluZVByb3BlcnR5KHMsdCxyKSl9fWVsc2UgbltpXS5fX2RlZmluZUdldHRlcl9fJiZzLl9fZGVmaW5lR2V0dGVyX18odCxvKX19KHdpbmRvdyk7dmFyIHQsYyxpLHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIl9cIik7aWYocy5jbGFzc0xpc3QuYWRkKFwiYzFcIixcImMyXCIpLCFzLmNsYXNzTGlzdC5jb250YWlucyhcImMyXCIpKXt2YXIgbj1ET01Ub2tlbkxpc3QucHJvdG90eXBlLmFkZCxvPURPTVRva2VuTGlzdC5wcm90b3R5cGUucmVtb3ZlO0RPTVRva2VuTGlzdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKCl7QXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChhcmd1bWVudHMsbi5iaW5kKHRoaXMpKX0sRE9NVG9rZW5MaXN0LnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oKXtBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGFyZ3VtZW50cyxvLmJpbmQodGhpcykpfX1pZihzLmNsYXNzTGlzdC50b2dnbGUoXCJjM1wiLCExKSxzLmNsYXNzTGlzdC5jb250YWlucyhcImMzXCIpKXt2YXIgaD1ET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZTtET01Ub2tlbkxpc3QucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbihlLHQpe3JldHVybiAxIGluIGFyZ3VtZW50cyYmIXRoaXMuY29udGFpbnMoZSk9PSF0P3Q6aC5jYWxsKHRoaXMsZSl9fWZ1bmN0aW9uIE8oZSx0KXtmb3IodmFyIGkscz1bXSxuPXR8fGUuc2VsZWN0ZWRPcHRpb25zLG89MCxyPW4ubGVuZ3RoO288cjtvKyspKGk9bltvXSkuZGlzYWJsZWR8fFwiT1BUR1JPVVBcIj09PWkucGFyZW50Tm9kZS50YWdOYW1lJiZpLnBhcmVudE5vZGUuZGlzYWJsZWR8fHMucHVzaChpLnZhbHVlfHxpLnRleHQpO3JldHVybiBlLm11bHRpcGxlP3M6cy5sZW5ndGg/c1swXTpudWxsfXM9bnVsbCxTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGh8fCh0PWZ1bmN0aW9uKCl7dHJ5e3ZhciBlPXt9LHQ9T2JqZWN0LmRlZmluZVByb3BlcnR5LGk9dChlLGUsZSkmJnR9Y2F0Y2goZSl7fXJldHVybiBpfSgpLGM9e30udG9TdHJpbmcsaT1mdW5jdGlvbihlKXtpZihudWxsPT10aGlzKXRocm93IG5ldyBUeXBlRXJyb3I7dmFyIHQ9U3RyaW5nKHRoaXMpO2lmKGUmJlwiW29iamVjdCBSZWdFeHBdXCI9PWMuY2FsbChlKSl0aHJvdyBuZXcgVHlwZUVycm9yO3ZhciBpPXQubGVuZ3RoLHM9U3RyaW5nKGUpLG49cy5sZW5ndGgsbz0xPGFyZ3VtZW50cy5sZW5ndGg/YXJndW1lbnRzWzFdOnZvaWQgMCxyPW8/TnVtYmVyKG8pOjA7ciE9ciYmKHI9MCk7dmFyIGw9TWF0aC5taW4oTWF0aC5tYXgociwwKSxpKTtpZihpPG4rbClyZXR1cm4hMTtmb3IodmFyIGE9LTE7KythPG47KWlmKHQuY2hhckNvZGVBdChsK2EpIT1zLmNoYXJDb2RlQXQoYSkpcmV0dXJuITE7cmV0dXJuITB9LHQ/dChTdHJpbmcucHJvdG90eXBlLFwic3RhcnRzV2l0aFwiLHt2YWx1ZTppLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOlN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aD1pKSxPYmplY3Qua2V5c3x8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKGUsdCxpKXtmb3IodCBpbiBpPVtdLGUpaS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsdCkmJmkucHVzaCh0KTtyZXR1cm4gaX0pLEhUTUxTZWxlY3RFbGVtZW50JiYhSFRNTFNlbGVjdEVsZW1lbnQucHJvdG90eXBlLmhhc093blByb3BlcnR5KFwic2VsZWN0ZWRPcHRpb25zXCIpJiZPYmplY3QuZGVmaW5lUHJvcGVydHkoSFRNTFNlbGVjdEVsZW1lbnQucHJvdG90eXBlLFwic2VsZWN0ZWRPcHRpb25zXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6Y2hlY2tlZFwiKX19KTt2YXIgcD17dXNlRGVmYXVsdDohMSxfc2V0OnoudmFsSG9va3Muc2VsZWN0LnNldH07ei52YWxIb29rcy5zZWxlY3Quc2V0PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQmJiFwLnVzZURlZmF1bHQmJnooZSkuZGF0YShcInNlbGVjdGVkXCIsITApLHAuX3NldC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3ZhciBUPW51bGwsdT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IEV2ZW50KFwiY2hhbmdlXCIpLCEwfWNhdGNoKGUpe3JldHVybiExfX0oKTtmdW5jdGlvbiBrKGUsdCxpLHMpe2Zvcih2YXIgbj1bXCJkaXNwbGF5XCIsXCJzdWJ0ZXh0XCIsXCJ0b2tlbnNcIl0sbz0hMSxyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBsPW5bcl0sYT1lW2xdO2lmKGEmJihhPWEudG9TdHJpbmcoKSxcImRpc3BsYXlcIj09PWwmJihhPWEucmVwbGFjZSgvPFtePl0rPi9nLFwiXCIpKSxzJiYoYT13KGEpKSxhPWEudG9VcHBlckNhc2UoKSxvPVwiY29udGFpbnNcIj09PWk/MDw9YS5pbmRleE9mKHQpOmEuc3RhcnRzV2l0aCh0KSkpYnJlYWt9cmV0dXJuIG99ZnVuY3Rpb24gQShlKXtyZXR1cm4gcGFyc2VJbnQoZSwxMCl8fDB9ei5mbi50cmlnZ2VyTmF0aXZlPWZ1bmN0aW9uKGUpe3ZhciB0LGk9dGhpc1swXTtpLmRpc3BhdGNoRXZlbnQ/KHU/dD1uZXcgRXZlbnQoZSx7YnViYmxlczohMH0pOih0PWRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikpLmluaXRFdmVudChlLCEwLCExKSxpLmRpc3BhdGNoRXZlbnQodCkpOmkuZmlyZUV2ZW50PygodD1kb2N1bWVudC5jcmVhdGVFdmVudE9iamVjdCgpKS5ldmVudFR5cGU9ZSxpLmZpcmVFdmVudChcIm9uXCIrZSx0KSk6dGhpcy50cmlnZ2VyKGUpfTt2YXIgZj17XCJcXHhjMFwiOlwiQVwiLFwiXFx4YzFcIjpcIkFcIixcIlxceGMyXCI6XCJBXCIsXCJcXHhjM1wiOlwiQVwiLFwiXFx4YzRcIjpcIkFcIixcIlxceGM1XCI6XCJBXCIsXCJcXHhlMFwiOlwiYVwiLFwiXFx4ZTFcIjpcImFcIixcIlxceGUyXCI6XCJhXCIsXCJcXHhlM1wiOlwiYVwiLFwiXFx4ZTRcIjpcImFcIixcIlxceGU1XCI6XCJhXCIsXCJcXHhjN1wiOlwiQ1wiLFwiXFx4ZTdcIjpcImNcIixcIlxceGQwXCI6XCJEXCIsXCJcXHhmMFwiOlwiZFwiLFwiXFx4YzhcIjpcIkVcIixcIlxceGM5XCI6XCJFXCIsXCJcXHhjYVwiOlwiRVwiLFwiXFx4Y2JcIjpcIkVcIixcIlxceGU4XCI6XCJlXCIsXCJcXHhlOVwiOlwiZVwiLFwiXFx4ZWFcIjpcImVcIixcIlxceGViXCI6XCJlXCIsXCJcXHhjY1wiOlwiSVwiLFwiXFx4Y2RcIjpcIklcIixcIlxceGNlXCI6XCJJXCIsXCJcXHhjZlwiOlwiSVwiLFwiXFx4ZWNcIjpcImlcIixcIlxceGVkXCI6XCJpXCIsXCJcXHhlZVwiOlwiaVwiLFwiXFx4ZWZcIjpcImlcIixcIlxceGQxXCI6XCJOXCIsXCJcXHhmMVwiOlwiblwiLFwiXFx4ZDJcIjpcIk9cIixcIlxceGQzXCI6XCJPXCIsXCJcXHhkNFwiOlwiT1wiLFwiXFx4ZDVcIjpcIk9cIixcIlxceGQ2XCI6XCJPXCIsXCJcXHhkOFwiOlwiT1wiLFwiXFx4ZjJcIjpcIm9cIixcIlxceGYzXCI6XCJvXCIsXCJcXHhmNFwiOlwib1wiLFwiXFx4ZjVcIjpcIm9cIixcIlxceGY2XCI6XCJvXCIsXCJcXHhmOFwiOlwib1wiLFwiXFx4ZDlcIjpcIlVcIixcIlxceGRhXCI6XCJVXCIsXCJcXHhkYlwiOlwiVVwiLFwiXFx4ZGNcIjpcIlVcIixcIlxceGY5XCI6XCJ1XCIsXCJcXHhmYVwiOlwidVwiLFwiXFx4ZmJcIjpcInVcIixcIlxceGZjXCI6XCJ1XCIsXCJcXHhkZFwiOlwiWVwiLFwiXFx4ZmRcIjpcInlcIixcIlxceGZmXCI6XCJ5XCIsXCJcXHhjNlwiOlwiQWVcIixcIlxceGU2XCI6XCJhZVwiLFwiXFx4ZGVcIjpcIlRoXCIsXCJcXHhmZVwiOlwidGhcIixcIlxceGRmXCI6XCJzc1wiLFwiXFx1MDEwMFwiOlwiQVwiLFwiXFx1MDEwMlwiOlwiQVwiLFwiXFx1MDEwNFwiOlwiQVwiLFwiXFx1MDEwMVwiOlwiYVwiLFwiXFx1MDEwM1wiOlwiYVwiLFwiXFx1MDEwNVwiOlwiYVwiLFwiXFx1MDEwNlwiOlwiQ1wiLFwiXFx1MDEwOFwiOlwiQ1wiLFwiXFx1MDEwYVwiOlwiQ1wiLFwiXFx1MDEwY1wiOlwiQ1wiLFwiXFx1MDEwN1wiOlwiY1wiLFwiXFx1MDEwOVwiOlwiY1wiLFwiXFx1MDEwYlwiOlwiY1wiLFwiXFx1MDEwZFwiOlwiY1wiLFwiXFx1MDEwZVwiOlwiRFwiLFwiXFx1MDExMFwiOlwiRFwiLFwiXFx1MDEwZlwiOlwiZFwiLFwiXFx1MDExMVwiOlwiZFwiLFwiXFx1MDExMlwiOlwiRVwiLFwiXFx1MDExNFwiOlwiRVwiLFwiXFx1MDExNlwiOlwiRVwiLFwiXFx1MDExOFwiOlwiRVwiLFwiXFx1MDExYVwiOlwiRVwiLFwiXFx1MDExM1wiOlwiZVwiLFwiXFx1MDExNVwiOlwiZVwiLFwiXFx1MDExN1wiOlwiZVwiLFwiXFx1MDExOVwiOlwiZVwiLFwiXFx1MDExYlwiOlwiZVwiLFwiXFx1MDExY1wiOlwiR1wiLFwiXFx1MDExZVwiOlwiR1wiLFwiXFx1MDEyMFwiOlwiR1wiLFwiXFx1MDEyMlwiOlwiR1wiLFwiXFx1MDExZFwiOlwiZ1wiLFwiXFx1MDExZlwiOlwiZ1wiLFwiXFx1MDEyMVwiOlwiZ1wiLFwiXFx1MDEyM1wiOlwiZ1wiLFwiXFx1MDEyNFwiOlwiSFwiLFwiXFx1MDEyNlwiOlwiSFwiLFwiXFx1MDEyNVwiOlwiaFwiLFwiXFx1MDEyN1wiOlwiaFwiLFwiXFx1MDEyOFwiOlwiSVwiLFwiXFx1MDEyYVwiOlwiSVwiLFwiXFx1MDEyY1wiOlwiSVwiLFwiXFx1MDEyZVwiOlwiSVwiLFwiXFx1MDEzMFwiOlwiSVwiLFwiXFx1MDEyOVwiOlwiaVwiLFwiXFx1MDEyYlwiOlwiaVwiLFwiXFx1MDEyZFwiOlwiaVwiLFwiXFx1MDEyZlwiOlwiaVwiLFwiXFx1MDEzMVwiOlwiaVwiLFwiXFx1MDEzNFwiOlwiSlwiLFwiXFx1MDEzNVwiOlwialwiLFwiXFx1MDEzNlwiOlwiS1wiLFwiXFx1MDEzN1wiOlwia1wiLFwiXFx1MDEzOFwiOlwia1wiLFwiXFx1MDEzOVwiOlwiTFwiLFwiXFx1MDEzYlwiOlwiTFwiLFwiXFx1MDEzZFwiOlwiTFwiLFwiXFx1MDEzZlwiOlwiTFwiLFwiXFx1MDE0MVwiOlwiTFwiLFwiXFx1MDEzYVwiOlwibFwiLFwiXFx1MDEzY1wiOlwibFwiLFwiXFx1MDEzZVwiOlwibFwiLFwiXFx1MDE0MFwiOlwibFwiLFwiXFx1MDE0MlwiOlwibFwiLFwiXFx1MDE0M1wiOlwiTlwiLFwiXFx1MDE0NVwiOlwiTlwiLFwiXFx1MDE0N1wiOlwiTlwiLFwiXFx1MDE0YVwiOlwiTlwiLFwiXFx1MDE0NFwiOlwiblwiLFwiXFx1MDE0NlwiOlwiblwiLFwiXFx1MDE0OFwiOlwiblwiLFwiXFx1MDE0YlwiOlwiblwiLFwiXFx1MDE0Y1wiOlwiT1wiLFwiXFx1MDE0ZVwiOlwiT1wiLFwiXFx1MDE1MFwiOlwiT1wiLFwiXFx1MDE0ZFwiOlwib1wiLFwiXFx1MDE0ZlwiOlwib1wiLFwiXFx1MDE1MVwiOlwib1wiLFwiXFx1MDE1NFwiOlwiUlwiLFwiXFx1MDE1NlwiOlwiUlwiLFwiXFx1MDE1OFwiOlwiUlwiLFwiXFx1MDE1NVwiOlwiclwiLFwiXFx1MDE1N1wiOlwiclwiLFwiXFx1MDE1OVwiOlwiclwiLFwiXFx1MDE1YVwiOlwiU1wiLFwiXFx1MDE1Y1wiOlwiU1wiLFwiXFx1MDE1ZVwiOlwiU1wiLFwiXFx1MDE2MFwiOlwiU1wiLFwiXFx1MDE1YlwiOlwic1wiLFwiXFx1MDE1ZFwiOlwic1wiLFwiXFx1MDE1ZlwiOlwic1wiLFwiXFx1MDE2MVwiOlwic1wiLFwiXFx1MDE2MlwiOlwiVFwiLFwiXFx1MDE2NFwiOlwiVFwiLFwiXFx1MDE2NlwiOlwiVFwiLFwiXFx1MDE2M1wiOlwidFwiLFwiXFx1MDE2NVwiOlwidFwiLFwiXFx1MDE2N1wiOlwidFwiLFwiXFx1MDE2OFwiOlwiVVwiLFwiXFx1MDE2YVwiOlwiVVwiLFwiXFx1MDE2Y1wiOlwiVVwiLFwiXFx1MDE2ZVwiOlwiVVwiLFwiXFx1MDE3MFwiOlwiVVwiLFwiXFx1MDE3MlwiOlwiVVwiLFwiXFx1MDE2OVwiOlwidVwiLFwiXFx1MDE2YlwiOlwidVwiLFwiXFx1MDE2ZFwiOlwidVwiLFwiXFx1MDE2ZlwiOlwidVwiLFwiXFx1MDE3MVwiOlwidVwiLFwiXFx1MDE3M1wiOlwidVwiLFwiXFx1MDE3NFwiOlwiV1wiLFwiXFx1MDE3NVwiOlwid1wiLFwiXFx1MDE3NlwiOlwiWVwiLFwiXFx1MDE3N1wiOlwieVwiLFwiXFx1MDE3OFwiOlwiWVwiLFwiXFx1MDE3OVwiOlwiWlwiLFwiXFx1MDE3YlwiOlwiWlwiLFwiXFx1MDE3ZFwiOlwiWlwiLFwiXFx1MDE3YVwiOlwielwiLFwiXFx1MDE3Y1wiOlwielwiLFwiXFx1MDE3ZVwiOlwielwiLFwiXFx1MDEzMlwiOlwiSUpcIixcIlxcdTAxMzNcIjpcImlqXCIsXCJcXHUwMTUyXCI6XCJPZVwiLFwiXFx1MDE1M1wiOlwib2VcIixcIlxcdTAxNDlcIjpcIiduXCIsXCJcXHUwMTdmXCI6XCJzXCJ9LG09L1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2csZz1SZWdFeHAoXCJbXFxcXHUwMzAwLVxcXFx1MDM2ZlxcXFx1ZmUyMC1cXFxcdWZlMmZcXFxcdTIwZDAtXFxcXHUyMGZmXFxcXHUxYWIwLVxcXFx1MWFmZlxcXFx1MWRjMC1cXFxcdTFkZmZdXCIsXCJnXCIpO2Z1bmN0aW9uIGIoZSl7cmV0dXJuIGZbZV19ZnVuY3Rpb24gdyhlKXtyZXR1cm4oZT1lLnRvU3RyaW5nKCkpJiZlLnJlcGxhY2UobSxiKS5yZXBsYWNlKGcsXCJcIil9dmFyIEkseCwkLHksUyxFPShJPXtcIiZcIjpcIiZhbXA7XCIsXCI8XCI6XCImbHQ7XCIsXCI+XCI6XCImZ3Q7XCIsJ1wiJzpcIiZxdW90O1wiLFwiJ1wiOlwiJiN4Mjc7XCIsXCJgXCI6XCImI3g2MDtcIn0seD1mdW5jdGlvbihlKXtyZXR1cm4gSVtlXX0sJD1cIig/OlwiK09iamVjdC5rZXlzKEkpLmpvaW4oXCJ8XCIpK1wiKVwiLHk9UmVnRXhwKCQpLFM9UmVnRXhwKCQsXCJnXCIpLGZ1bmN0aW9uKGUpe3JldHVybiBlPW51bGw9PWU/XCJcIjpcIlwiK2UseS50ZXN0KGUpP2UucmVwbGFjZShTLHgpOmV9KSxDPXszMjpcIiBcIiw0ODpcIjBcIiw0OTpcIjFcIiw1MDpcIjJcIiw1MTpcIjNcIiw1MjpcIjRcIiw1MzpcIjVcIiw1NDpcIjZcIiw1NTpcIjdcIiw1NjpcIjhcIiw1NzpcIjlcIiw1OTpcIjtcIiw2NTpcIkFcIiw2NjpcIkJcIiw2NzpcIkNcIiw2ODpcIkRcIiw2OTpcIkVcIiw3MDpcIkZcIiw3MTpcIkdcIiw3MjpcIkhcIiw3MzpcIklcIiw3NDpcIkpcIiw3NTpcIktcIiw3NjpcIkxcIiw3NzpcIk1cIiw3ODpcIk5cIiw3OTpcIk9cIiw4MDpcIlBcIiw4MTpcIlFcIiw4MjpcIlJcIiw4MzpcIlNcIiw4NDpcIlRcIiw4NTpcIlVcIiw4NjpcIlZcIiw4NzpcIldcIiw4ODpcIlhcIiw4OTpcIllcIiw5MDpcIlpcIiw5NjpcIjBcIiw5NzpcIjFcIiw5ODpcIjJcIiw5OTpcIjNcIiwxMDA6XCI0XCIsMTAxOlwiNVwiLDEwMjpcIjZcIiwxMDM6XCI3XCIsMTA0OlwiOFwiLDEwNTpcIjlcIn0sTD0yNyxOPTEzLEQ9MzIsSD05LEI9MzgsVz00MCxNPXtzdWNjZXNzOiExLG1ham9yOlwiM1wifTt0cnl7TS5mdWxsPSh6LmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yLlZFUlNJT058fFwiXCIpLnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi5cIiksTS5tYWpvcj1NLmZ1bGxbMF0sTS5zdWNjZXNzPSEwfWNhdGNoKGUpe312YXIgUj0wLFU9XCIuYnMuc2VsZWN0XCIsaj17RElTQUJMRUQ6XCJkaXNhYmxlZFwiLERJVklERVI6XCJkaXZpZGVyXCIsU0hPVzpcIm9wZW5cIixEUk9QVVA6XCJkcm9wdXBcIixNRU5VOlwiZHJvcGRvd24tbWVudVwiLE1FTlVSSUdIVDpcImRyb3Bkb3duLW1lbnUtcmlnaHRcIixNRU5VTEVGVDpcImRyb3Bkb3duLW1lbnUtbGVmdFwiLEJVVFRPTkNMQVNTOlwiYnRuLWRlZmF1bHRcIixQT1BPVkVSSEVBREVSOlwicG9wb3Zlci10aXRsZVwiLElDT05CQVNFOlwiZ2x5cGhpY29uXCIsVElDS0lDT046XCJnbHlwaGljb24tb2tcIn0sVj17TUVOVTpcIi5cIitqLk1FTlV9LEY9e3NwYW46ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIiksaTpkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaVwiKSxzdWJ0ZXh0OmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzbWFsbFwiKSxhOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLGxpOmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKSx3aGl0ZXNwYWNlOmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXFx4YTBcIiksZnJhZ21lbnQ6ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpfTtGLmEuc2V0QXR0cmlidXRlKFwicm9sZVwiLFwib3B0aW9uXCIpLEYuc3VidGV4dC5jbGFzc05hbWU9XCJ0ZXh0LW11dGVkXCIsRi50ZXh0PUYuc3Bhbi5jbG9uZU5vZGUoITEpLEYudGV4dC5jbGFzc05hbWU9XCJ0ZXh0XCIsRi5jaGVja01hcms9Ri5zcGFuLmNsb25lTm9kZSghMSk7dmFyIF89bmV3IFJlZ0V4cChCK1wifFwiK1cpLEc9bmV3IFJlZ0V4cChcIl5cIitIK1wiJHxcIitMKSxxPWZ1bmN0aW9uKGUsdCxpKXt2YXIgcz1GLmxpLmNsb25lTm9kZSghMSk7cmV0dXJuIGUmJigxPT09ZS5ub2RlVHlwZXx8MTE9PT1lLm5vZGVUeXBlP3MuYXBwZW5kQ2hpbGQoZSk6cy5pbm5lckhUTUw9ZSksdm9pZCAwIT09dCYmXCJcIiE9PXQmJihzLmNsYXNzTmFtZT10KSxudWxsIT1pJiZzLmNsYXNzTGlzdC5hZGQoXCJvcHRncm91cC1cIitpKSxzfSxLPWZ1bmN0aW9uKGUsdCxpKXt2YXIgcz1GLmEuY2xvbmVOb2RlKCEwKTtyZXR1cm4gZSYmKDExPT09ZS5ub2RlVHlwZT9zLmFwcGVuZENoaWxkKGUpOnMuaW5zZXJ0QWRqYWNlbnRIVE1MKFwiYmVmb3JlZW5kXCIsZSkpLHZvaWQgMCE9PXQmJlwiXCIhPT10JiYocy5jbGFzc05hbWU9dCksXCI0XCI9PT1NLm1ham9yJiZzLmNsYXNzTGlzdC5hZGQoXCJkcm9wZG93bi1pdGVtXCIpLGkmJnMuc2V0QXR0cmlidXRlKFwic3R5bGVcIixpKSxzfSxZPWZ1bmN0aW9uKGUsdCl7dmFyIGkscyxuPUYudGV4dC5jbG9uZU5vZGUoITEpO2lmKGUuY29udGVudCluLmlubmVySFRNTD1lLmNvbnRlbnQ7ZWxzZXtpZihuLnRleHRDb250ZW50PWUudGV4dCxlLmljb24pe3ZhciBvPUYud2hpdGVzcGFjZS5jbG9uZU5vZGUoITEpOyhzPSghMD09PXQ/Ri5pOkYuc3BhbikuY2xvbmVOb2RlKCExKSkuY2xhc3NOYW1lPWUuaWNvbkJhc2UrXCIgXCIrZS5pY29uLEYuZnJhZ21lbnQuYXBwZW5kQ2hpbGQocyksRi5mcmFnbWVudC5hcHBlbmRDaGlsZChvKX1lLnN1YnRleHQmJigoaT1GLnN1YnRleHQuY2xvbmVOb2RlKCExKSkudGV4dENvbnRlbnQ9ZS5zdWJ0ZXh0LG4uYXBwZW5kQ2hpbGQoaSkpfWlmKCEwPT09dClmb3IoOzA8bi5jaGlsZE5vZGVzLmxlbmd0aDspRi5mcmFnbWVudC5hcHBlbmRDaGlsZChuLmNoaWxkTm9kZXNbMF0pO2Vsc2UgRi5mcmFnbWVudC5hcHBlbmRDaGlsZChuKTtyZXR1cm4gRi5mcmFnbWVudH0sWj1mdW5jdGlvbihlKXt2YXIgdCxpLHM9Ri50ZXh0LmNsb25lTm9kZSghMSk7aWYocy5pbm5lckhUTUw9ZS5sYWJlbCxlLmljb24pe3ZhciBuPUYud2hpdGVzcGFjZS5jbG9uZU5vZGUoITEpOyhpPUYuc3Bhbi5jbG9uZU5vZGUoITEpKS5jbGFzc05hbWU9ZS5pY29uQmFzZStcIiBcIitlLmljb24sRi5mcmFnbWVudC5hcHBlbmRDaGlsZChpKSxGLmZyYWdtZW50LmFwcGVuZENoaWxkKG4pfXJldHVybiBlLnN1YnRleHQmJigodD1GLnN1YnRleHQuY2xvbmVOb2RlKCExKSkudGV4dENvbnRlbnQ9ZS5zdWJ0ZXh0LHMuYXBwZW5kQ2hpbGQodCkpLEYuZnJhZ21lbnQuYXBwZW5kQ2hpbGQocyksRi5mcmFnbWVudH0sSj1mdW5jdGlvbihlLHQpe3ZhciBpPXRoaXM7cC51c2VEZWZhdWx0fHwoei52YWxIb29rcy5zZWxlY3Quc2V0PXAuX3NldCxwLnVzZURlZmF1bHQ9ITApLHRoaXMuJGVsZW1lbnQ9eihlKSx0aGlzLiRuZXdFbGVtZW50PW51bGwsdGhpcy4kYnV0dG9uPW51bGwsdGhpcy4kbWVudT1udWxsLHRoaXMub3B0aW9ucz10LHRoaXMuc2VsZWN0cGlja2VyPXttYWluOnt9LHNlYXJjaDp7fSxjdXJyZW50Ont9LHZpZXc6e30sa2V5ZG93bjp7a2V5SGlzdG9yeTpcIlwiLHJlc2V0S2V5SGlzdG9yeTp7c3RhcnQ6ZnVuY3Rpb24oKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2kuc2VsZWN0cGlja2VyLmtleWRvd24ua2V5SGlzdG9yeT1cIlwifSw4MDApfX19fSxudWxsPT09dGhpcy5vcHRpb25zLnRpdGxlJiYodGhpcy5vcHRpb25zLnRpdGxlPXRoaXMuJGVsZW1lbnQuYXR0cihcInRpdGxlXCIpKTt2YXIgcz10aGlzLm9wdGlvbnMud2luZG93UGFkZGluZztcIm51bWJlclwiPT10eXBlb2YgcyYmKHRoaXMub3B0aW9ucy53aW5kb3dQYWRkaW5nPVtzLHMscyxzXSksdGhpcy52YWw9Si5wcm90b3R5cGUudmFsLHRoaXMucmVuZGVyPUoucHJvdG90eXBlLnJlbmRlcix0aGlzLnJlZnJlc2g9Si5wcm90b3R5cGUucmVmcmVzaCx0aGlzLnNldFN0eWxlPUoucHJvdG90eXBlLnNldFN0eWxlLHRoaXMuc2VsZWN0QWxsPUoucHJvdG90eXBlLnNlbGVjdEFsbCx0aGlzLmRlc2VsZWN0QWxsPUoucHJvdG90eXBlLmRlc2VsZWN0QWxsLHRoaXMuZGVzdHJveT1KLnByb3RvdHlwZS5kZXN0cm95LHRoaXMucmVtb3ZlPUoucHJvdG90eXBlLnJlbW92ZSx0aGlzLnNob3c9Si5wcm90b3R5cGUuc2hvdyx0aGlzLmhpZGU9Si5wcm90b3R5cGUuaGlkZSx0aGlzLmluaXQoKX07ZnVuY3Rpb24gUShlKXt2YXIgbCxhPWFyZ3VtZW50cyxjPWU7aWYoW10uc2hpZnQuYXBwbHkoYSksIU0uc3VjY2Vzcyl7dHJ5e00uZnVsbD0oei5mbi5kcm9wZG93bi5Db25zdHJ1Y3Rvci5WRVJTSU9OfHxcIlwiKS5zcGxpdChcIiBcIilbMF0uc3BsaXQoXCIuXCIpfWNhdGNoKGUpe0ouQm9vdHN0cmFwVmVyc2lvbj9NLmZ1bGw9Si5Cb290c3RyYXBWZXJzaW9uLnNwbGl0KFwiIFwiKVswXS5zcGxpdChcIi5cIik6KE0uZnVsbD1bTS5tYWpvcixcIjBcIixcIjBcIl0sY29uc29sZS53YXJuKFwiVGhlcmUgd2FzIGFuIGlzc3VlIHJldHJpZXZpbmcgQm9vdHN0cmFwJ3MgdmVyc2lvbi4gRW5zdXJlIEJvb3RzdHJhcCBpcyBiZWluZyBsb2FkZWQgYmVmb3JlIGJvb3RzdHJhcC1zZWxlY3QgYW5kIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSBjb2xsaXNpb24uIElmIGxvYWRpbmcgQm9vdHN0cmFwIGFzeW5jaHJvbm91c2x5LCB0aGUgdmVyc2lvbiBtYXkgbmVlZCB0byBiZSBtYW51YWxseSBzcGVjaWZpZWQgdmlhICQuZm4uc2VsZWN0cGlja2VyLkNvbnN0cnVjdG9yLkJvb3RzdHJhcFZlcnNpb24uXCIsZSkpfU0ubWFqb3I9TS5mdWxsWzBdLE0uc3VjY2Vzcz0hMH1pZihcIjRcIj09PU0ubWFqb3Ipe3ZhciB0PVtdO0ouREVGQVVMVFMuc3R5bGU9PT1qLkJVVFRPTkNMQVNTJiZ0LnB1c2goe25hbWU6XCJzdHlsZVwiLGNsYXNzTmFtZTpcIkJVVFRPTkNMQVNTXCJ9KSxKLkRFRkFVTFRTLmljb25CYXNlPT09ai5JQ09OQkFTRSYmdC5wdXNoKHtuYW1lOlwiaWNvbkJhc2VcIixjbGFzc05hbWU6XCJJQ09OQkFTRVwifSksSi5ERUZBVUxUUy50aWNrSWNvbj09PWouVElDS0lDT04mJnQucHVzaCh7bmFtZTpcInRpY2tJY29uXCIsY2xhc3NOYW1lOlwiVElDS0lDT05cIn0pLGouRElWSURFUj1cImRyb3Bkb3duLWRpdmlkZXJcIixqLlNIT1c9XCJzaG93XCIsai5CVVRUT05DTEFTUz1cImJ0bi1saWdodFwiLGouUE9QT1ZFUkhFQURFUj1cInBvcG92ZXItaGVhZGVyXCIsai5JQ09OQkFTRT1cIlwiLGouVElDS0lDT049XCJicy1vay1kZWZhdWx0XCI7Zm9yKHZhciBpPTA7aTx0Lmxlbmd0aDtpKyspe2U9dFtpXTtKLkRFRkFVTFRTW2UubmFtZV09altlLmNsYXNzTmFtZV19fXZhciBzPXRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBlPXoodGhpcyk7aWYoZS5pcyhcInNlbGVjdFwiKSl7dmFyIHQ9ZS5kYXRhKFwic2VsZWN0cGlja2VyXCIpLGk9XCJvYmplY3RcIj09dHlwZW9mIGMmJmM7aWYodCl7aWYoaSlmb3IodmFyIHMgaW4gaSlpLmhhc093blByb3BlcnR5KHMpJiYodC5vcHRpb25zW3NdPWlbc10pfWVsc2V7dmFyIG49ZS5kYXRhKCk7Zm9yKHZhciBvIGluIG4pbi5oYXNPd25Qcm9wZXJ0eShvKSYmLTEhPT16LmluQXJyYXkobyxkKSYmZGVsZXRlIG5bb107dmFyIHI9ei5leHRlbmQoe30sSi5ERUZBVUxUUyx6LmZuLnNlbGVjdHBpY2tlci5kZWZhdWx0c3x8e30sbixpKTtyLnRlbXBsYXRlPXouZXh0ZW5kKHt9LEouREVGQVVMVFMudGVtcGxhdGUsei5mbi5zZWxlY3RwaWNrZXIuZGVmYXVsdHM/ei5mbi5zZWxlY3RwaWNrZXIuZGVmYXVsdHMudGVtcGxhdGU6e30sbi50ZW1wbGF0ZSxpLnRlbXBsYXRlKSxlLmRhdGEoXCJzZWxlY3RwaWNrZXJcIix0PW5ldyBKKHRoaXMscikpfVwic3RyaW5nXCI9PXR5cGVvZiBjJiYobD10W2NdaW5zdGFuY2VvZiBGdW5jdGlvbj90W2NdLmFwcGx5KHQsYSk6dC5vcHRpb25zW2NdKX19KTtyZXR1cm4gdm9pZCAwIT09bD9sOnN9Si5WRVJTSU9OPVwiMS4xMy4xMFwiLEouREVGQVVMVFM9e25vbmVTZWxlY3RlZFRleHQ6XCJOb3RoaW5nIHNlbGVjdGVkXCIsbm9uZVJlc3VsdHNUZXh0OlwiTm8gcmVzdWx0cyBtYXRjaGVkIHswfVwiLGNvdW50U2VsZWN0ZWRUZXh0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuIDE9PWU/XCJ7MH0gaXRlbSBzZWxlY3RlZFwiOlwiezB9IGl0ZW1zIHNlbGVjdGVkXCJ9LG1heE9wdGlvbnNUZXh0OmZ1bmN0aW9uKGUsdCl7cmV0dXJuWzE9PWU/XCJMaW1pdCByZWFjaGVkICh7bn0gaXRlbSBtYXgpXCI6XCJMaW1pdCByZWFjaGVkICh7bn0gaXRlbXMgbWF4KVwiLDE9PXQ/XCJHcm91cCBsaW1pdCByZWFjaGVkICh7bn0gaXRlbSBtYXgpXCI6XCJHcm91cCBsaW1pdCByZWFjaGVkICh7bn0gaXRlbXMgbWF4KVwiXX0sc2VsZWN0QWxsVGV4dDpcIlNlbGVjdCBBbGxcIixkZXNlbGVjdEFsbFRleHQ6XCJEZXNlbGVjdCBBbGxcIixkb25lQnV0dG9uOiExLGRvbmVCdXR0b25UZXh0OlwiQ2xvc2VcIixtdWx0aXBsZVNlcGFyYXRvcjpcIiwgXCIsc3R5bGVCYXNlOlwiYnRuXCIsc3R5bGU6ai5CVVRUT05DTEFTUyxzaXplOlwiYXV0b1wiLHRpdGxlOm51bGwsc2VsZWN0ZWRUZXh0Rm9ybWF0OlwidmFsdWVzXCIsd2lkdGg6ITEsY29udGFpbmVyOiExLGhpZGVEaXNhYmxlZDohMSxzaG93U3VidGV4dDohMSxzaG93SWNvbjohMCxzaG93Q29udGVudDohMCxkcm9wdXBBdXRvOiEwLGhlYWRlcjohMSxsaXZlU2VhcmNoOiExLGxpdmVTZWFyY2hQbGFjZWhvbGRlcjpudWxsLGxpdmVTZWFyY2hOb3JtYWxpemU6ITEsbGl2ZVNlYXJjaFN0eWxlOlwiY29udGFpbnNcIixhY3Rpb25zQm94OiExLGljb25CYXNlOmouSUNPTkJBU0UsdGlja0ljb246ai5USUNLSUNPTixzaG93VGljazohMSx0ZW1wbGF0ZTp7Y2FyZXQ6JzxzcGFuIGNsYXNzPVwiY2FyZXRcIj48L3NwYW4+J30sbWF4T3B0aW9uczohMSxtb2JpbGU6ITEsc2VsZWN0T25UYWI6ITEsZHJvcGRvd25BbGlnblJpZ2h0OiExLHdpbmRvd1BhZGRpbmc6MCx2aXJ0dWFsU2Nyb2xsOjYwMCxkaXNwbGF5OiExLHNhbml0aXplOiEwLHNhbml0aXplRm46bnVsbCx3aGl0ZUxpc3Q6ZX0sSi5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOkosaW5pdDpmdW5jdGlvbigpe3ZhciBpPXRoaXMsZT10aGlzLiRlbGVtZW50LmF0dHIoXCJpZFwiKTtSKyssdGhpcy5zZWxlY3RJZD1cImJzLXNlbGVjdC1cIitSLHRoaXMuJGVsZW1lbnRbMF0uY2xhc3NMaXN0LmFkZChcImJzLXNlbGVjdC1oaWRkZW5cIiksdGhpcy5tdWx0aXBsZT10aGlzLiRlbGVtZW50LnByb3AoXCJtdWx0aXBsZVwiKSx0aGlzLmF1dG9mb2N1cz10aGlzLiRlbGVtZW50LnByb3AoXCJhdXRvZm9jdXNcIiksdGhpcy4kZWxlbWVudFswXS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93LXRpY2tcIikmJih0aGlzLm9wdGlvbnMuc2hvd1RpY2s9ITApLHRoaXMuJG5ld0VsZW1lbnQ9dGhpcy5jcmVhdGVEcm9wZG93bigpLHRoaXMuJGVsZW1lbnQuYWZ0ZXIodGhpcy4kbmV3RWxlbWVudCkucHJlcGVuZFRvKHRoaXMuJG5ld0VsZW1lbnQpLHRoaXMuJGJ1dHRvbj10aGlzLiRuZXdFbGVtZW50LmNoaWxkcmVuKFwiYnV0dG9uXCIpLHRoaXMuJG1lbnU9dGhpcy4kbmV3RWxlbWVudC5jaGlsZHJlbihWLk1FTlUpLHRoaXMuJG1lbnVJbm5lcj10aGlzLiRtZW51LmNoaWxkcmVuKFwiLmlubmVyXCIpLHRoaXMuJHNlYXJjaGJveD10aGlzLiRtZW51LmZpbmQoXCJpbnB1dFwiKSx0aGlzLiRlbGVtZW50WzBdLmNsYXNzTGlzdC5yZW1vdmUoXCJicy1zZWxlY3QtaGlkZGVuXCIpLCEwPT09dGhpcy5vcHRpb25zLmRyb3Bkb3duQWxpZ25SaWdodCYmdGhpcy4kbWVudVswXS5jbGFzc0xpc3QuYWRkKGouTUVOVVJJR0hUKSx2b2lkIDAhPT1lJiZ0aGlzLiRidXR0b24uYXR0cihcImRhdGEtaWRcIixlKSx0aGlzLmNoZWNrRGlzYWJsZWQoKSx0aGlzLmNsaWNrTGlzdGVuZXIoKSx0aGlzLm9wdGlvbnMubGl2ZVNlYXJjaD8odGhpcy5saXZlU2VhcmNoTGlzdGVuZXIoKSx0aGlzLmZvY3VzZWRQYXJlbnQ9dGhpcy4kc2VhcmNoYm94WzBdKTp0aGlzLmZvY3VzZWRQYXJlbnQ9dGhpcy4kbWVudUlubmVyWzBdLHRoaXMuc2V0U3R5bGUoKSx0aGlzLnJlbmRlcigpLHRoaXMuc2V0V2lkdGgoKSx0aGlzLm9wdGlvbnMuY29udGFpbmVyP3RoaXMuc2VsZWN0UG9zaXRpb24oKTp0aGlzLiRlbGVtZW50Lm9uKFwiaGlkZVwiK1UsZnVuY3Rpb24oKXtpZihpLmlzVmlydHVhbCgpKXt2YXIgZT1pLiRtZW51SW5uZXJbMF0sdD1lLmZpcnN0Q2hpbGQuY2xvbmVOb2RlKCExKTtlLnJlcGxhY2VDaGlsZCh0LGUuZmlyc3RDaGlsZCksZS5zY3JvbGxUb3A9MH19KSx0aGlzLiRtZW51LmRhdGEoXCJ0aGlzXCIsdGhpcyksdGhpcy4kbmV3RWxlbWVudC5kYXRhKFwidGhpc1wiLHRoaXMpLHRoaXMub3B0aW9ucy5tb2JpbGUmJnRoaXMubW9iaWxlKCksdGhpcy4kbmV3RWxlbWVudC5vbih7XCJoaWRlLmJzLmRyb3Bkb3duXCI6ZnVuY3Rpb24oZSl7aS4kZWxlbWVudC50cmlnZ2VyKFwiaGlkZVwiK1UsZSl9LFwiaGlkZGVuLmJzLmRyb3Bkb3duXCI6ZnVuY3Rpb24oZSl7aS4kZWxlbWVudC50cmlnZ2VyKFwiaGlkZGVuXCIrVSxlKX0sXCJzaG93LmJzLmRyb3Bkb3duXCI6ZnVuY3Rpb24oZSl7aS4kZWxlbWVudC50cmlnZ2VyKFwic2hvd1wiK1UsZSl9LFwic2hvd24uYnMuZHJvcGRvd25cIjpmdW5jdGlvbihlKXtpLiRlbGVtZW50LnRyaWdnZXIoXCJzaG93blwiK1UsZSl9fSksaS4kZWxlbWVudFswXS5oYXNBdHRyaWJ1dGUoXCJyZXF1aXJlZFwiKSYmdGhpcy4kZWxlbWVudC5vbihcImludmFsaWRcIitVLGZ1bmN0aW9uKCl7aS4kYnV0dG9uWzBdLmNsYXNzTGlzdC5hZGQoXCJicy1pbnZhbGlkXCIpLGkuJGVsZW1lbnQub24oXCJzaG93blwiK1UrXCIuaW52YWxpZFwiLGZ1bmN0aW9uKCl7aS4kZWxlbWVudC52YWwoaS4kZWxlbWVudC52YWwoKSkub2ZmKFwic2hvd25cIitVK1wiLmludmFsaWRcIil9KS5vbihcInJlbmRlcmVkXCIrVSxmdW5jdGlvbigpe3RoaXMudmFsaWRpdHkudmFsaWQmJmkuJGJ1dHRvblswXS5jbGFzc0xpc3QucmVtb3ZlKFwiYnMtaW52YWxpZFwiKSxpLiRlbGVtZW50Lm9mZihcInJlbmRlcmVkXCIrVSl9KSxpLiRidXR0b24ub24oXCJibHVyXCIrVSxmdW5jdGlvbigpe2kuJGVsZW1lbnQudHJpZ2dlcihcImZvY3VzXCIpLnRyaWdnZXIoXCJibHVyXCIpLGkuJGJ1dHRvbi5vZmYoXCJibHVyXCIrVSl9KX0pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLmNyZWF0ZUxpKCksaS4kZWxlbWVudC50cmlnZ2VyKFwibG9hZGVkXCIrVSl9KX0sY3JlYXRlRHJvcGRvd246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm11bHRpcGxlfHx0aGlzLm9wdGlvbnMuc2hvd1RpY2s/XCIgc2hvdy10aWNrXCI6XCJcIix0PXRoaXMubXVsdGlwbGU/JyBhcmlhLW11bHRpc2VsZWN0YWJsZT1cInRydWVcIic6XCJcIixpPVwiXCIscz10aGlzLmF1dG9mb2N1cz9cIiBhdXRvZm9jdXNcIjpcIlwiO00ubWFqb3I8NCYmdGhpcy4kZWxlbWVudC5wYXJlbnQoKS5oYXNDbGFzcyhcImlucHV0LWdyb3VwXCIpJiYoaT1cIiBpbnB1dC1ncm91cC1idG5cIik7dmFyIG4sbz1cIlwiLHI9XCJcIixsPVwiXCIsYT1cIlwiO3JldHVybiB0aGlzLm9wdGlvbnMuaGVhZGVyJiYobz0nPGRpdiBjbGFzcz1cIicrai5QT1BPVkVSSEVBREVSKydcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImNsb3NlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+JnRpbWVzOzwvYnV0dG9uPicrdGhpcy5vcHRpb25zLmhlYWRlcitcIjwvZGl2PlwiKSx0aGlzLm9wdGlvbnMubGl2ZVNlYXJjaCYmKHI9JzxkaXYgY2xhc3M9XCJicy1zZWFyY2hib3hcIj48aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGF1dG9jb21wbGV0ZT1cIm9mZlwiJysobnVsbD09PXRoaXMub3B0aW9ucy5saXZlU2VhcmNoUGxhY2Vob2xkZXI/XCJcIjonIHBsYWNlaG9sZGVyPVwiJytFKHRoaXMub3B0aW9ucy5saXZlU2VhcmNoUGxhY2Vob2xkZXIpKydcIicpKycgcm9sZT1cImNvbWJvYm94XCIgYXJpYS1sYWJlbD1cIlNlYXJjaFwiIGFyaWEtY29udHJvbHM9XCInK3RoaXMuc2VsZWN0SWQrJ1wiIGFyaWEtYXV0b2NvbXBsZXRlPVwibGlzdFwiPjwvZGl2PicpLHRoaXMubXVsdGlwbGUmJnRoaXMub3B0aW9ucy5hY3Rpb25zQm94JiYobD0nPGRpdiBjbGFzcz1cImJzLWFjdGlvbnNib3hcIj48ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ncm91cC1zbSBidG4tYmxvY2tcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImFjdGlvbnMtYnRuIGJzLXNlbGVjdC1hbGwgYnRuICcrai5CVVRUT05DTEFTUysnXCI+Jyt0aGlzLm9wdGlvbnMuc2VsZWN0QWxsVGV4dCsnPC9idXR0b24+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJhY3Rpb25zLWJ0biBicy1kZXNlbGVjdC1hbGwgYnRuICcrai5CVVRUT05DTEFTUysnXCI+Jyt0aGlzLm9wdGlvbnMuZGVzZWxlY3RBbGxUZXh0K1wiPC9idXR0b24+PC9kaXY+PC9kaXY+XCIpLHRoaXMubXVsdGlwbGUmJnRoaXMub3B0aW9ucy5kb25lQnV0dG9uJiYoYT0nPGRpdiBjbGFzcz1cImJzLWRvbmVidXR0b25cIj48ZGl2IGNsYXNzPVwiYnRuLWdyb3VwIGJ0bi1ibG9ja1wiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1zbSAnK2ouQlVUVE9OQ0xBU1MrJ1wiPicrdGhpcy5vcHRpb25zLmRvbmVCdXR0b25UZXh0K1wiPC9idXR0b24+PC9kaXY+PC9kaXY+XCIpLG49JzxkaXYgY2xhc3M9XCJkcm9wZG93biBib290c3RyYXAtc2VsZWN0JytlK2krJ1wiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiJyt0aGlzLm9wdGlvbnMuc3R5bGVCYXNlKycgZHJvcGRvd24tdG9nZ2xlXCIgJysoXCJzdGF0aWNcIj09PXRoaXMub3B0aW9ucy5kaXNwbGF5PydkYXRhLWRpc3BsYXk9XCJzdGF0aWNcIic6XCJcIikrJ2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIicrcysnIHJvbGU9XCJjb21ib2JveFwiIGFyaWEtb3ducz1cIicrdGhpcy5zZWxlY3RJZCsnXCIgYXJpYS1oYXNwb3B1cD1cImxpc3Rib3hcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIj48ZGl2IGNsYXNzPVwiZmlsdGVyLW9wdGlvblwiPjxkaXYgY2xhc3M9XCJmaWx0ZXItb3B0aW9uLWlubmVyXCI+PGRpdiBjbGFzcz1cImZpbHRlci1vcHRpb24taW5uZXItaW5uZXJcIj48L2Rpdj48L2Rpdj4gPC9kaXY+JysoXCI0XCI9PT1NLm1ham9yP1wiXCI6JzxzcGFuIGNsYXNzPVwiYnMtY2FyZXRcIj4nK3RoaXMub3B0aW9ucy50ZW1wbGF0ZS5jYXJldCtcIjwvc3Bhbj5cIikrJzwvYnV0dG9uPjxkaXYgY2xhc3M9XCInK2ouTUVOVStcIiBcIisoXCI0XCI9PT1NLm1ham9yP1wiXCI6ai5TSE9XKSsnXCI+JytvK3IrbCsnPGRpdiBjbGFzcz1cImlubmVyICcrai5TSE9XKydcIiByb2xlPVwibGlzdGJveFwiIGlkPVwiJyt0aGlzLnNlbGVjdElkKydcIiB0YWJpbmRleD1cIi0xXCIgJyt0Kyc+PHVsIGNsYXNzPVwiJytqLk1FTlUrXCIgaW5uZXIgXCIrKFwiNFwiPT09TS5tYWpvcj9qLlNIT1c6XCJcIikrJ1wiIHJvbGU9XCJwcmVzZW50YXRpb25cIj48L3VsPjwvZGl2PicrYStcIjwvZGl2PjwvZGl2PlwiLHoobil9LHNldFBvc2l0aW9uRGF0YTpmdW5jdGlvbigpe3RoaXMuc2VsZWN0cGlja2VyLnZpZXcuY2FuSGlnaGxpZ2h0PVtdO2Zvcih2YXIgZT10aGlzLnNlbGVjdHBpY2tlci52aWV3LnNpemU9MDtlPHRoaXMuc2VsZWN0cGlja2VyLmN1cnJlbnQuZGF0YS5sZW5ndGg7ZSsrKXt2YXIgdD10aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbZV0saT0hMDtcImRpdmlkZXJcIj09PXQudHlwZT8oaT0hMSx0LmhlaWdodD10aGlzLnNpemVJbmZvLmRpdmlkZXJIZWlnaHQpOlwib3B0Z3JvdXAtbGFiZWxcIj09PXQudHlwZT8oaT0hMSx0LmhlaWdodD10aGlzLnNpemVJbmZvLmRyb3Bkb3duSGVhZGVySGVpZ2h0KTp0LmhlaWdodD10aGlzLnNpemVJbmZvLmxpSGVpZ2h0LHQuZGlzYWJsZWQmJihpPSExKSx0aGlzLnNlbGVjdHBpY2tlci52aWV3LmNhbkhpZ2hsaWdodC5wdXNoKGkpLGkmJih0aGlzLnNlbGVjdHBpY2tlci52aWV3LnNpemUrKyx0LnBvc2luc2V0PXRoaXMuc2VsZWN0cGlja2VyLnZpZXcuc2l6ZSksdC5wb3NpdGlvbj0oMD09PWU/MDp0aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbZS0xXS5wb3NpdGlvbikrdC5oZWlnaHR9fSxpc1ZpcnR1YWw6ZnVuY3Rpb24oKXtyZXR1cm4hMSE9PXRoaXMub3B0aW9ucy52aXJ0dWFsU2Nyb2xsJiZ0aGlzLnNlbGVjdHBpY2tlci5tYWluLmVsZW1lbnRzLmxlbmd0aD49dGhpcy5vcHRpb25zLnZpcnR1YWxTY3JvbGx8fCEwPT09dGhpcy5vcHRpb25zLnZpcnR1YWxTY3JvbGx9LGNyZWF0ZVZpZXc6ZnVuY3Rpb24oQSxlLHQpe3ZhciBMLE4sRD10aGlzLGk9MCxIPVtdO2lmKHRoaXMuc2VsZWN0cGlja2VyLmN1cnJlbnQ9QT90aGlzLnNlbGVjdHBpY2tlci5zZWFyY2g6dGhpcy5zZWxlY3RwaWNrZXIubWFpbix0aGlzLnNldFBvc2l0aW9uRGF0YSgpLGUpaWYodClpPXRoaXMuJG1lbnVJbm5lclswXS5zY3JvbGxUb3A7ZWxzZSBpZighRC5tdWx0aXBsZSl7dmFyIHM9RC4kZWxlbWVudFswXSxuPShzLm9wdGlvbnNbcy5zZWxlY3RlZEluZGV4XXx8e30pLmxpSW5kZXg7aWYoXCJudW1iZXJcIj09dHlwZW9mIG4mJiExIT09RC5vcHRpb25zLnNpemUpe3ZhciBvPUQuc2VsZWN0cGlja2VyLm1haW4uZGF0YVtuXSxyPW8mJm8ucG9zaXRpb247ciYmKGk9ci0oRC5zaXplSW5mby5tZW51SW5uZXJIZWlnaHQrRC5zaXplSW5mby5saUhlaWdodCkvMil9fWZ1bmN0aW9uIGwoZSx0KXt2YXIgaSxzLG4sbyxyLGwsYSxjLGQsaCxwPUQuc2VsZWN0cGlja2VyLmN1cnJlbnQuZWxlbWVudHMubGVuZ3RoLHU9W10sZj0hMCxtPUQuaXNWaXJ0dWFsKCk7RC5zZWxlY3RwaWNrZXIudmlldy5zY3JvbGxUb3A9ZSwhMD09PW0mJkQuc2l6ZUluZm8uaGFzU2Nyb2xsQmFyJiZELiRtZW51WzBdLm9mZnNldFdpZHRoPkQuc2l6ZUluZm8udG90YWxNZW51V2lkdGgmJihELnNpemVJbmZvLm1lbnVXaWR0aD1ELiRtZW51WzBdLm9mZnNldFdpZHRoLEQuc2l6ZUluZm8udG90YWxNZW51V2lkdGg9RC5zaXplSW5mby5tZW51V2lkdGgrRC5zaXplSW5mby5zY3JvbGxCYXJXaWR0aCxELiRtZW51LmNzcyhcIm1pbi13aWR0aFwiLEQuc2l6ZUluZm8ubWVudVdpZHRoKSksaT1NYXRoLmNlaWwoRC5zaXplSW5mby5tZW51SW5uZXJIZWlnaHQvRC5zaXplSW5mby5saUhlaWdodCoxLjUpLHM9TWF0aC5yb3VuZChwL2kpfHwxO2Zvcih2YXIgdj0wO3Y8czt2Kyspe3ZhciBnPSh2KzEpKmk7aWYodj09PXMtMSYmKGc9cCksdVt2XT1bdippKyh2PzE6MCksZ10sIXApYnJlYWs7dm9pZCAwPT09ciYmZTw9RC5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhW2ctMV0ucG9zaXRpb24tRC5zaXplSW5mby5tZW51SW5uZXJIZWlnaHQmJihyPXYpfWlmKHZvaWQgMD09PXImJihyPTApLGw9W0Quc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24wLEQuc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24xXSxuPU1hdGgubWF4KDAsci0xKSxvPU1hdGgubWluKHMtMSxyKzEpLEQuc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24wPSExPT09bT8wOk1hdGgubWF4KDAsdVtuXVswXSl8fDAsRC5zZWxlY3RwaWNrZXIudmlldy5wb3NpdGlvbjE9ITE9PT1tP3A6TWF0aC5taW4ocCx1W29dWzFdKXx8MCxhPWxbMF0hPT1ELnNlbGVjdHBpY2tlci52aWV3LnBvc2l0aW9uMHx8bFsxXSE9PUQuc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24xLHZvaWQgMCE9PUQuYWN0aXZlSW5kZXgmJihOPUQuc2VsZWN0cGlja2VyLm1haW4uZWxlbWVudHNbRC5wcmV2QWN0aXZlSW5kZXhdLEg9RC5zZWxlY3RwaWNrZXIubWFpbi5lbGVtZW50c1tELmFjdGl2ZUluZGV4XSxMPUQuc2VsZWN0cGlja2VyLm1haW4uZWxlbWVudHNbRC5zZWxlY3RlZEluZGV4XSx0JiYoRC5hY3RpdmVJbmRleCE9PUQuc2VsZWN0ZWRJbmRleCYmRC5kZWZvY3VzSXRlbShIKSxELmFjdGl2ZUluZGV4PXZvaWQgMCksRC5hY3RpdmVJbmRleCYmRC5hY3RpdmVJbmRleCE9PUQuc2VsZWN0ZWRJbmRleCYmRC5kZWZvY3VzSXRlbShMKSksdm9pZCAwIT09RC5wcmV2QWN0aXZlSW5kZXgmJkQucHJldkFjdGl2ZUluZGV4IT09RC5hY3RpdmVJbmRleCYmRC5wcmV2QWN0aXZlSW5kZXghPT1ELnNlbGVjdGVkSW5kZXgmJkQuZGVmb2N1c0l0ZW0oTiksKHR8fGEpJiYoYz1ELnNlbGVjdHBpY2tlci52aWV3LnZpc2libGVFbGVtZW50cz9ELnNlbGVjdHBpY2tlci52aWV3LnZpc2libGVFbGVtZW50cy5zbGljZSgpOltdLEQuc2VsZWN0cGlja2VyLnZpZXcudmlzaWJsZUVsZW1lbnRzPSExPT09bT9ELnNlbGVjdHBpY2tlci5jdXJyZW50LmVsZW1lbnRzOkQuc2VsZWN0cGlja2VyLmN1cnJlbnQuZWxlbWVudHMuc2xpY2UoRC5zZWxlY3RwaWNrZXIudmlldy5wb3NpdGlvbjAsRC5zZWxlY3RwaWNrZXIudmlldy5wb3NpdGlvbjEpLEQuc2V0T3B0aW9uU3RhdHVzKCksKEF8fCExPT09bSYmdCkmJihkPWMsaD1ELnNlbGVjdHBpY2tlci52aWV3LnZpc2libGVFbGVtZW50cyxmPSEoZC5sZW5ndGg9PT1oLmxlbmd0aCYmZC5ldmVyeShmdW5jdGlvbihlLHQpe3JldHVybiBlPT09aFt0XX0pKSksKHR8fCEwPT09bSkmJmYpKXt2YXIgYix3LEk9RC4kbWVudUlubmVyWzBdLHg9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLGs9SS5maXJzdENoaWxkLmNsb25lTm9kZSghMSksJD1ELnNlbGVjdHBpY2tlci52aWV3LnZpc2libGVFbGVtZW50cyx5PVtdO0kucmVwbGFjZUNoaWxkKGssSS5maXJzdENoaWxkKTt2PTA7Zm9yKHZhciBTPSQubGVuZ3RoO3Y8Uzt2Kyspe3ZhciBFLEMsTz0kW3ZdO0Qub3B0aW9ucy5zYW5pdGl6ZSYmKEU9Ty5sYXN0Q2hpbGQpJiYoQz1ELnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbditELnNlbGVjdHBpY2tlci52aWV3LnBvc2l0aW9uMF0pJiZDLmNvbnRlbnQmJiFDLnNhbml0aXplZCYmKHkucHVzaChFKSxDLnNhbml0aXplZD0hMCkseC5hcHBlbmRDaGlsZChPKX1ELm9wdGlvbnMuc2FuaXRpemUmJnkubGVuZ3RoJiZQKHksRC5vcHRpb25zLndoaXRlTGlzdCxELm9wdGlvbnMuc2FuaXRpemVGbiksSS5maXJzdENoaWxkLnN0eWxlLm1hcmdpbkJvdHRvbT0hMD09PW0/KGI9MD09PUQuc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24wPzA6RC5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhW0Quc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24wLTFdLnBvc2l0aW9uLHc9RC5zZWxlY3RwaWNrZXIudmlldy5wb3NpdGlvbjE+cC0xPzA6RC5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhW3AtMV0ucG9zaXRpb24tRC5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhW0Quc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24xLTFdLnBvc2l0aW9uLEkuZmlyc3RDaGlsZC5zdHlsZS5tYXJnaW5Ub3A9YitcInB4XCIsdytcInB4XCIpOkkuZmlyc3RDaGlsZC5zdHlsZS5tYXJnaW5Ub3A9MCxJLmZpcnN0Q2hpbGQuYXBwZW5kQ2hpbGQoeCl9aWYoRC5wcmV2QWN0aXZlSW5kZXg9RC5hY3RpdmVJbmRleCxELm9wdGlvbnMubGl2ZVNlYXJjaCl7aWYoQSYmdCl7dmFyIHosVD0wO0Quc2VsZWN0cGlja2VyLnZpZXcuY2FuSGlnaGxpZ2h0W1RdfHwoVD0xK0Quc2VsZWN0cGlja2VyLnZpZXcuY2FuSGlnaGxpZ2h0LnNsaWNlKDEpLmluZGV4T2YoITApKSx6PUQuc2VsZWN0cGlja2VyLnZpZXcudmlzaWJsZUVsZW1lbnRzW1RdLEQuZGVmb2N1c0l0ZW0oRC5zZWxlY3RwaWNrZXIudmlldy5jdXJyZW50QWN0aXZlKSxELmFjdGl2ZUluZGV4PShELnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbVF18fHt9KS5pbmRleCxELmZvY3VzSXRlbSh6KX19ZWxzZSBELiRtZW51SW5uZXIudHJpZ2dlcihcImZvY3VzXCIpfWwoaSwhMCksdGhpcy4kbWVudUlubmVyLm9mZihcInNjcm9sbC5jcmVhdGVWaWV3XCIpLm9uKFwic2Nyb2xsLmNyZWF0ZVZpZXdcIixmdW5jdGlvbihlLHQpe0Qubm9TY3JvbGx8fGwodGhpcy5zY3JvbGxUb3AsdCksRC5ub1Njcm9sbD0hMX0pLHood2luZG93KS5vZmYoXCJyZXNpemVcIitVK1wiLlwiK3RoaXMuc2VsZWN0SWQrXCIuY3JlYXRlVmlld1wiKS5vbihcInJlc2l6ZVwiK1UrXCIuXCIrdGhpcy5zZWxlY3RJZCtcIi5jcmVhdGVWaWV3XCIsZnVuY3Rpb24oKXtELiRuZXdFbGVtZW50Lmhhc0NsYXNzKGouU0hPVykmJmwoRC4kbWVudUlubmVyWzBdLnNjcm9sbFRvcCl9KX0sZm9jdXNJdGVtOmZ1bmN0aW9uKGUsdCxpKXtpZihlKXt0PXR8fHRoaXMuc2VsZWN0cGlja2VyLm1haW4uZGF0YVt0aGlzLmFjdGl2ZUluZGV4XTt2YXIgcz1lLmZpcnN0Q2hpbGQ7cyYmKHMuc2V0QXR0cmlidXRlKFwiYXJpYS1zZXRzaXplXCIsdGhpcy5zZWxlY3RwaWNrZXIudmlldy5zaXplKSxzLnNldEF0dHJpYnV0ZShcImFyaWEtcG9zaW5zZXRcIix0LnBvc2luc2V0KSwhMCE9PWkmJih0aGlzLmZvY3VzZWRQYXJlbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIscy5pZCksZS5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlXCIpLHMuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKSkpfX0sZGVmb2N1c0l0ZW06ZnVuY3Rpb24oZSl7ZSYmKGUuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKSxlLmZpcnN0Q2hpbGQmJmUuZmlyc3RDaGlsZC5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpKX0sc2V0UGxhY2Vob2xkZXI6ZnVuY3Rpb24oKXt2YXIgZT0hMTtpZih0aGlzLm9wdGlvbnMudGl0bGUmJiF0aGlzLm11bHRpcGxlKXt0aGlzLnNlbGVjdHBpY2tlci52aWV3LnRpdGxlT3B0aW9ufHwodGhpcy5zZWxlY3RwaWNrZXIudmlldy50aXRsZU9wdGlvbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKSxlPSEwO3ZhciB0PXRoaXMuJGVsZW1lbnRbMF0saT0hMSxzPSF0aGlzLnNlbGVjdHBpY2tlci52aWV3LnRpdGxlT3B0aW9uLnBhcmVudE5vZGU7aWYocyl0aGlzLnNlbGVjdHBpY2tlci52aWV3LnRpdGxlT3B0aW9uLmNsYXNzTmFtZT1cImJzLXRpdGxlLW9wdGlvblwiLHRoaXMuc2VsZWN0cGlja2VyLnZpZXcudGl0bGVPcHRpb24udmFsdWU9XCJcIixpPXZvaWQgMD09PXoodC5vcHRpb25zW3Quc2VsZWN0ZWRJbmRleF0pLmF0dHIoXCJzZWxlY3RlZFwiKSYmdm9pZCAwPT09dGhpcy4kZWxlbWVudC5kYXRhKFwic2VsZWN0ZWRcIik7KHN8fDAhPT10aGlzLnNlbGVjdHBpY2tlci52aWV3LnRpdGxlT3B0aW9uLmluZGV4KSYmdC5pbnNlcnRCZWZvcmUodGhpcy5zZWxlY3RwaWNrZXIudmlldy50aXRsZU9wdGlvbix0LmZpcnN0Q2hpbGQpLGkmJih0LnNlbGVjdGVkSW5kZXg9MCl9cmV0dXJuIGV9LGNyZWF0ZUxpOmZ1bmN0aW9uKCl7dmFyIGM9dGhpcyxmPXRoaXMub3B0aW9ucy5pY29uQmFzZSxtPSc6bm90KFtoaWRkZW5dKTpub3QoW2RhdGEtaGlkZGVuPVwidHJ1ZVwiXSknLHY9W10sZz1bXSxkPTAsYj0wLGU9dGhpcy5zZXRQbGFjZWhvbGRlcigpPzE6MDt0aGlzLm9wdGlvbnMuaGlkZURpc2FibGVkJiYobSs9XCI6bm90KDpkaXNhYmxlZClcIiksIWMub3B0aW9ucy5zaG93VGljayYmIWMubXVsdGlwbGV8fEYuY2hlY2tNYXJrLnBhcmVudE5vZGV8fChGLmNoZWNrTWFyay5jbGFzc05hbWU9ZitcIiBcIitjLm9wdGlvbnMudGlja0ljb24rXCIgY2hlY2stbWFya1wiLEYuYS5hcHBlbmRDaGlsZChGLmNoZWNrTWFyaykpO3ZhciB0PXRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbChcInNlbGVjdCA+ICpcIittKTtmdW5jdGlvbiB3KGUpe3ZhciB0PWdbZy5sZW5ndGgtMV07dCYmXCJkaXZpZGVyXCI9PT10LnR5cGUmJih0Lm9wdElEfHxlLm9wdElEKXx8KChlPWV8fHt9KS50eXBlPVwiZGl2aWRlclwiLHYucHVzaChxKCExLGouRElWSURFUixlLm9wdElEP2Uub3B0SUQrXCJkaXZcIjp2b2lkIDApKSxnLnB1c2goZSkpfWZ1bmN0aW9uIEkoZSx0KXtpZigodD10fHx7fSkuZGl2aWRlcj1cInRydWVcIj09PWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1kaXZpZGVyXCIpLHQuZGl2aWRlcil3KHtvcHRJRDp0Lm9wdElEfSk7ZWxzZXt2YXIgaT1nLmxlbmd0aCxzPWUuc3R5bGUuY3NzVGV4dCxuPXM/RShzKTpcIlwiLG89KGUuY2xhc3NOYW1lfHxcIlwiKSsodC5vcHRncm91cENsYXNzfHxcIlwiKTt0Lm9wdElEJiYobz1cIm9wdCBcIitvKSx0LnRleHQ9ZS50ZXh0Q29udGVudCx0LmNvbnRlbnQ9ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbnRlbnRcIiksdC50b2tlbnM9ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRva2Vuc1wiKSx0LnN1YnRleHQ9ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN1YnRleHRcIiksdC5pY29uPWUuZ2V0QXR0cmlidXRlKFwiZGF0YS1pY29uXCIpLHQuaWNvbkJhc2U9Zjt2YXIgcj1ZKHQpLGw9cShLKHIsbyxuKSxcIlwiLHQub3B0SUQpO2wuZmlyc3RDaGlsZCYmKGwuZmlyc3RDaGlsZC5pZD1jLnNlbGVjdElkK1wiLVwiK2kpLHYucHVzaChsKSxlLmxpSW5kZXg9aSx0LmRpc3BsYXk9dC5jb250ZW50fHx0LnRleHQsdC50eXBlPVwib3B0aW9uXCIsdC5pbmRleD1pLHQub3B0aW9uPWUsdC5kaXNhYmxlZD10LmRpc2FibGVkfHxlLmRpc2FibGVkLGcucHVzaCh0KTt2YXIgYT0wO3QuZGlzcGxheSYmKGErPXQuZGlzcGxheS5sZW5ndGgpLHQuc3VidGV4dCYmKGErPXQuc3VidGV4dC5sZW5ndGgpLHQuaWNvbiYmKGErPTEpLGQ8YSYmKGQ9YSxjLnNlbGVjdHBpY2tlci52aWV3LndpZGVzdE9wdGlvbj12W3YubGVuZ3RoLTFdKX19ZnVuY3Rpb24gaShlLHQpe3ZhciBpPXRbZV0scz10W2UtMV0sbj10W2UrMV0sbz1pLnF1ZXJ5U2VsZWN0b3JBbGwoXCJvcHRpb25cIittKTtpZihvLmxlbmd0aCl7dmFyIHIsbCxhPXtsYWJlbDpFKGkubGFiZWwpLHN1YnRleHQ6aS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXN1YnRleHRcIiksaWNvbjppLmdldEF0dHJpYnV0ZShcImRhdGEtaWNvblwiKSxpY29uQmFzZTpmfSxjPVwiIFwiKyhpLmNsYXNzTmFtZXx8XCJcIik7YisrLHMmJncoe29wdElEOmJ9KTt2YXIgZD1aKGEpO3YucHVzaChxKGQsXCJkcm9wZG93bi1oZWFkZXJcIitjLGIpKSxnLnB1c2goe2Rpc3BsYXk6YS5sYWJlbCxzdWJ0ZXh0OmEuc3VidGV4dCx0eXBlOlwib3B0Z3JvdXAtbGFiZWxcIixvcHRJRDpifSk7Zm9yKHZhciBoPTAscD1vLmxlbmd0aDtoPHA7aCsrKXt2YXIgdT1vW2hdOzA9PT1oJiYobD0ocj1nLmxlbmd0aC0xKStwKSxJKHUse2hlYWRlckluZGV4OnIsbGFzdEluZGV4Omwsb3B0SUQ6YixvcHRncm91cENsYXNzOmMsZGlzYWJsZWQ6aS5kaXNhYmxlZH0pfW4mJncoe29wdElEOmJ9KX19Zm9yKHZhciBzPXQubGVuZ3RoO2U8cztlKyspe3ZhciBuPXRbZV07XCJPUFRHUk9VUFwiIT09bi50YWdOYW1lP0kobix7fSk6aShlLHQpfXRoaXMuc2VsZWN0cGlja2VyLm1haW4uZWxlbWVudHM9dix0aGlzLnNlbGVjdHBpY2tlci5tYWluLmRhdGE9Zyx0aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50PXRoaXMuc2VsZWN0cGlja2VyLm1haW59LGZpbmRMaXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kbWVudUlubmVyLmZpbmQoXCIuaW5uZXIgPiBsaVwiKX0scmVuZGVyOmZ1bmN0aW9uKCl7dGhpcy5zZXRQbGFjZWhvbGRlcigpO3ZhciBlLHQsaT10aGlzLHM9dGhpcy4kZWxlbWVudFswXSxuPWZ1bmN0aW9uKGUsdCl7dmFyIGkscz1lLnNlbGVjdGVkT3B0aW9ucyxuPVtdO2lmKHQpe2Zvcih2YXIgbz0wLHI9cy5sZW5ndGg7bzxyO28rKykoaT1zW29dKS5kaXNhYmxlZHx8XCJPUFRHUk9VUFwiPT09aS5wYXJlbnROb2RlLnRhZ05hbWUmJmkucGFyZW50Tm9kZS5kaXNhYmxlZHx8bi5wdXNoKGkpO3JldHVybiBufXJldHVybiBzfShzLHRoaXMub3B0aW9ucy5oaWRlRGlzYWJsZWQpLG89bi5sZW5ndGgscj10aGlzLiRidXR0b25bMF0sbD1yLnF1ZXJ5U2VsZWN0b3IoXCIuZmlsdGVyLW9wdGlvbi1pbm5lci1pbm5lclwiKSxhPWRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMub3B0aW9ucy5tdWx0aXBsZVNlcGFyYXRvciksYz1GLmZyYWdtZW50LmNsb25lTm9kZSghMSksZD0hMTtpZihyLmNsYXNzTGlzdC50b2dnbGUoXCJicy1wbGFjZWhvbGRlclwiLGkubXVsdGlwbGU/IW86IU8ocyxuKSksdGhpcy50YWJJbmRleCgpLFwic3RhdGljXCI9PT10aGlzLm9wdGlvbnMuc2VsZWN0ZWRUZXh0Rm9ybWF0KWM9WSh7dGV4dDp0aGlzLm9wdGlvbnMudGl0bGV9LCEwKTtlbHNlIGlmKChlPXRoaXMubXVsdGlwbGUmJi0xIT09dGhpcy5vcHRpb25zLnNlbGVjdGVkVGV4dEZvcm1hdC5pbmRleE9mKFwiY291bnRcIikmJjE8bykmJihlPTE8KHQ9dGhpcy5vcHRpb25zLnNlbGVjdGVkVGV4dEZvcm1hdC5zcGxpdChcIj5cIikpLmxlbmd0aCYmbz50WzFdfHwxPT09dC5sZW5ndGgmJjI8PW8pLCExPT09ZSl7Zm9yKHZhciBoPTA7aDxvJiZoPDUwO2grKyl7dmFyIHA9bltoXSx1PXt9LGY9e2NvbnRlbnQ6cC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbnRlbnRcIiksc3VidGV4dDpwLmdldEF0dHJpYnV0ZShcImRhdGEtc3VidGV4dFwiKSxpY29uOnAuZ2V0QXR0cmlidXRlKFwiZGF0YS1pY29uXCIpfTt0aGlzLm11bHRpcGxlJiYwPGgmJmMuYXBwZW5kQ2hpbGQoYS5jbG9uZU5vZGUoITEpKSxwLnRpdGxlP3UudGV4dD1wLnRpdGxlOmYuY29udGVudCYmaS5vcHRpb25zLnNob3dDb250ZW50Pyh1LmNvbnRlbnQ9Zi5jb250ZW50LnRvU3RyaW5nKCksZD0hMCk6KGkub3B0aW9ucy5zaG93SWNvbiYmKHUuaWNvbj1mLmljb24sdS5pY29uQmFzZT10aGlzLm9wdGlvbnMuaWNvbkJhc2UpLGkub3B0aW9ucy5zaG93U3VidGV4dCYmIWkubXVsdGlwbGUmJmYuc3VidGV4dCYmKHUuc3VidGV4dD1cIiBcIitmLnN1YnRleHQpLHUudGV4dD1wLnRleHRDb250ZW50LnRyaW0oKSksYy5hcHBlbmRDaGlsZChZKHUsITApKX00OTxvJiZjLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiLi4uXCIpKX1lbHNle3ZhciBtPSc6bm90KFtoaWRkZW5dKTpub3QoW2RhdGEtaGlkZGVuPVwidHJ1ZVwiXSk6bm90KFtkYXRhLWRpdmlkZXI9XCJ0cnVlXCJdKSc7dGhpcy5vcHRpb25zLmhpZGVEaXNhYmxlZCYmKG0rPVwiOm5vdCg6ZGlzYWJsZWQpXCIpO3ZhciB2PXRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbChcInNlbGVjdCA+IG9wdGlvblwiK20rXCIsIG9wdGdyb3VwXCIrbStcIiBvcHRpb25cIittKS5sZW5ndGgsZz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuY291bnRTZWxlY3RlZFRleHQ/dGhpcy5vcHRpb25zLmNvdW50U2VsZWN0ZWRUZXh0KG8sdik6dGhpcy5vcHRpb25zLmNvdW50U2VsZWN0ZWRUZXh0O2M9WSh7dGV4dDpnLnJlcGxhY2UoXCJ7MH1cIixvLnRvU3RyaW5nKCkpLnJlcGxhY2UoXCJ7MX1cIix2LnRvU3RyaW5nKCkpfSwhMCl9aWYobnVsbD09dGhpcy5vcHRpb25zLnRpdGxlJiYodGhpcy5vcHRpb25zLnRpdGxlPXRoaXMuJGVsZW1lbnQuYXR0cihcInRpdGxlXCIpKSxjLmNoaWxkTm9kZXMubGVuZ3RofHwoYz1ZKHt0ZXh0OnZvaWQgMCE9PXRoaXMub3B0aW9ucy50aXRsZT90aGlzLm9wdGlvbnMudGl0bGU6dGhpcy5vcHRpb25zLm5vbmVTZWxlY3RlZFRleHR9LCEwKSksci50aXRsZT1jLnRleHRDb250ZW50LnJlcGxhY2UoLzxbXj5dKj4/L2csXCJcIikudHJpbSgpLHRoaXMub3B0aW9ucy5zYW5pdGl6ZSYmZCYmUChbY10saS5vcHRpb25zLndoaXRlTGlzdCxpLm9wdGlvbnMuc2FuaXRpemVGbiksbC5pbm5lckhUTUw9XCJcIixsLmFwcGVuZENoaWxkKGMpLE0ubWFqb3I8NCYmdGhpcy4kbmV3RWxlbWVudFswXS5jbGFzc0xpc3QuY29udGFpbnMoXCJiczMtaGFzLWFkZG9uXCIpKXt2YXIgYj1yLnF1ZXJ5U2VsZWN0b3IoXCIuZmlsdGVyLWV4cGFuZFwiKSx3PWwuY2xvbmVOb2RlKCEwKTt3LmNsYXNzTmFtZT1cImZpbHRlci1leHBhbmRcIixiP3IucmVwbGFjZUNoaWxkKHcsYik6ci5hcHBlbmRDaGlsZCh3KX10aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJyZW5kZXJlZFwiK1UpfSxzZXRTdHlsZTpmdW5jdGlvbihlLHQpe3ZhciBpLHM9dGhpcy4kYnV0dG9uWzBdLG49dGhpcy4kbmV3RWxlbWVudFswXSxvPXRoaXMub3B0aW9ucy5zdHlsZS50cmltKCk7dGhpcy4kZWxlbWVudC5hdHRyKFwiY2xhc3NcIikmJnRoaXMuJG5ld0VsZW1lbnQuYWRkQ2xhc3ModGhpcy4kZWxlbWVudC5hdHRyKFwiY2xhc3NcIikucmVwbGFjZSgvc2VsZWN0cGlja2VyfG1vYmlsZS1kZXZpY2V8YnMtc2VsZWN0LWhpZGRlbnx2YWxpZGF0ZVxcWy4qXFxdL2dpLFwiXCIpKSxNLm1ham9yPDQmJihuLmNsYXNzTGlzdC5hZGQoXCJiczNcIiksbi5wYXJlbnROb2RlLmNsYXNzTGlzdC5jb250YWlucyhcImlucHV0LWdyb3VwXCIpJiYobi5wcmV2aW91c0VsZW1lbnRTaWJsaW5nfHxuLm5leHRFbGVtZW50U2libGluZykmJihuLnByZXZpb3VzRWxlbWVudFNpYmxpbmd8fG4ubmV4dEVsZW1lbnRTaWJsaW5nKS5jbGFzc0xpc3QuY29udGFpbnMoXCJpbnB1dC1ncm91cC1hZGRvblwiKSYmbi5jbGFzc0xpc3QuYWRkKFwiYnMzLWhhcy1hZGRvblwiKSksaT1lP2UudHJpbSgpOm8sXCJhZGRcIj09dD9pJiZzLmNsYXNzTGlzdC5hZGQuYXBwbHkocy5jbGFzc0xpc3QsaS5zcGxpdChcIiBcIikpOlwicmVtb3ZlXCI9PXQ/aSYmcy5jbGFzc0xpc3QucmVtb3ZlLmFwcGx5KHMuY2xhc3NMaXN0LGkuc3BsaXQoXCIgXCIpKToobyYmcy5jbGFzc0xpc3QucmVtb3ZlLmFwcGx5KHMuY2xhc3NMaXN0LG8uc3BsaXQoXCIgXCIpKSxpJiZzLmNsYXNzTGlzdC5hZGQuYXBwbHkocy5jbGFzc0xpc3QsaS5zcGxpdChcIiBcIikpKX0sbGlIZWlnaHQ6ZnVuY3Rpb24oZSl7aWYoZXx8ITEhPT10aGlzLm9wdGlvbnMuc2l6ZSYmIXRoaXMuc2l6ZUluZm8pe3RoaXMuc2l6ZUluZm98fCh0aGlzLnNpemVJbmZvPXt9KTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxzPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidWxcIiksbz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIikscj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIiksbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIiksYT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSxjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLGQ9dGhpcy5vcHRpb25zLmhlYWRlciYmMDx0aGlzLiRtZW51LmZpbmQoXCIuXCIrai5QT1BPVkVSSEVBREVSKS5sZW5ndGg/dGhpcy4kbWVudS5maW5kKFwiLlwiK2ouUE9QT1ZFUkhFQURFUilbMF0uY2xvbmVOb2RlKCEwKTpudWxsLGg9dGhpcy5vcHRpb25zLmxpdmVTZWFyY2g/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTpudWxsLHA9dGhpcy5vcHRpb25zLmFjdGlvbnNCb3gmJnRoaXMubXVsdGlwbGUmJjA8dGhpcy4kbWVudS5maW5kKFwiLmJzLWFjdGlvbnNib3hcIikubGVuZ3RoP3RoaXMuJG1lbnUuZmluZChcIi5icy1hY3Rpb25zYm94XCIpWzBdLmNsb25lTm9kZSghMCk6bnVsbCx1PXRoaXMub3B0aW9ucy5kb25lQnV0dG9uJiZ0aGlzLm11bHRpcGxlJiYwPHRoaXMuJG1lbnUuZmluZChcIi5icy1kb25lYnV0dG9uXCIpLmxlbmd0aD90aGlzLiRtZW51LmZpbmQoXCIuYnMtZG9uZWJ1dHRvblwiKVswXS5jbG9uZU5vZGUoITApOm51bGwsZj10aGlzLiRlbGVtZW50LmZpbmQoXCJvcHRpb25cIilbMF07aWYodGhpcy5zaXplSW5mby5zZWxlY3RXaWR0aD10aGlzLiRuZXdFbGVtZW50WzBdLm9mZnNldFdpZHRoLGMuY2xhc3NOYW1lPVwidGV4dFwiLGEuY2xhc3NOYW1lPVwiZHJvcGRvd24taXRlbSBcIisoZj9mLmNsYXNzTmFtZTpcIlwiKSx0LmNsYXNzTmFtZT10aGlzLiRtZW51WzBdLnBhcmVudE5vZGUuY2xhc3NOYW1lK1wiIFwiK2ouU0hPVyx0LnN0eWxlLndpZHRoPXRoaXMuc2l6ZUluZm8uc2VsZWN0V2lkdGgrXCJweFwiLFwiYXV0b1wiPT09dGhpcy5vcHRpb25zLndpZHRoJiYoaS5zdHlsZS5taW5XaWR0aD0wKSxpLmNsYXNzTmFtZT1qLk1FTlUrXCIgXCIrai5TSE9XLHMuY2xhc3NOYW1lPVwiaW5uZXIgXCIrai5TSE9XLG4uY2xhc3NOYW1lPWouTUVOVStcIiBpbm5lciBcIisoXCI0XCI9PT1NLm1ham9yP2ouU0hPVzpcIlwiKSxvLmNsYXNzTmFtZT1qLkRJVklERVIsci5jbGFzc05hbWU9XCJkcm9wZG93bi1oZWFkZXJcIixjLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXFx1MjAwYlwiKSksYS5hcHBlbmRDaGlsZChjKSxsLmFwcGVuZENoaWxkKGEpLHIuYXBwZW5kQ2hpbGQoYy5jbG9uZU5vZGUoITApKSx0aGlzLnNlbGVjdHBpY2tlci52aWV3LndpZGVzdE9wdGlvbiYmbi5hcHBlbmRDaGlsZCh0aGlzLnNlbGVjdHBpY2tlci52aWV3LndpZGVzdE9wdGlvbi5jbG9uZU5vZGUoITApKSxuLmFwcGVuZENoaWxkKGwpLG4uYXBwZW5kQ2hpbGQobyksbi5hcHBlbmRDaGlsZChyKSxkJiZpLmFwcGVuZENoaWxkKGQpLGgpe3ZhciBtPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtoLmNsYXNzTmFtZT1cImJzLXNlYXJjaGJveFwiLG0uY2xhc3NOYW1lPVwiZm9ybS1jb250cm9sXCIsaC5hcHBlbmRDaGlsZChtKSxpLmFwcGVuZENoaWxkKGgpfXAmJmkuYXBwZW5kQ2hpbGQocCkscy5hcHBlbmRDaGlsZChuKSxpLmFwcGVuZENoaWxkKHMpLHUmJmkuYXBwZW5kQ2hpbGQodSksdC5hcHBlbmRDaGlsZChpKSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHQpO3ZhciB2LGc9bC5vZmZzZXRIZWlnaHQsYj1yP3Iub2Zmc2V0SGVpZ2h0OjAsdz1kP2Qub2Zmc2V0SGVpZ2h0OjAsST1oP2gub2Zmc2V0SGVpZ2h0OjAseD1wP3Aub2Zmc2V0SGVpZ2h0OjAsaz11P3Uub2Zmc2V0SGVpZ2h0OjAsJD16KG8pLm91dGVySGVpZ2h0KCEwKSx5PSEhd2luZG93LmdldENvbXB1dGVkU3R5bGUmJndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGkpLFM9aS5vZmZzZXRXaWR0aCxFPXk/bnVsbDp6KGkpLEM9e3ZlcnQ6QSh5P3kucGFkZGluZ1RvcDpFLmNzcyhcInBhZGRpbmdUb3BcIikpK0EoeT95LnBhZGRpbmdCb3R0b206RS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpKStBKHk/eS5ib3JkZXJUb3BXaWR0aDpFLmNzcyhcImJvcmRlclRvcFdpZHRoXCIpKStBKHk/eS5ib3JkZXJCb3R0b21XaWR0aDpFLmNzcyhcImJvcmRlckJvdHRvbVdpZHRoXCIpKSxob3JpejpBKHk/eS5wYWRkaW5nTGVmdDpFLmNzcyhcInBhZGRpbmdMZWZ0XCIpKStBKHk/eS5wYWRkaW5nUmlnaHQ6RS5jc3MoXCJwYWRkaW5nUmlnaHRcIikpK0EoeT95LmJvcmRlckxlZnRXaWR0aDpFLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSkrQSh5P3kuYm9yZGVyUmlnaHRXaWR0aDpFLmNzcyhcImJvcmRlclJpZ2h0V2lkdGhcIikpfSxPPXt2ZXJ0OkMudmVydCtBKHk/eS5tYXJnaW5Ub3A6RS5jc3MoXCJtYXJnaW5Ub3BcIikpK0EoeT95Lm1hcmdpbkJvdHRvbTpFLmNzcyhcIm1hcmdpbkJvdHRvbVwiKSkrMixob3JpejpDLmhvcml6K0EoeT95Lm1hcmdpbkxlZnQ6RS5jc3MoXCJtYXJnaW5MZWZ0XCIpKStBKHk/eS5tYXJnaW5SaWdodDpFLmNzcyhcIm1hcmdpblJpZ2h0XCIpKSsyfTtzLnN0eWxlLm92ZXJmbG93WT1cInNjcm9sbFwiLHY9aS5vZmZzZXRXaWR0aC1TLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodCksdGhpcy5zaXplSW5mby5saUhlaWdodD1nLHRoaXMuc2l6ZUluZm8uZHJvcGRvd25IZWFkZXJIZWlnaHQ9Yix0aGlzLnNpemVJbmZvLmhlYWRlckhlaWdodD13LHRoaXMuc2l6ZUluZm8uc2VhcmNoSGVpZ2h0PUksdGhpcy5zaXplSW5mby5hY3Rpb25zSGVpZ2h0PXgsdGhpcy5zaXplSW5mby5kb25lQnV0dG9uSGVpZ2h0PWssdGhpcy5zaXplSW5mby5kaXZpZGVySGVpZ2h0PSQsdGhpcy5zaXplSW5mby5tZW51UGFkZGluZz1DLHRoaXMuc2l6ZUluZm8ubWVudUV4dHJhcz1PLHRoaXMuc2l6ZUluZm8ubWVudVdpZHRoPVMsdGhpcy5zaXplSW5mby50b3RhbE1lbnVXaWR0aD10aGlzLnNpemVJbmZvLm1lbnVXaWR0aCx0aGlzLnNpemVJbmZvLnNjcm9sbEJhcldpZHRoPXYsdGhpcy5zaXplSW5mby5zZWxlY3RIZWlnaHQ9dGhpcy4kbmV3RWxlbWVudFswXS5vZmZzZXRIZWlnaHQsdGhpcy5zZXRQb3NpdGlvbkRhdGEoKX19LGdldFNlbGVjdFBvc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGUsdD16KHdpbmRvdyksaT10aGlzLiRuZXdFbGVtZW50Lm9mZnNldCgpLHM9eih0aGlzLm9wdGlvbnMuY29udGFpbmVyKTt0aGlzLm9wdGlvbnMuY29udGFpbmVyJiZzLmxlbmd0aCYmIXMuaXMoXCJib2R5XCIpPygoZT1zLm9mZnNldCgpKS50b3ArPXBhcnNlSW50KHMuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIikpLGUubGVmdCs9cGFyc2VJbnQocy5jc3MoXCJib3JkZXJMZWZ0V2lkdGhcIikpKTplPXt0b3A6MCxsZWZ0OjB9O3ZhciBuPXRoaXMub3B0aW9ucy53aW5kb3dQYWRkaW5nO3RoaXMuc2l6ZUluZm8uc2VsZWN0T2Zmc2V0VG9wPWkudG9wLWUudG9wLXQuc2Nyb2xsVG9wKCksdGhpcy5zaXplSW5mby5zZWxlY3RPZmZzZXRCb3Q9dC5oZWlnaHQoKS10aGlzLnNpemVJbmZvLnNlbGVjdE9mZnNldFRvcC10aGlzLnNpemVJbmZvLnNlbGVjdEhlaWdodC1lLnRvcC1uWzJdLHRoaXMuc2l6ZUluZm8uc2VsZWN0T2Zmc2V0TGVmdD1pLmxlZnQtZS5sZWZ0LXQuc2Nyb2xsTGVmdCgpLHRoaXMuc2l6ZUluZm8uc2VsZWN0T2Zmc2V0UmlnaHQ9dC53aWR0aCgpLXRoaXMuc2l6ZUluZm8uc2VsZWN0T2Zmc2V0TGVmdC10aGlzLnNpemVJbmZvLnNlbGVjdFdpZHRoLWUubGVmdC1uWzFdLHRoaXMuc2l6ZUluZm8uc2VsZWN0T2Zmc2V0VG9wLT1uWzBdLHRoaXMuc2l6ZUluZm8uc2VsZWN0T2Zmc2V0TGVmdC09blszXX0sc2V0TWVudVNpemU6ZnVuY3Rpb24oZSl7dGhpcy5nZXRTZWxlY3RQb3NpdGlvbigpO3ZhciB0LGkscyxuLG8scixsLGE9dGhpcy5zaXplSW5mby5zZWxlY3RXaWR0aCxjPXRoaXMuc2l6ZUluZm8ubGlIZWlnaHQsZD10aGlzLnNpemVJbmZvLmhlYWRlckhlaWdodCxoPXRoaXMuc2l6ZUluZm8uc2VhcmNoSGVpZ2h0LHA9dGhpcy5zaXplSW5mby5hY3Rpb25zSGVpZ2h0LHU9dGhpcy5zaXplSW5mby5kb25lQnV0dG9uSGVpZ2h0LGY9dGhpcy5zaXplSW5mby5kaXZpZGVySGVpZ2h0LG09dGhpcy5zaXplSW5mby5tZW51UGFkZGluZyx2PTA7aWYodGhpcy5vcHRpb25zLmRyb3B1cEF1dG8mJihsPWMqdGhpcy5zZWxlY3RwaWNrZXIuY3VycmVudC5lbGVtZW50cy5sZW5ndGgrbS52ZXJ0LHRoaXMuJG5ld0VsZW1lbnQudG9nZ2xlQ2xhc3Moai5EUk9QVVAsdGhpcy5zaXplSW5mby5zZWxlY3RPZmZzZXRUb3AtdGhpcy5zaXplSW5mby5zZWxlY3RPZmZzZXRCb3Q+dGhpcy5zaXplSW5mby5tZW51RXh0cmFzLnZlcnQmJmwrdGhpcy5zaXplSW5mby5tZW51RXh0cmFzLnZlcnQrNTA+dGhpcy5zaXplSW5mby5zZWxlY3RPZmZzZXRCb3QpKSxcImF1dG9cIj09PXRoaXMub3B0aW9ucy5zaXplKW49Mzx0aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50LmVsZW1lbnRzLmxlbmd0aD8zKnRoaXMuc2l6ZUluZm8ubGlIZWlnaHQrdGhpcy5zaXplSW5mby5tZW51RXh0cmFzLnZlcnQtMjowLGk9dGhpcy5zaXplSW5mby5zZWxlY3RPZmZzZXRCb3QtdGhpcy5zaXplSW5mby5tZW51RXh0cmFzLnZlcnQscz1uK2QraCtwK3Uscj1NYXRoLm1heChuLW0udmVydCwwKSx0aGlzLiRuZXdFbGVtZW50Lmhhc0NsYXNzKGouRFJPUFVQKSYmKGk9dGhpcy5zaXplSW5mby5zZWxlY3RPZmZzZXRUb3AtdGhpcy5zaXplSW5mby5tZW51RXh0cmFzLnZlcnQpLHQ9KG89aSktZC1oLXAtdS1tLnZlcnQ7ZWxzZSBpZih0aGlzLm9wdGlvbnMuc2l6ZSYmXCJhdXRvXCIhPXRoaXMub3B0aW9ucy5zaXplJiZ0aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50LmVsZW1lbnRzLmxlbmd0aD50aGlzLm9wdGlvbnMuc2l6ZSl7Zm9yKHZhciBnPTA7Zzx0aGlzLm9wdGlvbnMuc2l6ZTtnKyspXCJkaXZpZGVyXCI9PT10aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbZ10udHlwZSYmdisrO3Q9KGk9Yyp0aGlzLm9wdGlvbnMuc2l6ZSt2KmYrbS52ZXJ0KS1tLnZlcnQsbz1pK2QraCtwK3Uscz1yPVwiXCJ9XCJhdXRvXCI9PT10aGlzLm9wdGlvbnMuZHJvcGRvd25BbGlnblJpZ2h0JiZ0aGlzLiRtZW51LnRvZ2dsZUNsYXNzKGouTUVOVVJJR0hULHRoaXMuc2l6ZUluZm8uc2VsZWN0T2Zmc2V0TGVmdD50aGlzLnNpemVJbmZvLnNlbGVjdE9mZnNldFJpZ2h0JiZ0aGlzLnNpemVJbmZvLnNlbGVjdE9mZnNldFJpZ2h0PHRoaXMuc2l6ZUluZm8udG90YWxNZW51V2lkdGgtYSksdGhpcy4kbWVudS5jc3Moe1wibWF4LWhlaWdodFwiOm8rXCJweFwiLG92ZXJmbG93OlwiaGlkZGVuXCIsXCJtaW4taGVpZ2h0XCI6cytcInB4XCJ9KSx0aGlzLiRtZW51SW5uZXIuY3NzKHtcIm1heC1oZWlnaHRcIjp0K1wicHhcIixcIm92ZXJmbG93LXlcIjpcImF1dG9cIixcIm1pbi1oZWlnaHRcIjpyK1wicHhcIn0pLHRoaXMuc2l6ZUluZm8ubWVudUlubmVySGVpZ2h0PU1hdGgubWF4KHQsMSksdGhpcy5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhLmxlbmd0aCYmdGhpcy5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhW3RoaXMuc2VsZWN0cGlja2VyLmN1cnJlbnQuZGF0YS5sZW5ndGgtMV0ucG9zaXRpb24+dGhpcy5zaXplSW5mby5tZW51SW5uZXJIZWlnaHQmJih0aGlzLnNpemVJbmZvLmhhc1Njcm9sbEJhcj0hMCx0aGlzLnNpemVJbmZvLnRvdGFsTWVudVdpZHRoPXRoaXMuc2l6ZUluZm8ubWVudVdpZHRoK3RoaXMuc2l6ZUluZm8uc2Nyb2xsQmFyV2lkdGgsdGhpcy4kbWVudS5jc3MoXCJtaW4td2lkdGhcIix0aGlzLnNpemVJbmZvLnRvdGFsTWVudVdpZHRoKSksdGhpcy5kcm9wZG93biYmdGhpcy5kcm9wZG93bi5fcG9wcGVyJiZ0aGlzLmRyb3Bkb3duLl9wb3BwZXIudXBkYXRlKCl9LHNldFNpemU6ZnVuY3Rpb24oZSl7aWYodGhpcy5saUhlaWdodChlKSx0aGlzLm9wdGlvbnMuaGVhZGVyJiZ0aGlzLiRtZW51LmNzcyhcInBhZGRpbmctdG9wXCIsMCksITEhPT10aGlzLm9wdGlvbnMuc2l6ZSl7dmFyIHQ9dGhpcyxpPXood2luZG93KTt0aGlzLnNldE1lbnVTaXplKCksdGhpcy5vcHRpb25zLmxpdmVTZWFyY2gmJnRoaXMuJHNlYXJjaGJveC5vZmYoXCJpbnB1dC5zZXRNZW51U2l6ZSBwcm9wZXJ0eWNoYW5nZS5zZXRNZW51U2l6ZVwiKS5vbihcImlucHV0LnNldE1lbnVTaXplIHByb3BlcnR5Y2hhbmdlLnNldE1lbnVTaXplXCIsZnVuY3Rpb24oKXtyZXR1cm4gdC5zZXRNZW51U2l6ZSgpfSksXCJhdXRvXCI9PT10aGlzLm9wdGlvbnMuc2l6ZT9pLm9mZihcInJlc2l6ZVwiK1UrXCIuXCIrdGhpcy5zZWxlY3RJZCtcIi5zZXRNZW51U2l6ZSBzY3JvbGxcIitVK1wiLlwiK3RoaXMuc2VsZWN0SWQrXCIuc2V0TWVudVNpemVcIikub24oXCJyZXNpemVcIitVK1wiLlwiK3RoaXMuc2VsZWN0SWQrXCIuc2V0TWVudVNpemUgc2Nyb2xsXCIrVStcIi5cIit0aGlzLnNlbGVjdElkK1wiLnNldE1lbnVTaXplXCIsZnVuY3Rpb24oKXtyZXR1cm4gdC5zZXRNZW51U2l6ZSgpfSk6dGhpcy5vcHRpb25zLnNpemUmJlwiYXV0b1wiIT10aGlzLm9wdGlvbnMuc2l6ZSYmdGhpcy5zZWxlY3RwaWNrZXIuY3VycmVudC5lbGVtZW50cy5sZW5ndGg+dGhpcy5vcHRpb25zLnNpemUmJmkub2ZmKFwicmVzaXplXCIrVStcIi5cIit0aGlzLnNlbGVjdElkK1wiLnNldE1lbnVTaXplIHNjcm9sbFwiK1UrXCIuXCIrdGhpcy5zZWxlY3RJZCtcIi5zZXRNZW51U2l6ZVwiKSx0LmNyZWF0ZVZpZXcoITEsITAsZSl9fSxzZXRXaWR0aDpmdW5jdGlvbigpe3ZhciBpPXRoaXM7XCJhdXRvXCI9PT10aGlzLm9wdGlvbnMud2lkdGg/cmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7aS4kbWVudS5jc3MoXCJtaW4td2lkdGhcIixcIjBcIiksaS4kZWxlbWVudC5vbihcImxvYWRlZFwiK1UsZnVuY3Rpb24oKXtpLmxpSGVpZ2h0KCksaS5zZXRNZW51U2l6ZSgpO3ZhciBlPWkuJG5ld0VsZW1lbnQuY2xvbmUoKS5hcHBlbmRUbyhcImJvZHlcIiksdD1lLmNzcyhcIndpZHRoXCIsXCJhdXRvXCIpLmNoaWxkcmVuKFwiYnV0dG9uXCIpLm91dGVyV2lkdGgoKTtlLnJlbW92ZSgpLGkuc2l6ZUluZm8uc2VsZWN0V2lkdGg9TWF0aC5tYXgoaS5zaXplSW5mby50b3RhbE1lbnVXaWR0aCx0KSxpLiRuZXdFbGVtZW50LmNzcyhcIndpZHRoXCIsaS5zaXplSW5mby5zZWxlY3RXaWR0aCtcInB4XCIpfSl9KTpcImZpdFwiPT09dGhpcy5vcHRpb25zLndpZHRoPyh0aGlzLiRtZW51LmNzcyhcIm1pbi13aWR0aFwiLFwiXCIpLHRoaXMuJG5ld0VsZW1lbnQuY3NzKFwid2lkdGhcIixcIlwiKS5hZGRDbGFzcyhcImZpdC13aWR0aFwiKSk6dGhpcy5vcHRpb25zLndpZHRoPyh0aGlzLiRtZW51LmNzcyhcIm1pbi13aWR0aFwiLFwiXCIpLHRoaXMuJG5ld0VsZW1lbnQuY3NzKFwid2lkdGhcIix0aGlzLm9wdGlvbnMud2lkdGgpKToodGhpcy4kbWVudS5jc3MoXCJtaW4td2lkdGhcIixcIlwiKSx0aGlzLiRuZXdFbGVtZW50LmNzcyhcIndpZHRoXCIsXCJcIikpLHRoaXMuJG5ld0VsZW1lbnQuaGFzQ2xhc3MoXCJmaXQtd2lkdGhcIikmJlwiZml0XCIhPT10aGlzLm9wdGlvbnMud2lkdGgmJnRoaXMuJG5ld0VsZW1lbnRbMF0uY2xhc3NMaXN0LnJlbW92ZShcImZpdC13aWR0aFwiKX0sc2VsZWN0UG9zaXRpb246ZnVuY3Rpb24oKXt0aGlzLiRic0NvbnRhaW5lcj16KCc8ZGl2IGNsYXNzPVwiYnMtY29udGFpbmVyXCIgLz4nKTt2YXIgcyxuLG8scj10aGlzLGw9eih0aGlzLm9wdGlvbnMuY29udGFpbmVyKSxlPWZ1bmN0aW9uKGUpe3ZhciB0PXt9LGk9ci5vcHRpb25zLmRpc3BsYXl8fCEhei5mbi5kcm9wZG93bi5Db25zdHJ1Y3Rvci5EZWZhdWx0JiZ6LmZuLmRyb3Bkb3duLkNvbnN0cnVjdG9yLkRlZmF1bHQuZGlzcGxheTtyLiRic0NvbnRhaW5lci5hZGRDbGFzcyhlLmF0dHIoXCJjbGFzc1wiKS5yZXBsYWNlKC9mb3JtLWNvbnRyb2x8Zml0LXdpZHRoL2dpLFwiXCIpKS50b2dnbGVDbGFzcyhqLkRST1BVUCxlLmhhc0NsYXNzKGouRFJPUFVQKSkscz1lLm9mZnNldCgpLGwuaXMoXCJib2R5XCIpP249e3RvcDowLGxlZnQ6MH06KChuPWwub2Zmc2V0KCkpLnRvcCs9cGFyc2VJbnQobC5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSktbC5zY3JvbGxUb3AoKSxuLmxlZnQrPXBhcnNlSW50KGwuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpKS1sLnNjcm9sbExlZnQoKSksbz1lLmhhc0NsYXNzKGouRFJPUFVQKT8wOmVbMF0ub2Zmc2V0SGVpZ2h0LChNLm1ham9yPDR8fFwic3RhdGljXCI9PT1pKSYmKHQudG9wPXMudG9wLW4udG9wK28sdC5sZWZ0PXMubGVmdC1uLmxlZnQpLHQud2lkdGg9ZVswXS5vZmZzZXRXaWR0aCxyLiRic0NvbnRhaW5lci5jc3ModCl9O3RoaXMuJGJ1dHRvbi5vbihcImNsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsZnVuY3Rpb24oKXtyLmlzRGlzYWJsZWQoKXx8KGUoci4kbmV3RWxlbWVudCksci4kYnNDb250YWluZXIuYXBwZW5kVG8oci5vcHRpb25zLmNvbnRhaW5lcikudG9nZ2xlQ2xhc3Moai5TSE9XLCFyLiRidXR0b24uaGFzQ2xhc3Moai5TSE9XKSkuYXBwZW5kKHIuJG1lbnUpKX0pLHood2luZG93KS5vZmYoXCJyZXNpemVcIitVK1wiLlwiK3RoaXMuc2VsZWN0SWQrXCIgc2Nyb2xsXCIrVStcIi5cIit0aGlzLnNlbGVjdElkKS5vbihcInJlc2l6ZVwiK1UrXCIuXCIrdGhpcy5zZWxlY3RJZCtcIiBzY3JvbGxcIitVK1wiLlwiK3RoaXMuc2VsZWN0SWQsZnVuY3Rpb24oKXtyLiRuZXdFbGVtZW50Lmhhc0NsYXNzKGouU0hPVykmJmUoci4kbmV3RWxlbWVudCl9KSx0aGlzLiRlbGVtZW50Lm9uKFwiaGlkZVwiK1UsZnVuY3Rpb24oKXtyLiRtZW51LmRhdGEoXCJoZWlnaHRcIixyLiRtZW51LmhlaWdodCgpKSxyLiRic0NvbnRhaW5lci5kZXRhY2goKX0pfSxzZXRPcHRpb25TdGF0dXM6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztpZih0Lm5vU2Nyb2xsPSExLHQuc2VsZWN0cGlja2VyLnZpZXcudmlzaWJsZUVsZW1lbnRzJiZ0LnNlbGVjdHBpY2tlci52aWV3LnZpc2libGVFbGVtZW50cy5sZW5ndGgpZm9yKHZhciBpPTA7aTx0LnNlbGVjdHBpY2tlci52aWV3LnZpc2libGVFbGVtZW50cy5sZW5ndGg7aSsrKXt2YXIgcz10LnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbaSt0LnNlbGVjdHBpY2tlci52aWV3LnBvc2l0aW9uMF0sbj1zLm9wdGlvbjtuJiYoITAhPT1lJiZ0LnNldERpc2FibGVkKHMuaW5kZXgscy5kaXNhYmxlZCksdC5zZXRTZWxlY3RlZChzLmluZGV4LG4uc2VsZWN0ZWQpKX19LHNldFNlbGVjdGVkOmZ1bmN0aW9uKGUsdCl7dmFyIGkscyxuPXRoaXMuc2VsZWN0cGlja2VyLm1haW4uZWxlbWVudHNbZV0sbz10aGlzLnNlbGVjdHBpY2tlci5tYWluLmRhdGFbZV0scj12b2lkIDAhPT10aGlzLmFjdGl2ZUluZGV4LGw9dGhpcy5hY3RpdmVJbmRleD09PWV8fHQmJiF0aGlzLm11bHRpcGxlJiYhcjtvLnNlbGVjdGVkPXQscz1uLmZpcnN0Q2hpbGQsdCYmKHRoaXMuc2VsZWN0ZWRJbmRleD1lKSxuLmNsYXNzTGlzdC50b2dnbGUoXCJzZWxlY3RlZFwiLHQpLGw/KHRoaXMuZm9jdXNJdGVtKG4sbyksdGhpcy5zZWxlY3RwaWNrZXIudmlldy5jdXJyZW50QWN0aXZlPW4sdGhpcy5hY3RpdmVJbmRleD1lKTp0aGlzLmRlZm9jdXNJdGVtKG4pLHMmJihzLmNsYXNzTGlzdC50b2dnbGUoXCJzZWxlY3RlZFwiLHQpLHQ/cy5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsITApOnRoaXMubXVsdGlwbGU/cy5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsITEpOnMucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1zZWxlY3RlZFwiKSksbHx8cnx8IXR8fHZvaWQgMD09PXRoaXMucHJldkFjdGl2ZUluZGV4fHwoaT10aGlzLnNlbGVjdHBpY2tlci5tYWluLmVsZW1lbnRzW3RoaXMucHJldkFjdGl2ZUluZGV4XSx0aGlzLmRlZm9jdXNJdGVtKGkpKX0sc2V0RGlzYWJsZWQ6ZnVuY3Rpb24oZSx0KXt2YXIgaSxzPXRoaXMuc2VsZWN0cGlja2VyLm1haW4uZWxlbWVudHNbZV07dGhpcy5zZWxlY3RwaWNrZXIubWFpbi5kYXRhW2VdLmRpc2FibGVkPXQsaT1zLmZpcnN0Q2hpbGQscy5jbGFzc0xpc3QudG9nZ2xlKGouRElTQUJMRUQsdCksaSYmKFwiNFwiPT09TS5tYWpvciYmaS5jbGFzc0xpc3QudG9nZ2xlKGouRElTQUJMRUQsdCksdD8oaS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsdCksaS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLC0xKSk6KGkucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiKSxpLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsMCkpKX0saXNEaXNhYmxlZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLiRlbGVtZW50WzBdLmRpc2FibGVkfSxjaGVja0Rpc2FibGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLmlzRGlzYWJsZWQoKT8odGhpcy4kbmV3RWxlbWVudFswXS5jbGFzc0xpc3QuYWRkKGouRElTQUJMRUQpLHRoaXMuJGJ1dHRvbi5hZGRDbGFzcyhqLkRJU0FCTEVEKS5hdHRyKFwidGFiaW5kZXhcIiwtMSkuYXR0cihcImFyaWEtZGlzYWJsZWRcIiwhMCkpOih0aGlzLiRidXR0b25bMF0uY2xhc3NMaXN0LmNvbnRhaW5zKGouRElTQUJMRUQpJiYodGhpcy4kbmV3RWxlbWVudFswXS5jbGFzc0xpc3QucmVtb3ZlKGouRElTQUJMRUQpLHRoaXMuJGJ1dHRvbi5yZW1vdmVDbGFzcyhqLkRJU0FCTEVEKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLCExKSksLTEhPXRoaXMuJGJ1dHRvbi5hdHRyKFwidGFiaW5kZXhcIil8fHRoaXMuJGVsZW1lbnQuZGF0YShcInRhYmluZGV4XCIpfHx0aGlzLiRidXR0b24ucmVtb3ZlQXR0cihcInRhYmluZGV4XCIpKSx0aGlzLiRidXR0b24ub24oXCJjbGlja1wiLGZ1bmN0aW9uKCl7cmV0dXJuIWUuaXNEaXNhYmxlZCgpfSl9LHRhYkluZGV4OmZ1bmN0aW9uKCl7dGhpcy4kZWxlbWVudC5kYXRhKFwidGFiaW5kZXhcIikhPT10aGlzLiRlbGVtZW50LmF0dHIoXCJ0YWJpbmRleFwiKSYmLTk4IT09dGhpcy4kZWxlbWVudC5hdHRyKFwidGFiaW5kZXhcIikmJlwiLTk4XCIhPT10aGlzLiRlbGVtZW50LmF0dHIoXCJ0YWJpbmRleFwiKSYmKHRoaXMuJGVsZW1lbnQuZGF0YShcInRhYmluZGV4XCIsdGhpcy4kZWxlbWVudC5hdHRyKFwidGFiaW5kZXhcIikpLHRoaXMuJGJ1dHRvbi5hdHRyKFwidGFiaW5kZXhcIix0aGlzLiRlbGVtZW50LmRhdGEoXCJ0YWJpbmRleFwiKSkpLHRoaXMuJGVsZW1lbnQuYXR0cihcInRhYmluZGV4XCIsLTk4KX0sY2xpY2tMaXN0ZW5lcjpmdW5jdGlvbigpe3ZhciBDPXRoaXMsdD16KGRvY3VtZW50KTtmdW5jdGlvbiBlKCl7Qy5vcHRpb25zLmxpdmVTZWFyY2g/Qy4kc2VhcmNoYm94LnRyaWdnZXIoXCJmb2N1c1wiKTpDLiRtZW51SW5uZXIudHJpZ2dlcihcImZvY3VzXCIpfWZ1bmN0aW9uIGkoKXtDLmRyb3Bkb3duJiZDLmRyb3Bkb3duLl9wb3BwZXImJkMuZHJvcGRvd24uX3BvcHBlci5zdGF0ZS5pc0NyZWF0ZWQ/ZSgpOnJlcXVlc3RBbmltYXRpb25GcmFtZShpKX10LmRhdGEoXCJzcGFjZVNlbGVjdFwiLCExKSx0aGlzLiRidXR0b24ub24oXCJrZXl1cFwiLGZ1bmN0aW9uKGUpey8oMzIpLy50ZXN0KGUua2V5Q29kZS50b1N0cmluZygxMCkpJiZ0LmRhdGEoXCJzcGFjZVNlbGVjdFwiKSYmKGUucHJldmVudERlZmF1bHQoKSx0LmRhdGEoXCJzcGFjZVNlbGVjdFwiLCExKSl9KSx0aGlzLiRuZXdFbGVtZW50Lm9uKFwic2hvdy5icy5kcm9wZG93blwiLGZ1bmN0aW9uKCl7MzxNLm1ham9yJiYhQy5kcm9wZG93biYmKEMuZHJvcGRvd249Qy4kYnV0dG9uLmRhdGEoXCJicy5kcm9wZG93blwiKSxDLmRyb3Bkb3duLl9tZW51PUMuJG1lbnVbMF0pfSksdGhpcy4kYnV0dG9uLm9uKFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIixmdW5jdGlvbigpe0MuJG5ld0VsZW1lbnQuaGFzQ2xhc3Moai5TSE9XKXx8Qy5zZXRTaXplKCl9KSx0aGlzLiRlbGVtZW50Lm9uKFwic2hvd25cIitVLGZ1bmN0aW9uKCl7Qy4kbWVudUlubmVyWzBdLnNjcm9sbFRvcCE9PUMuc2VsZWN0cGlja2VyLnZpZXcuc2Nyb2xsVG9wJiYoQy4kbWVudUlubmVyWzBdLnNjcm9sbFRvcD1DLnNlbGVjdHBpY2tlci52aWV3LnNjcm9sbFRvcCksMzxNLm1ham9yP3JlcXVlc3RBbmltYXRpb25GcmFtZShpKTplKCl9KSx0aGlzLiRtZW51SW5uZXIub24oXCJtb3VzZWVudGVyXCIsXCJsaSBhXCIsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJlbnRFbGVtZW50LGk9Qy5pc1ZpcnR1YWwoKT9DLnNlbGVjdHBpY2tlci52aWV3LnBvc2l0aW9uMDowLHM9QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbCh0LnBhcmVudEVsZW1lbnQuY2hpbGRyZW4sdCksbj1DLnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbcytpXTtDLmZvY3VzSXRlbSh0LG4sITApfSksdGhpcy4kbWVudUlubmVyLm9uKFwiY2xpY2tcIixcImxpIGFcIixmdW5jdGlvbihlLHQpe3ZhciBpPXoodGhpcykscz1DLiRlbGVtZW50WzBdLG49Qy5pc1ZpcnR1YWwoKT9DLnNlbGVjdHBpY2tlci52aWV3LnBvc2l0aW9uMDowLG89Qy5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhW2kucGFyZW50KCkuaW5kZXgoKStuXSxyPW8uaW5kZXgsbD1PKHMpLGE9cy5zZWxlY3RlZEluZGV4LGM9cy5vcHRpb25zW2FdLGQ9ITA7aWYoQy5tdWx0aXBsZSYmMSE9PUMub3B0aW9ucy5tYXhPcHRpb25zJiZlLnN0b3BQcm9wYWdhdGlvbigpLGUucHJldmVudERlZmF1bHQoKSwhQy5pc0Rpc2FibGVkKCkmJiFpLnBhcmVudCgpLmhhc0NsYXNzKGouRElTQUJMRUQpKXt2YXIgaD1DLiRlbGVtZW50LmZpbmQoXCJvcHRpb25cIikscD1vLm9wdGlvbix1PXoocCksZj1wLnNlbGVjdGVkLG09dS5wYXJlbnQoXCJvcHRncm91cFwiKSx2PW0uZmluZChcIm9wdGlvblwiKSxnPUMub3B0aW9ucy5tYXhPcHRpb25zLGI9bS5kYXRhKFwibWF4T3B0aW9uc1wiKXx8ITE7aWYocj09PUMuYWN0aXZlSW5kZXgmJih0PSEwKSx0fHwoQy5wcmV2QWN0aXZlSW5kZXg9Qy5hY3RpdmVJbmRleCxDLmFjdGl2ZUluZGV4PXZvaWQgMCksQy5tdWx0aXBsZSl7aWYocC5zZWxlY3RlZD0hZixDLnNldFNlbGVjdGVkKHIsIWYpLGkudHJpZ2dlcihcImJsdXJcIiksITEhPT1nfHwhMSE9PWIpe3ZhciB3PWc8aC5maWx0ZXIoXCI6c2VsZWN0ZWRcIikubGVuZ3RoLEk9YjxtLmZpbmQoXCJvcHRpb246c2VsZWN0ZWRcIikubGVuZ3RoO2lmKGcmJnd8fGImJkkpaWYoZyYmMT09Zyl7aC5wcm9wKFwic2VsZWN0ZWRcIiwhMSksdS5wcm9wKFwic2VsZWN0ZWRcIiwhMCk7Zm9yKHZhciB4PTA7eDxoLmxlbmd0aDt4KyspQy5zZXRTZWxlY3RlZCh4LCExKTtDLnNldFNlbGVjdGVkKHIsITApfWVsc2UgaWYoYiYmMT09Yil7bS5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpLnByb3AoXCJzZWxlY3RlZFwiLCExKSx1LnByb3AoXCJzZWxlY3RlZFwiLCEwKTtmb3IoeD0wO3g8di5sZW5ndGg7eCsrKXtwPXZbeF07Qy5zZXRTZWxlY3RlZChoLmluZGV4KHApLCExKX1DLnNldFNlbGVjdGVkKHIsITApfWVsc2V7dmFyIGs9XCJzdHJpbmdcIj09dHlwZW9mIEMub3B0aW9ucy5tYXhPcHRpb25zVGV4dD9bQy5vcHRpb25zLm1heE9wdGlvbnNUZXh0LEMub3B0aW9ucy5tYXhPcHRpb25zVGV4dF06Qy5vcHRpb25zLm1heE9wdGlvbnNUZXh0LCQ9XCJmdW5jdGlvblwiPT10eXBlb2Ygaz9rKGcsYik6ayx5PSRbMF0ucmVwbGFjZShcIntufVwiLGcpLFM9JFsxXS5yZXBsYWNlKFwie259XCIsYiksRT16KCc8ZGl2IGNsYXNzPVwibm90aWZ5XCI+PC9kaXY+Jyk7JFsyXSYmKHk9eS5yZXBsYWNlKFwie3Zhcn1cIiwkWzJdWzE8Zz8wOjFdKSxTPVMucmVwbGFjZShcInt2YXJ9XCIsJFsyXVsxPGI/MDoxXSkpLHUucHJvcChcInNlbGVjdGVkXCIsITEpLEMuJG1lbnUuYXBwZW5kKEUpLGcmJncmJihFLmFwcGVuZCh6KFwiPGRpdj5cIit5K1wiPC9kaXY+XCIpKSxkPSExLEMuJGVsZW1lbnQudHJpZ2dlcihcIm1heFJlYWNoZWRcIitVKSksYiYmSSYmKEUuYXBwZW5kKHooXCI8ZGl2PlwiK1MrXCI8L2Rpdj5cIikpLGQ9ITEsQy4kZWxlbWVudC50cmlnZ2VyKFwibWF4UmVhY2hlZEdycFwiK1UpKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Qy5zZXRTZWxlY3RlZChyLCExKX0sMTApLEUuZGVsYXkoNzUwKS5mYWRlT3V0KDMwMCxmdW5jdGlvbigpe3oodGhpcykucmVtb3ZlKCl9KX19fWVsc2UgYy5zZWxlY3RlZD0hMSxwLnNlbGVjdGVkPSEwLEMuc2V0U2VsZWN0ZWQociwhMCk7IUMubXVsdGlwbGV8fEMubXVsdGlwbGUmJjE9PT1DLm9wdGlvbnMubWF4T3B0aW9ucz9DLiRidXR0b24udHJpZ2dlcihcImZvY3VzXCIpOkMub3B0aW9ucy5saXZlU2VhcmNoJiZDLiRzZWFyY2hib3gudHJpZ2dlcihcImZvY3VzXCIpLGQmJihDLm11bHRpcGxlfHxhIT09cy5zZWxlY3RlZEluZGV4KSYmKFQ9W3AuaW5kZXgsdS5wcm9wKFwic2VsZWN0ZWRcIiksbF0sQy4kZWxlbWVudC50cmlnZ2VyTmF0aXZlKFwiY2hhbmdlXCIpKX19KSx0aGlzLiRtZW51Lm9uKFwiY2xpY2tcIixcImxpLlwiK2ouRElTQUJMRUQrXCIgYSwgLlwiK2ouUE9QT1ZFUkhFQURFUitcIiwgLlwiK2ouUE9QT1ZFUkhFQURFUitcIiA6bm90KC5jbG9zZSlcIixmdW5jdGlvbihlKXtlLmN1cnJlbnRUYXJnZXQ9PXRoaXMmJihlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSxDLm9wdGlvbnMubGl2ZVNlYXJjaCYmIXooZS50YXJnZXQpLmhhc0NsYXNzKFwiY2xvc2VcIik/Qy4kc2VhcmNoYm94LnRyaWdnZXIoXCJmb2N1c1wiKTpDLiRidXR0b24udHJpZ2dlcihcImZvY3VzXCIpKX0pLHRoaXMuJG1lbnVJbm5lci5vbihcImNsaWNrXCIsXCIuZGl2aWRlciwgLmRyb3Bkb3duLWhlYWRlclwiLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLEMub3B0aW9ucy5saXZlU2VhcmNoP0MuJHNlYXJjaGJveC50cmlnZ2VyKFwiZm9jdXNcIik6Qy4kYnV0dG9uLnRyaWdnZXIoXCJmb2N1c1wiKX0pLHRoaXMuJG1lbnUub24oXCJjbGlja1wiLFwiLlwiK2ouUE9QT1ZFUkhFQURFUitcIiAuY2xvc2VcIixmdW5jdGlvbigpe0MuJGJ1dHRvbi50cmlnZ2VyKFwiY2xpY2tcIil9KSx0aGlzLiRzZWFyY2hib3gub24oXCJjbGlja1wiLGZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9KSx0aGlzLiRtZW51Lm9uKFwiY2xpY2tcIixcIi5hY3Rpb25zLWJ0blwiLGZ1bmN0aW9uKGUpe0Mub3B0aW9ucy5saXZlU2VhcmNoP0MuJHNlYXJjaGJveC50cmlnZ2VyKFwiZm9jdXNcIik6Qy4kYnV0dG9uLnRyaWdnZXIoXCJmb2N1c1wiKSxlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSx6KHRoaXMpLmhhc0NsYXNzKFwiYnMtc2VsZWN0LWFsbFwiKT9DLnNlbGVjdEFsbCgpOkMuZGVzZWxlY3RBbGwoKX0pLHRoaXMuJGVsZW1lbnQub24oXCJjaGFuZ2VcIitVLGZ1bmN0aW9uKCl7Qy5yZW5kZXIoKSxDLiRlbGVtZW50LnRyaWdnZXIoXCJjaGFuZ2VkXCIrVSxUKSxUPW51bGx9KS5vbihcImZvY3VzXCIrVSxmdW5jdGlvbigpe0Mub3B0aW9ucy5tb2JpbGV8fEMuJGJ1dHRvbi50cmlnZ2VyKFwiZm9jdXNcIil9KX0sbGl2ZVNlYXJjaExpc3RlbmVyOmZ1bmN0aW9uKCl7dmFyIHU9dGhpcyxmPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTt0aGlzLiRidXR0b24ub24oXCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiLGZ1bmN0aW9uKCl7dS4kc2VhcmNoYm94LnZhbCgpJiZ1LiRzZWFyY2hib3gudmFsKFwiXCIpfSksdGhpcy4kc2VhcmNoYm94Lm9uKFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGkgZm9jdXMuYnMuZHJvcGRvd24uZGF0YS1hcGkgdG91Y2hlbmQuYnMuZHJvcGRvd24uZGF0YS1hcGlcIixmdW5jdGlvbihlKXtlLnN0b3BQcm9wYWdhdGlvbigpfSksdGhpcy4kc2VhcmNoYm94Lm9uKFwiaW5wdXQgcHJvcGVydHljaGFuZ2VcIixmdW5jdGlvbigpe3ZhciBlPXUuJHNlYXJjaGJveC52YWwoKTtpZih1LnNlbGVjdHBpY2tlci5zZWFyY2guZWxlbWVudHM9W10sdS5zZWxlY3RwaWNrZXIuc2VhcmNoLmRhdGE9W10sZSl7dmFyIHQ9W10saT1lLnRvVXBwZXJDYXNlKCkscz17fSxuPVtdLG89dS5fc2VhcmNoU3R5bGUoKSxyPXUub3B0aW9ucy5saXZlU2VhcmNoTm9ybWFsaXplO3ImJihpPXcoaSkpLHUuXyRsaXNTZWxlY3RlZD11LiRtZW51SW5uZXIuZmluZChcIi5zZWxlY3RlZFwiKTtmb3IodmFyIGw9MDtsPHUuc2VsZWN0cGlja2VyLm1haW4uZGF0YS5sZW5ndGg7bCsrKXt2YXIgYT11LnNlbGVjdHBpY2tlci5tYWluLmRhdGFbbF07c1tsXXx8KHNbbF09ayhhLGksbyxyKSksc1tsXSYmdm9pZCAwIT09YS5oZWFkZXJJbmRleCYmLTE9PT1uLmluZGV4T2YoYS5oZWFkZXJJbmRleCkmJigwPGEuaGVhZGVySW5kZXgmJihzW2EuaGVhZGVySW5kZXgtMV09ITAsbi5wdXNoKGEuaGVhZGVySW5kZXgtMSkpLHNbYS5oZWFkZXJJbmRleF09ITAsbi5wdXNoKGEuaGVhZGVySW5kZXgpLHNbYS5sYXN0SW5kZXgrMV09ITApLHNbbF0mJlwib3B0Z3JvdXAtbGFiZWxcIiE9PWEudHlwZSYmbi5wdXNoKGwpfWw9MDtmb3IodmFyIGM9bi5sZW5ndGg7bDxjO2wrKyl7dmFyIGQ9bltsXSxoPW5bbC0xXSxwPShhPXUuc2VsZWN0cGlja2VyLm1haW4uZGF0YVtkXSx1LnNlbGVjdHBpY2tlci5tYWluLmRhdGFbaF0pOyhcImRpdmlkZXJcIiE9PWEudHlwZXx8XCJkaXZpZGVyXCI9PT1hLnR5cGUmJnAmJlwiZGl2aWRlclwiIT09cC50eXBlJiZjLTEhPT1sKSYmKHUuc2VsZWN0cGlja2VyLnNlYXJjaC5kYXRhLnB1c2goYSksdC5wdXNoKHUuc2VsZWN0cGlja2VyLm1haW4uZWxlbWVudHNbZF0pKX11LmFjdGl2ZUluZGV4PXZvaWQgMCx1Lm5vU2Nyb2xsPSEwLHUuJG1lbnVJbm5lci5zY3JvbGxUb3AoMCksdS5zZWxlY3RwaWNrZXIuc2VhcmNoLmVsZW1lbnRzPXQsdS5jcmVhdGVWaWV3KCEwKSx0Lmxlbmd0aHx8KGYuY2xhc3NOYW1lPVwibm8tcmVzdWx0c1wiLGYuaW5uZXJIVE1MPXUub3B0aW9ucy5ub25lUmVzdWx0c1RleHQucmVwbGFjZShcInswfVwiLCdcIicrRShlKSsnXCInKSx1LiRtZW51SW5uZXJbMF0uZmlyc3RDaGlsZC5hcHBlbmRDaGlsZChmKSl9ZWxzZSB1LiRtZW51SW5uZXIuc2Nyb2xsVG9wKDApLHUuY3JlYXRlVmlldyghMSl9KX0sX3NlYXJjaFN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy5saXZlU2VhcmNoU3R5bGV8fFwiY29udGFpbnNcIn0sdmFsOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuJGVsZW1lbnRbMF07aWYodm9pZCAwPT09ZSlyZXR1cm4gdGhpcy4kZWxlbWVudC52YWwoKTt2YXIgaT1PKHQpO2lmKFQ9W251bGwsbnVsbCxpXSx0aGlzLiRlbGVtZW50LnZhbChlKS50cmlnZ2VyKFwiY2hhbmdlZFwiK1UsVCksdGhpcy4kbmV3RWxlbWVudC5oYXNDbGFzcyhqLlNIT1cpKWlmKHRoaXMubXVsdGlwbGUpdGhpcy5zZXRPcHRpb25TdGF0dXMoITApO2Vsc2V7dmFyIHM9KHQub3B0aW9uc1t0LnNlbGVjdGVkSW5kZXhdfHx7fSkubGlJbmRleDtcIm51bWJlclwiPT10eXBlb2YgcyYmKHRoaXMuc2V0U2VsZWN0ZWQodGhpcy5zZWxlY3RlZEluZGV4LCExKSx0aGlzLnNldFNlbGVjdGVkKHMsITApKX1yZXR1cm4gdGhpcy5yZW5kZXIoKSxUPW51bGwsdGhpcy4kZWxlbWVudH0sY2hhbmdlQWxsOmZ1bmN0aW9uKGUpe2lmKHRoaXMubXVsdGlwbGUpe3ZvaWQgMD09PWUmJihlPSEwKTt2YXIgdD10aGlzLiRlbGVtZW50WzBdLGk9MCxzPTAsbj1PKHQpO3QuY2xhc3NMaXN0LmFkZChcImJzLXNlbGVjdC1oaWRkZW5cIik7Zm9yKHZhciBvPTAscj10aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50LmVsZW1lbnRzLmxlbmd0aDtvPHI7bysrKXt2YXIgbD10aGlzLnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbb10sYT1sLm9wdGlvbjthJiYhbC5kaXNhYmxlZCYmXCJkaXZpZGVyXCIhPT1sLnR5cGUmJihsLnNlbGVjdGVkJiZpKyssKGEuc2VsZWN0ZWQ9ZSkmJnMrKyl9dC5jbGFzc0xpc3QucmVtb3ZlKFwiYnMtc2VsZWN0LWhpZGRlblwiKSxpIT09cyYmKHRoaXMuc2V0T3B0aW9uU3RhdHVzKCksVD1bbnVsbCxudWxsLG5dLHRoaXMuJGVsZW1lbnQudHJpZ2dlck5hdGl2ZShcImNoYW5nZVwiKSl9fSxzZWxlY3RBbGw6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jaGFuZ2VBbGwoITApfSxkZXNlbGVjdEFsbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNoYW5nZUFsbCghMSl9LHRvZ2dsZTpmdW5jdGlvbihlKXsoZT1lfHx3aW5kb3cuZXZlbnQpJiZlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMuJGJ1dHRvbi50cmlnZ2VyKFwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIil9LGtleWRvd246ZnVuY3Rpb24oZSl7dmFyIHQsaSxzLG4sbyxyPXoodGhpcyksbD1yLmhhc0NsYXNzKFwiZHJvcGRvd24tdG9nZ2xlXCIpLGE9KGw/ci5jbG9zZXN0KFwiLmRyb3Bkb3duXCIpOnIuY2xvc2VzdChWLk1FTlUpKS5kYXRhKFwidGhpc1wiKSxjPWEuZmluZExpcygpLGQ9ITEsaD1lLndoaWNoPT09SCYmIWwmJiFhLm9wdGlvbnMuc2VsZWN0T25UYWIscD1fLnRlc3QoZS53aGljaCl8fGgsdT1hLiRtZW51SW5uZXJbMF0uc2Nyb2xsVG9wLGY9ITA9PT1hLmlzVmlydHVhbCgpP2Euc2VsZWN0cGlja2VyLnZpZXcucG9zaXRpb24wOjA7aWYoIShpPWEuJG5ld0VsZW1lbnQuaGFzQ2xhc3Moai5TSE9XKSkmJihwfHw0ODw9ZS53aGljaCYmZS53aGljaDw9NTd8fDk2PD1lLndoaWNoJiZlLndoaWNoPD0xMDV8fDY1PD1lLndoaWNoJiZlLndoaWNoPD05MCkmJihhLiRidXR0b24udHJpZ2dlcihcImNsaWNrLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIpLGEub3B0aW9ucy5saXZlU2VhcmNoKSlhLiRzZWFyY2hib3gudHJpZ2dlcihcImZvY3VzXCIpO2Vsc2V7aWYoZS53aGljaD09PUwmJmkmJihlLnByZXZlbnREZWZhdWx0KCksYS4kYnV0dG9uLnRyaWdnZXIoXCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiKS50cmlnZ2VyKFwiZm9jdXNcIikpLHApe2lmKCFjLmxlbmd0aClyZXR1cm47LTEhPT0odD0ocz1hLnNlbGVjdHBpY2tlci5tYWluLmVsZW1lbnRzW2EuYWN0aXZlSW5kZXhdKT9BcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKHMucGFyZW50RWxlbWVudC5jaGlsZHJlbixzKTotMSkmJmEuZGVmb2N1c0l0ZW0ocyksZS53aGljaD09PUI/KC0xIT09dCYmdC0tLHQrZjwwJiYodCs9Yy5sZW5ndGgpLGEuc2VsZWN0cGlja2VyLnZpZXcuY2FuSGlnaGxpZ2h0W3QrZl18fC0xPT09KHQ9YS5zZWxlY3RwaWNrZXIudmlldy5jYW5IaWdobGlnaHQuc2xpY2UoMCx0K2YpLmxhc3RJbmRleE9mKCEwKS1mKSYmKHQ9Yy5sZW5ndGgtMSkpOihlLndoaWNoPT09V3x8aCkmJigrK3QrZj49YS5zZWxlY3RwaWNrZXIudmlldy5jYW5IaWdobGlnaHQubGVuZ3RoJiYodD0wKSxhLnNlbGVjdHBpY2tlci52aWV3LmNhbkhpZ2hsaWdodFt0K2ZdfHwodD10KzErYS5zZWxlY3RwaWNrZXIudmlldy5jYW5IaWdobGlnaHQuc2xpY2UodCtmKzEpLmluZGV4T2YoITApKSksZS5wcmV2ZW50RGVmYXVsdCgpO3ZhciBtPWYrdDtlLndoaWNoPT09Qj8wPT09ZiYmdD09PWMubGVuZ3RoLTE/KGEuJG1lbnVJbm5lclswXS5zY3JvbGxUb3A9YS4kbWVudUlubmVyWzBdLnNjcm9sbEhlaWdodCxtPWEuc2VsZWN0cGlja2VyLmN1cnJlbnQuZWxlbWVudHMubGVuZ3RoLTEpOmQ9KG89KG49YS5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhW21dKS5wb3NpdGlvbi1uLmhlaWdodCk8dTooZS53aGljaD09PVd8fGgpJiYoMD09PXQ/bT1hLiRtZW51SW5uZXJbMF0uc2Nyb2xsVG9wPTA6ZD11PChvPShuPWEuc2VsZWN0cGlja2VyLmN1cnJlbnQuZGF0YVttXSkucG9zaXRpb24tYS5zaXplSW5mby5tZW51SW5uZXJIZWlnaHQpKSxzPWEuc2VsZWN0cGlja2VyLmN1cnJlbnQuZWxlbWVudHNbbV0sYS5hY3RpdmVJbmRleD1hLnNlbGVjdHBpY2tlci5jdXJyZW50LmRhdGFbbV0uaW5kZXgsYS5mb2N1c0l0ZW0ocyksYS5zZWxlY3RwaWNrZXIudmlldy5jdXJyZW50QWN0aXZlPXMsZCYmKGEuJG1lbnVJbm5lclswXS5zY3JvbGxUb3A9byksYS5vcHRpb25zLmxpdmVTZWFyY2g/YS4kc2VhcmNoYm94LnRyaWdnZXIoXCJmb2N1c1wiKTpyLnRyaWdnZXIoXCJmb2N1c1wiKX1lbHNlIGlmKCFyLmlzKFwiaW5wdXRcIikmJiFHLnRlc3QoZS53aGljaCl8fGUud2hpY2g9PT1EJiZhLnNlbGVjdHBpY2tlci5rZXlkb3duLmtleUhpc3Rvcnkpe3ZhciB2LGcsYj1bXTtlLnByZXZlbnREZWZhdWx0KCksYS5zZWxlY3RwaWNrZXIua2V5ZG93bi5rZXlIaXN0b3J5Kz1DW2Uud2hpY2hdLGEuc2VsZWN0cGlja2VyLmtleWRvd24ucmVzZXRLZXlIaXN0b3J5LmNhbmNlbCYmY2xlYXJUaW1lb3V0KGEuc2VsZWN0cGlja2VyLmtleWRvd24ucmVzZXRLZXlIaXN0b3J5LmNhbmNlbCksYS5zZWxlY3RwaWNrZXIua2V5ZG93bi5yZXNldEtleUhpc3RvcnkuY2FuY2VsPWEuc2VsZWN0cGlja2VyLmtleWRvd24ucmVzZXRLZXlIaXN0b3J5LnN0YXJ0KCksZz1hLnNlbGVjdHBpY2tlci5rZXlkb3duLmtleUhpc3RvcnksL14oLilcXDErJC8udGVzdChnKSYmKGc9Zy5jaGFyQXQoMCkpO2Zvcih2YXIgdz0wO3c8YS5zZWxlY3RwaWNrZXIuY3VycmVudC5kYXRhLmxlbmd0aDt3Kyspe3ZhciBJPWEuc2VsZWN0cGlja2VyLmN1cnJlbnQuZGF0YVt3XTtrKEksZyxcInN0YXJ0c1dpdGhcIiwhMCkmJmEuc2VsZWN0cGlja2VyLnZpZXcuY2FuSGlnaGxpZ2h0W3ddJiZiLnB1c2goSS5pbmRleCl9aWYoYi5sZW5ndGgpe3ZhciB4PTA7Yy5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKS5maW5kKFwiYVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKSwxPT09Zy5sZW5ndGgmJigtMT09PSh4PWIuaW5kZXhPZihhLmFjdGl2ZUluZGV4KSl8fHg9PT1iLmxlbmd0aC0xP3g9MDp4KyspLHY9Ylt4XSxkPTA8dS0obj1hLnNlbGVjdHBpY2tlci5tYWluLmRhdGFbdl0pLnBvc2l0aW9uPyhvPW4ucG9zaXRpb24tbi5oZWlnaHQsITApOihvPW4ucG9zaXRpb24tYS5zaXplSW5mby5tZW51SW5uZXJIZWlnaHQsbi5wb3NpdGlvbj51K2Euc2l6ZUluZm8ubWVudUlubmVySGVpZ2h0KSxzPWEuc2VsZWN0cGlja2VyLm1haW4uZWxlbWVudHNbdl0sYS5hY3RpdmVJbmRleD1iW3hdLGEuZm9jdXNJdGVtKHMpLHMmJnMuZmlyc3RDaGlsZC5mb2N1cygpLGQmJihhLiRtZW51SW5uZXJbMF0uc2Nyb2xsVG9wPW8pLHIudHJpZ2dlcihcImZvY3VzXCIpfX1pJiYoZS53aGljaD09PUQmJiFhLnNlbGVjdHBpY2tlci5rZXlkb3duLmtleUhpc3Rvcnl8fGUud2hpY2g9PT1OfHxlLndoaWNoPT09SCYmYS5vcHRpb25zLnNlbGVjdE9uVGFiKSYmKGUud2hpY2ghPT1EJiZlLnByZXZlbnREZWZhdWx0KCksYS5vcHRpb25zLmxpdmVTZWFyY2gmJmUud2hpY2g9PT1EfHwoYS4kbWVudUlubmVyLmZpbmQoXCIuYWN0aXZlIGFcIikudHJpZ2dlcihcImNsaWNrXCIsITApLHIudHJpZ2dlcihcImZvY3VzXCIpLGEub3B0aW9ucy5saXZlU2VhcmNofHwoZS5wcmV2ZW50RGVmYXVsdCgpLHooZG9jdW1lbnQpLmRhdGEoXCJzcGFjZVNlbGVjdFwiLCEwKSkpKX19LG1vYmlsZTpmdW5jdGlvbigpe3RoaXMuJGVsZW1lbnRbMF0uY2xhc3NMaXN0LmFkZChcIm1vYmlsZS1kZXZpY2VcIil9LHJlZnJlc2g6ZnVuY3Rpb24oKXt2YXIgZT16LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMsdGhpcy4kZWxlbWVudC5kYXRhKCkpO3RoaXMub3B0aW9ucz1lLHRoaXMuY2hlY2tEaXNhYmxlZCgpLHRoaXMuc2V0U3R5bGUoKSx0aGlzLnJlbmRlcigpLHRoaXMuY3JlYXRlTGkoKSx0aGlzLnNldFdpZHRoKCksdGhpcy5zZXRTaXplKCEwKSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoXCJyZWZyZXNoZWRcIitVKX0saGlkZTpmdW5jdGlvbigpe3RoaXMuJG5ld0VsZW1lbnQuaGlkZSgpfSxzaG93OmZ1bmN0aW9uKCl7dGhpcy4kbmV3RWxlbWVudC5zaG93KCl9LHJlbW92ZTpmdW5jdGlvbigpe3RoaXMuJG5ld0VsZW1lbnQucmVtb3ZlKCksdGhpcy4kZWxlbWVudC5yZW1vdmUoKX0sZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuJG5ld0VsZW1lbnQuYmVmb3JlKHRoaXMuJGVsZW1lbnQpLnJlbW92ZSgpLHRoaXMuJGJzQ29udGFpbmVyP3RoaXMuJGJzQ29udGFpbmVyLnJlbW92ZSgpOnRoaXMuJG1lbnUucmVtb3ZlKCksdGhpcy4kZWxlbWVudC5vZmYoVSkucmVtb3ZlRGF0YShcInNlbGVjdHBpY2tlclwiKS5yZW1vdmVDbGFzcyhcImJzLXNlbGVjdC1oaWRkZW4gc2VsZWN0cGlja2VyXCIpLHood2luZG93KS5vZmYoVStcIi5cIit0aGlzLnNlbGVjdElkKX19O3ZhciBYPXouZm4uc2VsZWN0cGlja2VyO3ouZm4uc2VsZWN0cGlja2VyPVEsei5mbi5zZWxlY3RwaWNrZXIuQ29uc3RydWN0b3I9Six6LmZuLnNlbGVjdHBpY2tlci5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHouZm4uc2VsZWN0cGlja2VyPVgsdGhpc30seihkb2N1bWVudCkub2ZmKFwia2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaVwiKS5vbihcImtleWRvd25cIitVLCcuYm9vdHN0cmFwLXNlbGVjdCBbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSwgLmJvb3RzdHJhcC1zZWxlY3QgW3JvbGU9XCJsaXN0Ym94XCJdLCAuYm9vdHN0cmFwLXNlbGVjdCAuYnMtc2VhcmNoYm94IGlucHV0JyxKLnByb3RvdHlwZS5rZXlkb3duKS5vbihcImZvY3VzaW4ubW9kYWxcIiwnLmJvb3RzdHJhcC1zZWxlY3QgW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0sIC5ib290c3RyYXAtc2VsZWN0IFtyb2xlPVwibGlzdGJveFwiXSwgLmJvb3RzdHJhcC1zZWxlY3QgLmJzLXNlYXJjaGJveCBpbnB1dCcsZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKX0pLHood2luZG93KS5vbihcImxvYWRcIitVK1wiLmRhdGEtYXBpXCIsZnVuY3Rpb24oKXt6KFwiLnNlbGVjdHBpY2tlclwiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9eih0aGlzKTtRLmNhbGwoZSxlLmRhdGEoKSl9KX0pfShlKX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwLXNlbGVjdC5taW4uanMubWFwIiwiLyohXG4gKiBCb290c3RyYXAtc2VsZWN0IHYxLjEzLjEwIChodHRwczovL2RldmVsb3Blci5zbmFwYXBwb2ludG1lbnRzLmNvbS9ib290c3RyYXAtc2VsZWN0KVxuICpcbiAqIENvcHlyaWdodCAyMDEyLTIwMTkgU25hcEFwcG9pbnRtZW50cywgTExDXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS9zbmFwYXBwb2ludG1lbnRzL2Jvb3RzdHJhcC1zZWxlY3QvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqL1xuXG4hZnVuY3Rpb24oZSx0KXt2b2lkIDA9PT1lJiZ2b2lkIDAhPT13aW5kb3cmJihlPXdpbmRvdyksXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJqcXVlcnlcIl0sZnVuY3Rpb24oZSl7cmV0dXJuIHQoZSl9KTpcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz10KHJlcXVpcmUoXCJqcXVlcnlcIikpOnQoZS5qUXVlcnkpfSh0aGlzLGZ1bmN0aW9uKGUpe2UuZm4uc2VsZWN0cGlja2VyLmRlZmF1bHRzPXtub25lU2VsZWN0ZWRUZXh0OlwiXFx1MDQxZFxcdTA0MzhcXHUwNDQ3XFx1MDQzNVxcdTA0MzNcXHUwNDNlIFxcdTA0M2RcXHUwNDM1IFxcdTA0MzJcXHUwNDRiXFx1MDQzMVxcdTA0NDBcXHUwNDMwXFx1MDQzZFxcdTA0M2VcIixub25lUmVzdWx0c1RleHQ6XCJcXHUwNDIxXFx1MDQzZVxcdTA0MzJcXHUwNDNmXFx1MDQzMFxcdTA0MzRcXHUwNDM1XFx1MDQzZFxcdTA0MzhcXHUwNDM5IFxcdTA0M2RcXHUwNDM1IFxcdTA0M2RcXHUwNDMwXFx1MDQzOVxcdTA0MzRcXHUwNDM1XFx1MDQzZFxcdTA0M2UgezB9XCIsY291bnRTZWxlY3RlZFRleHQ6XCJcXHUwNDEyXFx1MDQ0YlxcdTA0MzFcXHUwNDQwXFx1MDQzMFxcdTA0M2RcXHUwNDNlIHswfSBcXHUwNDM4XFx1MDQzNyB7MX1cIixtYXhPcHRpb25zVGV4dDpbXCJcXHUwNDE0XFx1MDQzZVxcdTA0NDFcXHUwNDQyXFx1MDQzOFxcdTA0MzNcXHUwNDNkXFx1MDQ0M1xcdTA0NDIgXFx1MDQzZlxcdTA0NDBcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDNiICh7bn0ge3Zhcn0gXFx1MDQzY1xcdTA0MzBcXHUwNDNhXFx1MDQ0MVxcdTA0MzhcXHUwNDNjXFx1MDQ0M1xcdTA0M2MpXCIsXCJcXHUwNDE0XFx1MDQzZVxcdTA0NDFcXHUwNDQyXFx1MDQzOFxcdTA0MzNcXHUwNDNkXFx1MDQ0M1xcdTA0NDIgXFx1MDQzZlxcdTA0NDBcXHUwNDM1XFx1MDQzNFxcdTA0MzVcXHUwNDNiIFxcdTA0MzIgXFx1MDQzM1xcdTA0NDBcXHUwNDQzXFx1MDQzZlxcdTA0M2ZcXHUwNDM1ICh7bn0ge3Zhcn0gXFx1MDQzY1xcdTA0MzBcXHUwNDNhXFx1MDQ0MVxcdTA0MzhcXHUwNDNjXFx1MDQ0M1xcdTA0M2MpXCIsW1wiXFx1MDQ0OFxcdTA0NDIuXCIsXCJcXHUwNDQ4XFx1MDQ0Mi5cIl1dLGRvbmVCdXR0b25UZXh0OlwiXFx1MDQxN1xcdTA0MzBcXHUwNDNhXFx1MDQ0MFxcdTA0NGJcXHUwNDQyXFx1MDQ0Y1wiLHNlbGVjdEFsbFRleHQ6XCJcXHUwNDEyXFx1MDQ0YlxcdTA0MzFcXHUwNDQwXFx1MDQzMFxcdTA0NDJcXHUwNDRjIFxcdTA0MzJcXHUwNDQxXFx1MDQzNVwiLGRlc2VsZWN0QWxsVGV4dDpcIlxcdTA0MWVcXHUwNDQyXFx1MDQzY1xcdTA0MzVcXHUwNDNkXFx1MDQzOFxcdTA0NDJcXHUwNDRjIFxcdTA0MzJcXHUwNDQxXFx1MDQzNVwiLG11bHRpcGxlU2VwYXJhdG9yOlwiLCBcIn19KTsiLCIvKiEgalF1ZXJ5IFVJIC0gdjEuMTIuMSAtIDIwMTYtMDktMTRcbiogaHR0cDovL2pxdWVyeXVpLmNvbVxuKiBJbmNsdWRlczogd2lkZ2V0LmpzLCBwb3NpdGlvbi5qcywgZGF0YS5qcywgZGlzYWJsZS1zZWxlY3Rpb24uanMsIGVmZmVjdC5qcywgZWZmZWN0cy9lZmZlY3QtYmxpbmQuanMsIGVmZmVjdHMvZWZmZWN0LWJvdW5jZS5qcywgZWZmZWN0cy9lZmZlY3QtY2xpcC5qcywgZWZmZWN0cy9lZmZlY3QtZHJvcC5qcywgZWZmZWN0cy9lZmZlY3QtZXhwbG9kZS5qcywgZWZmZWN0cy9lZmZlY3QtZmFkZS5qcywgZWZmZWN0cy9lZmZlY3QtZm9sZC5qcywgZWZmZWN0cy9lZmZlY3QtaGlnaGxpZ2h0LmpzLCBlZmZlY3RzL2VmZmVjdC1wdWZmLmpzLCBlZmZlY3RzL2VmZmVjdC1wdWxzYXRlLmpzLCBlZmZlY3RzL2VmZmVjdC1zY2FsZS5qcywgZWZmZWN0cy9lZmZlY3Qtc2hha2UuanMsIGVmZmVjdHMvZWZmZWN0LXNpemUuanMsIGVmZmVjdHMvZWZmZWN0LXNsaWRlLmpzLCBlZmZlY3RzL2VmZmVjdC10cmFuc2Zlci5qcywgZm9jdXNhYmxlLmpzLCBmb3JtLXJlc2V0LW1peGluLmpzLCBqcXVlcnktMS03LmpzLCBrZXljb2RlLmpzLCBsYWJlbHMuanMsIHNjcm9sbC1wYXJlbnQuanMsIHRhYmJhYmxlLmpzLCB1bmlxdWUtaWQuanMsIHdpZGdldHMvYWNjb3JkaW9uLmpzLCB3aWRnZXRzL2F1dG9jb21wbGV0ZS5qcywgd2lkZ2V0cy9idXR0b24uanMsIHdpZGdldHMvY2hlY2tib3hyYWRpby5qcywgd2lkZ2V0cy9jb250cm9sZ3JvdXAuanMsIHdpZGdldHMvZGF0ZXBpY2tlci5qcywgd2lkZ2V0cy9kaWFsb2cuanMsIHdpZGdldHMvZHJhZ2dhYmxlLmpzLCB3aWRnZXRzL2Ryb3BwYWJsZS5qcywgd2lkZ2V0cy9tZW51LmpzLCB3aWRnZXRzL21vdXNlLmpzLCB3aWRnZXRzL3Byb2dyZXNzYmFyLmpzLCB3aWRnZXRzL3Jlc2l6YWJsZS5qcywgd2lkZ2V0cy9zZWxlY3RhYmxlLmpzLCB3aWRnZXRzL3NlbGVjdG1lbnUuanMsIHdpZGdldHMvc2xpZGVyLmpzLCB3aWRnZXRzL3NvcnRhYmxlLmpzLCB3aWRnZXRzL3NwaW5uZXIuanMsIHdpZGdldHMvdGFicy5qcywgd2lkZ2V0cy90b29sdGlwLmpzXG4qIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzOyBMaWNlbnNlZCBNSVQgKi9cblxuKGZ1bmN0aW9uKHQpe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wianF1ZXJ5XCJdLHQpOnQoalF1ZXJ5KX0pKGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUodCl7Zm9yKHZhciBlPXQuY3NzKFwidmlzaWJpbGl0eVwiKTtcImluaGVyaXRcIj09PWU7KXQ9dC5wYXJlbnQoKSxlPXQuY3NzKFwidmlzaWJpbGl0eVwiKTtyZXR1cm5cImhpZGRlblwiIT09ZX1mdW5jdGlvbiBpKHQpe2Zvcih2YXIgZSxpO3QubGVuZ3RoJiZ0WzBdIT09ZG9jdW1lbnQ7KXtpZihlPXQuY3NzKFwicG9zaXRpb25cIiksKFwiYWJzb2x1dGVcIj09PWV8fFwicmVsYXRpdmVcIj09PWV8fFwiZml4ZWRcIj09PWUpJiYoaT1wYXJzZUludCh0LmNzcyhcInpJbmRleFwiKSwxMCksIWlzTmFOKGkpJiYwIT09aSkpcmV0dXJuIGk7dD10LnBhcmVudCgpfXJldHVybiAwfWZ1bmN0aW9uIHMoKXt0aGlzLl9jdXJJbnN0PW51bGwsdGhpcy5fa2V5RXZlbnQ9ITEsdGhpcy5fZGlzYWJsZWRJbnB1dHM9W10sdGhpcy5fZGF0ZXBpY2tlclNob3dpbmc9ITEsdGhpcy5faW5EaWFsb2c9ITEsdGhpcy5fbWFpbkRpdklkPVwidWktZGF0ZXBpY2tlci1kaXZcIix0aGlzLl9pbmxpbmVDbGFzcz1cInVpLWRhdGVwaWNrZXItaW5saW5lXCIsdGhpcy5fYXBwZW5kQ2xhc3M9XCJ1aS1kYXRlcGlja2VyLWFwcGVuZFwiLHRoaXMuX3RyaWdnZXJDbGFzcz1cInVpLWRhdGVwaWNrZXItdHJpZ2dlclwiLHRoaXMuX2RpYWxvZ0NsYXNzPVwidWktZGF0ZXBpY2tlci1kaWFsb2dcIix0aGlzLl9kaXNhYmxlQ2xhc3M9XCJ1aS1kYXRlcGlja2VyLWRpc2FibGVkXCIsdGhpcy5fdW5zZWxlY3RhYmxlQ2xhc3M9XCJ1aS1kYXRlcGlja2VyLXVuc2VsZWN0YWJsZVwiLHRoaXMuX2N1cnJlbnRDbGFzcz1cInVpLWRhdGVwaWNrZXItY3VycmVudC1kYXlcIix0aGlzLl9kYXlPdmVyQ2xhc3M9XCJ1aS1kYXRlcGlja2VyLWRheXMtY2VsbC1vdmVyXCIsdGhpcy5yZWdpb25hbD1bXSx0aGlzLnJlZ2lvbmFsW1wiXCJdPXtjbG9zZVRleHQ6XCJEb25lXCIscHJldlRleHQ6XCJQcmV2XCIsbmV4dFRleHQ6XCJOZXh0XCIsY3VycmVudFRleHQ6XCJUb2RheVwiLG1vbnRoTmFtZXM6W1wiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdLG1vbnRoTmFtZXNTaG9ydDpbXCJKYW5cIixcIkZlYlwiLFwiTWFyXCIsXCJBcHJcIixcIk1heVwiLFwiSnVuXCIsXCJKdWxcIixcIkF1Z1wiLFwiU2VwXCIsXCJPY3RcIixcIk5vdlwiLFwiRGVjXCJdLGRheU5hbWVzOltcIlN1bmRheVwiLFwiTW9uZGF5XCIsXCJUdWVzZGF5XCIsXCJXZWRuZXNkYXlcIixcIlRodXJzZGF5XCIsXCJGcmlkYXlcIixcIlNhdHVyZGF5XCJdLGRheU5hbWVzU2hvcnQ6W1wiU3VuXCIsXCJNb25cIixcIlR1ZVwiLFwiV2VkXCIsXCJUaHVcIixcIkZyaVwiLFwiU2F0XCJdLGRheU5hbWVzTWluOltcIlN1XCIsXCJNb1wiLFwiVHVcIixcIldlXCIsXCJUaFwiLFwiRnJcIixcIlNhXCJdLHdlZWtIZWFkZXI6XCJXa1wiLGRhdGVGb3JtYXQ6XCJtbS9kZC95eVwiLGZpcnN0RGF5OjAsaXNSVEw6ITEsc2hvd01vbnRoQWZ0ZXJZZWFyOiExLHllYXJTdWZmaXg6XCJcIn0sdGhpcy5fZGVmYXVsdHM9e3Nob3dPbjpcImZvY3VzXCIsc2hvd0FuaW06XCJmYWRlSW5cIixzaG93T3B0aW9uczp7fSxkZWZhdWx0RGF0ZTpudWxsLGFwcGVuZFRleHQ6XCJcIixidXR0b25UZXh0OlwiLi4uXCIsYnV0dG9uSW1hZ2U6XCJcIixidXR0b25JbWFnZU9ubHk6ITEsaGlkZUlmTm9QcmV2TmV4dDohMSxuYXZpZ2F0aW9uQXNEYXRlRm9ybWF0OiExLGdvdG9DdXJyZW50OiExLGNoYW5nZU1vbnRoOiExLGNoYW5nZVllYXI6ITEseWVhclJhbmdlOlwiYy0xMDpjKzEwXCIsc2hvd090aGVyTW9udGhzOiExLHNlbGVjdE90aGVyTW9udGhzOiExLHNob3dXZWVrOiExLGNhbGN1bGF0ZVdlZWs6dGhpcy5pc284NjAxV2VlayxzaG9ydFllYXJDdXRvZmY6XCIrMTBcIixtaW5EYXRlOm51bGwsbWF4RGF0ZTpudWxsLGR1cmF0aW9uOlwiZmFzdFwiLGJlZm9yZVNob3dEYXk6bnVsbCxiZWZvcmVTaG93Om51bGwsb25TZWxlY3Q6bnVsbCxvbkNoYW5nZU1vbnRoWWVhcjpudWxsLG9uQ2xvc2U6bnVsbCxudW1iZXJPZk1vbnRoczoxLHNob3dDdXJyZW50QXRQb3M6MCxzdGVwTW9udGhzOjEsc3RlcEJpZ01vbnRoczoxMixhbHRGaWVsZDpcIlwiLGFsdEZvcm1hdDpcIlwiLGNvbnN0cmFpbklucHV0OiEwLHNob3dCdXR0b25QYW5lbDohMSxhdXRvU2l6ZTohMSxkaXNhYmxlZDohMX0sdC5leHRlbmQodGhpcy5fZGVmYXVsdHMsdGhpcy5yZWdpb25hbFtcIlwiXSksdGhpcy5yZWdpb25hbC5lbj10LmV4dGVuZCghMCx7fSx0aGlzLnJlZ2lvbmFsW1wiXCJdKSx0aGlzLnJlZ2lvbmFsW1wiZW4tVVNcIl09dC5leHRlbmQoITAse30sdGhpcy5yZWdpb25hbC5lbiksdGhpcy5kcERpdj1uKHQoXCI8ZGl2IGlkPSdcIit0aGlzLl9tYWluRGl2SWQrXCInIGNsYXNzPSd1aS1kYXRlcGlja2VyIHVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1oZWxwZXItY2xlYXJmaXggdWktY29ybmVyLWFsbCc+PC9kaXY+XCIpKX1mdW5jdGlvbiBuKGUpe3ZhciBpPVwiYnV0dG9uLCAudWktZGF0ZXBpY2tlci1wcmV2LCAudWktZGF0ZXBpY2tlci1uZXh0LCAudWktZGF0ZXBpY2tlci1jYWxlbmRhciB0ZCBhXCI7cmV0dXJuIGUub24oXCJtb3VzZW91dFwiLGksZnVuY3Rpb24oKXt0KHRoaXMpLnJlbW92ZUNsYXNzKFwidWktc3RhdGUtaG92ZXJcIiksLTEhPT10aGlzLmNsYXNzTmFtZS5pbmRleE9mKFwidWktZGF0ZXBpY2tlci1wcmV2XCIpJiZ0KHRoaXMpLnJlbW92ZUNsYXNzKFwidWktZGF0ZXBpY2tlci1wcmV2LWhvdmVyXCIpLC0xIT09dGhpcy5jbGFzc05hbWUuaW5kZXhPZihcInVpLWRhdGVwaWNrZXItbmV4dFwiKSYmdCh0aGlzKS5yZW1vdmVDbGFzcyhcInVpLWRhdGVwaWNrZXItbmV4dC1ob3ZlclwiKX0pLm9uKFwibW91c2VvdmVyXCIsaSxvKX1mdW5jdGlvbiBvKCl7dC5kYXRlcGlja2VyLl9pc0Rpc2FibGVkRGF0ZXBpY2tlcihtLmlubGluZT9tLmRwRGl2LnBhcmVudCgpWzBdOm0uaW5wdXRbMF0pfHwodCh0aGlzKS5wYXJlbnRzKFwiLnVpLWRhdGVwaWNrZXItY2FsZW5kYXJcIikuZmluZChcImFcIikucmVtb3ZlQ2xhc3MoXCJ1aS1zdGF0ZS1ob3ZlclwiKSx0KHRoaXMpLmFkZENsYXNzKFwidWktc3RhdGUtaG92ZXJcIiksLTEhPT10aGlzLmNsYXNzTmFtZS5pbmRleE9mKFwidWktZGF0ZXBpY2tlci1wcmV2XCIpJiZ0KHRoaXMpLmFkZENsYXNzKFwidWktZGF0ZXBpY2tlci1wcmV2LWhvdmVyXCIpLC0xIT09dGhpcy5jbGFzc05hbWUuaW5kZXhPZihcInVpLWRhdGVwaWNrZXItbmV4dFwiKSYmdCh0aGlzKS5hZGRDbGFzcyhcInVpLWRhdGVwaWNrZXItbmV4dC1ob3ZlclwiKSl9ZnVuY3Rpb24gYShlLGkpe3QuZXh0ZW5kKGUsaSk7Zm9yKHZhciBzIGluIGkpbnVsbD09aVtzXSYmKGVbc109aVtzXSk7cmV0dXJuIGV9ZnVuY3Rpb24gcih0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT10aGlzLmVsZW1lbnQudmFsKCk7dC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5fcmVmcmVzaCgpLGUhPT10aGlzLmVsZW1lbnQudmFsKCkmJnRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIil9fXQudWk9dC51aXx8e30sdC51aS52ZXJzaW9uPVwiMS4xMi4xXCI7dmFyIGg9MCxsPUFycmF5LnByb3RvdHlwZS5zbGljZTt0LmNsZWFuRGF0YT1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oaSl7dmFyIHMsbixvO2ZvcihvPTA7bnVsbCE9KG49aVtvXSk7bysrKXRyeXtzPXQuX2RhdGEobixcImV2ZW50c1wiKSxzJiZzLnJlbW92ZSYmdChuKS50cmlnZ2VySGFuZGxlcihcInJlbW92ZVwiKX1jYXRjaChhKXt9ZShpKX19KHQuY2xlYW5EYXRhKSx0LndpZGdldD1mdW5jdGlvbihlLGkscyl7dmFyIG4sbyxhLHI9e30saD1lLnNwbGl0KFwiLlwiKVswXTtlPWUuc3BsaXQoXCIuXCIpWzFdO3ZhciBsPWgrXCItXCIrZTtyZXR1cm4gc3x8KHM9aSxpPXQuV2lkZ2V0KSx0LmlzQXJyYXkocykmJihzPXQuZXh0ZW5kLmFwcGx5KG51bGwsW3t9XS5jb25jYXQocykpKSx0LmV4cHJbXCI6XCJdW2wudG9Mb3dlckNhc2UoKV09ZnVuY3Rpb24oZSl7cmV0dXJuISF0LmRhdGEoZSxsKX0sdFtoXT10W2hdfHx7fSxuPXRbaF1bZV0sbz10W2hdW2VdPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2NyZWF0ZVdpZGdldD8oYXJndW1lbnRzLmxlbmd0aCYmdGhpcy5fY3JlYXRlV2lkZ2V0KHQsZSksdm9pZCAwKTpuZXcgbyh0LGUpfSx0LmV4dGVuZChvLG4se3ZlcnNpb246cy52ZXJzaW9uLF9wcm90bzp0LmV4dGVuZCh7fSxzKSxfY2hpbGRDb25zdHJ1Y3RvcnM6W119KSxhPW5ldyBpLGEub3B0aW9ucz10LndpZGdldC5leHRlbmQoe30sYS5vcHRpb25zKSx0LmVhY2gocyxmdW5jdGlvbihlLHMpe3JldHVybiB0LmlzRnVuY3Rpb24ocyk/KHJbZV09ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7cmV0dXJuIGkucHJvdG90eXBlW2VdLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1mdW5jdGlvbiBuKHQpe3JldHVybiBpLnByb3RvdHlwZVtlXS5hcHBseSh0aGlzLHQpfXJldHVybiBmdW5jdGlvbigpe3ZhciBlLGk9dGhpcy5fc3VwZXIsbz10aGlzLl9zdXBlckFwcGx5O3JldHVybiB0aGlzLl9zdXBlcj10LHRoaXMuX3N1cGVyQXBwbHk9bixlPXMuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX3N1cGVyPWksdGhpcy5fc3VwZXJBcHBseT1vLGV9fSgpLHZvaWQgMCk6KHJbZV09cyx2b2lkIDApfSksby5wcm90b3R5cGU9dC53aWRnZXQuZXh0ZW5kKGEse3dpZGdldEV2ZW50UHJlZml4Om4/YS53aWRnZXRFdmVudFByZWZpeHx8ZTplfSxyLHtjb25zdHJ1Y3RvcjpvLG5hbWVzcGFjZTpoLHdpZGdldE5hbWU6ZSx3aWRnZXRGdWxsTmFtZTpsfSksbj8odC5lYWNoKG4uX2NoaWxkQ29uc3RydWN0b3JzLGZ1bmN0aW9uKGUsaSl7dmFyIHM9aS5wcm90b3R5cGU7dC53aWRnZXQocy5uYW1lc3BhY2UrXCIuXCIrcy53aWRnZXROYW1lLG8saS5fcHJvdG8pfSksZGVsZXRlIG4uX2NoaWxkQ29uc3RydWN0b3JzKTppLl9jaGlsZENvbnN0cnVjdG9ycy5wdXNoKG8pLHQud2lkZ2V0LmJyaWRnZShlLG8pLG99LHQud2lkZ2V0LmV4dGVuZD1mdW5jdGlvbihlKXtmb3IodmFyIGkscyxuPWwuY2FsbChhcmd1bWVudHMsMSksbz0wLGE9bi5sZW5ndGg7YT5vO28rKylmb3IoaSBpbiBuW29dKXM9bltvXVtpXSxuW29dLmhhc093blByb3BlcnR5KGkpJiZ2b2lkIDAhPT1zJiYoZVtpXT10LmlzUGxhaW5PYmplY3Qocyk/dC5pc1BsYWluT2JqZWN0KGVbaV0pP3Qud2lkZ2V0LmV4dGVuZCh7fSxlW2ldLHMpOnQud2lkZ2V0LmV4dGVuZCh7fSxzKTpzKTtyZXR1cm4gZX0sdC53aWRnZXQuYnJpZGdlPWZ1bmN0aW9uKGUsaSl7dmFyIHM9aS5wcm90b3R5cGUud2lkZ2V0RnVsbE5hbWV8fGU7dC5mbltlXT1mdW5jdGlvbihuKXt2YXIgbz1cInN0cmluZ1wiPT10eXBlb2YgbixhPWwuY2FsbChhcmd1bWVudHMsMSkscj10aGlzO3JldHVybiBvP3RoaXMubGVuZ3RofHxcImluc3RhbmNlXCIhPT1uP3RoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpLG89dC5kYXRhKHRoaXMscyk7cmV0dXJuXCJpbnN0YW5jZVwiPT09bj8ocj1vLCExKTpvP3QuaXNGdW5jdGlvbihvW25dKSYmXCJfXCIhPT1uLmNoYXJBdCgwKT8oaT1vW25dLmFwcGx5KG8sYSksaSE9PW8mJnZvaWQgMCE9PWk/KHI9aSYmaS5qcXVlcnk/ci5wdXNoU3RhY2soaS5nZXQoKSk6aSwhMSk6dm9pZCAwKTp0LmVycm9yKFwibm8gc3VjaCBtZXRob2QgJ1wiK24rXCInIGZvciBcIitlK1wiIHdpZGdldCBpbnN0YW5jZVwiKTp0LmVycm9yKFwiY2Fubm90IGNhbGwgbWV0aG9kcyBvbiBcIitlK1wiIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyBcIitcImF0dGVtcHRlZCB0byBjYWxsIG1ldGhvZCAnXCIrbitcIidcIil9KTpyPXZvaWQgMDooYS5sZW5ndGgmJihuPXQud2lkZ2V0LmV4dGVuZC5hcHBseShudWxsLFtuXS5jb25jYXQoYSkpKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10LmRhdGEodGhpcyxzKTtlPyhlLm9wdGlvbihufHx7fSksZS5faW5pdCYmZS5faW5pdCgpKTp0LmRhdGEodGhpcyxzLG5ldyBpKG4sdGhpcykpfSkpLHJ9fSx0LldpZGdldD1mdW5jdGlvbigpe30sdC5XaWRnZXQuX2NoaWxkQ29uc3RydWN0b3JzPVtdLHQuV2lkZ2V0LnByb3RvdHlwZT17d2lkZ2V0TmFtZTpcIndpZGdldFwiLHdpZGdldEV2ZW50UHJlZml4OlwiXCIsZGVmYXVsdEVsZW1lbnQ6XCI8ZGl2PlwiLG9wdGlvbnM6e2NsYXNzZXM6e30sZGlzYWJsZWQ6ITEsY3JlYXRlOm51bGx9LF9jcmVhdGVXaWRnZXQ6ZnVuY3Rpb24oZSxpKXtpPXQoaXx8dGhpcy5kZWZhdWx0RWxlbWVudHx8dGhpcylbMF0sdGhpcy5lbGVtZW50PXQoaSksdGhpcy51dWlkPWgrKyx0aGlzLmV2ZW50TmFtZXNwYWNlPVwiLlwiK3RoaXMud2lkZ2V0TmFtZSt0aGlzLnV1aWQsdGhpcy5iaW5kaW5ncz10KCksdGhpcy5ob3ZlcmFibGU9dCgpLHRoaXMuZm9jdXNhYmxlPXQoKSx0aGlzLmNsYXNzZXNFbGVtZW50TG9va3VwPXt9LGkhPT10aGlzJiYodC5kYXRhKGksdGhpcy53aWRnZXRGdWxsTmFtZSx0aGlzKSx0aGlzLl9vbighMCx0aGlzLmVsZW1lbnQse3JlbW92ZTpmdW5jdGlvbih0KXt0LnRhcmdldD09PWkmJnRoaXMuZGVzdHJveSgpfX0pLHRoaXMuZG9jdW1lbnQ9dChpLnN0eWxlP2kub3duZXJEb2N1bWVudDppLmRvY3VtZW50fHxpKSx0aGlzLndpbmRvdz10KHRoaXMuZG9jdW1lbnRbMF0uZGVmYXVsdFZpZXd8fHRoaXMuZG9jdW1lbnRbMF0ucGFyZW50V2luZG93KSksdGhpcy5vcHRpb25zPXQud2lkZ2V0LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMsdGhpcy5fZ2V0Q3JlYXRlT3B0aW9ucygpLGUpLHRoaXMuX2NyZWF0ZSgpLHRoaXMub3B0aW9ucy5kaXNhYmxlZCYmdGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQodGhpcy5vcHRpb25zLmRpc2FibGVkKSx0aGlzLl90cmlnZ2VyKFwiY3JlYXRlXCIsbnVsbCx0aGlzLl9nZXRDcmVhdGVFdmVudERhdGEoKSksdGhpcy5faW5pdCgpfSxfZ2V0Q3JlYXRlT3B0aW9uczpmdW5jdGlvbigpe3JldHVybnt9fSxfZ2V0Q3JlYXRlRXZlbnREYXRhOnQubm9vcCxfY3JlYXRlOnQubm9vcCxfaW5pdDp0Lm5vb3AsZGVzdHJveTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5fZGVzdHJveSgpLHQuZWFjaCh0aGlzLmNsYXNzZXNFbGVtZW50TG9va3VwLGZ1bmN0aW9uKHQsaSl7ZS5fcmVtb3ZlQ2xhc3MoaSx0KX0pLHRoaXMuZWxlbWVudC5vZmYodGhpcy5ldmVudE5hbWVzcGFjZSkucmVtb3ZlRGF0YSh0aGlzLndpZGdldEZ1bGxOYW1lKSx0aGlzLndpZGdldCgpLm9mZih0aGlzLmV2ZW50TmFtZXNwYWNlKS5yZW1vdmVBdHRyKFwiYXJpYS1kaXNhYmxlZFwiKSx0aGlzLmJpbmRpbmdzLm9mZih0aGlzLmV2ZW50TmFtZXNwYWNlKX0sX2Rlc3Ryb3k6dC5ub29wLHdpZGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnR9LG9wdGlvbjpmdW5jdGlvbihlLGkpe3ZhciBzLG4sbyxhPWU7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHQud2lkZ2V0LmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBlKWlmKGE9e30scz1lLnNwbGl0KFwiLlwiKSxlPXMuc2hpZnQoKSxzLmxlbmd0aCl7Zm9yKG49YVtlXT10LndpZGdldC5leHRlbmQoe30sdGhpcy5vcHRpb25zW2VdKSxvPTA7cy5sZW5ndGgtMT5vO28rKyluW3Nbb11dPW5bc1tvXV18fHt9LG49bltzW29dXTtpZihlPXMucG9wKCksMT09PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZvaWQgMD09PW5bZV0/bnVsbDpuW2VdO25bZV09aX1lbHNle2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB2b2lkIDA9PT10aGlzLm9wdGlvbnNbZV0/bnVsbDp0aGlzLm9wdGlvbnNbZV07YVtlXT1pfXJldHVybiB0aGlzLl9zZXRPcHRpb25zKGEpLHRoaXN9LF9zZXRPcHRpb25zOmZ1bmN0aW9uKHQpe3ZhciBlO2ZvcihlIGluIHQpdGhpcy5fc2V0T3B0aW9uKGUsdFtlXSk7cmV0dXJuIHRoaXN9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXtyZXR1cm5cImNsYXNzZXNcIj09PXQmJnRoaXMuX3NldE9wdGlvbkNsYXNzZXMoZSksdGhpcy5vcHRpb25zW3RdPWUsXCJkaXNhYmxlZFwiPT09dCYmdGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQoZSksdGhpc30sX3NldE9wdGlvbkNsYXNzZXM6ZnVuY3Rpb24oZSl7dmFyIGkscyxuO2ZvcihpIGluIGUpbj10aGlzLmNsYXNzZXNFbGVtZW50TG9va3VwW2ldLGVbaV0hPT10aGlzLm9wdGlvbnMuY2xhc3Nlc1tpXSYmbiYmbi5sZW5ndGgmJihzPXQobi5nZXQoKSksdGhpcy5fcmVtb3ZlQ2xhc3MobixpKSxzLmFkZENsYXNzKHRoaXMuX2NsYXNzZXMoe2VsZW1lbnQ6cyxrZXlzOmksY2xhc3NlczplLGFkZDohMH0pKSl9LF9zZXRPcHRpb25EaXNhYmxlZDpmdW5jdGlvbih0KXt0aGlzLl90b2dnbGVDbGFzcyh0aGlzLndpZGdldCgpLHRoaXMud2lkZ2V0RnVsbE5hbWUrXCItZGlzYWJsZWRcIixudWxsLCEhdCksdCYmKHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaG92ZXJhYmxlLG51bGwsXCJ1aS1zdGF0ZS1ob3ZlclwiKSx0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmZvY3VzYWJsZSxudWxsLFwidWktc3RhdGUtZm9jdXNcIikpfSxlbmFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2V0T3B0aW9ucyh7ZGlzYWJsZWQ6ITF9KX0sZGlzYWJsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZXRPcHRpb25zKHtkaXNhYmxlZDohMH0pfSxfY2xhc3NlczpmdW5jdGlvbihlKXtmdW5jdGlvbiBpKGksbyl7dmFyIGEscjtmb3Iocj0wO2kubGVuZ3RoPnI7cisrKWE9bi5jbGFzc2VzRWxlbWVudExvb2t1cFtpW3JdXXx8dCgpLGE9ZS5hZGQ/dCh0LnVuaXF1ZShhLmdldCgpLmNvbmNhdChlLmVsZW1lbnQuZ2V0KCkpKSk6dChhLm5vdChlLmVsZW1lbnQpLmdldCgpKSxuLmNsYXNzZXNFbGVtZW50TG9va3VwW2lbcl1dPWEscy5wdXNoKGlbcl0pLG8mJmUuY2xhc3Nlc1tpW3JdXSYmcy5wdXNoKGUuY2xhc3Nlc1tpW3JdXSl9dmFyIHM9W10sbj10aGlzO3JldHVybiBlPXQuZXh0ZW5kKHtlbGVtZW50OnRoaXMuZWxlbWVudCxjbGFzc2VzOnRoaXMub3B0aW9ucy5jbGFzc2VzfHx7fX0sZSksdGhpcy5fb24oZS5lbGVtZW50LHtyZW1vdmU6XCJfdW50cmFja0NsYXNzZXNFbGVtZW50XCJ9KSxlLmtleXMmJmkoZS5rZXlzLm1hdGNoKC9cXFMrL2cpfHxbXSwhMCksZS5leHRyYSYmaShlLmV4dHJhLm1hdGNoKC9cXFMrL2cpfHxbXSkscy5qb2luKFwiIFwiKX0sX3VudHJhY2tDbGFzc2VzRWxlbWVudDpmdW5jdGlvbihlKXt2YXIgaT10aGlzO3QuZWFjaChpLmNsYXNzZXNFbGVtZW50TG9va3VwLGZ1bmN0aW9uKHMsbil7LTEhPT10LmluQXJyYXkoZS50YXJnZXQsbikmJihpLmNsYXNzZXNFbGVtZW50TG9va3VwW3NdPXQobi5ub3QoZS50YXJnZXQpLmdldCgpKSl9KX0sX3JlbW92ZUNsYXNzOmZ1bmN0aW9uKHQsZSxpKXtyZXR1cm4gdGhpcy5fdG9nZ2xlQ2xhc3ModCxlLGksITEpfSxfYWRkQ2xhc3M6ZnVuY3Rpb24odCxlLGkpe3JldHVybiB0aGlzLl90b2dnbGVDbGFzcyh0LGUsaSwhMCl9LF90b2dnbGVDbGFzczpmdW5jdGlvbih0LGUsaSxzKXtzPVwiYm9vbGVhblwiPT10eXBlb2Ygcz9zOmk7dmFyIG49XCJzdHJpbmdcIj09dHlwZW9mIHR8fG51bGw9PT10LG89e2V4dHJhOm4/ZTppLGtleXM6bj90OmUsZWxlbWVudDpuP3RoaXMuZWxlbWVudDp0LGFkZDpzfTtyZXR1cm4gby5lbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuX2NsYXNzZXMobykscyksdGhpc30sX29uOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvPXRoaXM7XCJib29sZWFuXCIhPXR5cGVvZiBlJiYocz1pLGk9ZSxlPSExKSxzPyhpPW49dChpKSx0aGlzLmJpbmRpbmdzPXRoaXMuYmluZGluZ3MuYWRkKGkpKToocz1pLGk9dGhpcy5lbGVtZW50LG49dGhpcy53aWRnZXQoKSksdC5lYWNoKHMsZnVuY3Rpb24ocyxhKXtmdW5jdGlvbiByKCl7cmV0dXJuIGV8fG8ub3B0aW9ucy5kaXNhYmxlZCE9PSEwJiYhdCh0aGlzKS5oYXNDbGFzcyhcInVpLXN0YXRlLWRpc2FibGVkXCIpPyhcInN0cmluZ1wiPT10eXBlb2YgYT9vW2FdOmEpLmFwcGx5KG8sYXJndW1lbnRzKTp2b2lkIDB9XCJzdHJpbmdcIiE9dHlwZW9mIGEmJihyLmd1aWQ9YS5ndWlkPWEuZ3VpZHx8ci5ndWlkfHx0Lmd1aWQrKyk7dmFyIGg9cy5tYXRjaCgvXihbXFx3Oi1dKilcXHMqKC4qKSQvKSxsPWhbMV0rby5ldmVudE5hbWVzcGFjZSxjPWhbMl07Yz9uLm9uKGwsYyxyKTppLm9uKGwscil9KX0sX29mZjpmdW5jdGlvbihlLGkpe2k9KGl8fFwiXCIpLnNwbGl0KFwiIFwiKS5qb2luKHRoaXMuZXZlbnROYW1lc3BhY2UrXCIgXCIpK3RoaXMuZXZlbnROYW1lc3BhY2UsZS5vZmYoaSkub2ZmKGkpLHRoaXMuYmluZGluZ3M9dCh0aGlzLmJpbmRpbmdzLm5vdChlKS5nZXQoKSksdGhpcy5mb2N1c2FibGU9dCh0aGlzLmZvY3VzYWJsZS5ub3QoZSkuZ2V0KCkpLHRoaXMuaG92ZXJhYmxlPXQodGhpcy5ob3ZlcmFibGUubm90KGUpLmdldCgpKX0sX2RlbGF5OmZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gaSgpe3JldHVybihcInN0cmluZ1wiPT10eXBlb2YgdD9zW3RdOnQpLmFwcGx5KHMsYXJndW1lbnRzKX12YXIgcz10aGlzO3JldHVybiBzZXRUaW1lb3V0KGksZXx8MCl9LF9ob3ZlcmFibGU6ZnVuY3Rpb24oZSl7dGhpcy5ob3ZlcmFibGU9dGhpcy5ob3ZlcmFibGUuYWRkKGUpLHRoaXMuX29uKGUse21vdXNlZW50ZXI6ZnVuY3Rpb24oZSl7dGhpcy5fYWRkQ2xhc3ModChlLmN1cnJlbnRUYXJnZXQpLG51bGwsXCJ1aS1zdGF0ZS1ob3ZlclwiKX0sbW91c2VsZWF2ZTpmdW5jdGlvbihlKXt0aGlzLl9yZW1vdmVDbGFzcyh0KGUuY3VycmVudFRhcmdldCksbnVsbCxcInVpLXN0YXRlLWhvdmVyXCIpfX0pfSxfZm9jdXNhYmxlOmZ1bmN0aW9uKGUpe3RoaXMuZm9jdXNhYmxlPXRoaXMuZm9jdXNhYmxlLmFkZChlKSx0aGlzLl9vbihlLHtmb2N1c2luOmZ1bmN0aW9uKGUpe3RoaXMuX2FkZENsYXNzKHQoZS5jdXJyZW50VGFyZ2V0KSxudWxsLFwidWktc3RhdGUtZm9jdXNcIil9LGZvY3Vzb3V0OmZ1bmN0aW9uKGUpe3RoaXMuX3JlbW92ZUNsYXNzKHQoZS5jdXJyZW50VGFyZ2V0KSxudWxsLFwidWktc3RhdGUtZm9jdXNcIil9fSl9LF90cmlnZ2VyOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvLGE9dGhpcy5vcHRpb25zW2VdO2lmKHM9c3x8e30saT10LkV2ZW50KGkpLGkudHlwZT0oZT09PXRoaXMud2lkZ2V0RXZlbnRQcmVmaXg/ZTp0aGlzLndpZGdldEV2ZW50UHJlZml4K2UpLnRvTG93ZXJDYXNlKCksaS50YXJnZXQ9dGhpcy5lbGVtZW50WzBdLG89aS5vcmlnaW5hbEV2ZW50KWZvcihuIGluIG8pbiBpbiBpfHwoaVtuXT1vW25dKTtyZXR1cm4gdGhpcy5lbGVtZW50LnRyaWdnZXIoaSxzKSwhKHQuaXNGdW5jdGlvbihhKSYmYS5hcHBseSh0aGlzLmVsZW1lbnRbMF0sW2ldLmNvbmNhdChzKSk9PT0hMXx8aS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl9fSx0LmVhY2goe3Nob3c6XCJmYWRlSW5cIixoaWRlOlwiZmFkZU91dFwifSxmdW5jdGlvbihlLGkpe3QuV2lkZ2V0LnByb3RvdHlwZVtcIl9cIitlXT1mdW5jdGlvbihzLG4sbyl7XCJzdHJpbmdcIj09dHlwZW9mIG4mJihuPXtlZmZlY3Q6bn0pO3ZhciBhLHI9bj9uPT09ITB8fFwibnVtYmVyXCI9PXR5cGVvZiBuP2k6bi5lZmZlY3R8fGk6ZTtuPW58fHt9LFwibnVtYmVyXCI9PXR5cGVvZiBuJiYobj17ZHVyYXRpb246bn0pLGE9IXQuaXNFbXB0eU9iamVjdChuKSxuLmNvbXBsZXRlPW8sbi5kZWxheSYmcy5kZWxheShuLmRlbGF5KSxhJiZ0LmVmZmVjdHMmJnQuZWZmZWN0cy5lZmZlY3Rbcl0/c1tlXShuKTpyIT09ZSYmc1tyXT9zW3JdKG4uZHVyYXRpb24sbi5lYXNpbmcsbyk6cy5xdWV1ZShmdW5jdGlvbihpKXt0KHRoaXMpW2VdKCksbyYmby5jYWxsKHNbMF0pLGkoKX0pfX0pLHQud2lkZ2V0LGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LGUsaSl7cmV0dXJuW3BhcnNlRmxvYXQodFswXSkqKHUudGVzdCh0WzBdKT9lLzEwMDoxKSxwYXJzZUZsb2F0KHRbMV0pKih1LnRlc3QodFsxXSk/aS8xMDA6MSldfWZ1bmN0aW9uIGkoZSxpKXtyZXR1cm4gcGFyc2VJbnQodC5jc3MoZSxpKSwxMCl8fDB9ZnVuY3Rpb24gcyhlKXt2YXIgaT1lWzBdO3JldHVybiA5PT09aS5ub2RlVHlwZT97d2lkdGg6ZS53aWR0aCgpLGhlaWdodDplLmhlaWdodCgpLG9mZnNldDp7dG9wOjAsbGVmdDowfX06dC5pc1dpbmRvdyhpKT97d2lkdGg6ZS53aWR0aCgpLGhlaWdodDplLmhlaWdodCgpLG9mZnNldDp7dG9wOmUuc2Nyb2xsVG9wKCksbGVmdDplLnNjcm9sbExlZnQoKX19OmkucHJldmVudERlZmF1bHQ/e3dpZHRoOjAsaGVpZ2h0OjAsb2Zmc2V0Ont0b3A6aS5wYWdlWSxsZWZ0OmkucGFnZVh9fTp7d2lkdGg6ZS5vdXRlcldpZHRoKCksaGVpZ2h0OmUub3V0ZXJIZWlnaHQoKSxvZmZzZXQ6ZS5vZmZzZXQoKX19dmFyIG4sbz1NYXRoLm1heCxhPU1hdGguYWJzLHI9L2xlZnR8Y2VudGVyfHJpZ2h0LyxoPS90b3B8Y2VudGVyfGJvdHRvbS8sbD0vW1xcK1xcLV1cXGQrKFxcLltcXGRdKyk/JT8vLGM9L15cXHcrLyx1PS8lJC8sZD10LmZuLnBvc2l0aW9uO3QucG9zaXRpb249e3Njcm9sbGJhcldpZHRoOmZ1bmN0aW9uKCl7aWYodm9pZCAwIT09bilyZXR1cm4gbjt2YXIgZSxpLHM9dChcIjxkaXYgc3R5bGU9J2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NTBweDtoZWlnaHQ6NTBweDtvdmVyZmxvdzpoaWRkZW47Jz48ZGl2IHN0eWxlPSdoZWlnaHQ6MTAwcHg7d2lkdGg6YXV0bzsnPjwvZGl2PjwvZGl2PlwiKSxvPXMuY2hpbGRyZW4oKVswXTtyZXR1cm4gdChcImJvZHlcIikuYXBwZW5kKHMpLGU9by5vZmZzZXRXaWR0aCxzLmNzcyhcIm92ZXJmbG93XCIsXCJzY3JvbGxcIiksaT1vLm9mZnNldFdpZHRoLGU9PT1pJiYoaT1zWzBdLmNsaWVudFdpZHRoKSxzLnJlbW92ZSgpLG49ZS1pfSxnZXRTY3JvbGxJbmZvOmZ1bmN0aW9uKGUpe3ZhciBpPWUuaXNXaW5kb3d8fGUuaXNEb2N1bWVudD9cIlwiOmUuZWxlbWVudC5jc3MoXCJvdmVyZmxvdy14XCIpLHM9ZS5pc1dpbmRvd3x8ZS5pc0RvY3VtZW50P1wiXCI6ZS5lbGVtZW50LmNzcyhcIm92ZXJmbG93LXlcIiksbj1cInNjcm9sbFwiPT09aXx8XCJhdXRvXCI9PT1pJiZlLndpZHRoPGUuZWxlbWVudFswXS5zY3JvbGxXaWR0aCxvPVwic2Nyb2xsXCI9PT1zfHxcImF1dG9cIj09PXMmJmUuaGVpZ2h0PGUuZWxlbWVudFswXS5zY3JvbGxIZWlnaHQ7cmV0dXJue3dpZHRoOm8/dC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpOjAsaGVpZ2h0Om4/dC5wb3NpdGlvbi5zY3JvbGxiYXJXaWR0aCgpOjB9fSxnZXRXaXRoaW5JbmZvOmZ1bmN0aW9uKGUpe3ZhciBpPXQoZXx8d2luZG93KSxzPXQuaXNXaW5kb3coaVswXSksbj0hIWlbMF0mJjk9PT1pWzBdLm5vZGVUeXBlLG89IXMmJiFuO3JldHVybntlbGVtZW50OmksaXNXaW5kb3c6cyxpc0RvY3VtZW50Om4sb2Zmc2V0Om8/dChlKS5vZmZzZXQoKTp7bGVmdDowLHRvcDowfSxzY3JvbGxMZWZ0Omkuc2Nyb2xsTGVmdCgpLHNjcm9sbFRvcDppLnNjcm9sbFRvcCgpLHdpZHRoOmkub3V0ZXJXaWR0aCgpLGhlaWdodDppLm91dGVySGVpZ2h0KCl9fX0sdC5mbi5wb3NpdGlvbj1mdW5jdGlvbihuKXtpZighbnx8IW4ub2YpcmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpO249dC5leHRlbmQoe30sbik7dmFyIHUscCxmLGcsbSxfLHY9dChuLm9mKSxiPXQucG9zaXRpb24uZ2V0V2l0aGluSW5mbyhuLndpdGhpbikseT10LnBvc2l0aW9uLmdldFNjcm9sbEluZm8oYiksdz0obi5jb2xsaXNpb258fFwiZmxpcFwiKS5zcGxpdChcIiBcIiksaz17fTtyZXR1cm4gXz1zKHYpLHZbMF0ucHJldmVudERlZmF1bHQmJihuLmF0PVwibGVmdCB0b3BcIikscD1fLndpZHRoLGY9Xy5oZWlnaHQsZz1fLm9mZnNldCxtPXQuZXh0ZW5kKHt9LGcpLHQuZWFjaChbXCJteVwiLFwiYXRcIl0sZnVuY3Rpb24oKXt2YXIgdCxlLGk9KG5bdGhpc118fFwiXCIpLnNwbGl0KFwiIFwiKTsxPT09aS5sZW5ndGgmJihpPXIudGVzdChpWzBdKT9pLmNvbmNhdChbXCJjZW50ZXJcIl0pOmgudGVzdChpWzBdKT9bXCJjZW50ZXJcIl0uY29uY2F0KGkpOltcImNlbnRlclwiLFwiY2VudGVyXCJdKSxpWzBdPXIudGVzdChpWzBdKT9pWzBdOlwiY2VudGVyXCIsaVsxXT1oLnRlc3QoaVsxXSk/aVsxXTpcImNlbnRlclwiLHQ9bC5leGVjKGlbMF0pLGU9bC5leGVjKGlbMV0pLGtbdGhpc109W3Q/dFswXTowLGU/ZVswXTowXSxuW3RoaXNdPVtjLmV4ZWMoaVswXSlbMF0sYy5leGVjKGlbMV0pWzBdXX0pLDE9PT13Lmxlbmd0aCYmKHdbMV09d1swXSksXCJyaWdodFwiPT09bi5hdFswXT9tLmxlZnQrPXA6XCJjZW50ZXJcIj09PW4uYXRbMF0mJihtLmxlZnQrPXAvMiksXCJib3R0b21cIj09PW4uYXRbMV0/bS50b3ArPWY6XCJjZW50ZXJcIj09PW4uYXRbMV0mJihtLnRvcCs9Zi8yKSx1PWUoay5hdCxwLGYpLG0ubGVmdCs9dVswXSxtLnRvcCs9dVsxXSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgcyxyLGg9dCh0aGlzKSxsPWgub3V0ZXJXaWR0aCgpLGM9aC5vdXRlckhlaWdodCgpLGQ9aSh0aGlzLFwibWFyZ2luTGVmdFwiKSxfPWkodGhpcyxcIm1hcmdpblRvcFwiKSx4PWwrZCtpKHRoaXMsXCJtYXJnaW5SaWdodFwiKSt5LndpZHRoLEM9YytfK2kodGhpcyxcIm1hcmdpbkJvdHRvbVwiKSt5LmhlaWdodCxEPXQuZXh0ZW5kKHt9LG0pLEk9ZShrLm15LGgub3V0ZXJXaWR0aCgpLGgub3V0ZXJIZWlnaHQoKSk7XCJyaWdodFwiPT09bi5teVswXT9ELmxlZnQtPWw6XCJjZW50ZXJcIj09PW4ubXlbMF0mJihELmxlZnQtPWwvMiksXCJib3R0b21cIj09PW4ubXlbMV0/RC50b3AtPWM6XCJjZW50ZXJcIj09PW4ubXlbMV0mJihELnRvcC09Yy8yKSxELmxlZnQrPUlbMF0sRC50b3ArPUlbMV0scz17bWFyZ2luTGVmdDpkLG1hcmdpblRvcDpffSx0LmVhY2goW1wibGVmdFwiLFwidG9wXCJdLGZ1bmN0aW9uKGUsaSl7dC51aS5wb3NpdGlvblt3W2VdXSYmdC51aS5wb3NpdGlvblt3W2VdXVtpXShELHt0YXJnZXRXaWR0aDpwLHRhcmdldEhlaWdodDpmLGVsZW1XaWR0aDpsLGVsZW1IZWlnaHQ6Yyxjb2xsaXNpb25Qb3NpdGlvbjpzLGNvbGxpc2lvbldpZHRoOngsY29sbGlzaW9uSGVpZ2h0OkMsb2Zmc2V0Olt1WzBdK0lbMF0sdVsxXStJWzFdXSxteTpuLm15LGF0Om4uYXQsd2l0aGluOmIsZWxlbTpofSl9KSxuLnVzaW5nJiYocj1mdW5jdGlvbih0KXt2YXIgZT1nLmxlZnQtRC5sZWZ0LGk9ZStwLWwscz1nLnRvcC1ELnRvcCxyPXMrZi1jLHU9e3RhcmdldDp7ZWxlbWVudDp2LGxlZnQ6Zy5sZWZ0LHRvcDpnLnRvcCx3aWR0aDpwLGhlaWdodDpmfSxlbGVtZW50OntlbGVtZW50OmgsbGVmdDpELmxlZnQsdG9wOkQudG9wLHdpZHRoOmwsaGVpZ2h0OmN9LGhvcml6b250YWw6MD5pP1wibGVmdFwiOmU+MD9cInJpZ2h0XCI6XCJjZW50ZXJcIix2ZXJ0aWNhbDowPnI/XCJ0b3BcIjpzPjA/XCJib3R0b21cIjpcIm1pZGRsZVwifTtsPnAmJnA+YShlK2kpJiYodS5ob3Jpem9udGFsPVwiY2VudGVyXCIpLGM+ZiYmZj5hKHMrcikmJih1LnZlcnRpY2FsPVwibWlkZGxlXCIpLHUuaW1wb3J0YW50PW8oYShlKSxhKGkpKT5vKGEocyksYShyKSk/XCJob3Jpem9udGFsXCI6XCJ2ZXJ0aWNhbFwiLG4udXNpbmcuY2FsbCh0aGlzLHQsdSl9KSxoLm9mZnNldCh0LmV4dGVuZChELHt1c2luZzpyfSkpfSl9LHQudWkucG9zaXRpb249e2ZpdDp7bGVmdDpmdW5jdGlvbih0LGUpe3ZhciBpLHM9ZS53aXRoaW4sbj1zLmlzV2luZG93P3Muc2Nyb2xsTGVmdDpzLm9mZnNldC5sZWZ0LGE9cy53aWR0aCxyPXQubGVmdC1lLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpbkxlZnQsaD1uLXIsbD1yK2UuY29sbGlzaW9uV2lkdGgtYS1uO2UuY29sbGlzaW9uV2lkdGg+YT9oPjAmJjA+PWw/KGk9dC5sZWZ0K2grZS5jb2xsaXNpb25XaWR0aC1hLW4sdC5sZWZ0Kz1oLWkpOnQubGVmdD1sPjAmJjA+PWg/bjpoPmw/bithLWUuY29sbGlzaW9uV2lkdGg6bjpoPjA/dC5sZWZ0Kz1oOmw+MD90LmxlZnQtPWw6dC5sZWZ0PW8odC5sZWZ0LXIsdC5sZWZ0KX0sdG9wOmZ1bmN0aW9uKHQsZSl7dmFyIGkscz1lLndpdGhpbixuPXMuaXNXaW5kb3c/cy5zY3JvbGxUb3A6cy5vZmZzZXQudG9wLGE9ZS53aXRoaW4uaGVpZ2h0LHI9dC50b3AtZS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3AsaD1uLXIsbD1yK2UuY29sbGlzaW9uSGVpZ2h0LWEtbjtlLmNvbGxpc2lvbkhlaWdodD5hP2g+MCYmMD49bD8oaT10LnRvcCtoK2UuY29sbGlzaW9uSGVpZ2h0LWEtbix0LnRvcCs9aC1pKTp0LnRvcD1sPjAmJjA+PWg/bjpoPmw/bithLWUuY29sbGlzaW9uSGVpZ2h0Om46aD4wP3QudG9wKz1oOmw+MD90LnRvcC09bDp0LnRvcD1vKHQudG9wLXIsdC50b3ApfX0sZmxpcDp7bGVmdDpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbj1lLndpdGhpbixvPW4ub2Zmc2V0LmxlZnQrbi5zY3JvbGxMZWZ0LHI9bi53aWR0aCxoPW4uaXNXaW5kb3c/bi5zY3JvbGxMZWZ0Om4ub2Zmc2V0LmxlZnQsbD10LmxlZnQtZS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5MZWZ0LGM9bC1oLHU9bCtlLmNvbGxpc2lvbldpZHRoLXItaCxkPVwibGVmdFwiPT09ZS5teVswXT8tZS5lbGVtV2lkdGg6XCJyaWdodFwiPT09ZS5teVswXT9lLmVsZW1XaWR0aDowLHA9XCJsZWZ0XCI9PT1lLmF0WzBdP2UudGFyZ2V0V2lkdGg6XCJyaWdodFwiPT09ZS5hdFswXT8tZS50YXJnZXRXaWR0aDowLGY9LTIqZS5vZmZzZXRbMF07MD5jPyhpPXQubGVmdCtkK3ArZitlLmNvbGxpc2lvbldpZHRoLXItbywoMD5pfHxhKGMpPmkpJiYodC5sZWZ0Kz1kK3ArZikpOnU+MCYmKHM9dC5sZWZ0LWUuY29sbGlzaW9uUG9zaXRpb24ubWFyZ2luTGVmdCtkK3ArZi1oLChzPjB8fHU+YShzKSkmJih0LmxlZnQrPWQrcCtmKSl9LHRvcDpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbj1lLndpdGhpbixvPW4ub2Zmc2V0LnRvcCtuLnNjcm9sbFRvcCxyPW4uaGVpZ2h0LGg9bi5pc1dpbmRvdz9uLnNjcm9sbFRvcDpuLm9mZnNldC50b3AsbD10LnRvcC1lLmNvbGxpc2lvblBvc2l0aW9uLm1hcmdpblRvcCxjPWwtaCx1PWwrZS5jb2xsaXNpb25IZWlnaHQtci1oLGQ9XCJ0b3BcIj09PWUubXlbMV0scD1kPy1lLmVsZW1IZWlnaHQ6XCJib3R0b21cIj09PWUubXlbMV0/ZS5lbGVtSGVpZ2h0OjAsZj1cInRvcFwiPT09ZS5hdFsxXT9lLnRhcmdldEhlaWdodDpcImJvdHRvbVwiPT09ZS5hdFsxXT8tZS50YXJnZXRIZWlnaHQ6MCxnPS0yKmUub2Zmc2V0WzFdOzA+Yz8ocz10LnRvcCtwK2YrZytlLmNvbGxpc2lvbkhlaWdodC1yLW8sKDA+c3x8YShjKT5zKSYmKHQudG9wKz1wK2YrZykpOnU+MCYmKGk9dC50b3AtZS5jb2xsaXNpb25Qb3NpdGlvbi5tYXJnaW5Ub3ArcCtmK2ctaCwoaT4wfHx1PmEoaSkpJiYodC50b3ArPXArZitnKSl9fSxmbGlwZml0OntsZWZ0OmZ1bmN0aW9uKCl7dC51aS5wb3NpdGlvbi5mbGlwLmxlZnQuYXBwbHkodGhpcyxhcmd1bWVudHMpLHQudWkucG9zaXRpb24uZml0LmxlZnQuYXBwbHkodGhpcyxhcmd1bWVudHMpfSx0b3A6ZnVuY3Rpb24oKXt0LnVpLnBvc2l0aW9uLmZsaXAudG9wLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0LnVpLnBvc2l0aW9uLmZpdC50b3AuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19fSgpLHQudWkucG9zaXRpb24sdC5leHRlbmQodC5leHByW1wiOlwiXSx7ZGF0YTp0LmV4cHIuY3JlYXRlUHNldWRvP3QuZXhwci5jcmVhdGVQc2V1ZG8oZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiEhdC5kYXRhKGksZSl9fSk6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiEhdC5kYXRhKGUsc1szXSl9fSksdC5mbi5leHRlbmQoe2Rpc2FibGVTZWxlY3Rpb246ZnVuY3Rpb24oKXt2YXIgdD1cIm9uc2VsZWN0c3RhcnRcImluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik/XCJzZWxlY3RzdGFydFwiOlwibW91c2Vkb3duXCI7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub24odCtcIi51aS1kaXNhYmxlU2VsZWN0aW9uXCIsZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpfSl9fSgpLGVuYWJsZVNlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm9mZihcIi51aS1kaXNhYmxlU2VsZWN0aW9uXCIpfX0pO3ZhciBjPVwidWktZWZmZWN0cy1cIix1PVwidWktZWZmZWN0cy1zdHlsZVwiLGQ9XCJ1aS1lZmZlY3RzLWFuaW1hdGVkXCIscD10O3QuZWZmZWN0cz17ZWZmZWN0Ont9fSxmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIGkodCxlLGkpe3ZhciBzPXVbZS50eXBlXXx8e307cmV0dXJuIG51bGw9PXQ/aXx8IWUuZGVmP251bGw6ZS5kZWY6KHQ9cy5mbG9vcj9+fnQ6cGFyc2VGbG9hdCh0KSxpc05hTih0KT9lLmRlZjpzLm1vZD8odCtzLm1vZCklcy5tb2Q6MD50PzA6dD5zLm1heD9zLm1heDp0KX1mdW5jdGlvbiBzKGkpe3ZhciBzPWwoKSxuPXMuX3JnYmE9W107cmV0dXJuIGk9aS50b0xvd2VyQ2FzZSgpLGYoaCxmdW5jdGlvbih0LG8pe3ZhciBhLHI9by5yZS5leGVjKGkpLGg9ciYmby5wYXJzZShyKSxsPW8uc3BhY2V8fFwicmdiYVwiO3JldHVybiBoPyhhPXNbbF0oaCksc1tjW2xdLmNhY2hlXT1hW2NbbF0uY2FjaGVdLG49cy5fcmdiYT1hLl9yZ2JhLCExKTplfSksbi5sZW5ndGg/KFwiMCwwLDAsMFwiPT09bi5qb2luKCkmJnQuZXh0ZW5kKG4sby50cmFuc3BhcmVudCkscyk6b1tpXX1mdW5jdGlvbiBuKHQsZSxpKXtyZXR1cm4gaT0oaSsxKSUxLDE+NippP3QrNiooZS10KSppOjE+MippP2U6Mj4zKmk/dCs2KihlLXQpKigyLzMtaSk6dH12YXIgbyxhPVwiYmFja2dyb3VuZENvbG9yIGJvcmRlckJvdHRvbUNvbG9yIGJvcmRlckxlZnRDb2xvciBib3JkZXJSaWdodENvbG9yIGJvcmRlclRvcENvbG9yIGNvbG9yIGNvbHVtblJ1bGVDb2xvciBvdXRsaW5lQ29sb3IgdGV4dERlY29yYXRpb25Db2xvciB0ZXh0RW1waGFzaXNDb2xvclwiLHI9L14oW1xcLStdKT1cXHMqKFxcZCtcXC4/XFxkKikvLGg9W3tyZTovcmdiYT9cXChcXHMqKFxcZHsxLDN9KVxccyosXFxzKihcXGR7MSwzfSlcXHMqLFxccyooXFxkezEsM30pXFxzKig/OixcXHMqKFxcZD8oPzpcXC5cXGQrKT8pXFxzKik/XFwpLyxwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm5bdFsxXSx0WzJdLHRbM10sdFs0XV19fSx7cmU6L3JnYmE/XFwoXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyosXFxzKihcXGQrKD86XFwuXFxkKyk/KVxcJVxccyooPzosXFxzKihcXGQ/KD86XFwuXFxkKyk/KVxccyopP1xcKS8scGFyc2U6ZnVuY3Rpb24odCl7cmV0dXJuWzIuNTUqdFsxXSwyLjU1KnRbMl0sMi41NSp0WzNdLHRbNF1dfX0se3JlOi8jKFthLWYwLTldezJ9KShbYS1mMC05XXsyfSkoW2EtZjAtOV17Mn0pLyxwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm5bcGFyc2VJbnQodFsxXSwxNikscGFyc2VJbnQodFsyXSwxNikscGFyc2VJbnQodFszXSwxNildfX0se3JlOi8jKFthLWYwLTldKShbYS1mMC05XSkoW2EtZjAtOV0pLyxwYXJzZTpmdW5jdGlvbih0KXtyZXR1cm5bcGFyc2VJbnQodFsxXSt0WzFdLDE2KSxwYXJzZUludCh0WzJdK3RbMl0sMTYpLHBhcnNlSW50KHRbM10rdFszXSwxNildfX0se3JlOi9oc2xhP1xcKFxccyooXFxkKyg/OlxcLlxcZCspPylcXHMqLFxccyooXFxkKyg/OlxcLlxcZCspPylcXCVcXHMqLFxccyooXFxkKyg/OlxcLlxcZCspPylcXCVcXHMqKD86LFxccyooXFxkPyg/OlxcLlxcZCspPylcXHMqKT9cXCkvLHNwYWNlOlwiaHNsYVwiLHBhcnNlOmZ1bmN0aW9uKHQpe3JldHVyblt0WzFdLHRbMl0vMTAwLHRbM10vMTAwLHRbNF1dfX1dLGw9dC5Db2xvcj1mdW5jdGlvbihlLGkscyxuKXtyZXR1cm4gbmV3IHQuQ29sb3IuZm4ucGFyc2UoZSxpLHMsbil9LGM9e3JnYmE6e3Byb3BzOntyZWQ6e2lkeDowLHR5cGU6XCJieXRlXCJ9LGdyZWVuOntpZHg6MSx0eXBlOlwiYnl0ZVwifSxibHVlOntpZHg6Mix0eXBlOlwiYnl0ZVwifX19LGhzbGE6e3Byb3BzOntodWU6e2lkeDowLHR5cGU6XCJkZWdyZWVzXCJ9LHNhdHVyYXRpb246e2lkeDoxLHR5cGU6XCJwZXJjZW50XCJ9LGxpZ2h0bmVzczp7aWR4OjIsdHlwZTpcInBlcmNlbnRcIn19fX0sdT17XCJieXRlXCI6e2Zsb29yOiEwLG1heDoyNTV9LHBlcmNlbnQ6e21heDoxfSxkZWdyZWVzOnttb2Q6MzYwLGZsb29yOiEwfX0sZD1sLnN1cHBvcnQ9e30scD10KFwiPHA+XCIpWzBdLGY9dC5lYWNoO3Auc3R5bGUuY3NzVGV4dD1cImJhY2tncm91bmQtY29sb3I6cmdiYSgxLDEsMSwuNSlcIixkLnJnYmE9cC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IuaW5kZXhPZihcInJnYmFcIik+LTEsZihjLGZ1bmN0aW9uKHQsZSl7ZS5jYWNoZT1cIl9cIit0LGUucHJvcHMuYWxwaGE9e2lkeDozLHR5cGU6XCJwZXJjZW50XCIsZGVmOjF9fSksbC5mbj10LmV4dGVuZChsLnByb3RvdHlwZSx7cGFyc2U6ZnVuY3Rpb24obixhLHIsaCl7aWYobj09PWUpcmV0dXJuIHRoaXMuX3JnYmE9W251bGwsbnVsbCxudWxsLG51bGxdLHRoaXM7KG4uanF1ZXJ5fHxuLm5vZGVUeXBlKSYmKG49dChuKS5jc3MoYSksYT1lKTt2YXIgdT10aGlzLGQ9dC50eXBlKG4pLHA9dGhpcy5fcmdiYT1bXTtyZXR1cm4gYSE9PWUmJihuPVtuLGEscixoXSxkPVwiYXJyYXlcIiksXCJzdHJpbmdcIj09PWQ/dGhpcy5wYXJzZShzKG4pfHxvLl9kZWZhdWx0KTpcImFycmF5XCI9PT1kPyhmKGMucmdiYS5wcm9wcyxmdW5jdGlvbih0LGUpe3BbZS5pZHhdPWkobltlLmlkeF0sZSl9KSx0aGlzKTpcIm9iamVjdFwiPT09ZD8obiBpbnN0YW5jZW9mIGw/ZihjLGZ1bmN0aW9uKHQsZSl7bltlLmNhY2hlXSYmKHVbZS5jYWNoZV09bltlLmNhY2hlXS5zbGljZSgpKX0pOmYoYyxmdW5jdGlvbihlLHMpe3ZhciBvPXMuY2FjaGU7ZihzLnByb3BzLGZ1bmN0aW9uKHQsZSl7aWYoIXVbb10mJnMudG8pe2lmKFwiYWxwaGFcIj09PXR8fG51bGw9PW5bdF0pcmV0dXJuO3Vbb109cy50byh1Ll9yZ2JhKX11W29dW2UuaWR4XT1pKG5bdF0sZSwhMCl9KSx1W29dJiYwPnQuaW5BcnJheShudWxsLHVbb10uc2xpY2UoMCwzKSkmJih1W29dWzNdPTEscy5mcm9tJiYodS5fcmdiYT1zLmZyb20odVtvXSkpKX0pLHRoaXMpOmV9LGlzOmZ1bmN0aW9uKHQpe3ZhciBpPWwodCkscz0hMCxuPXRoaXM7cmV0dXJuIGYoYyxmdW5jdGlvbih0LG8pe3ZhciBhLHI9aVtvLmNhY2hlXTtyZXR1cm4gciYmKGE9bltvLmNhY2hlXXx8by50byYmby50byhuLl9yZ2JhKXx8W10sZihvLnByb3BzLGZ1bmN0aW9uKHQsaSl7cmV0dXJuIG51bGwhPXJbaS5pZHhdP3M9cltpLmlkeF09PT1hW2kuaWR4XTplfSkpLHN9KSxzfSxfc3BhY2U6ZnVuY3Rpb24oKXt2YXIgdD1bXSxlPXRoaXM7cmV0dXJuIGYoYyxmdW5jdGlvbihpLHMpe2Vbcy5jYWNoZV0mJnQucHVzaChpKX0pLHQucG9wKCl9LHRyYW5zaXRpb246ZnVuY3Rpb24odCxlKXt2YXIgcz1sKHQpLG49cy5fc3BhY2UoKSxvPWNbbl0sYT0wPT09dGhpcy5hbHBoYSgpP2woXCJ0cmFuc3BhcmVudFwiKTp0aGlzLHI9YVtvLmNhY2hlXXx8by50byhhLl9yZ2JhKSxoPXIuc2xpY2UoKTtyZXR1cm4gcz1zW28uY2FjaGVdLGYoby5wcm9wcyxmdW5jdGlvbih0LG4pe3ZhciBvPW4uaWR4LGE9cltvXSxsPXNbb10sYz11W24udHlwZV18fHt9O251bGwhPT1sJiYobnVsbD09PWE/aFtvXT1sOihjLm1vZCYmKGwtYT5jLm1vZC8yP2ErPWMubW9kOmEtbD5jLm1vZC8yJiYoYS09Yy5tb2QpKSxoW29dPWkoKGwtYSkqZSthLG4pKSl9KSx0aGlzW25dKGgpfSxibGVuZDpmdW5jdGlvbihlKXtpZigxPT09dGhpcy5fcmdiYVszXSlyZXR1cm4gdGhpczt2YXIgaT10aGlzLl9yZ2JhLnNsaWNlKCkscz1pLnBvcCgpLG49bChlKS5fcmdiYTtyZXR1cm4gbCh0Lm1hcChpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuKDEtcykqbltlXStzKnR9KSl9LHRvUmdiYVN0cmluZzpmdW5jdGlvbigpe3ZhciBlPVwicmdiYShcIixpPXQubWFwKHRoaXMuX3JnYmEsZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbD09dD9lPjI/MTowOnR9KTtyZXR1cm4gMT09PWlbM10mJihpLnBvcCgpLGU9XCJyZ2IoXCIpLGUraS5qb2luKCkrXCIpXCJ9LHRvSHNsYVN0cmluZzpmdW5jdGlvbigpe3ZhciBlPVwiaHNsYShcIixpPXQubWFwKHRoaXMuaHNsYSgpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGw9PXQmJih0PWU+Mj8xOjApLGUmJjM+ZSYmKHQ9TWF0aC5yb3VuZCgxMDAqdCkrXCIlXCIpLHR9KTtyZXR1cm4gMT09PWlbM10mJihpLnBvcCgpLGU9XCJoc2woXCIpLGUraS5qb2luKCkrXCIpXCJ9LHRvSGV4U3RyaW5nOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX3JnYmEuc2xpY2UoKSxzPWkucG9wKCk7cmV0dXJuIGUmJmkucHVzaCh+figyNTUqcykpLFwiI1wiK3QubWFwKGksZnVuY3Rpb24odCl7cmV0dXJuIHQ9KHR8fDApLnRvU3RyaW5nKDE2KSwxPT09dC5sZW5ndGg/XCIwXCIrdDp0fSkuam9pbihcIlwiKX0sdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMuX3JnYmFbM10/XCJ0cmFuc3BhcmVudFwiOnRoaXMudG9SZ2JhU3RyaW5nKCl9fSksbC5mbi5wYXJzZS5wcm90b3R5cGU9bC5mbixjLmhzbGEudG89ZnVuY3Rpb24odCl7aWYobnVsbD09dFswXXx8bnVsbD09dFsxXXx8bnVsbD09dFsyXSlyZXR1cm5bbnVsbCxudWxsLG51bGwsdFszXV07dmFyIGUsaSxzPXRbMF0vMjU1LG49dFsxXS8yNTUsbz10WzJdLzI1NSxhPXRbM10scj1NYXRoLm1heChzLG4sbyksaD1NYXRoLm1pbihzLG4sbyksbD1yLWgsYz1yK2gsdT0uNSpjO3JldHVybiBlPWg9PT1yPzA6cz09PXI/NjAqKG4tbykvbCszNjA6bj09PXI/NjAqKG8tcykvbCsxMjA6NjAqKHMtbikvbCsyNDAsaT0wPT09bD8wOi41Pj11P2wvYzpsLygyLWMpLFtNYXRoLnJvdW5kKGUpJTM2MCxpLHUsbnVsbD09YT8xOmFdfSxjLmhzbGEuZnJvbT1mdW5jdGlvbih0KXtpZihudWxsPT10WzBdfHxudWxsPT10WzFdfHxudWxsPT10WzJdKXJldHVybltudWxsLG51bGwsbnVsbCx0WzNdXTt2YXIgZT10WzBdLzM2MCxpPXRbMV0scz10WzJdLG89dFszXSxhPS41Pj1zP3MqKDEraSk6cytpLXMqaSxyPTIqcy1hO3JldHVybltNYXRoLnJvdW5kKDI1NSpuKHIsYSxlKzEvMykpLE1hdGgucm91bmQoMjU1Km4ocixhLGUpKSxNYXRoLnJvdW5kKDI1NSpuKHIsYSxlLTEvMykpLG9dfSxmKGMsZnVuY3Rpb24ocyxuKXt2YXIgbz1uLnByb3BzLGE9bi5jYWNoZSxoPW4udG8sYz1uLmZyb207bC5mbltzXT1mdW5jdGlvbihzKXtpZihoJiYhdGhpc1thXSYmKHRoaXNbYV09aCh0aGlzLl9yZ2JhKSkscz09PWUpcmV0dXJuIHRoaXNbYV0uc2xpY2UoKTt2YXIgbixyPXQudHlwZShzKSx1PVwiYXJyYXlcIj09PXJ8fFwib2JqZWN0XCI9PT1yP3M6YXJndW1lbnRzLGQ9dGhpc1thXS5zbGljZSgpO3JldHVybiBmKG8sZnVuY3Rpb24odCxlKXt2YXIgcz11W1wib2JqZWN0XCI9PT1yP3Q6ZS5pZHhdO251bGw9PXMmJihzPWRbZS5pZHhdKSxkW2UuaWR4XT1pKHMsZSl9KSxjPyhuPWwoYyhkKSksblthXT1kLG4pOmwoZCl9LGYobyxmdW5jdGlvbihlLGkpe2wuZm5bZV18fChsLmZuW2VdPWZ1bmN0aW9uKG4pe3ZhciBvLGE9dC50eXBlKG4pLGg9XCJhbHBoYVwiPT09ZT90aGlzLl9oc2xhP1wiaHNsYVwiOlwicmdiYVwiOnMsbD10aGlzW2hdKCksYz1sW2kuaWR4XTtyZXR1cm5cInVuZGVmaW5lZFwiPT09YT9jOihcImZ1bmN0aW9uXCI9PT1hJiYobj1uLmNhbGwodGhpcyxjKSxhPXQudHlwZShuKSksbnVsbD09biYmaS5lbXB0eT90aGlzOihcInN0cmluZ1wiPT09YSYmKG89ci5leGVjKG4pLG8mJihuPWMrcGFyc2VGbG9hdChvWzJdKSooXCIrXCI9PT1vWzFdPzE6LTEpKSksbFtpLmlkeF09bix0aGlzW2hdKGwpKSl9KX0pfSksbC5ob29rPWZ1bmN0aW9uKGUpe3ZhciBpPWUuc3BsaXQoXCIgXCIpO2YoaSxmdW5jdGlvbihlLGkpe3QuY3NzSG9va3NbaV09e3NldDpmdW5jdGlvbihlLG4pe3ZhciBvLGEscj1cIlwiO2lmKFwidHJhbnNwYXJlbnRcIiE9PW4mJihcInN0cmluZ1wiIT09dC50eXBlKG4pfHwobz1zKG4pKSkpe2lmKG49bChvfHxuKSwhZC5yZ2JhJiYxIT09bi5fcmdiYVszXSl7Zm9yKGE9XCJiYWNrZ3JvdW5kQ29sb3JcIj09PWk/ZS5wYXJlbnROb2RlOmU7KFwiXCI9PT1yfHxcInRyYW5zcGFyZW50XCI9PT1yKSYmYSYmYS5zdHlsZTspdHJ5e3I9dC5jc3MoYSxcImJhY2tncm91bmRDb2xvclwiKSxhPWEucGFyZW50Tm9kZX1jYXRjaChoKXt9bj1uLmJsZW5kKHImJlwidHJhbnNwYXJlbnRcIiE9PXI/cjpcIl9kZWZhdWx0XCIpfW49bi50b1JnYmFTdHJpbmcoKX10cnl7ZS5zdHlsZVtpXT1ufWNhdGNoKGgpe319fSx0LmZ4LnN0ZXBbaV09ZnVuY3Rpb24oZSl7ZS5jb2xvckluaXR8fChlLnN0YXJ0PWwoZS5lbGVtLGkpLGUuZW5kPWwoZS5lbmQpLGUuY29sb3JJbml0PSEwKSx0LmNzc0hvb2tzW2ldLnNldChlLmVsZW0sZS5zdGFydC50cmFuc2l0aW9uKGUuZW5kLGUucG9zKSl9fSl9LGwuaG9vayhhKSx0LmNzc0hvb2tzLmJvcmRlckNvbG9yPXtleHBhbmQ6ZnVuY3Rpb24odCl7dmFyIGU9e307cmV0dXJuIGYoW1wiVG9wXCIsXCJSaWdodFwiLFwiQm90dG9tXCIsXCJMZWZ0XCJdLGZ1bmN0aW9uKGkscyl7ZVtcImJvcmRlclwiK3MrXCJDb2xvclwiXT10fSksZX19LG89dC5Db2xvci5uYW1lcz17YXF1YTpcIiMwMGZmZmZcIixibGFjazpcIiMwMDAwMDBcIixibHVlOlwiIzAwMDBmZlwiLGZ1Y2hzaWE6XCIjZmYwMGZmXCIsZ3JheTpcIiM4MDgwODBcIixncmVlbjpcIiMwMDgwMDBcIixsaW1lOlwiIzAwZmYwMFwiLG1hcm9vbjpcIiM4MDAwMDBcIixuYXZ5OlwiIzAwMDA4MFwiLG9saXZlOlwiIzgwODAwMFwiLHB1cnBsZTpcIiM4MDAwODBcIixyZWQ6XCIjZmYwMDAwXCIsc2lsdmVyOlwiI2MwYzBjMFwiLHRlYWw6XCIjMDA4MDgwXCIsd2hpdGU6XCIjZmZmZmZmXCIseWVsbG93OlwiI2ZmZmYwMFwiLHRyYW5zcGFyZW50OltudWxsLG51bGwsbnVsbCwwXSxfZGVmYXVsdDpcIiNmZmZmZmZcIn19KHApLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlKXt2YXIgaSxzLG49ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3P2Uub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCk6ZS5jdXJyZW50U3R5bGUsbz17fTtpZihuJiZuLmxlbmd0aCYmblswXSYmbltuWzBdXSlmb3Iocz1uLmxlbmd0aDtzLS07KWk9bltzXSxcInN0cmluZ1wiPT10eXBlb2YgbltpXSYmKG9bdC5jYW1lbENhc2UoaSldPW5baV0pO2Vsc2UgZm9yKGkgaW4gbilcInN0cmluZ1wiPT10eXBlb2YgbltpXSYmKG9baV09bltpXSk7cmV0dXJuIG99ZnVuY3Rpb24gaShlLGkpe3ZhciBzLG8sYT17fTtmb3IocyBpbiBpKW89aVtzXSxlW3NdIT09byYmKG5bc118fCh0LmZ4LnN0ZXBbc118fCFpc05hTihwYXJzZUZsb2F0KG8pKSkmJihhW3NdPW8pKTtyZXR1cm4gYX12YXIgcz1bXCJhZGRcIixcInJlbW92ZVwiLFwidG9nZ2xlXCJdLG49e2JvcmRlcjoxLGJvcmRlckJvdHRvbToxLGJvcmRlckNvbG9yOjEsYm9yZGVyTGVmdDoxLGJvcmRlclJpZ2h0OjEsYm9yZGVyVG9wOjEsYm9yZGVyV2lkdGg6MSxtYXJnaW46MSxwYWRkaW5nOjF9O3QuZWFjaChbXCJib3JkZXJMZWZ0U3R5bGVcIixcImJvcmRlclJpZ2h0U3R5bGVcIixcImJvcmRlckJvdHRvbVN0eWxlXCIsXCJib3JkZXJUb3BTdHlsZVwiXSxmdW5jdGlvbihlLGkpe3QuZnguc3RlcFtpXT1mdW5jdGlvbih0KXsoXCJub25lXCIhPT10LmVuZCYmIXQuc2V0QXR0cnx8MT09PXQucG9zJiYhdC5zZXRBdHRyKSYmKHAuc3R5bGUodC5lbGVtLGksdC5lbmQpLHQuc2V0QXR0cj0hMCl9fSksdC5mbi5hZGRCYWNrfHwodC5mbi5hZGRCYWNrPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFkZChudWxsPT10P3RoaXMucHJldk9iamVjdDp0aGlzLnByZXZPYmplY3QuZmlsdGVyKHQpKX0pLHQuZWZmZWN0cy5hbmltYXRlQ2xhc3M9ZnVuY3Rpb24obixvLGEscil7dmFyIGg9dC5zcGVlZChvLGEscik7cmV0dXJuIHRoaXMucXVldWUoZnVuY3Rpb24oKXt2YXIgbyxhPXQodGhpcykscj1hLmF0dHIoXCJjbGFzc1wiKXx8XCJcIixsPWguY2hpbGRyZW4/YS5maW5kKFwiKlwiKS5hZGRCYWNrKCk6YTtsPWwubWFwKGZ1bmN0aW9uKCl7dmFyIGk9dCh0aGlzKTtyZXR1cm57ZWw6aSxzdGFydDplKHRoaXMpfX0pLG89ZnVuY3Rpb24oKXt0LmVhY2gocyxmdW5jdGlvbih0LGUpe25bZV0mJmFbZStcIkNsYXNzXCJdKG5bZV0pfSl9LG8oKSxsPWwubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5kPWUodGhpcy5lbFswXSksdGhpcy5kaWZmPWkodGhpcy5zdGFydCx0aGlzLmVuZCksdGhpc30pLGEuYXR0cihcImNsYXNzXCIsciksbD1sLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMsaT10LkRlZmVycmVkKCkscz10LmV4dGVuZCh7fSxoLHtxdWV1ZTohMSxjb21wbGV0ZTpmdW5jdGlvbigpe2kucmVzb2x2ZShlKX19KTtyZXR1cm4gdGhpcy5lbC5hbmltYXRlKHRoaXMuZGlmZixzKSxpLnByb21pc2UoKX0pLHQud2hlbi5hcHBseSh0LGwuZ2V0KCkpLmRvbmUoZnVuY3Rpb24oKXtvKCksdC5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbigpe3ZhciBlPXRoaXMuZWw7dC5lYWNoKHRoaXMuZGlmZixmdW5jdGlvbih0KXtlLmNzcyh0LFwiXCIpfSl9KSxoLmNvbXBsZXRlLmNhbGwoYVswXSl9KX0pfSx0LmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkscyxuLG8pe3JldHVybiBzP3QuZWZmZWN0cy5hbmltYXRlQ2xhc3MuY2FsbCh0aGlzLHthZGQ6aX0scyxuLG8pOmUuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0odC5mbi5hZGRDbGFzcykscmVtb3ZlQ2xhc3M6ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkscyxuLG8pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPjE/dC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKHRoaXMse3JlbW92ZTppfSxzLG4sbyk6ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSh0LmZuLnJlbW92ZUNsYXNzKSx0b2dnbGVDbGFzczpmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24oaSxzLG4sbyxhKXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHN8fHZvaWQgMD09PXM/bj90LmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwodGhpcyxzP3thZGQ6aX06e3JlbW92ZTppfSxuLG8sYSk6ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dC5lZmZlY3RzLmFuaW1hdGVDbGFzcy5jYWxsKHRoaXMse3RvZ2dsZTppfSxzLG4sbyl9fSh0LmZuLnRvZ2dsZUNsYXNzKSxzd2l0Y2hDbGFzczpmdW5jdGlvbihlLGkscyxuLG8pe3JldHVybiB0LmVmZmVjdHMuYW5pbWF0ZUNsYXNzLmNhbGwodGhpcyx7YWRkOmkscmVtb3ZlOmV9LHMsbixvKX19KX0oKSxmdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSxpLHMsbil7cmV0dXJuIHQuaXNQbGFpbk9iamVjdChlKSYmKGk9ZSxlPWUuZWZmZWN0KSxlPXtlZmZlY3Q6ZX0sbnVsbD09aSYmKGk9e30pLHQuaXNGdW5jdGlvbihpKSYmKG49aSxzPW51bGwsaT17fSksKFwibnVtYmVyXCI9PXR5cGVvZiBpfHx0LmZ4LnNwZWVkc1tpXSkmJihuPXMscz1pLGk9e30pLHQuaXNGdW5jdGlvbihzKSYmKG49cyxzPW51bGwpLGkmJnQuZXh0ZW5kKGUsaSkscz1zfHxpLmR1cmF0aW9uLGUuZHVyYXRpb249dC5meC5vZmY/MDpcIm51bWJlclwiPT10eXBlb2Ygcz9zOnMgaW4gdC5meC5zcGVlZHM/dC5meC5zcGVlZHNbc106dC5meC5zcGVlZHMuX2RlZmF1bHQsZS5jb21wbGV0ZT1ufHxpLmNvbXBsZXRlLGV9ZnVuY3Rpb24gaShlKXtyZXR1cm4hZXx8XCJudW1iZXJcIj09dHlwZW9mIGV8fHQuZnguc3BlZWRzW2VdPyEwOlwic3RyaW5nXCIhPXR5cGVvZiBlfHx0LmVmZmVjdHMuZWZmZWN0W2VdP3QuaXNGdW5jdGlvbihlKT8hMDpcIm9iamVjdFwiIT10eXBlb2YgZXx8ZS5lZmZlY3Q/ITE6ITA6ITB9ZnVuY3Rpb24gcyh0LGUpe3ZhciBpPWUub3V0ZXJXaWR0aCgpLHM9ZS5vdXRlckhlaWdodCgpLG49L15yZWN0XFwoKC0/XFxkKlxcLj9cXGQqcHh8LT9cXGQrJXxhdXRvKSw/XFxzKigtP1xcZCpcXC4/XFxkKnB4fC0/XFxkKyV8YXV0byksP1xccyooLT9cXGQqXFwuP1xcZCpweHwtP1xcZCslfGF1dG8pLD9cXHMqKC0/XFxkKlxcLj9cXGQqcHh8LT9cXGQrJXxhdXRvKVxcKSQvLG89bi5leGVjKHQpfHxbXCJcIiwwLGkscywwXTtyZXR1cm57dG9wOnBhcnNlRmxvYXQob1sxXSl8fDAscmlnaHQ6XCJhdXRvXCI9PT1vWzJdP2k6cGFyc2VGbG9hdChvWzJdKSxib3R0b206XCJhdXRvXCI9PT1vWzNdP3M6cGFyc2VGbG9hdChvWzNdKSxsZWZ0OnBhcnNlRmxvYXQob1s0XSl8fDB9fXQuZXhwciYmdC5leHByLmZpbHRlcnMmJnQuZXhwci5maWx0ZXJzLmFuaW1hdGVkJiYodC5leHByLmZpbHRlcnMuYW5pbWF0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKGkpe3JldHVybiEhdChpKS5kYXRhKGQpfHxlKGkpfX0odC5leHByLmZpbHRlcnMuYW5pbWF0ZWQpKSx0LnVpQmFja0NvbXBhdCE9PSExJiZ0LmV4dGVuZCh0LmVmZmVjdHMse3NhdmU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIGk9MCxzPWUubGVuZ3RoO3M+aTtpKyspbnVsbCE9PWVbaV0mJnQuZGF0YShjK2VbaV0sdFswXS5zdHlsZVtlW2ldXSl9LHJlc3RvcmU6ZnVuY3Rpb24odCxlKXtmb3IodmFyIGkscz0wLG49ZS5sZW5ndGg7bj5zO3MrKyludWxsIT09ZVtzXSYmKGk9dC5kYXRhKGMrZVtzXSksdC5jc3MoZVtzXSxpKSl9LHNldE1vZGU6ZnVuY3Rpb24odCxlKXtyZXR1cm5cInRvZ2dsZVwiPT09ZSYmKGU9dC5pcyhcIjpoaWRkZW5cIik/XCJzaG93XCI6XCJoaWRlXCIpLGV9LGNyZWF0ZVdyYXBwZXI6ZnVuY3Rpb24oZSl7aWYoZS5wYXJlbnQoKS5pcyhcIi51aS1lZmZlY3RzLXdyYXBwZXJcIikpcmV0dXJuIGUucGFyZW50KCk7dmFyIGk9e3dpZHRoOmUub3V0ZXJXaWR0aCghMCksaGVpZ2h0OmUub3V0ZXJIZWlnaHQoITApLFwiZmxvYXRcIjplLmNzcyhcImZsb2F0XCIpfSxzPXQoXCI8ZGl2PjwvZGl2PlwiKS5hZGRDbGFzcyhcInVpLWVmZmVjdHMtd3JhcHBlclwiKS5jc3Moe2ZvbnRTaXplOlwiMTAwJVwiLGJhY2tncm91bmQ6XCJ0cmFuc3BhcmVudFwiLGJvcmRlcjpcIm5vbmVcIixtYXJnaW46MCxwYWRkaW5nOjB9KSxuPXt3aWR0aDplLndpZHRoKCksaGVpZ2h0OmUuaGVpZ2h0KCl9LG89ZG9jdW1lbnQuYWN0aXZlRWxlbWVudDt0cnl7by5pZH1jYXRjaChhKXtvPWRvY3VtZW50LmJvZHl9cmV0dXJuIGUud3JhcChzKSwoZVswXT09PW98fHQuY29udGFpbnMoZVswXSxvKSkmJnQobykudHJpZ2dlcihcImZvY3VzXCIpLHM9ZS5wYXJlbnQoKSxcInN0YXRpY1wiPT09ZS5jc3MoXCJwb3NpdGlvblwiKT8ocy5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIn0pLGUuY3NzKHtwb3NpdGlvbjpcInJlbGF0aXZlXCJ9KSk6KHQuZXh0ZW5kKGkse3Bvc2l0aW9uOmUuY3NzKFwicG9zaXRpb25cIiksekluZGV4OmUuY3NzKFwiei1pbmRleFwiKX0pLHQuZWFjaChbXCJ0b3BcIixcImxlZnRcIixcImJvdHRvbVwiLFwicmlnaHRcIl0sZnVuY3Rpb24odCxzKXtpW3NdPWUuY3NzKHMpLGlzTmFOKHBhcnNlSW50KGlbc10sMTApKSYmKGlbc109XCJhdXRvXCIpfSksZS5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIix0b3A6MCxsZWZ0OjAscmlnaHQ6XCJhdXRvXCIsYm90dG9tOlwiYXV0b1wifSkpLGUuY3NzKG4pLHMuY3NzKGkpLnNob3coKX0scmVtb3ZlV3JhcHBlcjpmdW5jdGlvbihlKXt2YXIgaT1kb2N1bWVudC5hY3RpdmVFbGVtZW50O3JldHVybiBlLnBhcmVudCgpLmlzKFwiLnVpLWVmZmVjdHMtd3JhcHBlclwiKSYmKGUucGFyZW50KCkucmVwbGFjZVdpdGgoZSksKGVbMF09PT1pfHx0LmNvbnRhaW5zKGVbMF0saSkpJiZ0KGkpLnRyaWdnZXIoXCJmb2N1c1wiKSksZX19KSx0LmV4dGVuZCh0LmVmZmVjdHMse3ZlcnNpb246XCIxLjEyLjFcIixkZWZpbmU6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiBzfHwocz1pLGk9XCJlZmZlY3RcIiksdC5lZmZlY3RzLmVmZmVjdFtlXT1zLHQuZWZmZWN0cy5lZmZlY3RbZV0ubW9kZT1pLHN9LHNjYWxlZERpbWVuc2lvbnM6ZnVuY3Rpb24odCxlLGkpe2lmKDA9PT1lKXJldHVybntoZWlnaHQ6MCx3aWR0aDowLG91dGVySGVpZ2h0OjAsb3V0ZXJXaWR0aDowfTt2YXIgcz1cImhvcml6b250YWxcIiE9PWk/KGV8fDEwMCkvMTAwOjEsbj1cInZlcnRpY2FsXCIhPT1pPyhlfHwxMDApLzEwMDoxO3JldHVybntoZWlnaHQ6dC5oZWlnaHQoKSpuLHdpZHRoOnQud2lkdGgoKSpzLG91dGVySGVpZ2h0OnQub3V0ZXJIZWlnaHQoKSpuLG91dGVyV2lkdGg6dC5vdXRlcldpZHRoKCkqc319LGNsaXBUb0JveDpmdW5jdGlvbih0KXtyZXR1cm57d2lkdGg6dC5jbGlwLnJpZ2h0LXQuY2xpcC5sZWZ0LGhlaWdodDp0LmNsaXAuYm90dG9tLXQuY2xpcC50b3AsbGVmdDp0LmNsaXAubGVmdCx0b3A6dC5jbGlwLnRvcH19LHVuc2hpZnQ6ZnVuY3Rpb24odCxlLGkpe3ZhciBzPXQucXVldWUoKTtlPjEmJnMuc3BsaWNlLmFwcGx5KHMsWzEsMF0uY29uY2F0KHMuc3BsaWNlKGUsaSkpKSx0LmRlcXVldWUoKX0sc2F2ZVN0eWxlOmZ1bmN0aW9uKHQpe3QuZGF0YSh1LHRbMF0uc3R5bGUuY3NzVGV4dCl9LHJlc3RvcmVTdHlsZTpmdW5jdGlvbih0KXt0WzBdLnN0eWxlLmNzc1RleHQ9dC5kYXRhKHUpfHxcIlwiLHQucmVtb3ZlRGF0YSh1KX0sbW9kZTpmdW5jdGlvbih0LGUpe3ZhciBpPXQuaXMoXCI6aGlkZGVuXCIpO3JldHVyblwidG9nZ2xlXCI9PT1lJiYoZT1pP1wic2hvd1wiOlwiaGlkZVwiKSwoaT9cImhpZGVcIj09PWU6XCJzaG93XCI9PT1lKSYmKGU9XCJub25lXCIpLGV9LGdldEJhc2VsaW5lOmZ1bmN0aW9uKHQsZSl7dmFyIGkscztzd2l0Y2godFswXSl7Y2FzZVwidG9wXCI6aT0wO2JyZWFrO2Nhc2VcIm1pZGRsZVwiOmk9LjU7YnJlYWs7Y2FzZVwiYm90dG9tXCI6aT0xO2JyZWFrO2RlZmF1bHQ6aT10WzBdL2UuaGVpZ2h0fXN3aXRjaCh0WzFdKXtjYXNlXCJsZWZ0XCI6cz0wO2JyZWFrO2Nhc2VcImNlbnRlclwiOnM9LjU7YnJlYWs7Y2FzZVwicmlnaHRcIjpzPTE7YnJlYWs7ZGVmYXVsdDpzPXRbMV0vZS53aWR0aH1yZXR1cm57eDpzLHk6aX19LGNyZWF0ZVBsYWNlaG9sZGVyOmZ1bmN0aW9uKGUpe3ZhciBpLHM9ZS5jc3MoXCJwb3NpdGlvblwiKSxuPWUucG9zaXRpb24oKTtyZXR1cm4gZS5jc3Moe21hcmdpblRvcDplLmNzcyhcIm1hcmdpblRvcFwiKSxtYXJnaW5Cb3R0b206ZS5jc3MoXCJtYXJnaW5Cb3R0b21cIiksbWFyZ2luTGVmdDplLmNzcyhcIm1hcmdpbkxlZnRcIiksbWFyZ2luUmlnaHQ6ZS5jc3MoXCJtYXJnaW5SaWdodFwiKX0pLm91dGVyV2lkdGgoZS5vdXRlcldpZHRoKCkpLm91dGVySGVpZ2h0KGUub3V0ZXJIZWlnaHQoKSksL14oc3RhdGljfHJlbGF0aXZlKS8udGVzdChzKSYmKHM9XCJhYnNvbHV0ZVwiLGk9dChcIjxcIitlWzBdLm5vZGVOYW1lK1wiPlwiKS5pbnNlcnRBZnRlcihlKS5jc3Moe2Rpc3BsYXk6L14oaW5saW5lfHJ1YnkpLy50ZXN0KGUuY3NzKFwiZGlzcGxheVwiKSk/XCJpbmxpbmUtYmxvY2tcIjpcImJsb2NrXCIsdmlzaWJpbGl0eTpcImhpZGRlblwiLG1hcmdpblRvcDplLmNzcyhcIm1hcmdpblRvcFwiKSxtYXJnaW5Cb3R0b206ZS5jc3MoXCJtYXJnaW5Cb3R0b21cIiksbWFyZ2luTGVmdDplLmNzcyhcIm1hcmdpbkxlZnRcIiksbWFyZ2luUmlnaHQ6ZS5jc3MoXCJtYXJnaW5SaWdodFwiKSxcImZsb2F0XCI6ZS5jc3MoXCJmbG9hdFwiKX0pLm91dGVyV2lkdGgoZS5vdXRlcldpZHRoKCkpLm91dGVySGVpZ2h0KGUub3V0ZXJIZWlnaHQoKSkuYWRkQ2xhc3MoXCJ1aS1lZmZlY3RzLXBsYWNlaG9sZGVyXCIpLGUuZGF0YShjK1wicGxhY2Vob2xkZXJcIixpKSksZS5jc3Moe3Bvc2l0aW9uOnMsbGVmdDpuLmxlZnQsdG9wOm4udG9wfSksaX0scmVtb3ZlUGxhY2Vob2xkZXI6ZnVuY3Rpb24odCl7dmFyIGU9YytcInBsYWNlaG9sZGVyXCIsaT10LmRhdGEoZSk7aSYmKGkucmVtb3ZlKCksdC5yZW1vdmVEYXRhKGUpKX0sY2xlYW5VcDpmdW5jdGlvbihlKXt0LmVmZmVjdHMucmVzdG9yZVN0eWxlKGUpLHQuZWZmZWN0cy5yZW1vdmVQbGFjZWhvbGRlcihlKX0sc2V0VHJhbnNpdGlvbjpmdW5jdGlvbihlLGkscyxuKXtyZXR1cm4gbj1ufHx7fSx0LmVhY2goaSxmdW5jdGlvbih0LGkpe3ZhciBvPWUuY3NzVW5pdChpKTtvWzBdPjAmJihuW2ldPW9bMF0qcytvWzFdKX0pLG59fSksdC5mbi5leHRlbmQoe2VmZmVjdDpmdW5jdGlvbigpe2Z1bmN0aW9uIGkoZSl7ZnVuY3Rpb24gaSgpe3IucmVtb3ZlRGF0YShkKSx0LmVmZmVjdHMuY2xlYW5VcChyKSxcImhpZGVcIj09PXMubW9kZSYmci5oaWRlKCksYSgpfWZ1bmN0aW9uIGEoKXt0LmlzRnVuY3Rpb24oaCkmJmguY2FsbChyWzBdKSx0LmlzRnVuY3Rpb24oZSkmJmUoKX12YXIgcj10KHRoaXMpO3MubW9kZT1jLnNoaWZ0KCksdC51aUJhY2tDb21wYXQ9PT0hMXx8bz9cIm5vbmVcIj09PXMubW9kZT8ocltsXSgpLGEoKSk6bi5jYWxsKHJbMF0scyxpKTooci5pcyhcIjpoaWRkZW5cIik/XCJoaWRlXCI9PT1sOlwic2hvd1wiPT09bCk/KHJbbF0oKSxhKCkpOm4uY2FsbChyWzBdLHMsYSl9dmFyIHM9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksbj10LmVmZmVjdHMuZWZmZWN0W3MuZWZmZWN0XSxvPW4ubW9kZSxhPXMucXVldWUscj1hfHxcImZ4XCIsaD1zLmNvbXBsZXRlLGw9cy5tb2RlLGM9W10sdT1mdW5jdGlvbihlKXt2YXIgaT10KHRoaXMpLHM9dC5lZmZlY3RzLm1vZGUoaSxsKXx8bztpLmRhdGEoZCwhMCksYy5wdXNoKHMpLG8mJihcInNob3dcIj09PXN8fHM9PT1vJiZcImhpZGVcIj09PXMpJiZpLnNob3coKSxvJiZcIm5vbmVcIj09PXN8fHQuZWZmZWN0cy5zYXZlU3R5bGUoaSksdC5pc0Z1bmN0aW9uKGUpJiZlKCl9O3JldHVybiB0LmZ4Lm9mZnx8IW4/bD90aGlzW2xdKHMuZHVyYXRpb24saCk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7aCYmaC5jYWxsKHRoaXMpfSk6YT09PSExP3RoaXMuZWFjaCh1KS5lYWNoKGkpOnRoaXMucXVldWUocix1KS5xdWV1ZShyLGkpfSxzaG93OmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihzKXtpZihpKHMpKXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgbj1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbi5tb2RlPVwic2hvd1wiLHRoaXMuZWZmZWN0LmNhbGwodGhpcyxuKVxufX0odC5mbi5zaG93KSxoaWRlOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihzKXtpZihpKHMpKXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKTt2YXIgbj1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtyZXR1cm4gbi5tb2RlPVwiaGlkZVwiLHRoaXMuZWZmZWN0LmNhbGwodGhpcyxuKX19KHQuZm4uaGlkZSksdG9nZ2xlOmZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihzKXtpZihpKHMpfHxcImJvb2xlYW5cIj09dHlwZW9mIHMpcmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciBuPWUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3JldHVybiBuLm1vZGU9XCJ0b2dnbGVcIix0aGlzLmVmZmVjdC5jYWxsKHRoaXMsbil9fSh0LmZuLnRvZ2dsZSksY3NzVW5pdDpmdW5jdGlvbihlKXt2YXIgaT10aGlzLmNzcyhlKSxzPVtdO3JldHVybiB0LmVhY2goW1wiZW1cIixcInB4XCIsXCIlXCIsXCJwdFwiXSxmdW5jdGlvbih0LGUpe2kuaW5kZXhPZihlKT4wJiYocz1bcGFyc2VGbG9hdChpKSxlXSl9KSxzfSxjc3NDbGlwOmZ1bmN0aW9uKHQpe3JldHVybiB0P3RoaXMuY3NzKFwiY2xpcFwiLFwicmVjdChcIit0LnRvcCtcInB4IFwiK3QucmlnaHQrXCJweCBcIit0LmJvdHRvbStcInB4IFwiK3QubGVmdCtcInB4KVwiKTpzKHRoaXMuY3NzKFwiY2xpcFwiKSx0aGlzKX0sdHJhbnNmZXI6ZnVuY3Rpb24oZSxpKXt2YXIgcz10KHRoaXMpLG49dChlLnRvKSxvPVwiZml4ZWRcIj09PW4uY3NzKFwicG9zaXRpb25cIiksYT10KFwiYm9keVwiKSxyPW8/YS5zY3JvbGxUb3AoKTowLGg9bz9hLnNjcm9sbExlZnQoKTowLGw9bi5vZmZzZXQoKSxjPXt0b3A6bC50b3AtcixsZWZ0OmwubGVmdC1oLGhlaWdodDpuLmlubmVySGVpZ2h0KCksd2lkdGg6bi5pbm5lcldpZHRoKCl9LHU9cy5vZmZzZXQoKSxkPXQoXCI8ZGl2IGNsYXNzPSd1aS1lZmZlY3RzLXRyYW5zZmVyJz48L2Rpdj5cIikuYXBwZW5kVG8oXCJib2R5XCIpLmFkZENsYXNzKGUuY2xhc3NOYW1lKS5jc3Moe3RvcDp1LnRvcC1yLGxlZnQ6dS5sZWZ0LWgsaGVpZ2h0OnMuaW5uZXJIZWlnaHQoKSx3aWR0aDpzLmlubmVyV2lkdGgoKSxwb3NpdGlvbjpvP1wiZml4ZWRcIjpcImFic29sdXRlXCJ9KS5hbmltYXRlKGMsZS5kdXJhdGlvbixlLmVhc2luZyxmdW5jdGlvbigpe2QucmVtb3ZlKCksdC5pc0Z1bmN0aW9uKGkpJiZpKCl9KX19KSx0LmZ4LnN0ZXAuY2xpcD1mdW5jdGlvbihlKXtlLmNsaXBJbml0fHwoZS5zdGFydD10KGUuZWxlbSkuY3NzQ2xpcCgpLFwic3RyaW5nXCI9PXR5cGVvZiBlLmVuZCYmKGUuZW5kPXMoZS5lbmQsZS5lbGVtKSksZS5jbGlwSW5pdD0hMCksdChlLmVsZW0pLmNzc0NsaXAoe3RvcDplLnBvcyooZS5lbmQudG9wLWUuc3RhcnQudG9wKStlLnN0YXJ0LnRvcCxyaWdodDplLnBvcyooZS5lbmQucmlnaHQtZS5zdGFydC5yaWdodCkrZS5zdGFydC5yaWdodCxib3R0b206ZS5wb3MqKGUuZW5kLmJvdHRvbS1lLnN0YXJ0LmJvdHRvbSkrZS5zdGFydC5ib3R0b20sbGVmdDplLnBvcyooZS5lbmQubGVmdC1lLnN0YXJ0LmxlZnQpK2Uuc3RhcnQubGVmdH0pfX0oKSxmdW5jdGlvbigpe3ZhciBlPXt9O3QuZWFjaChbXCJRdWFkXCIsXCJDdWJpY1wiLFwiUXVhcnRcIixcIlF1aW50XCIsXCJFeHBvXCJdLGZ1bmN0aW9uKHQsaSl7ZVtpXT1mdW5jdGlvbihlKXtyZXR1cm4gTWF0aC5wb3coZSx0KzIpfX0pLHQuZXh0ZW5kKGUse1NpbmU6ZnVuY3Rpb24odCl7cmV0dXJuIDEtTWF0aC5jb3ModCpNYXRoLlBJLzIpfSxDaXJjOmZ1bmN0aW9uKHQpe3JldHVybiAxLU1hdGguc3FydCgxLXQqdCl9LEVsYXN0aWM6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10fHwxPT09dD90Oi1NYXRoLnBvdygyLDgqKHQtMSkpKk1hdGguc2luKCg4MCoodC0xKS03LjUpKk1hdGguUEkvMTUpfSxCYWNrOmZ1bmN0aW9uKHQpe3JldHVybiB0KnQqKDMqdC0yKX0sQm91bmNlOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxpPTQ7KChlPU1hdGgucG93KDIsLS1pKSktMSkvMTE+dDspO3JldHVybiAxL01hdGgucG93KDQsMy1pKS03LjU2MjUqTWF0aC5wb3coKDMqZS0yKS8yMi10LDIpfX0pLHQuZWFjaChlLGZ1bmN0aW9uKGUsaSl7dC5lYXNpbmdbXCJlYXNlSW5cIitlXT1pLHQuZWFzaW5nW1wiZWFzZU91dFwiK2VdPWZ1bmN0aW9uKHQpe3JldHVybiAxLWkoMS10KX0sdC5lYXNpbmdbXCJlYXNlSW5PdXRcIitlXT1mdW5jdGlvbih0KXtyZXR1cm4uNT50P2koMip0KS8yOjEtaSgtMip0KzIpLzJ9fSl9KCk7dmFyIGY9dC5lZmZlY3RzO3QuZWZmZWN0cy5kZWZpbmUoXCJibGluZFwiLFwiaGlkZVwiLGZ1bmN0aW9uKGUsaSl7dmFyIHM9e3VwOltcImJvdHRvbVwiLFwidG9wXCJdLHZlcnRpY2FsOltcImJvdHRvbVwiLFwidG9wXCJdLGRvd246W1widG9wXCIsXCJib3R0b21cIl0sbGVmdDpbXCJyaWdodFwiLFwibGVmdFwiXSxob3Jpem9udGFsOltcInJpZ2h0XCIsXCJsZWZ0XCJdLHJpZ2h0OltcImxlZnRcIixcInJpZ2h0XCJdfSxuPXQodGhpcyksbz1lLmRpcmVjdGlvbnx8XCJ1cFwiLGE9bi5jc3NDbGlwKCkscj17Y2xpcDp0LmV4dGVuZCh7fSxhKX0saD10LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIobik7ci5jbGlwW3Nbb11bMF1dPXIuY2xpcFtzW29dWzFdXSxcInNob3dcIj09PWUubW9kZSYmKG4uY3NzQ2xpcChyLmNsaXApLGgmJmguY3NzKHQuZWZmZWN0cy5jbGlwVG9Cb3gocikpLHIuY2xpcD1hKSxoJiZoLmFuaW1hdGUodC5lZmZlY3RzLmNsaXBUb0JveChyKSxlLmR1cmF0aW9uLGUuZWFzaW5nKSxuLmFuaW1hdGUocix7cXVldWU6ITEsZHVyYXRpb246ZS5kdXJhdGlvbixlYXNpbmc6ZS5lYXNpbmcsY29tcGxldGU6aX0pfSksdC5lZmZlY3RzLmRlZmluZShcImJvdW5jZVwiLGZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvLGE9dCh0aGlzKSxyPWUubW9kZSxoPVwiaGlkZVwiPT09cixsPVwic2hvd1wiPT09cixjPWUuZGlyZWN0aW9ufHxcInVwXCIsdT1lLmRpc3RhbmNlLGQ9ZS50aW1lc3x8NSxwPTIqZCsobHx8aD8xOjApLGY9ZS5kdXJhdGlvbi9wLGc9ZS5lYXNpbmcsbT1cInVwXCI9PT1jfHxcImRvd25cIj09PWM/XCJ0b3BcIjpcImxlZnRcIixfPVwidXBcIj09PWN8fFwibGVmdFwiPT09Yyx2PTAsYj1hLnF1ZXVlKCkubGVuZ3RoO2Zvcih0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIoYSksbz1hLmNzcyhtKSx1fHwodT1hW1widG9wXCI9PT1tP1wib3V0ZXJIZWlnaHRcIjpcIm91dGVyV2lkdGhcIl0oKS8zKSxsJiYobj17b3BhY2l0eToxfSxuW21dPW8sYS5jc3MoXCJvcGFjaXR5XCIsMCkuY3NzKG0sXz8yKi11OjIqdSkuYW5pbWF0ZShuLGYsZykpLGgmJih1Lz1NYXRoLnBvdygyLGQtMSkpLG49e30sblttXT1vO2Q+djt2Kyspcz17fSxzW21dPShfP1wiLT1cIjpcIis9XCIpK3UsYS5hbmltYXRlKHMsZixnKS5hbmltYXRlKG4sZixnKSx1PWg/Mip1OnUvMjtoJiYocz17b3BhY2l0eTowfSxzW21dPShfP1wiLT1cIjpcIis9XCIpK3UsYS5hbmltYXRlKHMsZixnKSksYS5xdWV1ZShpKSx0LmVmZmVjdHMudW5zaGlmdChhLGIscCsxKX0pLHQuZWZmZWN0cy5kZWZpbmUoXCJjbGlwXCIsXCJoaWRlXCIsZnVuY3Rpb24oZSxpKXt2YXIgcyxuPXt9LG89dCh0aGlzKSxhPWUuZGlyZWN0aW9ufHxcInZlcnRpY2FsXCIscj1cImJvdGhcIj09PWEsaD1yfHxcImhvcml6b250YWxcIj09PWEsbD1yfHxcInZlcnRpY2FsXCI9PT1hO3M9by5jc3NDbGlwKCksbi5jbGlwPXt0b3A6bD8ocy5ib3R0b20tcy50b3ApLzI6cy50b3AscmlnaHQ6aD8ocy5yaWdodC1zLmxlZnQpLzI6cy5yaWdodCxib3R0b206bD8ocy5ib3R0b20tcy50b3ApLzI6cy5ib3R0b20sbGVmdDpoPyhzLnJpZ2h0LXMubGVmdCkvMjpzLmxlZnR9LHQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlcihvKSxcInNob3dcIj09PWUubW9kZSYmKG8uY3NzQ2xpcChuLmNsaXApLG4uY2xpcD1zKSxvLmFuaW1hdGUobix7cXVldWU6ITEsZHVyYXRpb246ZS5kdXJhdGlvbixlYXNpbmc6ZS5lYXNpbmcsY29tcGxldGU6aX0pfSksdC5lZmZlY3RzLmRlZmluZShcImRyb3BcIixcImhpZGVcIixmdW5jdGlvbihlLGkpe3ZhciBzLG49dCh0aGlzKSxvPWUubW9kZSxhPVwic2hvd1wiPT09byxyPWUuZGlyZWN0aW9ufHxcImxlZnRcIixoPVwidXBcIj09PXJ8fFwiZG93blwiPT09cj9cInRvcFwiOlwibGVmdFwiLGw9XCJ1cFwiPT09cnx8XCJsZWZ0XCI9PT1yP1wiLT1cIjpcIis9XCIsYz1cIis9XCI9PT1sP1wiLT1cIjpcIis9XCIsdT17b3BhY2l0eTowfTt0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIobikscz1lLmRpc3RhbmNlfHxuW1widG9wXCI9PT1oP1wib3V0ZXJIZWlnaHRcIjpcIm91dGVyV2lkdGhcIl0oITApLzIsdVtoXT1sK3MsYSYmKG4uY3NzKHUpLHVbaF09YytzLHUub3BhY2l0eT0xKSxuLmFuaW1hdGUodSx7cXVldWU6ITEsZHVyYXRpb246ZS5kdXJhdGlvbixlYXNpbmc6ZS5lYXNpbmcsY29tcGxldGU6aX0pfSksdC5lZmZlY3RzLmRlZmluZShcImV4cGxvZGVcIixcImhpZGVcIixmdW5jdGlvbihlLGkpe2Z1bmN0aW9uIHMoKXtiLnB1c2godGhpcyksYi5sZW5ndGg9PT11KmQmJm4oKX1mdW5jdGlvbiBuKCl7cC5jc3Moe3Zpc2liaWxpdHk6XCJ2aXNpYmxlXCJ9KSx0KGIpLnJlbW92ZSgpLGkoKX12YXIgbyxhLHIsaCxsLGMsdT1lLnBpZWNlcz9NYXRoLnJvdW5kKE1hdGguc3FydChlLnBpZWNlcykpOjMsZD11LHA9dCh0aGlzKSxmPWUubW9kZSxnPVwic2hvd1wiPT09ZixtPXAuc2hvdygpLmNzcyhcInZpc2liaWxpdHlcIixcImhpZGRlblwiKS5vZmZzZXQoKSxfPU1hdGguY2VpbChwLm91dGVyV2lkdGgoKS9kKSx2PU1hdGguY2VpbChwLm91dGVySGVpZ2h0KCkvdSksYj1bXTtmb3Iobz0wO3U+bztvKyspZm9yKGg9bS50b3Arbyp2LGM9by0odS0xKS8yLGE9MDtkPmE7YSsrKXI9bS5sZWZ0K2EqXyxsPWEtKGQtMSkvMixwLmNsb25lKCkuYXBwZW5kVG8oXCJib2R5XCIpLndyYXAoXCI8ZGl2PjwvZGl2PlwiKS5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix2aXNpYmlsaXR5OlwidmlzaWJsZVwiLGxlZnQ6LWEqXyx0b3A6LW8qdn0pLnBhcmVudCgpLmFkZENsYXNzKFwidWktZWZmZWN0cy1leHBsb2RlXCIpLmNzcyh7cG9zaXRpb246XCJhYnNvbHV0ZVwiLG92ZXJmbG93OlwiaGlkZGVuXCIsd2lkdGg6XyxoZWlnaHQ6dixsZWZ0OnIrKGc/bCpfOjApLHRvcDpoKyhnP2MqdjowKSxvcGFjaXR5Omc/MDoxfSkuYW5pbWF0ZSh7bGVmdDpyKyhnPzA6bCpfKSx0b3A6aCsoZz8wOmMqdiksb3BhY2l0eTpnPzE6MH0sZS5kdXJhdGlvbnx8NTAwLGUuZWFzaW5nLHMpfSksdC5lZmZlY3RzLmRlZmluZShcImZhZGVcIixcInRvZ2dsZVwiLGZ1bmN0aW9uKGUsaSl7dmFyIHM9XCJzaG93XCI9PT1lLm1vZGU7dCh0aGlzKS5jc3MoXCJvcGFjaXR5XCIscz8wOjEpLmFuaW1hdGUoe29wYWNpdHk6cz8xOjB9LHtxdWV1ZTohMSxkdXJhdGlvbjplLmR1cmF0aW9uLGVhc2luZzplLmVhc2luZyxjb21wbGV0ZTppfSl9KSx0LmVmZmVjdHMuZGVmaW5lKFwiZm9sZFwiLFwiaGlkZVwiLGZ1bmN0aW9uKGUsaSl7dmFyIHM9dCh0aGlzKSxuPWUubW9kZSxvPVwic2hvd1wiPT09bixhPVwiaGlkZVwiPT09bixyPWUuc2l6ZXx8MTUsaD0vKFswLTldKyklLy5leGVjKHIpLGw9ISFlLmhvcml6Rmlyc3QsYz1sP1tcInJpZ2h0XCIsXCJib3R0b21cIl06W1wiYm90dG9tXCIsXCJyaWdodFwiXSx1PWUuZHVyYXRpb24vMixkPXQuZWZmZWN0cy5jcmVhdGVQbGFjZWhvbGRlcihzKSxwPXMuY3NzQ2xpcCgpLGY9e2NsaXA6dC5leHRlbmQoe30scCl9LGc9e2NsaXA6dC5leHRlbmQoe30scCl9LG09W3BbY1swXV0scFtjWzFdXV0sXz1zLnF1ZXVlKCkubGVuZ3RoO2gmJihyPXBhcnNlSW50KGhbMV0sMTApLzEwMCptW2E/MDoxXSksZi5jbGlwW2NbMF1dPXIsZy5jbGlwW2NbMF1dPXIsZy5jbGlwW2NbMV1dPTAsbyYmKHMuY3NzQ2xpcChnLmNsaXApLGQmJmQuY3NzKHQuZWZmZWN0cy5jbGlwVG9Cb3goZykpLGcuY2xpcD1wKSxzLnF1ZXVlKGZ1bmN0aW9uKGkpe2QmJmQuYW5pbWF0ZSh0LmVmZmVjdHMuY2xpcFRvQm94KGYpLHUsZS5lYXNpbmcpLmFuaW1hdGUodC5lZmZlY3RzLmNsaXBUb0JveChnKSx1LGUuZWFzaW5nKSxpKCl9KS5hbmltYXRlKGYsdSxlLmVhc2luZykuYW5pbWF0ZShnLHUsZS5lYXNpbmcpLnF1ZXVlKGkpLHQuZWZmZWN0cy51bnNoaWZ0KHMsXyw0KX0pLHQuZWZmZWN0cy5kZWZpbmUoXCJoaWdobGlnaHRcIixcInNob3dcIixmdW5jdGlvbihlLGkpe3ZhciBzPXQodGhpcyksbj17YmFja2dyb3VuZENvbG9yOnMuY3NzKFwiYmFja2dyb3VuZENvbG9yXCIpfTtcImhpZGVcIj09PWUubW9kZSYmKG4ub3BhY2l0eT0wKSx0LmVmZmVjdHMuc2F2ZVN0eWxlKHMpLHMuY3NzKHtiYWNrZ3JvdW5kSW1hZ2U6XCJub25lXCIsYmFja2dyb3VuZENvbG9yOmUuY29sb3J8fFwiI2ZmZmY5OVwifSkuYW5pbWF0ZShuLHtxdWV1ZTohMSxkdXJhdGlvbjplLmR1cmF0aW9uLGVhc2luZzplLmVhc2luZyxjb21wbGV0ZTppfSl9KSx0LmVmZmVjdHMuZGVmaW5lKFwic2l6ZVwiLGZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvLGE9dCh0aGlzKSxyPVtcImZvbnRTaXplXCJdLGg9W1wiYm9yZGVyVG9wV2lkdGhcIixcImJvcmRlckJvdHRvbVdpZHRoXCIsXCJwYWRkaW5nVG9wXCIsXCJwYWRkaW5nQm90dG9tXCJdLGw9W1wiYm9yZGVyTGVmdFdpZHRoXCIsXCJib3JkZXJSaWdodFdpZHRoXCIsXCJwYWRkaW5nTGVmdFwiLFwicGFkZGluZ1JpZ2h0XCJdLGM9ZS5tb2RlLHU9XCJlZmZlY3RcIiE9PWMsZD1lLnNjYWxlfHxcImJvdGhcIixwPWUub3JpZ2lufHxbXCJtaWRkbGVcIixcImNlbnRlclwiXSxmPWEuY3NzKFwicG9zaXRpb25cIiksZz1hLnBvc2l0aW9uKCksbT10LmVmZmVjdHMuc2NhbGVkRGltZW5zaW9ucyhhKSxfPWUuZnJvbXx8bSx2PWUudG98fHQuZWZmZWN0cy5zY2FsZWREaW1lbnNpb25zKGEsMCk7dC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKGEpLFwic2hvd1wiPT09YyYmKG89XyxfPXYsdj1vKSxuPXtmcm9tOnt5Ol8uaGVpZ2h0L20uaGVpZ2h0LHg6Xy53aWR0aC9tLndpZHRofSx0bzp7eTp2LmhlaWdodC9tLmhlaWdodCx4OnYud2lkdGgvbS53aWR0aH19LChcImJveFwiPT09ZHx8XCJib3RoXCI9PT1kKSYmKG4uZnJvbS55IT09bi50by55JiYoXz10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihhLGgsbi5mcm9tLnksXyksdj10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihhLGgsbi50by55LHYpKSxuLmZyb20ueCE9PW4udG8ueCYmKF89dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oYSxsLG4uZnJvbS54LF8pLHY9dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oYSxsLG4udG8ueCx2KSkpLChcImNvbnRlbnRcIj09PWR8fFwiYm90aFwiPT09ZCkmJm4uZnJvbS55IT09bi50by55JiYoXz10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihhLHIsbi5mcm9tLnksXyksdj10LmVmZmVjdHMuc2V0VHJhbnNpdGlvbihhLHIsbi50by55LHYpKSxwJiYocz10LmVmZmVjdHMuZ2V0QmFzZWxpbmUocCxtKSxfLnRvcD0obS5vdXRlckhlaWdodC1fLm91dGVySGVpZ2h0KSpzLnkrZy50b3AsXy5sZWZ0PShtLm91dGVyV2lkdGgtXy5vdXRlcldpZHRoKSpzLngrZy5sZWZ0LHYudG9wPShtLm91dGVySGVpZ2h0LXYub3V0ZXJIZWlnaHQpKnMueStnLnRvcCx2LmxlZnQ9KG0ub3V0ZXJXaWR0aC12Lm91dGVyV2lkdGgpKnMueCtnLmxlZnQpLGEuY3NzKF8pLChcImNvbnRlbnRcIj09PWR8fFwiYm90aFwiPT09ZCkmJihoPWguY29uY2F0KFtcIm1hcmdpblRvcFwiLFwibWFyZ2luQm90dG9tXCJdKS5jb25jYXQociksbD1sLmNvbmNhdChbXCJtYXJnaW5MZWZ0XCIsXCJtYXJnaW5SaWdodFwiXSksYS5maW5kKFwiKlt3aWR0aF1cIikuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQodGhpcykscz10LmVmZmVjdHMuc2NhbGVkRGltZW5zaW9ucyhpKSxvPXtoZWlnaHQ6cy5oZWlnaHQqbi5mcm9tLnksd2lkdGg6cy53aWR0aCpuLmZyb20ueCxvdXRlckhlaWdodDpzLm91dGVySGVpZ2h0Km4uZnJvbS55LG91dGVyV2lkdGg6cy5vdXRlcldpZHRoKm4uZnJvbS54fSxhPXtoZWlnaHQ6cy5oZWlnaHQqbi50by55LHdpZHRoOnMud2lkdGgqbi50by54LG91dGVySGVpZ2h0OnMuaGVpZ2h0Km4udG8ueSxvdXRlcldpZHRoOnMud2lkdGgqbi50by54fTtuLmZyb20ueSE9PW4udG8ueSYmKG89dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oaSxoLG4uZnJvbS55LG8pLGE9dC5lZmZlY3RzLnNldFRyYW5zaXRpb24oaSxoLG4udG8ueSxhKSksbi5mcm9tLnghPT1uLnRvLngmJihvPXQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKGksbCxuLmZyb20ueCxvKSxhPXQuZWZmZWN0cy5zZXRUcmFuc2l0aW9uKGksbCxuLnRvLngsYSkpLHUmJnQuZWZmZWN0cy5zYXZlU3R5bGUoaSksaS5jc3MobyksaS5hbmltYXRlKGEsZS5kdXJhdGlvbixlLmVhc2luZyxmdW5jdGlvbigpe3UmJnQuZWZmZWN0cy5yZXN0b3JlU3R5bGUoaSl9KX0pKSxhLmFuaW1hdGUodix7cXVldWU6ITEsZHVyYXRpb246ZS5kdXJhdGlvbixlYXNpbmc6ZS5lYXNpbmcsY29tcGxldGU6ZnVuY3Rpb24oKXt2YXIgZT1hLm9mZnNldCgpOzA9PT12Lm9wYWNpdHkmJmEuY3NzKFwib3BhY2l0eVwiLF8ub3BhY2l0eSksdXx8KGEuY3NzKFwicG9zaXRpb25cIixcInN0YXRpY1wiPT09Zj9cInJlbGF0aXZlXCI6Zikub2Zmc2V0KGUpLHQuZWZmZWN0cy5zYXZlU3R5bGUoYSkpLGkoKX19KX0pLHQuZWZmZWN0cy5kZWZpbmUoXCJzY2FsZVwiLGZ1bmN0aW9uKGUsaSl7dmFyIHM9dCh0aGlzKSxuPWUubW9kZSxvPXBhcnNlSW50KGUucGVyY2VudCwxMCl8fCgwPT09cGFyc2VJbnQoZS5wZXJjZW50LDEwKT8wOlwiZWZmZWN0XCIhPT1uPzA6MTAwKSxhPXQuZXh0ZW5kKCEwLHtmcm9tOnQuZWZmZWN0cy5zY2FsZWREaW1lbnNpb25zKHMpLHRvOnQuZWZmZWN0cy5zY2FsZWREaW1lbnNpb25zKHMsbyxlLmRpcmVjdGlvbnx8XCJib3RoXCIpLG9yaWdpbjplLm9yaWdpbnx8W1wibWlkZGxlXCIsXCJjZW50ZXJcIl19LGUpO2UuZmFkZSYmKGEuZnJvbS5vcGFjaXR5PTEsYS50by5vcGFjaXR5PTApLHQuZWZmZWN0cy5lZmZlY3Quc2l6ZS5jYWxsKHRoaXMsYSxpKX0pLHQuZWZmZWN0cy5kZWZpbmUoXCJwdWZmXCIsXCJoaWRlXCIsZnVuY3Rpb24oZSxpKXt2YXIgcz10LmV4dGVuZCghMCx7fSxlLHtmYWRlOiEwLHBlcmNlbnQ6cGFyc2VJbnQoZS5wZXJjZW50LDEwKXx8MTUwfSk7dC5lZmZlY3RzLmVmZmVjdC5zY2FsZS5jYWxsKHRoaXMscyxpKX0pLHQuZWZmZWN0cy5kZWZpbmUoXCJwdWxzYXRlXCIsXCJzaG93XCIsZnVuY3Rpb24oZSxpKXt2YXIgcz10KHRoaXMpLG49ZS5tb2RlLG89XCJzaG93XCI9PT1uLGE9XCJoaWRlXCI9PT1uLHI9b3x8YSxoPTIqKGUudGltZXN8fDUpKyhyPzE6MCksbD1lLmR1cmF0aW9uL2gsYz0wLHU9MSxkPXMucXVldWUoKS5sZW5ndGg7Zm9yKChvfHwhcy5pcyhcIjp2aXNpYmxlXCIpKSYmKHMuY3NzKFwib3BhY2l0eVwiLDApLnNob3coKSxjPTEpO2g+dTt1Kyspcy5hbmltYXRlKHtvcGFjaXR5OmN9LGwsZS5lYXNpbmcpLGM9MS1jO3MuYW5pbWF0ZSh7b3BhY2l0eTpjfSxsLGUuZWFzaW5nKSxzLnF1ZXVlKGkpLHQuZWZmZWN0cy51bnNoaWZ0KHMsZCxoKzEpfSksdC5lZmZlY3RzLmRlZmluZShcInNoYWtlXCIsZnVuY3Rpb24oZSxpKXt2YXIgcz0xLG49dCh0aGlzKSxvPWUuZGlyZWN0aW9ufHxcImxlZnRcIixhPWUuZGlzdGFuY2V8fDIwLHI9ZS50aW1lc3x8MyxoPTIqcisxLGw9TWF0aC5yb3VuZChlLmR1cmF0aW9uL2gpLGM9XCJ1cFwiPT09b3x8XCJkb3duXCI9PT1vP1widG9wXCI6XCJsZWZ0XCIsdT1cInVwXCI9PT1vfHxcImxlZnRcIj09PW8sZD17fSxwPXt9LGY9e30sZz1uLnF1ZXVlKCkubGVuZ3RoO2Zvcih0LmVmZmVjdHMuY3JlYXRlUGxhY2Vob2xkZXIobiksZFtjXT0odT9cIi09XCI6XCIrPVwiKSthLHBbY109KHU/XCIrPVwiOlwiLT1cIikrMiphLGZbY109KHU/XCItPVwiOlwiKz1cIikrMiphLG4uYW5pbWF0ZShkLGwsZS5lYXNpbmcpO3I+cztzKyspbi5hbmltYXRlKHAsbCxlLmVhc2luZykuYW5pbWF0ZShmLGwsZS5lYXNpbmcpO24uYW5pbWF0ZShwLGwsZS5lYXNpbmcpLmFuaW1hdGUoZCxsLzIsZS5lYXNpbmcpLnF1ZXVlKGkpLHQuZWZmZWN0cy51bnNoaWZ0KG4sZyxoKzEpfSksdC5lZmZlY3RzLmRlZmluZShcInNsaWRlXCIsXCJzaG93XCIsZnVuY3Rpb24oZSxpKXt2YXIgcyxuLG89dCh0aGlzKSxhPXt1cDpbXCJib3R0b21cIixcInRvcFwiXSxkb3duOltcInRvcFwiLFwiYm90dG9tXCJdLGxlZnQ6W1wicmlnaHRcIixcImxlZnRcIl0scmlnaHQ6W1wibGVmdFwiLFwicmlnaHRcIl19LHI9ZS5tb2RlLGg9ZS5kaXJlY3Rpb258fFwibGVmdFwiLGw9XCJ1cFwiPT09aHx8XCJkb3duXCI9PT1oP1widG9wXCI6XCJsZWZ0XCIsYz1cInVwXCI9PT1ofHxcImxlZnRcIj09PWgsdT1lLmRpc3RhbmNlfHxvW1widG9wXCI9PT1sP1wib3V0ZXJIZWlnaHRcIjpcIm91dGVyV2lkdGhcIl0oITApLGQ9e307dC5lZmZlY3RzLmNyZWF0ZVBsYWNlaG9sZGVyKG8pLHM9by5jc3NDbGlwKCksbj1vLnBvc2l0aW9uKClbbF0sZFtsXT0oYz8tMToxKSp1K24sZC5jbGlwPW8uY3NzQ2xpcCgpLGQuY2xpcFthW2hdWzFdXT1kLmNsaXBbYVtoXVswXV0sXCJzaG93XCI9PT1yJiYoby5jc3NDbGlwKGQuY2xpcCksby5jc3MobCxkW2xdKSxkLmNsaXA9cyxkW2xdPW4pLG8uYW5pbWF0ZShkLHtxdWV1ZTohMSxkdXJhdGlvbjplLmR1cmF0aW9uLGVhc2luZzplLmVhc2luZyxjb21wbGV0ZTppfSl9KTt2YXIgZjt0LnVpQmFja0NvbXBhdCE9PSExJiYoZj10LmVmZmVjdHMuZGVmaW5lKFwidHJhbnNmZXJcIixmdW5jdGlvbihlLGkpe3QodGhpcykudHJhbnNmZXIoZSxpKX0pKSx0LnVpLmZvY3VzYWJsZT1mdW5jdGlvbihpLHMpe3ZhciBuLG8sYSxyLGgsbD1pLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJhcmVhXCI9PT1sPyhuPWkucGFyZW50Tm9kZSxvPW4ubmFtZSxpLmhyZWYmJm8mJlwibWFwXCI9PT1uLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/KGE9dChcImltZ1t1c2VtYXA9JyNcIitvK1wiJ11cIiksYS5sZW5ndGg+MCYmYS5pcyhcIjp2aXNpYmxlXCIpKTohMSk6KC9eKGlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b258b2JqZWN0KSQvLnRlc3QobCk/KHI9IWkuZGlzYWJsZWQsciYmKGg9dChpKS5jbG9zZXN0KFwiZmllbGRzZXRcIilbMF0saCYmKHI9IWguZGlzYWJsZWQpKSk6cj1cImFcIj09PWw/aS5ocmVmfHxzOnMsciYmdChpKS5pcyhcIjp2aXNpYmxlXCIpJiZlKHQoaSkpKX0sdC5leHRlbmQodC5leHByW1wiOlwiXSx7Zm9jdXNhYmxlOmZ1bmN0aW9uKGUpe3JldHVybiB0LnVpLmZvY3VzYWJsZShlLG51bGwhPXQuYXR0cihlLFwidGFiaW5kZXhcIikpfX0pLHQudWkuZm9jdXNhYmxlLHQuZm4uZm9ybT1mdW5jdGlvbigpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0aGlzWzBdLmZvcm0/dGhpcy5jbG9zZXN0KFwiZm9ybVwiKTp0KHRoaXNbMF0uZm9ybSl9LHQudWkuZm9ybVJlc2V0TWl4aW49e19mb3JtUmVzZXRIYW5kbGVyOmZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dmFyIGk9ZS5kYXRhKFwidWktZm9ybS1yZXNldC1pbnN0YW5jZXNcIik7dC5lYWNoKGksZnVuY3Rpb24oKXt0aGlzLnJlZnJlc2goKX0pfSl9LF9iaW5kRm9ybVJlc2V0SGFuZGxlcjpmdW5jdGlvbigpe2lmKHRoaXMuZm9ybT10aGlzLmVsZW1lbnQuZm9ybSgpLHRoaXMuZm9ybS5sZW5ndGgpe3ZhciB0PXRoaXMuZm9ybS5kYXRhKFwidWktZm9ybS1yZXNldC1pbnN0YW5jZXNcIil8fFtdO3QubGVuZ3RofHx0aGlzLmZvcm0ub24oXCJyZXNldC51aS1mb3JtLXJlc2V0XCIsdGhpcy5fZm9ybVJlc2V0SGFuZGxlciksdC5wdXNoKHRoaXMpLHRoaXMuZm9ybS5kYXRhKFwidWktZm9ybS1yZXNldC1pbnN0YW5jZXNcIix0KX19LF91bmJpbmRGb3JtUmVzZXRIYW5kbGVyOmZ1bmN0aW9uKCl7aWYodGhpcy5mb3JtLmxlbmd0aCl7dmFyIGU9dGhpcy5mb3JtLmRhdGEoXCJ1aS1mb3JtLXJlc2V0LWluc3RhbmNlc1wiKTtlLnNwbGljZSh0LmluQXJyYXkodGhpcyxlKSwxKSxlLmxlbmd0aD90aGlzLmZvcm0uZGF0YShcInVpLWZvcm0tcmVzZXQtaW5zdGFuY2VzXCIsZSk6dGhpcy5mb3JtLnJlbW92ZURhdGEoXCJ1aS1mb3JtLXJlc2V0LWluc3RhbmNlc1wiKS5vZmYoXCJyZXNldC51aS1mb3JtLXJlc2V0XCIpfX19LFwiMS43XCI9PT10LmZuLmpxdWVyeS5zdWJzdHJpbmcoMCwzKSYmKHQuZWFjaChbXCJXaWR0aFwiLFwiSGVpZ2h0XCJdLGZ1bmN0aW9uKGUsaSl7ZnVuY3Rpb24gcyhlLGkscyxvKXtyZXR1cm4gdC5lYWNoKG4sZnVuY3Rpb24oKXtpLT1wYXJzZUZsb2F0KHQuY3NzKGUsXCJwYWRkaW5nXCIrdGhpcykpfHwwLHMmJihpLT1wYXJzZUZsb2F0KHQuY3NzKGUsXCJib3JkZXJcIit0aGlzK1wiV2lkdGhcIikpfHwwKSxvJiYoaS09cGFyc2VGbG9hdCh0LmNzcyhlLFwibWFyZ2luXCIrdGhpcykpfHwwKX0pLGl9dmFyIG49XCJXaWR0aFwiPT09aT9bXCJMZWZ0XCIsXCJSaWdodFwiXTpbXCJUb3BcIixcIkJvdHRvbVwiXSxvPWkudG9Mb3dlckNhc2UoKSxhPXtpbm5lcldpZHRoOnQuZm4uaW5uZXJXaWR0aCxpbm5lckhlaWdodDp0LmZuLmlubmVySGVpZ2h0LG91dGVyV2lkdGg6dC5mbi5vdXRlcldpZHRoLG91dGVySGVpZ2h0OnQuZm4ub3V0ZXJIZWlnaHR9O3QuZm5bXCJpbm5lclwiK2ldPWZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP2FbXCJpbm5lclwiK2ldLmNhbGwodGhpcyk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dCh0aGlzKS5jc3MobyxzKHRoaXMsZSkrXCJweFwiKX0pfSx0LmZuW1wib3V0ZXJcIitpXT1mdW5jdGlvbihlLG4pe3JldHVyblwibnVtYmVyXCIhPXR5cGVvZiBlP2FbXCJvdXRlclwiK2ldLmNhbGwodGhpcyxlKTp0aGlzLmVhY2goZnVuY3Rpb24oKXt0KHRoaXMpLmNzcyhvLHModGhpcyxlLCEwLG4pK1wicHhcIil9KX19KSx0LmZuLmFkZEJhY2s9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYWRkKG51bGw9PXQ/dGhpcy5wcmV2T2JqZWN0OnRoaXMucHJldk9iamVjdC5maWx0ZXIodCkpfSksdC51aS5rZXlDb2RlPXtCQUNLU1BBQ0U6OCxDT01NQToxODgsREVMRVRFOjQ2LERPV046NDAsRU5EOjM1LEVOVEVSOjEzLEVTQ0FQRToyNyxIT01FOjM2LExFRlQ6MzcsUEFHRV9ET1dOOjM0LFBBR0VfVVA6MzMsUEVSSU9EOjE5MCxSSUdIVDozOSxTUEFDRTozMixUQUI6OSxVUDozOH0sdC51aS5lc2NhcGVTZWxlY3Rvcj1mdW5jdGlvbigpe3ZhciB0PS8oWyFcIiMkJSYnKCkqKywuXFwvOjs8PT4/QFtcXF1eYHt8fX5dKS9nO3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKHQsXCJcXFxcJDFcIil9fSgpLHQuZm4ubGFiZWxzPWZ1bmN0aW9uKCl7dmFyIGUsaSxzLG4sbztyZXR1cm4gdGhpc1swXS5sYWJlbHMmJnRoaXNbMF0ubGFiZWxzLmxlbmd0aD90aGlzLnB1c2hTdGFjayh0aGlzWzBdLmxhYmVscyk6KG49dGhpcy5lcSgwKS5wYXJlbnRzKFwibGFiZWxcIikscz10aGlzLmF0dHIoXCJpZFwiKSxzJiYoZT10aGlzLmVxKDApLnBhcmVudHMoKS5sYXN0KCksbz1lLmFkZChlLmxlbmd0aD9lLnNpYmxpbmdzKCk6dGhpcy5zaWJsaW5ncygpKSxpPVwibGFiZWxbZm9yPSdcIit0LnVpLmVzY2FwZVNlbGVjdG9yKHMpK1wiJ11cIixuPW4uYWRkKG8uZmluZChpKS5hZGRCYWNrKGkpKSksdGhpcy5wdXNoU3RhY2sobikpfSx0LmZuLnNjcm9sbFBhcmVudD1mdW5jdGlvbihlKXt2YXIgaT10aGlzLmNzcyhcInBvc2l0aW9uXCIpLHM9XCJhYnNvbHV0ZVwiPT09aSxuPWU/LyhhdXRvfHNjcm9sbHxoaWRkZW4pLzovKGF1dG98c2Nyb2xsKS8sbz10aGlzLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO3JldHVybiBzJiZcInN0YXRpY1wiPT09ZS5jc3MoXCJwb3NpdGlvblwiKT8hMTpuLnRlc3QoZS5jc3MoXCJvdmVyZmxvd1wiKStlLmNzcyhcIm92ZXJmbG93LXlcIikrZS5jc3MoXCJvdmVyZmxvdy14XCIpKX0pLmVxKDApO3JldHVyblwiZml4ZWRcIiE9PWkmJm8ubGVuZ3RoP286dCh0aGlzWzBdLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KX0sdC5leHRlbmQodC5leHByW1wiOlwiXSx7dGFiYmFibGU6ZnVuY3Rpb24oZSl7dmFyIGk9dC5hdHRyKGUsXCJ0YWJpbmRleFwiKSxzPW51bGwhPWk7cmV0dXJuKCFzfHxpPj0wKSYmdC51aS5mb2N1c2FibGUoZSxzKX19KSx0LmZuLmV4dGVuZCh7dW5pcXVlSWQ6ZnVuY3Rpb24oKXt2YXIgdD0wO3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt0aGlzLmlkfHwodGhpcy5pZD1cInVpLWlkLVwiKyArK3QpfSl9fSgpLHJlbW92ZVVuaXF1ZUlkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpey9edWktaWQtXFxkKyQvLnRlc3QodGhpcy5pZCkmJnQodGhpcykucmVtb3ZlQXR0cihcImlkXCIpfSl9fSksdC53aWRnZXQoXCJ1aS5hY2NvcmRpb25cIix7dmVyc2lvbjpcIjEuMTIuMVwiLG9wdGlvbnM6e2FjdGl2ZTowLGFuaW1hdGU6e30sY2xhc3Nlczp7XCJ1aS1hY2NvcmRpb24taGVhZGVyXCI6XCJ1aS1jb3JuZXItdG9wXCIsXCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZFwiOlwidWktY29ybmVyLWFsbFwiLFwidWktYWNjb3JkaW9uLWNvbnRlbnRcIjpcInVpLWNvcm5lci1ib3R0b21cIn0sY29sbGFwc2libGU6ITEsZXZlbnQ6XCJjbGlja1wiLGhlYWRlcjpcIj4gbGkgPiA6Zmlyc3QtY2hpbGQsID4gOm5vdChsaSk6ZXZlblwiLGhlaWdodFN0eWxlOlwiYXV0b1wiLGljb25zOnthY3RpdmVIZWFkZXI6XCJ1aS1pY29uLXRyaWFuZ2xlLTEtc1wiLGhlYWRlcjpcInVpLWljb24tdHJpYW5nbGUtMS1lXCJ9LGFjdGl2YXRlOm51bGwsYmVmb3JlQWN0aXZhdGU6bnVsbH0saGlkZVByb3BzOntib3JkZXJUb3BXaWR0aDpcImhpZGVcIixib3JkZXJCb3R0b21XaWR0aDpcImhpZGVcIixwYWRkaW5nVG9wOlwiaGlkZVwiLHBhZGRpbmdCb3R0b206XCJoaWRlXCIsaGVpZ2h0OlwiaGlkZVwifSxzaG93UHJvcHM6e2JvcmRlclRvcFdpZHRoOlwic2hvd1wiLGJvcmRlckJvdHRvbVdpZHRoOlwic2hvd1wiLHBhZGRpbmdUb3A6XCJzaG93XCIscGFkZGluZ0JvdHRvbTpcInNob3dcIixoZWlnaHQ6XCJzaG93XCJ9LF9jcmVhdGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnM7dGhpcy5wcmV2U2hvdz10aGlzLnByZXZIaWRlPXQoKSx0aGlzLl9hZGRDbGFzcyhcInVpLWFjY29yZGlvblwiLFwidWktd2lkZ2V0IHVpLWhlbHBlci1yZXNldFwiKSx0aGlzLmVsZW1lbnQuYXR0cihcInJvbGVcIixcInRhYmxpc3RcIiksZS5jb2xsYXBzaWJsZXx8ZS5hY3RpdmUhPT0hMSYmbnVsbCE9ZS5hY3RpdmV8fChlLmFjdGl2ZT0wKSx0aGlzLl9wcm9jZXNzUGFuZWxzKCksMD5lLmFjdGl2ZSYmKGUuYWN0aXZlKz10aGlzLmhlYWRlcnMubGVuZ3RoKSx0aGlzLl9yZWZyZXNoKCl9LF9nZXRDcmVhdGVFdmVudERhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aGVhZGVyOnRoaXMuYWN0aXZlLHBhbmVsOnRoaXMuYWN0aXZlLmxlbmd0aD90aGlzLmFjdGl2ZS5uZXh0KCk6dCgpfX0sX2NyZWF0ZUljb25zOmZ1bmN0aW9uKCl7dmFyIGUsaSxzPXRoaXMub3B0aW9ucy5pY29ucztzJiYoZT10KFwiPHNwYW4+XCIpLHRoaXMuX2FkZENsYXNzKGUsXCJ1aS1hY2NvcmRpb24taGVhZGVyLWljb25cIixcInVpLWljb24gXCIrcy5oZWFkZXIpLGUucHJlcGVuZFRvKHRoaXMuaGVhZGVycyksaT10aGlzLmFjdGl2ZS5jaGlsZHJlbihcIi51aS1hY2NvcmRpb24taGVhZGVyLWljb25cIiksdGhpcy5fcmVtb3ZlQ2xhc3MoaSxzLmhlYWRlcikuX2FkZENsYXNzKGksbnVsbCxzLmFjdGl2ZUhlYWRlcikuX2FkZENsYXNzKHRoaXMuaGVhZGVycyxcInVpLWFjY29yZGlvbi1pY29uc1wiKSl9LF9kZXN0cm95SWNvbnM6ZnVuY3Rpb24oKXt0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmhlYWRlcnMsXCJ1aS1hY2NvcmRpb24taWNvbnNcIiksdGhpcy5oZWFkZXJzLmNoaWxkcmVuKFwiLnVpLWFjY29yZGlvbi1oZWFkZXItaWNvblwiKS5yZW1vdmUoKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt2YXIgdDt0aGlzLmVsZW1lbnQucmVtb3ZlQXR0cihcInJvbGVcIiksdGhpcy5oZWFkZXJzLnJlbW92ZUF0dHIoXCJyb2xlIGFyaWEtZXhwYW5kZWQgYXJpYS1zZWxlY3RlZCBhcmlhLWNvbnRyb2xzIHRhYkluZGV4XCIpLnJlbW92ZVVuaXF1ZUlkKCksdGhpcy5fZGVzdHJveUljb25zKCksdD10aGlzLmhlYWRlcnMubmV4dCgpLmNzcyhcImRpc3BsYXlcIixcIlwiKS5yZW1vdmVBdHRyKFwicm9sZSBhcmlhLWhpZGRlbiBhcmlhLWxhYmVsbGVkYnlcIikucmVtb3ZlVW5pcXVlSWQoKSxcImNvbnRlbnRcIiE9PXRoaXMub3B0aW9ucy5oZWlnaHRTdHlsZSYmdC5jc3MoXCJoZWlnaHRcIixcIlwiKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe3JldHVyblwiYWN0aXZlXCI9PT10Pyh0aGlzLl9hY3RpdmF0ZShlKSx2b2lkIDApOihcImV2ZW50XCI9PT10JiYodGhpcy5vcHRpb25zLmV2ZW50JiZ0aGlzLl9vZmYodGhpcy5oZWFkZXJzLHRoaXMub3B0aW9ucy5ldmVudCksdGhpcy5fc2V0dXBFdmVudHMoZSkpLHRoaXMuX3N1cGVyKHQsZSksXCJjb2xsYXBzaWJsZVwiIT09dHx8ZXx8dGhpcy5vcHRpb25zLmFjdGl2ZSE9PSExfHx0aGlzLl9hY3RpdmF0ZSgwKSxcImljb25zXCI9PT10JiYodGhpcy5fZGVzdHJveUljb25zKCksZSYmdGhpcy5fY3JlYXRlSWNvbnMoKSksdm9pZCAwKX0sX3NldE9wdGlvbkRpc2FibGVkOmZ1bmN0aW9uKHQpe3RoaXMuX3N1cGVyKHQpLHRoaXMuZWxlbWVudC5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLHQpLHRoaXMuX3RvZ2dsZUNsYXNzKG51bGwsXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCEhdCksdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy5oZWFkZXJzLmFkZCh0aGlzLmhlYWRlcnMubmV4dCgpKSxudWxsLFwidWktc3RhdGUtZGlzYWJsZWRcIiwhIXQpfSxfa2V5ZG93bjpmdW5jdGlvbihlKXtpZighZS5hbHRLZXkmJiFlLmN0cmxLZXkpe3ZhciBpPXQudWkua2V5Q29kZSxzPXRoaXMuaGVhZGVycy5sZW5ndGgsbj10aGlzLmhlYWRlcnMuaW5kZXgoZS50YXJnZXQpLG89ITE7c3dpdGNoKGUua2V5Q29kZSl7Y2FzZSBpLlJJR0hUOmNhc2UgaS5ET1dOOm89dGhpcy5oZWFkZXJzWyhuKzEpJXNdO2JyZWFrO2Nhc2UgaS5MRUZUOmNhc2UgaS5VUDpvPXRoaXMuaGVhZGVyc1sobi0xK3MpJXNdO2JyZWFrO2Nhc2UgaS5TUEFDRTpjYXNlIGkuRU5URVI6dGhpcy5fZXZlbnRIYW5kbGVyKGUpO2JyZWFrO2Nhc2UgaS5IT01FOm89dGhpcy5oZWFkZXJzWzBdO2JyZWFrO2Nhc2UgaS5FTkQ6bz10aGlzLmhlYWRlcnNbcy0xXX1vJiYodChlLnRhcmdldCkuYXR0cihcInRhYkluZGV4XCIsLTEpLHQobykuYXR0cihcInRhYkluZGV4XCIsMCksdChvKS50cmlnZ2VyKFwiZm9jdXNcIiksZS5wcmV2ZW50RGVmYXVsdCgpKX19LF9wYW5lbEtleURvd246ZnVuY3Rpb24oZSl7ZS5rZXlDb2RlPT09dC51aS5rZXlDb2RlLlVQJiZlLmN0cmxLZXkmJnQoZS5jdXJyZW50VGFyZ2V0KS5wcmV2KCkudHJpZ2dlcihcImZvY3VzXCIpfSxyZWZyZXNoOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcHRpb25zO3RoaXMuX3Byb2Nlc3NQYW5lbHMoKSxlLmFjdGl2ZT09PSExJiZlLmNvbGxhcHNpYmxlPT09ITB8fCF0aGlzLmhlYWRlcnMubGVuZ3RoPyhlLmFjdGl2ZT0hMSx0aGlzLmFjdGl2ZT10KCkpOmUuYWN0aXZlPT09ITE/dGhpcy5fYWN0aXZhdGUoMCk6dGhpcy5hY3RpdmUubGVuZ3RoJiYhdC5jb250YWlucyh0aGlzLmVsZW1lbnRbMF0sdGhpcy5hY3RpdmVbMF0pP3RoaXMuaGVhZGVycy5sZW5ndGg9PT10aGlzLmhlYWRlcnMuZmluZChcIi51aS1zdGF0ZS1kaXNhYmxlZFwiKS5sZW5ndGg/KGUuYWN0aXZlPSExLHRoaXMuYWN0aXZlPXQoKSk6dGhpcy5fYWN0aXZhdGUoTWF0aC5tYXgoMCxlLmFjdGl2ZS0xKSk6ZS5hY3RpdmU9dGhpcy5oZWFkZXJzLmluZGV4KHRoaXMuYWN0aXZlKSx0aGlzLl9kZXN0cm95SWNvbnMoKSx0aGlzLl9yZWZyZXNoKCl9LF9wcm9jZXNzUGFuZWxzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5oZWFkZXJzLGU9dGhpcy5wYW5lbHM7dGhpcy5oZWFkZXJzPXRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5oZWFkZXIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaGVhZGVycyxcInVpLWFjY29yZGlvbi1oZWFkZXIgdWktYWNjb3JkaW9uLWhlYWRlci1jb2xsYXBzZWRcIixcInVpLXN0YXRlLWRlZmF1bHRcIiksdGhpcy5wYW5lbHM9dGhpcy5oZWFkZXJzLm5leHQoKS5maWx0ZXIoXCI6bm90KC51aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmUpXCIpLmhpZGUoKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnBhbmVscyxcInVpLWFjY29yZGlvbi1jb250ZW50XCIsXCJ1aS1oZWxwZXItcmVzZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiksZSYmKHRoaXMuX29mZih0Lm5vdCh0aGlzLmhlYWRlcnMpKSx0aGlzLl9vZmYoZS5ub3QodGhpcy5wYW5lbHMpKSl9LF9yZWZyZXNoOmZ1bmN0aW9uKCl7dmFyIGUsaT10aGlzLm9wdGlvbnMscz1pLmhlaWdodFN0eWxlLG49dGhpcy5lbGVtZW50LnBhcmVudCgpO3RoaXMuYWN0aXZlPXRoaXMuX2ZpbmRBY3RpdmUoaS5hY3RpdmUpLHRoaXMuX2FkZENsYXNzKHRoaXMuYWN0aXZlLFwidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmVcIixcInVpLXN0YXRlLWFjdGl2ZVwiKS5fcmVtb3ZlQ2xhc3ModGhpcy5hY3RpdmUsXCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZFwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLmFjdGl2ZS5uZXh0KCksXCJ1aS1hY2NvcmRpb24tY29udGVudC1hY3RpdmVcIiksdGhpcy5hY3RpdmUubmV4dCgpLnNob3coKSx0aGlzLmhlYWRlcnMuYXR0cihcInJvbGVcIixcInRhYlwiKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxpPWUudW5pcXVlSWQoKS5hdHRyKFwiaWRcIikscz1lLm5leHQoKSxuPXMudW5pcXVlSWQoKS5hdHRyKFwiaWRcIik7ZS5hdHRyKFwiYXJpYS1jb250cm9sc1wiLG4pLHMuYXR0cihcImFyaWEtbGFiZWxsZWRieVwiLGkpfSkubmV4dCgpLmF0dHIoXCJyb2xlXCIsXCJ0YWJwYW5lbFwiKSx0aGlzLmhlYWRlcnMubm90KHRoaXMuYWN0aXZlKS5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcImZhbHNlXCIsXCJhcmlhLWV4cGFuZGVkXCI6XCJmYWxzZVwiLHRhYkluZGV4Oi0xfSkubmV4dCgpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0pLmhpZGUoKSx0aGlzLmFjdGl2ZS5sZW5ndGg/dGhpcy5hY3RpdmUuYXR0cih7XCJhcmlhLXNlbGVjdGVkXCI6XCJ0cnVlXCIsXCJhcmlhLWV4cGFuZGVkXCI6XCJ0cnVlXCIsdGFiSW5kZXg6MH0pLm5leHQoKS5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJmYWxzZVwifSk6dGhpcy5oZWFkZXJzLmVxKDApLmF0dHIoXCJ0YWJJbmRleFwiLDApLHRoaXMuX2NyZWF0ZUljb25zKCksdGhpcy5fc2V0dXBFdmVudHMoaS5ldmVudCksXCJmaWxsXCI9PT1zPyhlPW4uaGVpZ2h0KCksdGhpcy5lbGVtZW50LnNpYmxpbmdzKFwiOnZpc2libGVcIikuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQodGhpcykscz1pLmNzcyhcInBvc2l0aW9uXCIpO1wiYWJzb2x1dGVcIiE9PXMmJlwiZml4ZWRcIiE9PXMmJihlLT1pLm91dGVySGVpZ2h0KCEwKSl9KSx0aGlzLmhlYWRlcnMuZWFjaChmdW5jdGlvbigpe2UtPXQodGhpcykub3V0ZXJIZWlnaHQoITApfSksdGhpcy5oZWFkZXJzLm5leHQoKS5lYWNoKGZ1bmN0aW9uKCl7dCh0aGlzKS5oZWlnaHQoTWF0aC5tYXgoMCxlLXQodGhpcykuaW5uZXJIZWlnaHQoKSt0KHRoaXMpLmhlaWdodCgpKSl9KS5jc3MoXCJvdmVyZmxvd1wiLFwiYXV0b1wiKSk6XCJhdXRvXCI9PT1zJiYoZT0wLHRoaXMuaGVhZGVycy5uZXh0KCkuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQodGhpcykuaXMoXCI6dmlzaWJsZVwiKTtpfHx0KHRoaXMpLnNob3coKSxlPU1hdGgubWF4KGUsdCh0aGlzKS5jc3MoXCJoZWlnaHRcIixcIlwiKS5oZWlnaHQoKSksaXx8dCh0aGlzKS5oaWRlKCl9KS5oZWlnaHQoZSkpfSxfYWN0aXZhdGU6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5fZmluZEFjdGl2ZShlKVswXTtpIT09dGhpcy5hY3RpdmVbMF0mJihpPWl8fHRoaXMuYWN0aXZlWzBdLHRoaXMuX2V2ZW50SGFuZGxlcih7dGFyZ2V0OmksY3VycmVudFRhcmdldDppLHByZXZlbnREZWZhdWx0OnQubm9vcH0pKX0sX2ZpbmRBY3RpdmU6ZnVuY3Rpb24oZSl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIGU/dGhpcy5oZWFkZXJzLmVxKGUpOnQoKX0sX3NldHVwRXZlbnRzOmZ1bmN0aW9uKGUpe3ZhciBpPXtrZXlkb3duOlwiX2tleWRvd25cIn07ZSYmdC5lYWNoKGUuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKHQsZSl7aVtlXT1cIl9ldmVudEhhbmRsZXJcIn0pLHRoaXMuX29mZih0aGlzLmhlYWRlcnMuYWRkKHRoaXMuaGVhZGVycy5uZXh0KCkpKSx0aGlzLl9vbih0aGlzLmhlYWRlcnMsaSksdGhpcy5fb24odGhpcy5oZWFkZXJzLm5leHQoKSx7a2V5ZG93bjpcIl9wYW5lbEtleURvd25cIn0pLHRoaXMuX2hvdmVyYWJsZSh0aGlzLmhlYWRlcnMpLHRoaXMuX2ZvY3VzYWJsZSh0aGlzLmhlYWRlcnMpfSxfZXZlbnRIYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbj10aGlzLm9wdGlvbnMsbz10aGlzLmFjdGl2ZSxhPXQoZS5jdXJyZW50VGFyZ2V0KSxyPWFbMF09PT1vWzBdLGg9ciYmbi5jb2xsYXBzaWJsZSxsPWg/dCgpOmEubmV4dCgpLGM9by5uZXh0KCksdT17b2xkSGVhZGVyOm8sb2xkUGFuZWw6YyxuZXdIZWFkZXI6aD90KCk6YSxuZXdQYW5lbDpsfTtlLnByZXZlbnREZWZhdWx0KCksciYmIW4uY29sbGFwc2libGV8fHRoaXMuX3RyaWdnZXIoXCJiZWZvcmVBY3RpdmF0ZVwiLGUsdSk9PT0hMXx8KG4uYWN0aXZlPWg/ITE6dGhpcy5oZWFkZXJzLmluZGV4KGEpLHRoaXMuYWN0aXZlPXI/dCgpOmEsdGhpcy5fdG9nZ2xlKHUpLHRoaXMuX3JlbW92ZUNsYXNzKG8sXCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZVwiLFwidWktc3RhdGUtYWN0aXZlXCIpLG4uaWNvbnMmJihpPW8uY2hpbGRyZW4oXCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uXCIpLHRoaXMuX3JlbW92ZUNsYXNzKGksbnVsbCxuLmljb25zLmFjdGl2ZUhlYWRlcikuX2FkZENsYXNzKGksbnVsbCxuLmljb25zLmhlYWRlcikpLHJ8fCh0aGlzLl9yZW1vdmVDbGFzcyhhLFwidWktYWNjb3JkaW9uLWhlYWRlci1jb2xsYXBzZWRcIikuX2FkZENsYXNzKGEsXCJ1aS1hY2NvcmRpb24taGVhZGVyLWFjdGl2ZVwiLFwidWktc3RhdGUtYWN0aXZlXCIpLG4uaWNvbnMmJihzPWEuY2hpbGRyZW4oXCIudWktYWNjb3JkaW9uLWhlYWRlci1pY29uXCIpLHRoaXMuX3JlbW92ZUNsYXNzKHMsbnVsbCxuLmljb25zLmhlYWRlcikuX2FkZENsYXNzKHMsbnVsbCxuLmljb25zLmFjdGl2ZUhlYWRlcikpLHRoaXMuX2FkZENsYXNzKGEubmV4dCgpLFwidWktYWNjb3JkaW9uLWNvbnRlbnQtYWN0aXZlXCIpKSl9LF90b2dnbGU6ZnVuY3Rpb24oZSl7dmFyIGk9ZS5uZXdQYW5lbCxzPXRoaXMucHJldlNob3cubGVuZ3RoP3RoaXMucHJldlNob3c6ZS5vbGRQYW5lbDt0aGlzLnByZXZTaG93LmFkZCh0aGlzLnByZXZIaWRlKS5zdG9wKCEwLCEwKSx0aGlzLnByZXZTaG93PWksdGhpcy5wcmV2SGlkZT1zLHRoaXMub3B0aW9ucy5hbmltYXRlP3RoaXMuX2FuaW1hdGUoaSxzLGUpOihzLmhpZGUoKSxpLnNob3coKSx0aGlzLl90b2dnbGVDb21wbGV0ZShlKSkscy5hdHRyKHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCJ9KSxzLnByZXYoKS5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcImZhbHNlXCIsXCJhcmlhLWV4cGFuZGVkXCI6XCJmYWxzZVwifSksaS5sZW5ndGgmJnMubGVuZ3RoP3MucHJldigpLmF0dHIoe3RhYkluZGV4Oi0xLFwiYXJpYS1leHBhbmRlZFwiOlwiZmFsc2VcIn0pOmkubGVuZ3RoJiZ0aGlzLmhlYWRlcnMuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIDA9PT1wYXJzZUludCh0KHRoaXMpLmF0dHIoXCJ0YWJJbmRleFwiKSwxMCl9KS5hdHRyKFwidGFiSW5kZXhcIiwtMSksaS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpLnByZXYoKS5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcInRydWVcIixcImFyaWEtZXhwYW5kZWRcIjpcInRydWVcIix0YWJJbmRleDowfSl9LF9hbmltYXRlOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcyxuLG8sYT10aGlzLHI9MCxoPXQuY3NzKFwiYm94LXNpemluZ1wiKSxsPXQubGVuZ3RoJiYoIWUubGVuZ3RofHx0LmluZGV4KCk8ZS5pbmRleCgpKSxjPXRoaXMub3B0aW9ucy5hbmltYXRlfHx7fSx1PWwmJmMuZG93bnx8YyxkPWZ1bmN0aW9uKCl7YS5fdG9nZ2xlQ29tcGxldGUoaSl9O3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB1JiYobz11KSxcInN0cmluZ1wiPT10eXBlb2YgdSYmKG49dSksbj1ufHx1LmVhc2luZ3x8Yy5lYXNpbmcsbz1vfHx1LmR1cmF0aW9ufHxjLmR1cmF0aW9uLGUubGVuZ3RoP3QubGVuZ3RoPyhzPXQuc2hvdygpLm91dGVySGVpZ2h0KCksZS5hbmltYXRlKHRoaXMuaGlkZVByb3BzLHtkdXJhdGlvbjpvLGVhc2luZzpuLHN0ZXA6ZnVuY3Rpb24odCxlKXtlLm5vdz1NYXRoLnJvdW5kKHQpfX0pLHQuaGlkZSgpLmFuaW1hdGUodGhpcy5zaG93UHJvcHMse2R1cmF0aW9uOm8sZWFzaW5nOm4sY29tcGxldGU6ZCxzdGVwOmZ1bmN0aW9uKHQsaSl7aS5ub3c9TWF0aC5yb3VuZCh0KSxcImhlaWdodFwiIT09aS5wcm9wP1wiY29udGVudC1ib3hcIj09PWgmJihyKz1pLm5vdyk6XCJjb250ZW50XCIhPT1hLm9wdGlvbnMuaGVpZ2h0U3R5bGUmJihpLm5vdz1NYXRoLnJvdW5kKHMtZS5vdXRlckhlaWdodCgpLXIpLHI9MCl9fSksdm9pZCAwKTplLmFuaW1hdGUodGhpcy5oaWRlUHJvcHMsbyxuLGQpOnQuYW5pbWF0ZSh0aGlzLnNob3dQcm9wcyxvLG4sZCl9LF90b2dnbGVDb21wbGV0ZTpmdW5jdGlvbih0KXt2YXIgZT10Lm9sZFBhbmVsLGk9ZS5wcmV2KCk7dGhpcy5fcmVtb3ZlQ2xhc3MoZSxcInVpLWFjY29yZGlvbi1jb250ZW50LWFjdGl2ZVwiKSx0aGlzLl9yZW1vdmVDbGFzcyhpLFwidWktYWNjb3JkaW9uLWhlYWRlci1hY3RpdmVcIikuX2FkZENsYXNzKGksXCJ1aS1hY2NvcmRpb24taGVhZGVyLWNvbGxhcHNlZFwiKSxlLmxlbmd0aCYmKGUucGFyZW50KClbMF0uY2xhc3NOYW1lPWUucGFyZW50KClbMF0uY2xhc3NOYW1lKSx0aGlzLl90cmlnZ2VyKFwiYWN0aXZhdGVcIixudWxsLHQpfX0pLHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIGU7dHJ5e2U9dC5hY3RpdmVFbGVtZW50fWNhdGNoKGkpe2U9dC5ib2R5fXJldHVybiBlfHwoZT10LmJvZHkpLGUubm9kZU5hbWV8fChlPXQuYm9keSksZX0sdC53aWRnZXQoXCJ1aS5tZW51XCIse3ZlcnNpb246XCIxLjEyLjFcIixkZWZhdWx0RWxlbWVudDpcIjx1bD5cIixkZWxheTozMDAsb3B0aW9uczp7aWNvbnM6e3N1Ym1lbnU6XCJ1aS1pY29uLWNhcmV0LTEtZVwifSxpdGVtczpcIj4gKlwiLG1lbnVzOlwidWxcIixwb3NpdGlvbjp7bXk6XCJsZWZ0IHRvcFwiLGF0OlwicmlnaHQgdG9wXCJ9LHJvbGU6XCJtZW51XCIsYmx1cjpudWxsLGZvY3VzOm51bGwsc2VsZWN0Om51bGx9LF9jcmVhdGU6ZnVuY3Rpb24oKXt0aGlzLmFjdGl2ZU1lbnU9dGhpcy5lbGVtZW50LHRoaXMubW91c2VIYW5kbGVkPSExLHRoaXMuZWxlbWVudC51bmlxdWVJZCgpLmF0dHIoe3JvbGU6dGhpcy5vcHRpb25zLnJvbGUsdGFiSW5kZXg6MH0pLHRoaXMuX2FkZENsYXNzKFwidWktbWVudVwiLFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50XCIpLHRoaXMuX29uKHtcIm1vdXNlZG93biAudWktbWVudS1pdGVtXCI6ZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpfSxcImNsaWNrIC51aS1tZW51LWl0ZW1cIjpmdW5jdGlvbihlKXt2YXIgaT10KGUudGFyZ2V0KSxzPXQodC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKSk7IXRoaXMubW91c2VIYW5kbGVkJiZpLm5vdChcIi51aS1zdGF0ZS1kaXNhYmxlZFwiKS5sZW5ndGgmJih0aGlzLnNlbGVjdChlKSxlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCl8fCh0aGlzLm1vdXNlSGFuZGxlZD0hMCksaS5oYXMoXCIudWktbWVudVwiKS5sZW5ndGg/dGhpcy5leHBhbmQoZSk6IXRoaXMuZWxlbWVudC5pcyhcIjpmb2N1c1wiKSYmcy5jbG9zZXN0KFwiLnVpLW1lbnVcIikubGVuZ3RoJiYodGhpcy5lbGVtZW50LnRyaWdnZXIoXCJmb2N1c1wiLFshMF0pLHRoaXMuYWN0aXZlJiYxPT09dGhpcy5hY3RpdmUucGFyZW50cyhcIi51aS1tZW51XCIpLmxlbmd0aCYmY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpKSl9LFwibW91c2VlbnRlciAudWktbWVudS1pdGVtXCI6ZnVuY3Rpb24oZSl7aWYoIXRoaXMucHJldmlvdXNGaWx0ZXIpe3ZhciBpPXQoZS50YXJnZXQpLmNsb3Nlc3QoXCIudWktbWVudS1pdGVtXCIpLHM9dChlLmN1cnJlbnRUYXJnZXQpO2lbMF09PT1zWzBdJiYodGhpcy5fcmVtb3ZlQ2xhc3Mocy5zaWJsaW5ncygpLmNoaWxkcmVuKFwiLnVpLXN0YXRlLWFjdGl2ZVwiKSxudWxsLFwidWktc3RhdGUtYWN0aXZlXCIpLHRoaXMuZm9jdXMoZSxzKSl9fSxtb3VzZWxlYXZlOlwiY29sbGFwc2VBbGxcIixcIm1vdXNlbGVhdmUgLnVpLW1lbnVcIjpcImNvbGxhcHNlQWxsXCIsZm9jdXM6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLmFjdGl2ZXx8dGhpcy5lbGVtZW50LmZpbmQodGhpcy5vcHRpb25zLml0ZW1zKS5lcSgwKTtlfHx0aGlzLmZvY3VzKHQsaSl9LGJsdXI6ZnVuY3Rpb24oZSl7dGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt2YXIgaT0hdC5jb250YWlucyh0aGlzLmVsZW1lbnRbMF0sdC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKSk7aSYmdGhpcy5jb2xsYXBzZUFsbChlKX0pfSxrZXlkb3duOlwiX2tleWRvd25cIn0pLHRoaXMucmVmcmVzaCgpLHRoaXMuX29uKHRoaXMuZG9jdW1lbnQse2NsaWNrOmZ1bmN0aW9uKHQpe3RoaXMuX2Nsb3NlT25Eb2N1bWVudENsaWNrKHQpJiZ0aGlzLmNvbGxhcHNlQWxsKHQpLHRoaXMubW91c2VIYW5kbGVkPSExfX0pfSxfZGVzdHJveTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZWxlbWVudC5maW5kKFwiLnVpLW1lbnUtaXRlbVwiKS5yZW1vdmVBdHRyKFwicm9sZSBhcmlhLWRpc2FibGVkXCIpLGk9ZS5jaGlsZHJlbihcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiKS5yZW1vdmVVbmlxdWVJZCgpLnJlbW92ZUF0dHIoXCJ0YWJJbmRleCByb2xlIGFyaWEtaGFzcG9wdXBcIik7dGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIikuZmluZChcIi51aS1tZW51XCIpLmFkZEJhY2soKS5yZW1vdmVBdHRyKFwicm9sZSBhcmlhLWxhYmVsbGVkYnkgYXJpYS1leHBhbmRlZCBhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYkluZGV4XCIpLnJlbW92ZVVuaXF1ZUlkKCkuc2hvdygpLGkuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKTtlLmRhdGEoXCJ1aS1tZW51LXN1Ym1lbnUtY2FyZXRcIikmJmUucmVtb3ZlKCl9KX0sX2tleWRvd246ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG8sYT0hMDtzd2l0Y2goZS5rZXlDb2RlKXtjYXNlIHQudWkua2V5Q29kZS5QQUdFX1VQOnRoaXMucHJldmlvdXNQYWdlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlBBR0VfRE9XTjp0aGlzLm5leHRQYWdlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkhPTUU6dGhpcy5fbW92ZShcImZpcnN0XCIsXCJmaXJzdFwiLGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkVORDp0aGlzLl9tb3ZlKFwibGFzdFwiLFwibGFzdFwiLGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlVQOnRoaXMucHJldmlvdXMoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRE9XTjp0aGlzLm5leHQoZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuTEVGVDp0aGlzLmNvbGxhcHNlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlJJR0hUOnRoaXMuYWN0aXZlJiYhdGhpcy5hY3RpdmUuaXMoXCIudWktc3RhdGUtZGlzYWJsZWRcIikmJnRoaXMuZXhwYW5kKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkVOVEVSOmNhc2UgdC51aS5rZXlDb2RlLlNQQUNFOnRoaXMuX2FjdGl2YXRlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkVTQ0FQRTp0aGlzLmNvbGxhcHNlKGUpO2JyZWFrO2RlZmF1bHQ6YT0hMSxzPXRoaXMucHJldmlvdXNGaWx0ZXJ8fFwiXCIsbz0hMSxuPWUua2V5Q29kZT49OTYmJjEwNT49ZS5rZXlDb2RlP1wiXCIrKGUua2V5Q29kZS05Nik6U3RyaW5nLmZyb21DaGFyQ29kZShlLmtleUNvZGUpLGNsZWFyVGltZW91dCh0aGlzLmZpbHRlclRpbWVyKSxuPT09cz9vPSEwOm49cytuLGk9dGhpcy5fZmlsdGVyTWVudUl0ZW1zKG4pLGk9byYmLTEhPT1pLmluZGV4KHRoaXMuYWN0aXZlLm5leHQoKSk/dGhpcy5hY3RpdmUubmV4dEFsbChcIi51aS1tZW51LWl0ZW1cIik6aSxpLmxlbmd0aHx8KG49U3RyaW5nLmZyb21DaGFyQ29kZShlLmtleUNvZGUpLGk9dGhpcy5fZmlsdGVyTWVudUl0ZW1zKG4pKSxpLmxlbmd0aD8odGhpcy5mb2N1cyhlLGkpLHRoaXMucHJldmlvdXNGaWx0ZXI9bix0aGlzLmZpbHRlclRpbWVyPXRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMucHJldmlvdXNGaWx0ZXJ9LDFlMykpOmRlbGV0ZSB0aGlzLnByZXZpb3VzRmlsdGVyfWEmJmUucHJldmVudERlZmF1bHQoKX0sX2FjdGl2YXRlOmZ1bmN0aW9uKHQpe3RoaXMuYWN0aXZlJiYhdGhpcy5hY3RpdmUuaXMoXCIudWktc3RhdGUtZGlzYWJsZWRcIikmJih0aGlzLmFjdGl2ZS5jaGlsZHJlbihcIlthcmlhLWhhc3BvcHVwPSd0cnVlJ11cIikubGVuZ3RoP3RoaXMuZXhwYW5kKHQpOnRoaXMuc2VsZWN0KHQpKX0scmVmcmVzaDpmdW5jdGlvbigpe3ZhciBlLGkscyxuLG8sYT10aGlzLHI9dGhpcy5vcHRpb25zLmljb25zLnN1Ym1lbnUsaD10aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMubWVudXMpO3RoaXMuX3RvZ2dsZUNsYXNzKFwidWktbWVudS1pY29uc1wiLG51bGwsISF0aGlzLmVsZW1lbnQuZmluZChcIi51aS1pY29uXCIpLmxlbmd0aCkscz1oLmZpbHRlcihcIjpub3QoLnVpLW1lbnUpXCIpLmhpZGUoKS5hdHRyKHtyb2xlOnRoaXMub3B0aW9ucy5yb2xlLFwiYXJpYS1oaWRkZW5cIjpcInRydWVcIixcImFyaWEtZXhwYW5kZWRcIjpcImZhbHNlXCJ9KS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxpPWUucHJldigpLHM9dChcIjxzcGFuPlwiKS5kYXRhKFwidWktbWVudS1zdWJtZW51LWNhcmV0XCIsITApO2EuX2FkZENsYXNzKHMsXCJ1aS1tZW51LWljb25cIixcInVpLWljb24gXCIrciksaS5hdHRyKFwiYXJpYS1oYXNwb3B1cFwiLFwidHJ1ZVwiKS5wcmVwZW5kKHMpLGUuYXR0cihcImFyaWEtbGFiZWxsZWRieVwiLGkuYXR0cihcImlkXCIpKX0pLHRoaXMuX2FkZENsYXNzKHMsXCJ1aS1tZW51XCIsXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktZnJvbnRcIiksZT1oLmFkZCh0aGlzLmVsZW1lbnQpLGk9ZS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcyksaS5ub3QoXCIudWktbWVudS1pdGVtXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO2EuX2lzRGl2aWRlcihlKSYmYS5fYWRkQ2xhc3MoZSxcInVpLW1lbnUtZGl2aWRlclwiLFwidWktd2lkZ2V0LWNvbnRlbnRcIil9KSxuPWkubm90KFwiLnVpLW1lbnUtaXRlbSwgLnVpLW1lbnUtZGl2aWRlclwiKSxvPW4uY2hpbGRyZW4oKS5ub3QoXCIudWktbWVudVwiKS51bmlxdWVJZCgpLmF0dHIoe3RhYkluZGV4Oi0xLHJvbGU6dGhpcy5faXRlbVJvbGUoKX0pLHRoaXMuX2FkZENsYXNzKG4sXCJ1aS1tZW51LWl0ZW1cIikuX2FkZENsYXNzKG8sXCJ1aS1tZW51LWl0ZW0td3JhcHBlclwiKSxpLmZpbHRlcihcIi51aS1zdGF0ZS1kaXNhYmxlZFwiKS5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLFwidHJ1ZVwiKSx0aGlzLmFjdGl2ZSYmIXQuY29udGFpbnModGhpcy5lbGVtZW50WzBdLHRoaXMuYWN0aXZlWzBdKSYmdGhpcy5ibHVyKCl9LF9pdGVtUm9sZTpmdW5jdGlvbigpe3JldHVybnttZW51OlwibWVudWl0ZW1cIixsaXN0Ym94Olwib3B0aW9uXCJ9W3RoaXMub3B0aW9ucy5yb2xlXX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe2lmKFwiaWNvbnNcIj09PXQpe3ZhciBpPXRoaXMuZWxlbWVudC5maW5kKFwiLnVpLW1lbnUtaWNvblwiKTt0aGlzLl9yZW1vdmVDbGFzcyhpLG51bGwsdGhpcy5vcHRpb25zLmljb25zLnN1Ym1lbnUpLl9hZGRDbGFzcyhpLG51bGwsZS5zdWJtZW51KX10aGlzLl9zdXBlcih0LGUpfSxfc2V0T3B0aW9uRGlzYWJsZWQ6ZnVuY3Rpb24odCl7dGhpcy5fc3VwZXIodCksdGhpcy5lbGVtZW50LmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsdCtcIlwiKSx0aGlzLl90b2dnbGVDbGFzcyhudWxsLFwidWktc3RhdGUtZGlzYWJsZWRcIiwhIXQpfSxmb2N1czpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbjt0aGlzLmJsdXIodCx0JiZcImZvY3VzXCI9PT10LnR5cGUpLHRoaXMuX3Njcm9sbEludG9WaWV3KGUpLHRoaXMuYWN0aXZlPWUuZmlyc3QoKSxzPXRoaXMuYWN0aXZlLmNoaWxkcmVuKFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIpLHRoaXMuX2FkZENsYXNzKHMsbnVsbCxcInVpLXN0YXRlLWFjdGl2ZVwiKSx0aGlzLm9wdGlvbnMucm9sZSYmdGhpcy5lbGVtZW50LmF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIixzLmF0dHIoXCJpZFwiKSksbj10aGlzLmFjdGl2ZS5wYXJlbnQoKS5jbG9zZXN0KFwiLnVpLW1lbnUtaXRlbVwiKS5jaGlsZHJlbihcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiKSx0aGlzLl9hZGRDbGFzcyhuLG51bGwsXCJ1aS1zdGF0ZS1hY3RpdmVcIiksdCYmXCJrZXlkb3duXCI9PT10LnR5cGU/dGhpcy5fY2xvc2UoKTp0aGlzLnRpbWVyPXRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7dGhpcy5fY2xvc2UoKX0sdGhpcy5kZWxheSksaT1lLmNoaWxkcmVuKFwiLnVpLW1lbnVcIiksaS5sZW5ndGgmJnQmJi9ebW91c2UvLnRlc3QodC50eXBlKSYmdGhpcy5fc3RhcnRPcGVuaW5nKGkpLHRoaXMuYWN0aXZlTWVudT1lLnBhcmVudCgpLHRoaXMuX3RyaWdnZXIoXCJmb2N1c1wiLHQse2l0ZW06ZX0pfSxfc2Nyb2xsSW50b1ZpZXc6ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG8sYSxyO3RoaXMuX2hhc1Njcm9sbCgpJiYoaT1wYXJzZUZsb2F0KHQuY3NzKHRoaXMuYWN0aXZlTWVudVswXSxcImJvcmRlclRvcFdpZHRoXCIpKXx8MCxzPXBhcnNlRmxvYXQodC5jc3ModGhpcy5hY3RpdmVNZW51WzBdLFwicGFkZGluZ1RvcFwiKSl8fDAsbj1lLm9mZnNldCgpLnRvcC10aGlzLmFjdGl2ZU1lbnUub2Zmc2V0KCkudG9wLWktcyxvPXRoaXMuYWN0aXZlTWVudS5zY3JvbGxUb3AoKSxhPXRoaXMuYWN0aXZlTWVudS5oZWlnaHQoKSxyPWUub3V0ZXJIZWlnaHQoKSwwPm4/dGhpcy5hY3RpdmVNZW51LnNjcm9sbFRvcChvK24pOm4rcj5hJiZ0aGlzLmFjdGl2ZU1lbnUuc2Nyb2xsVG9wKG8rbi1hK3IpKX0sYmx1cjpmdW5jdGlvbih0LGUpe2V8fGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKSx0aGlzLmFjdGl2ZSYmKHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuYWN0aXZlLmNoaWxkcmVuKFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIpLG51bGwsXCJ1aS1zdGF0ZS1hY3RpdmVcIiksdGhpcy5fdHJpZ2dlcihcImJsdXJcIix0LHtpdGVtOnRoaXMuYWN0aXZlfSksdGhpcy5hY3RpdmU9bnVsbCl9LF9zdGFydE9wZW5pbmc6ZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLFwidHJ1ZVwiPT09dC5hdHRyKFwiYXJpYS1oaWRkZW5cIikmJih0aGlzLnRpbWVyPXRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7dGhpcy5fY2xvc2UoKSx0aGlzLl9vcGVuKHQpfSx0aGlzLmRlbGF5KSl9LF9vcGVuOmZ1bmN0aW9uKGUpe3ZhciBpPXQuZXh0ZW5kKHtvZjp0aGlzLmFjdGl2ZX0sdGhpcy5vcHRpb25zLnBvc2l0aW9uKTtjbGVhclRpbWVvdXQodGhpcy50aW1lciksdGhpcy5lbGVtZW50LmZpbmQoXCIudWktbWVudVwiKS5ub3QoZS5wYXJlbnRzKFwiLnVpLW1lbnVcIikpLmhpZGUoKS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcInRydWVcIiksZS5zaG93KCkucmVtb3ZlQXR0cihcImFyaWEtaGlkZGVuXCIpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsXCJ0cnVlXCIpLnBvc2l0aW9uKGkpfSxjb2xsYXBzZUFsbDpmdW5jdGlvbihlLGkpe2NsZWFyVGltZW91dCh0aGlzLnRpbWVyKSx0aGlzLnRpbWVyPXRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7dmFyIHM9aT90aGlzLmVsZW1lbnQ6dChlJiZlLnRhcmdldCkuY2xvc2VzdCh0aGlzLmVsZW1lbnQuZmluZChcIi51aS1tZW51XCIpKTtzLmxlbmd0aHx8KHM9dGhpcy5lbGVtZW50KSx0aGlzLl9jbG9zZShzKSx0aGlzLmJsdXIoZSksdGhpcy5fcmVtb3ZlQ2xhc3Mocy5maW5kKFwiLnVpLXN0YXRlLWFjdGl2ZVwiKSxudWxsLFwidWktc3RhdGUtYWN0aXZlXCIpLHRoaXMuYWN0aXZlTWVudT1zfSx0aGlzLmRlbGF5KX0sX2Nsb3NlOmZ1bmN0aW9uKHQpe3R8fCh0PXRoaXMuYWN0aXZlP3RoaXMuYWN0aXZlLnBhcmVudCgpOnRoaXMuZWxlbWVudCksdC5maW5kKFwiLnVpLW1lbnVcIikuaGlkZSgpLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLFwiZmFsc2VcIil9LF9jbG9zZU9uRG9jdW1lbnRDbGljazpmdW5jdGlvbihlKXtyZXR1cm4hdChlLnRhcmdldCkuY2xvc2VzdChcIi51aS1tZW51XCIpLmxlbmd0aH0sX2lzRGl2aWRlcjpmdW5jdGlvbih0KXtyZXR1cm4hL1teXFwtXFx1MjAxNFxcdTIwMTNcXHNdLy50ZXN0KHQudGV4dCgpKX0sY29sbGFwc2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5hY3RpdmUmJnRoaXMuYWN0aXZlLnBhcmVudCgpLmNsb3Nlc3QoXCIudWktbWVudS1pdGVtXCIsdGhpcy5lbGVtZW50KTtlJiZlLmxlbmd0aCYmKHRoaXMuX2Nsb3NlKCksdGhpcy5mb2N1cyh0LGUpKX0sZXhwYW5kOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuYWN0aXZlJiZ0aGlzLmFjdGl2ZS5jaGlsZHJlbihcIi51aS1tZW51IFwiKS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcykuZmlyc3QoKTtlJiZlLmxlbmd0aCYmKHRoaXMuX29wZW4oZS5wYXJlbnQoKSksdGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt0aGlzLmZvY3VzKHQsZSl9KSl9LG5leHQ6ZnVuY3Rpb24odCl7dGhpcy5fbW92ZShcIm5leHRcIixcImZpcnN0XCIsdCl9LHByZXZpb3VzOmZ1bmN0aW9uKHQpe3RoaXMuX21vdmUoXCJwcmV2XCIsXCJsYXN0XCIsdCl9LGlzRmlyc3RJdGVtOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWN0aXZlJiYhdGhpcy5hY3RpdmUucHJldkFsbChcIi51aS1tZW51LWl0ZW1cIikubGVuZ3RofSxpc0xhc3RJdGVtOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWN0aXZlJiYhdGhpcy5hY3RpdmUubmV4dEFsbChcIi51aS1tZW51LWl0ZW1cIikubGVuZ3RofSxfbW92ZTpmdW5jdGlvbih0LGUsaSl7dmFyIHM7dGhpcy5hY3RpdmUmJihzPVwiZmlyc3RcIj09PXR8fFwibGFzdFwiPT09dD90aGlzLmFjdGl2ZVtcImZpcnN0XCI9PT10P1wicHJldkFsbFwiOlwibmV4dEFsbFwiXShcIi51aS1tZW51LWl0ZW1cIikuZXEoLTEpOnRoaXMuYWN0aXZlW3QrXCJBbGxcIl0oXCIudWktbWVudS1pdGVtXCIpLmVxKDApKSxzJiZzLmxlbmd0aCYmdGhpcy5hY3RpdmV8fChzPXRoaXMuYWN0aXZlTWVudS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcylbZV0oKSksdGhpcy5mb2N1cyhpLHMpfSxuZXh0UGFnZTpmdW5jdGlvbihlKXt2YXIgaSxzLG47cmV0dXJuIHRoaXMuYWN0aXZlPyh0aGlzLmlzTGFzdEl0ZW0oKXx8KHRoaXMuX2hhc1Njcm9sbCgpPyhzPXRoaXMuYWN0aXZlLm9mZnNldCgpLnRvcCxuPXRoaXMuZWxlbWVudC5oZWlnaHQoKSx0aGlzLmFjdGl2ZS5uZXh0QWxsKFwiLnVpLW1lbnUtaXRlbVwiKS5lYWNoKGZ1bmN0aW9uKCl7cmV0dXJuIGk9dCh0aGlzKSwwPmkub2Zmc2V0KCkudG9wLXMtbn0pLHRoaXMuZm9jdXMoZSxpKSk6dGhpcy5mb2N1cyhlLHRoaXMuYWN0aXZlTWVudS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcylbdGhpcy5hY3RpdmU/XCJsYXN0XCI6XCJmaXJzdFwiXSgpKSksdm9pZCAwKToodGhpcy5uZXh0KGUpLHZvaWQgMCl9LHByZXZpb3VzUGFnZTpmdW5jdGlvbihlKXt2YXIgaSxzLG47cmV0dXJuIHRoaXMuYWN0aXZlPyh0aGlzLmlzRmlyc3RJdGVtKCl8fCh0aGlzLl9oYXNTY3JvbGwoKT8ocz10aGlzLmFjdGl2ZS5vZmZzZXQoKS50b3Asbj10aGlzLmVsZW1lbnQuaGVpZ2h0KCksdGhpcy5hY3RpdmUucHJldkFsbChcIi51aS1tZW51LWl0ZW1cIikuZWFjaChmdW5jdGlvbigpe3JldHVybiBpPXQodGhpcyksaS5vZmZzZXQoKS50b3AtcytuPjB9KSx0aGlzLmZvY3VzKGUsaSkpOnRoaXMuZm9jdXMoZSx0aGlzLmFjdGl2ZU1lbnUuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpLmZpcnN0KCkpKSx2b2lkIDApOih0aGlzLm5leHQoZSksdm9pZCAwKX0sX2hhc1Njcm9sbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKTx0aGlzLmVsZW1lbnQucHJvcChcInNjcm9sbEhlaWdodFwiKX0sc2VsZWN0OmZ1bmN0aW9uKGUpe3RoaXMuYWN0aXZlPXRoaXMuYWN0aXZlfHx0KGUudGFyZ2V0KS5jbG9zZXN0KFwiLnVpLW1lbnUtaXRlbVwiKTt2YXIgaT17aXRlbTp0aGlzLmFjdGl2ZX07dGhpcy5hY3RpdmUuaGFzKFwiLnVpLW1lbnVcIikubGVuZ3RofHx0aGlzLmNvbGxhcHNlQWxsKGUsITApLHRoaXMuX3RyaWdnZXIoXCJzZWxlY3RcIixlLGkpfSxfZmlsdGVyTWVudUl0ZW1zOmZ1bmN0aW9uKGUpe3ZhciBpPWUucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csXCJcXFxcJCZcIikscz1SZWdFeHAoXCJeXCIraSxcImlcIik7cmV0dXJuIHRoaXMuYWN0aXZlTWVudS5maW5kKHRoaXMub3B0aW9ucy5pdGVtcykuZmlsdGVyKFwiLnVpLW1lbnUtaXRlbVwiKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm4gcy50ZXN0KHQudHJpbSh0KHRoaXMpLmNoaWxkcmVuKFwiLnVpLW1lbnUtaXRlbS13cmFwcGVyXCIpLnRleHQoKSkpfSl9fSksdC53aWRnZXQoXCJ1aS5hdXRvY29tcGxldGVcIix7dmVyc2lvbjpcIjEuMTIuMVwiLGRlZmF1bHRFbGVtZW50OlwiPGlucHV0PlwiLG9wdGlvbnM6e2FwcGVuZFRvOm51bGwsYXV0b0ZvY3VzOiExLGRlbGF5OjMwMCxtaW5MZW5ndGg6MSxwb3NpdGlvbjp7bXk6XCJsZWZ0IHRvcFwiLGF0OlwibGVmdCBib3R0b21cIixjb2xsaXNpb246XCJub25lXCJ9LHNvdXJjZTpudWxsLGNoYW5nZTpudWxsLGNsb3NlOm51bGwsZm9jdXM6bnVsbCxvcGVuOm51bGwscmVzcG9uc2U6bnVsbCxzZWFyY2g6bnVsbCxzZWxlY3Q6bnVsbH0scmVxdWVzdEluZGV4OjAscGVuZGluZzowLF9jcmVhdGU6ZnVuY3Rpb24oKXt2YXIgZSxpLHMsbj10aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxvPVwidGV4dGFyZWFcIj09PW4sYT1cImlucHV0XCI9PT1uO1xudGhpcy5pc011bHRpTGluZT1vfHwhYSYmdGhpcy5faXNDb250ZW50RWRpdGFibGUodGhpcy5lbGVtZW50KSx0aGlzLnZhbHVlTWV0aG9kPXRoaXMuZWxlbWVudFtvfHxhP1widmFsXCI6XCJ0ZXh0XCJdLHRoaXMuaXNOZXdNZW51PSEwLHRoaXMuX2FkZENsYXNzKFwidWktYXV0b2NvbXBsZXRlLWlucHV0XCIpLHRoaXMuZWxlbWVudC5hdHRyKFwiYXV0b2NvbXBsZXRlXCIsXCJvZmZcIiksdGhpcy5fb24odGhpcy5lbGVtZW50LHtrZXlkb3duOmZ1bmN0aW9uKG4pe2lmKHRoaXMuZWxlbWVudC5wcm9wKFwicmVhZE9ubHlcIikpcmV0dXJuIGU9ITAscz0hMCxpPSEwLHZvaWQgMDtlPSExLHM9ITEsaT0hMTt2YXIgbz10LnVpLmtleUNvZGU7c3dpdGNoKG4ua2V5Q29kZSl7Y2FzZSBvLlBBR0VfVVA6ZT0hMCx0aGlzLl9tb3ZlKFwicHJldmlvdXNQYWdlXCIsbik7YnJlYWs7Y2FzZSBvLlBBR0VfRE9XTjplPSEwLHRoaXMuX21vdmUoXCJuZXh0UGFnZVwiLG4pO2JyZWFrO2Nhc2Ugby5VUDplPSEwLHRoaXMuX2tleUV2ZW50KFwicHJldmlvdXNcIixuKTticmVhaztjYXNlIG8uRE9XTjplPSEwLHRoaXMuX2tleUV2ZW50KFwibmV4dFwiLG4pO2JyZWFrO2Nhc2Ugby5FTlRFUjp0aGlzLm1lbnUuYWN0aXZlJiYoZT0hMCxuLnByZXZlbnREZWZhdWx0KCksdGhpcy5tZW51LnNlbGVjdChuKSk7YnJlYWs7Y2FzZSBvLlRBQjp0aGlzLm1lbnUuYWN0aXZlJiZ0aGlzLm1lbnUuc2VsZWN0KG4pO2JyZWFrO2Nhc2Ugby5FU0NBUEU6dGhpcy5tZW51LmVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSYmKHRoaXMuaXNNdWx0aUxpbmV8fHRoaXMuX3ZhbHVlKHRoaXMudGVybSksdGhpcy5jbG9zZShuKSxuLnByZXZlbnREZWZhdWx0KCkpO2JyZWFrO2RlZmF1bHQ6aT0hMCx0aGlzLl9zZWFyY2hUaW1lb3V0KG4pfX0sa2V5cHJlc3M6ZnVuY3Rpb24ocyl7aWYoZSlyZXR1cm4gZT0hMSwoIXRoaXMuaXNNdWx0aUxpbmV8fHRoaXMubWVudS5lbGVtZW50LmlzKFwiOnZpc2libGVcIikpJiZzLnByZXZlbnREZWZhdWx0KCksdm9pZCAwO2lmKCFpKXt2YXIgbj10LnVpLmtleUNvZGU7c3dpdGNoKHMua2V5Q29kZSl7Y2FzZSBuLlBBR0VfVVA6dGhpcy5fbW92ZShcInByZXZpb3VzUGFnZVwiLHMpO2JyZWFrO2Nhc2Ugbi5QQUdFX0RPV046dGhpcy5fbW92ZShcIm5leHRQYWdlXCIscyk7YnJlYWs7Y2FzZSBuLlVQOnRoaXMuX2tleUV2ZW50KFwicHJldmlvdXNcIixzKTticmVhaztjYXNlIG4uRE9XTjp0aGlzLl9rZXlFdmVudChcIm5leHRcIixzKX19fSxpbnB1dDpmdW5jdGlvbih0KXtyZXR1cm4gcz8ocz0hMSx0LnByZXZlbnREZWZhdWx0KCksdm9pZCAwKToodGhpcy5fc2VhcmNoVGltZW91dCh0KSx2b2lkIDApfSxmb2N1czpmdW5jdGlvbigpe3RoaXMuc2VsZWN0ZWRJdGVtPW51bGwsdGhpcy5wcmV2aW91cz10aGlzLl92YWx1ZSgpfSxibHVyOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNhbmNlbEJsdXI/KGRlbGV0ZSB0aGlzLmNhbmNlbEJsdXIsdm9pZCAwKTooY2xlYXJUaW1lb3V0KHRoaXMuc2VhcmNoaW5nKSx0aGlzLmNsb3NlKHQpLHRoaXMuX2NoYW5nZSh0KSx2b2lkIDApfX0pLHRoaXMuX2luaXRTb3VyY2UoKSx0aGlzLm1lbnU9dChcIjx1bD5cIikuYXBwZW5kVG8odGhpcy5fYXBwZW5kVG8oKSkubWVudSh7cm9sZTpudWxsfSkuaGlkZSgpLm1lbnUoXCJpbnN0YW5jZVwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLm1lbnUuZWxlbWVudCxcInVpLWF1dG9jb21wbGV0ZVwiLFwidWktZnJvbnRcIiksdGhpcy5fb24odGhpcy5tZW51LmVsZW1lbnQse21vdXNlZG93bjpmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksdGhpcy5jYW5jZWxCbHVyPSEwLHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuY2FuY2VsQmx1cix0aGlzLmVsZW1lbnRbMF0hPT10LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pJiZ0aGlzLmVsZW1lbnQudHJpZ2dlcihcImZvY3VzXCIpfSl9LG1lbnVmb2N1czpmdW5jdGlvbihlLGkpe3ZhciBzLG47cmV0dXJuIHRoaXMuaXNOZXdNZW51JiYodGhpcy5pc05ld01lbnU9ITEsZS5vcmlnaW5hbEV2ZW50JiYvXm1vdXNlLy50ZXN0KGUub3JpZ2luYWxFdmVudC50eXBlKSk/KHRoaXMubWVudS5ibHVyKCksdGhpcy5kb2N1bWVudC5vbmUoXCJtb3VzZW1vdmVcIixmdW5jdGlvbigpe3QoZS50YXJnZXQpLnRyaWdnZXIoZS5vcmlnaW5hbEV2ZW50KX0pLHZvaWQgMCk6KG49aS5pdGVtLmRhdGEoXCJ1aS1hdXRvY29tcGxldGUtaXRlbVwiKSwhMSE9PXRoaXMuX3RyaWdnZXIoXCJmb2N1c1wiLGUse2l0ZW06bn0pJiZlLm9yaWdpbmFsRXZlbnQmJi9ea2V5Ly50ZXN0KGUub3JpZ2luYWxFdmVudC50eXBlKSYmdGhpcy5fdmFsdWUobi52YWx1ZSkscz1pLml0ZW0uYXR0cihcImFyaWEtbGFiZWxcIil8fG4udmFsdWUscyYmdC50cmltKHMpLmxlbmd0aCYmKHRoaXMubGl2ZVJlZ2lvbi5jaGlsZHJlbigpLmhpZGUoKSx0KFwiPGRpdj5cIikudGV4dChzKS5hcHBlbmRUbyh0aGlzLmxpdmVSZWdpb24pKSx2b2lkIDApfSxtZW51c2VsZWN0OmZ1bmN0aW9uKGUsaSl7dmFyIHM9aS5pdGVtLmRhdGEoXCJ1aS1hdXRvY29tcGxldGUtaXRlbVwiKSxuPXRoaXMucHJldmlvdXM7dGhpcy5lbGVtZW50WzBdIT09dC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKSYmKHRoaXMuZWxlbWVudC50cmlnZ2VyKFwiZm9jdXNcIiksdGhpcy5wcmV2aW91cz1uLHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7dGhpcy5wcmV2aW91cz1uLHRoaXMuc2VsZWN0ZWRJdGVtPXN9KSksITEhPT10aGlzLl90cmlnZ2VyKFwic2VsZWN0XCIsZSx7aXRlbTpzfSkmJnRoaXMuX3ZhbHVlKHMudmFsdWUpLHRoaXMudGVybT10aGlzLl92YWx1ZSgpLHRoaXMuY2xvc2UoZSksdGhpcy5zZWxlY3RlZEl0ZW09c319KSx0aGlzLmxpdmVSZWdpb249dChcIjxkaXY+XCIse3JvbGU6XCJzdGF0dXNcIixcImFyaWEtbGl2ZVwiOlwiYXNzZXJ0aXZlXCIsXCJhcmlhLXJlbGV2YW50XCI6XCJhZGRpdGlvbnNcIn0pLmFwcGVuZFRvKHRoaXMuZG9jdW1lbnRbMF0uYm9keSksdGhpcy5fYWRkQ2xhc3ModGhpcy5saXZlUmVnaW9uLG51bGwsXCJ1aS1oZWxwZXItaGlkZGVuLWFjY2Vzc2libGVcIiksdGhpcy5fb24odGhpcy53aW5kb3cse2JlZm9yZXVubG9hZDpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwiYXV0b2NvbXBsZXRlXCIpfX0pfSxfZGVzdHJveTpmdW5jdGlvbigpe2NsZWFyVGltZW91dCh0aGlzLnNlYXJjaGluZyksdGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoXCJhdXRvY29tcGxldGVcIiksdGhpcy5tZW51LmVsZW1lbnQucmVtb3ZlKCksdGhpcy5saXZlUmVnaW9uLnJlbW92ZSgpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7dGhpcy5fc3VwZXIodCxlKSxcInNvdXJjZVwiPT09dCYmdGhpcy5faW5pdFNvdXJjZSgpLFwiYXBwZW5kVG9cIj09PXQmJnRoaXMubWVudS5lbGVtZW50LmFwcGVuZFRvKHRoaXMuX2FwcGVuZFRvKCkpLFwiZGlzYWJsZWRcIj09PXQmJmUmJnRoaXMueGhyJiZ0aGlzLnhoci5hYm9ydCgpfSxfaXNFdmVudFRhcmdldEluV2lkZ2V0OmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMubWVudS5lbGVtZW50WzBdO3JldHVybiBlLnRhcmdldD09PXRoaXMuZWxlbWVudFswXXx8ZS50YXJnZXQ9PT1pfHx0LmNvbnRhaW5zKGksZS50YXJnZXQpfSxfY2xvc2VPbkNsaWNrT3V0c2lkZTpmdW5jdGlvbih0KXt0aGlzLl9pc0V2ZW50VGFyZ2V0SW5XaWRnZXQodCl8fHRoaXMuY2xvc2UoKX0sX2FwcGVuZFRvOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcHRpb25zLmFwcGVuZFRvO3JldHVybiBlJiYoZT1lLmpxdWVyeXx8ZS5ub2RlVHlwZT90KGUpOnRoaXMuZG9jdW1lbnQuZmluZChlKS5lcSgwKSksZSYmZVswXXx8KGU9dGhpcy5lbGVtZW50LmNsb3Nlc3QoXCIudWktZnJvbnQsIGRpYWxvZ1wiKSksZS5sZW5ndGh8fChlPXRoaXMuZG9jdW1lbnRbMF0uYm9keSksZX0sX2luaXRTb3VyY2U6ZnVuY3Rpb24oKXt2YXIgZSxpLHM9dGhpczt0LmlzQXJyYXkodGhpcy5vcHRpb25zLnNvdXJjZSk/KGU9dGhpcy5vcHRpb25zLnNvdXJjZSx0aGlzLnNvdXJjZT1mdW5jdGlvbihpLHMpe3ModC51aS5hdXRvY29tcGxldGUuZmlsdGVyKGUsaS50ZXJtKSl9KTpcInN0cmluZ1wiPT10eXBlb2YgdGhpcy5vcHRpb25zLnNvdXJjZT8oaT10aGlzLm9wdGlvbnMuc291cmNlLHRoaXMuc291cmNlPWZ1bmN0aW9uKGUsbil7cy54aHImJnMueGhyLmFib3J0KCkscy54aHI9dC5hamF4KHt1cmw6aSxkYXRhOmUsZGF0YVR5cGU6XCJqc29uXCIsc3VjY2VzczpmdW5jdGlvbih0KXtuKHQpfSxlcnJvcjpmdW5jdGlvbigpe24oW10pfX0pfSk6dGhpcy5zb3VyY2U9dGhpcy5vcHRpb25zLnNvdXJjZX0sX3NlYXJjaFRpbWVvdXQ6ZnVuY3Rpb24odCl7Y2xlYXJUaW1lb3V0KHRoaXMuc2VhcmNoaW5nKSx0aGlzLnNlYXJjaGluZz10aGlzLl9kZWxheShmdW5jdGlvbigpe3ZhciBlPXRoaXMudGVybT09PXRoaXMuX3ZhbHVlKCksaT10aGlzLm1lbnUuZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpLHM9dC5hbHRLZXl8fHQuY3RybEtleXx8dC5tZXRhS2V5fHx0LnNoaWZ0S2V5OyghZXx8ZSYmIWkmJiFzKSYmKHRoaXMuc2VsZWN0ZWRJdGVtPW51bGwsdGhpcy5zZWFyY2gobnVsbCx0KSl9LHRoaXMub3B0aW9ucy5kZWxheSl9LHNlYXJjaDpmdW5jdGlvbih0LGUpe3JldHVybiB0PW51bGwhPXQ/dDp0aGlzLl92YWx1ZSgpLHRoaXMudGVybT10aGlzLl92YWx1ZSgpLHQubGVuZ3RoPHRoaXMub3B0aW9ucy5taW5MZW5ndGg/dGhpcy5jbG9zZShlKTp0aGlzLl90cmlnZ2VyKFwic2VhcmNoXCIsZSkhPT0hMT90aGlzLl9zZWFyY2godCk6dm9pZCAwfSxfc2VhcmNoOmZ1bmN0aW9uKHQpe3RoaXMucGVuZGluZysrLHRoaXMuX2FkZENsYXNzKFwidWktYXV0b2NvbXBsZXRlLWxvYWRpbmdcIiksdGhpcy5jYW5jZWxTZWFyY2g9ITEsdGhpcy5zb3VyY2Uoe3Rlcm06dH0sdGhpcy5fcmVzcG9uc2UoKSl9LF9yZXNwb25zZTpmdW5jdGlvbigpe3ZhciBlPSsrdGhpcy5yZXF1ZXN0SW5kZXg7cmV0dXJuIHQucHJveHkoZnVuY3Rpb24odCl7ZT09PXRoaXMucmVxdWVzdEluZGV4JiZ0aGlzLl9fcmVzcG9uc2UodCksdGhpcy5wZW5kaW5nLS0sdGhpcy5wZW5kaW5nfHx0aGlzLl9yZW1vdmVDbGFzcyhcInVpLWF1dG9jb21wbGV0ZS1sb2FkaW5nXCIpfSx0aGlzKX0sX19yZXNwb25zZTpmdW5jdGlvbih0KXt0JiYodD10aGlzLl9ub3JtYWxpemUodCkpLHRoaXMuX3RyaWdnZXIoXCJyZXNwb25zZVwiLG51bGwse2NvbnRlbnQ6dH0pLCF0aGlzLm9wdGlvbnMuZGlzYWJsZWQmJnQmJnQubGVuZ3RoJiYhdGhpcy5jYW5jZWxTZWFyY2g/KHRoaXMuX3N1Z2dlc3QodCksdGhpcy5fdHJpZ2dlcihcIm9wZW5cIikpOnRoaXMuX2Nsb3NlKCl9LGNsb3NlOmZ1bmN0aW9uKHQpe3RoaXMuY2FuY2VsU2VhcmNoPSEwLHRoaXMuX2Nsb3NlKHQpfSxfY2xvc2U6ZnVuY3Rpb24odCl7dGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQsXCJtb3VzZWRvd25cIiksdGhpcy5tZW51LmVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSYmKHRoaXMubWVudS5lbGVtZW50LmhpZGUoKSx0aGlzLm1lbnUuYmx1cigpLHRoaXMuaXNOZXdNZW51PSEwLHRoaXMuX3RyaWdnZXIoXCJjbG9zZVwiLHQpKX0sX2NoYW5nZTpmdW5jdGlvbih0KXt0aGlzLnByZXZpb3VzIT09dGhpcy5fdmFsdWUoKSYmdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLHQse2l0ZW06dGhpcy5zZWxlY3RlZEl0ZW19KX0sX25vcm1hbGl6ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS5sZW5ndGgmJmVbMF0ubGFiZWwmJmVbMF0udmFsdWU/ZTp0Lm1hcChlLGZ1bmN0aW9uKGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP3tsYWJlbDplLHZhbHVlOmV9OnQuZXh0ZW5kKHt9LGUse2xhYmVsOmUubGFiZWx8fGUudmFsdWUsdmFsdWU6ZS52YWx1ZXx8ZS5sYWJlbH0pfSl9LF9zdWdnZXN0OmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMubWVudS5lbGVtZW50LmVtcHR5KCk7dGhpcy5fcmVuZGVyTWVudShpLGUpLHRoaXMuaXNOZXdNZW51PSEwLHRoaXMubWVudS5yZWZyZXNoKCksaS5zaG93KCksdGhpcy5fcmVzaXplTWVudSgpLGkucG9zaXRpb24odC5leHRlbmQoe29mOnRoaXMuZWxlbWVudH0sdGhpcy5vcHRpb25zLnBvc2l0aW9uKSksdGhpcy5vcHRpb25zLmF1dG9Gb2N1cyYmdGhpcy5tZW51Lm5leHQoKSx0aGlzLl9vbih0aGlzLmRvY3VtZW50LHttb3VzZWRvd246XCJfY2xvc2VPbkNsaWNrT3V0c2lkZVwifSl9LF9yZXNpemVNZW51OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5tZW51LmVsZW1lbnQ7dC5vdXRlcldpZHRoKE1hdGgubWF4KHQud2lkdGgoXCJcIikub3V0ZXJXaWR0aCgpKzEsdGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSkpfSxfcmVuZGVyTWVudTpmdW5jdGlvbihlLGkpe3ZhciBzPXRoaXM7dC5lYWNoKGksZnVuY3Rpb24odCxpKXtzLl9yZW5kZXJJdGVtRGF0YShlLGkpfSl9LF9yZW5kZXJJdGVtRGF0YTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLl9yZW5kZXJJdGVtKHQsZSkuZGF0YShcInVpLWF1dG9jb21wbGV0ZS1pdGVtXCIsZSl9LF9yZW5kZXJJdGVtOmZ1bmN0aW9uKGUsaSl7cmV0dXJuIHQoXCI8bGk+XCIpLmFwcGVuZCh0KFwiPGRpdj5cIikudGV4dChpLmxhYmVsKSkuYXBwZW5kVG8oZSl9LF9tb3ZlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMubWVudS5lbGVtZW50LmlzKFwiOnZpc2libGVcIik/dGhpcy5tZW51LmlzRmlyc3RJdGVtKCkmJi9ecHJldmlvdXMvLnRlc3QodCl8fHRoaXMubWVudS5pc0xhc3RJdGVtKCkmJi9ebmV4dC8udGVzdCh0KT8odGhpcy5pc011bHRpTGluZXx8dGhpcy5fdmFsdWUodGhpcy50ZXJtKSx0aGlzLm1lbnUuYmx1cigpLHZvaWQgMCk6KHRoaXMubWVudVt0XShlKSx2b2lkIDApOih0aGlzLnNlYXJjaChudWxsLGUpLHZvaWQgMCl9LHdpZGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1lbnUuZWxlbWVudH0sX3ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmFsdWVNZXRob2QuYXBwbHkodGhpcy5lbGVtZW50LGFyZ3VtZW50cyl9LF9rZXlFdmVudDpmdW5jdGlvbih0LGUpeyghdGhpcy5pc011bHRpTGluZXx8dGhpcy5tZW51LmVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSkmJih0aGlzLl9tb3ZlKHQsZSksZS5wcmV2ZW50RGVmYXVsdCgpKX0sX2lzQ29udGVudEVkaXRhYmxlOmZ1bmN0aW9uKHQpe2lmKCF0Lmxlbmd0aClyZXR1cm4hMTt2YXIgZT10LnByb3AoXCJjb250ZW50RWRpdGFibGVcIik7cmV0dXJuXCJpbmhlcml0XCI9PT1lP3RoaXMuX2lzQ29udGVudEVkaXRhYmxlKHQucGFyZW50KCkpOlwidHJ1ZVwiPT09ZX19KSx0LmV4dGVuZCh0LnVpLmF1dG9jb21wbGV0ZSx7ZXNjYXBlUmVnZXg6ZnVuY3Rpb24odCl7cmV0dXJuIHQucmVwbGFjZSgvW1xcLVxcW1xcXXt9KCkqKz8uLFxcXFxcXF4kfCNcXHNdL2csXCJcXFxcJCZcIil9LGZpbHRlcjpmdW5jdGlvbihlLGkpe3ZhciBzPVJlZ0V4cCh0LnVpLmF1dG9jb21wbGV0ZS5lc2NhcGVSZWdleChpKSxcImlcIik7cmV0dXJuIHQuZ3JlcChlLGZ1bmN0aW9uKHQpe3JldHVybiBzLnRlc3QodC5sYWJlbHx8dC52YWx1ZXx8dCl9KX19KSx0LndpZGdldChcInVpLmF1dG9jb21wbGV0ZVwiLHQudWkuYXV0b2NvbXBsZXRlLHtvcHRpb25zOnttZXNzYWdlczp7bm9SZXN1bHRzOlwiTm8gc2VhcmNoIHJlc3VsdHMuXCIscmVzdWx0czpmdW5jdGlvbih0KXtyZXR1cm4gdCsodD4xP1wiIHJlc3VsdHMgYXJlXCI6XCIgcmVzdWx0IGlzXCIpK1wiIGF2YWlsYWJsZSwgdXNlIHVwIGFuZCBkb3duIGFycm93IGtleXMgdG8gbmF2aWdhdGUuXCJ9fX0sX19yZXNwb25zZTpmdW5jdGlvbihlKXt2YXIgaTt0aGlzLl9zdXBlckFwcGx5KGFyZ3VtZW50cyksdGhpcy5vcHRpb25zLmRpc2FibGVkfHx0aGlzLmNhbmNlbFNlYXJjaHx8KGk9ZSYmZS5sZW5ndGg/dGhpcy5vcHRpb25zLm1lc3NhZ2VzLnJlc3VsdHMoZS5sZW5ndGgpOnRoaXMub3B0aW9ucy5tZXNzYWdlcy5ub1Jlc3VsdHMsdGhpcy5saXZlUmVnaW9uLmNoaWxkcmVuKCkuaGlkZSgpLHQoXCI8ZGl2PlwiKS50ZXh0KGkpLmFwcGVuZFRvKHRoaXMubGl2ZVJlZ2lvbikpfX0pLHQudWkuYXV0b2NvbXBsZXRlO3ZhciBnPS91aS1jb3JuZXItKFthLXpdKXsyLDZ9L2c7dC53aWRnZXQoXCJ1aS5jb250cm9sZ3JvdXBcIix7dmVyc2lvbjpcIjEuMTIuMVwiLGRlZmF1bHRFbGVtZW50OlwiPGRpdj5cIixvcHRpb25zOntkaXJlY3Rpb246XCJob3Jpem9udGFsXCIsZGlzYWJsZWQ6bnVsbCxvbmx5VmlzaWJsZTohMCxpdGVtczp7YnV0dG9uOlwiaW5wdXRbdHlwZT1idXR0b25dLCBpbnB1dFt0eXBlPXN1Ym1pdF0sIGlucHV0W3R5cGU9cmVzZXRdLCBidXR0b24sIGFcIixjb250cm9sZ3JvdXBMYWJlbDpcIi51aS1jb250cm9sZ3JvdXAtbGFiZWxcIixjaGVja2JveHJhZGlvOlwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXSwgaW5wdXRbdHlwZT0ncmFkaW8nXVwiLHNlbGVjdG1lbnU6XCJzZWxlY3RcIixzcGlubmVyOlwiLnVpLXNwaW5uZXItaW5wdXRcIn19LF9jcmVhdGU6ZnVuY3Rpb24oKXt0aGlzLl9lbmhhbmNlKCl9LF9lbmhhbmNlOmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LmF0dHIoXCJyb2xlXCIsXCJ0b29sYmFyXCIpLHRoaXMucmVmcmVzaCgpfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX2NhbGxDaGlsZE1ldGhvZChcImRlc3Ryb3lcIiksdGhpcy5jaGlsZFdpZGdldHMucmVtb3ZlRGF0YShcInVpLWNvbnRyb2xncm91cC1kYXRhXCIpLHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwicm9sZVwiKSx0aGlzLm9wdGlvbnMuaXRlbXMuY29udHJvbGdyb3VwTGFiZWwmJnRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5pdGVtcy5jb250cm9sZ3JvdXBMYWJlbCkuZmluZChcIi51aS1jb250cm9sZ3JvdXAtbGFiZWwtY29udGVudHNcIikuY29udGVudHMoKS51bndyYXAoKX0sX2luaXRXaWRnZXRzOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxpPVtdO3QuZWFjaCh0aGlzLm9wdGlvbnMuaXRlbXMsZnVuY3Rpb24ocyxuKXt2YXIgbyxhPXt9O3JldHVybiBuP1wiY29udHJvbGdyb3VwTGFiZWxcIj09PXM/KG89ZS5lbGVtZW50LmZpbmQobiksby5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKTtlLmNoaWxkcmVuKFwiLnVpLWNvbnRyb2xncm91cC1sYWJlbC1jb250ZW50c1wiKS5sZW5ndGh8fGUuY29udGVudHMoKS53cmFwQWxsKFwiPHNwYW4gY2xhc3M9J3VpLWNvbnRyb2xncm91cC1sYWJlbC1jb250ZW50cyc+PC9zcGFuPlwiKX0pLGUuX2FkZENsYXNzKG8sbnVsbCxcInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudCB1aS1zdGF0ZS1kZWZhdWx0XCIpLGk9aS5jb25jYXQoby5nZXQoKSksdm9pZCAwKToodC5mbltzXSYmKGE9ZVtcIl9cIitzK1wiT3B0aW9uc1wiXT9lW1wiX1wiK3MrXCJPcHRpb25zXCJdKFwibWlkZGxlXCIpOntjbGFzc2VzOnt9fSxlLmVsZW1lbnQuZmluZChuKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49dCh0aGlzKSxvPW5bc10oXCJpbnN0YW5jZVwiKSxyPXQud2lkZ2V0LmV4dGVuZCh7fSxhKTtpZihcImJ1dHRvblwiIT09c3x8IW4ucGFyZW50KFwiLnVpLXNwaW5uZXJcIikubGVuZ3RoKXtvfHwobz1uW3NdKClbc10oXCJpbnN0YW5jZVwiKSksbyYmKHIuY2xhc3Nlcz1lLl9yZXNvbHZlQ2xhc3Nlc1ZhbHVlcyhyLmNsYXNzZXMsbykpLG5bc10ocik7dmFyIGg9bltzXShcIndpZGdldFwiKTt0LmRhdGEoaFswXSxcInVpLWNvbnRyb2xncm91cC1kYXRhXCIsbz9vOm5bc10oXCJpbnN0YW5jZVwiKSksaS5wdXNoKGhbMF0pfX0pKSx2b2lkIDApOnZvaWQgMH0pLHRoaXMuY2hpbGRXaWRnZXRzPXQodC51bmlxdWUoaSkpLHRoaXMuX2FkZENsYXNzKHRoaXMuY2hpbGRXaWRnZXRzLFwidWktY29udHJvbGdyb3VwLWl0ZW1cIil9LF9jYWxsQ2hpbGRNZXRob2Q6ZnVuY3Rpb24oZSl7dGhpcy5jaGlsZFdpZGdldHMuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQodGhpcykscz1pLmRhdGEoXCJ1aS1jb250cm9sZ3JvdXAtZGF0YVwiKTtzJiZzW2VdJiZzW2VdKCl9KX0sX3VwZGF0ZUNvcm5lckNsYXNzOmZ1bmN0aW9uKHQsZSl7dmFyIGk9XCJ1aS1jb3JuZXItdG9wIHVpLWNvcm5lci1ib3R0b20gdWktY29ybmVyLWxlZnQgdWktY29ybmVyLXJpZ2h0IHVpLWNvcm5lci1hbGxcIixzPXRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyhlLFwibGFiZWxcIikuY2xhc3Nlcy5sYWJlbDt0aGlzLl9yZW1vdmVDbGFzcyh0LG51bGwsaSksdGhpcy5fYWRkQ2xhc3ModCxudWxsLHMpfSxfYnVpbGRTaW1wbGVPcHRpb25zOmZ1bmN0aW9uKHQsZSl7dmFyIGk9XCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcHRpb25zLmRpcmVjdGlvbixzPXtjbGFzc2VzOnt9fTtyZXR1cm4gcy5jbGFzc2VzW2VdPXttaWRkbGU6XCJcIixmaXJzdDpcInVpLWNvcm5lci1cIisoaT9cInRvcFwiOlwibGVmdFwiKSxsYXN0OlwidWktY29ybmVyLVwiKyhpP1wiYm90dG9tXCI6XCJyaWdodFwiKSxvbmx5OlwidWktY29ybmVyLWFsbFwifVt0XSxzfSxfc3Bpbm5lck9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fYnVpbGRTaW1wbGVPcHRpb25zKHQsXCJ1aS1zcGlubmVyXCIpO3JldHVybiBlLmNsYXNzZXNbXCJ1aS1zcGlubmVyLXVwXCJdPVwiXCIsZS5jbGFzc2VzW1widWktc3Bpbm5lci1kb3duXCJdPVwiXCIsZX0sX2J1dHRvbk9wdGlvbnM6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyh0LFwidWktYnV0dG9uXCIpfSxfY2hlY2tib3hyYWRpb09wdGlvbnM6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2J1aWxkU2ltcGxlT3B0aW9ucyh0LFwidWktY2hlY2tib3hyYWRpby1sYWJlbFwiKX0sX3NlbGVjdG1lbnVPcHRpb25zOmZ1bmN0aW9uKHQpe3ZhciBlPVwidmVydGljYWxcIj09PXRoaXMub3B0aW9ucy5kaXJlY3Rpb247cmV0dXJue3dpZHRoOmU/XCJhdXRvXCI6ITEsY2xhc3Nlczp7bWlkZGxlOntcInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW5cIjpcIlwiLFwidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkXCI6XCJcIn0sZmlyc3Q6e1widWktc2VsZWN0bWVudS1idXR0b24tb3BlblwiOlwidWktY29ybmVyLVwiKyhlP1widG9wXCI6XCJ0bFwiKSxcInVpLXNlbGVjdG1lbnUtYnV0dG9uLWNsb3NlZFwiOlwidWktY29ybmVyLVwiKyhlP1widG9wXCI6XCJsZWZ0XCIpfSxsYXN0OntcInVpLXNlbGVjdG1lbnUtYnV0dG9uLW9wZW5cIjplP1wiXCI6XCJ1aS1jb3JuZXItdHJcIixcInVpLXNlbGVjdG1lbnUtYnV0dG9uLWNsb3NlZFwiOlwidWktY29ybmVyLVwiKyhlP1wiYm90dG9tXCI6XCJyaWdodFwiKX0sb25seTp7XCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1vcGVuXCI6XCJ1aS1jb3JuZXItdG9wXCIsXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWRcIjpcInVpLWNvcm5lci1hbGxcIn19W3RdfX0sX3Jlc29sdmVDbGFzc2VzVmFsdWVzOmZ1bmN0aW9uKGUsaSl7dmFyIHM9e307cmV0dXJuIHQuZWFjaChlLGZ1bmN0aW9uKG4pe3ZhciBvPWkub3B0aW9ucy5jbGFzc2VzW25dfHxcIlwiO289dC50cmltKG8ucmVwbGFjZShnLFwiXCIpKSxzW25dPShvK1wiIFwiK2Vbbl0pLnJlcGxhY2UoL1xccysvZyxcIiBcIil9KSxzfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJkaXJlY3Rpb25cIj09PXQmJnRoaXMuX3JlbW92ZUNsYXNzKFwidWktY29udHJvbGdyb3VwLVwiK3RoaXMub3B0aW9ucy5kaXJlY3Rpb24pLHRoaXMuX3N1cGVyKHQsZSksXCJkaXNhYmxlZFwiPT09dD8odGhpcy5fY2FsbENoaWxkTWV0aG9kKGU/XCJkaXNhYmxlXCI6XCJlbmFibGVcIiksdm9pZCAwKToodGhpcy5yZWZyZXNoKCksdm9pZCAwKX0scmVmcmVzaDpmdW5jdGlvbigpe3ZhciBlLGk9dGhpczt0aGlzLl9hZGRDbGFzcyhcInVpLWNvbnRyb2xncm91cCB1aS1jb250cm9sZ3JvdXAtXCIrdGhpcy5vcHRpb25zLmRpcmVjdGlvbiksXCJob3Jpem9udGFsXCI9PT10aGlzLm9wdGlvbnMuZGlyZWN0aW9uJiZ0aGlzLl9hZGRDbGFzcyhudWxsLFwidWktaGVscGVyLWNsZWFyZml4XCIpLHRoaXMuX2luaXRXaWRnZXRzKCksZT10aGlzLmNoaWxkV2lkZ2V0cyx0aGlzLm9wdGlvbnMub25seVZpc2libGUmJihlPWUuZmlsdGVyKFwiOnZpc2libGVcIikpLGUubGVuZ3RoJiYodC5lYWNoKFtcImZpcnN0XCIsXCJsYXN0XCJdLGZ1bmN0aW9uKHQscyl7dmFyIG49ZVtzXSgpLmRhdGEoXCJ1aS1jb250cm9sZ3JvdXAtZGF0YVwiKTtpZihuJiZpW1wiX1wiK24ud2lkZ2V0TmFtZStcIk9wdGlvbnNcIl0pe3ZhciBvPWlbXCJfXCIrbi53aWRnZXROYW1lK1wiT3B0aW9uc1wiXSgxPT09ZS5sZW5ndGg/XCJvbmx5XCI6cyk7by5jbGFzc2VzPWkuX3Jlc29sdmVDbGFzc2VzVmFsdWVzKG8uY2xhc3NlcyxuKSxuLmVsZW1lbnRbbi53aWRnZXROYW1lXShvKX1lbHNlIGkuX3VwZGF0ZUNvcm5lckNsYXNzKGVbc10oKSxzKX0pLHRoaXMuX2NhbGxDaGlsZE1ldGhvZChcInJlZnJlc2hcIikpfX0pLHQud2lkZ2V0KFwidWkuY2hlY2tib3hyYWRpb1wiLFt0LnVpLmZvcm1SZXNldE1peGluLHt2ZXJzaW9uOlwiMS4xMi4xXCIsb3B0aW9uczp7ZGlzYWJsZWQ6bnVsbCxsYWJlbDpudWxsLGljb246ITAsY2xhc3Nlczp7XCJ1aS1jaGVja2JveHJhZGlvLWxhYmVsXCI6XCJ1aS1jb3JuZXItYWxsXCIsXCJ1aS1jaGVja2JveHJhZGlvLWljb25cIjpcInVpLWNvcm5lci1hbGxcIn19LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7dmFyIGUsaSxzPXRoaXMsbj10aGlzLl9zdXBlcigpfHx7fTtyZXR1cm4gdGhpcy5fcmVhZFR5cGUoKSxpPXRoaXMuZWxlbWVudC5sYWJlbHMoKSx0aGlzLmxhYmVsPXQoaVtpLmxlbmd0aC0xXSksdGhpcy5sYWJlbC5sZW5ndGh8fHQuZXJyb3IoXCJObyBsYWJlbCBmb3VuZCBmb3IgY2hlY2tib3hyYWRpbyB3aWRnZXRcIiksdGhpcy5vcmlnaW5hbExhYmVsPVwiXCIsdGhpcy5sYWJlbC5jb250ZW50cygpLm5vdCh0aGlzLmVsZW1lbnRbMF0pLmVhY2goZnVuY3Rpb24oKXtzLm9yaWdpbmFsTGFiZWwrPTM9PT10aGlzLm5vZGVUeXBlP3QodGhpcykudGV4dCgpOnRoaXMub3V0ZXJIVE1MfSksdGhpcy5vcmlnaW5hbExhYmVsJiYobi5sYWJlbD10aGlzLm9yaWdpbmFsTGFiZWwpLGU9dGhpcy5lbGVtZW50WzBdLmRpc2FibGVkLG51bGwhPWUmJihuLmRpc2FibGVkPWUpLG59LF9jcmVhdGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVsZW1lbnRbMF0uY2hlY2tlZDt0aGlzLl9iaW5kRm9ybVJlc2V0SGFuZGxlcigpLG51bGw9PXRoaXMub3B0aW9ucy5kaXNhYmxlZCYmKHRoaXMub3B0aW9ucy5kaXNhYmxlZD10aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWQpLHRoaXMuX3NldE9wdGlvbihcImRpc2FibGVkXCIsdGhpcy5vcHRpb25zLmRpc2FibGVkKSx0aGlzLl9hZGRDbGFzcyhcInVpLWNoZWNrYm94cmFkaW9cIixcInVpLWhlbHBlci1oaWRkZW4tYWNjZXNzaWJsZVwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLmxhYmVsLFwidWktY2hlY2tib3hyYWRpby1sYWJlbFwiLFwidWktYnV0dG9uIHVpLXdpZGdldFwiKSxcInJhZGlvXCI9PT10aGlzLnR5cGUmJnRoaXMuX2FkZENsYXNzKHRoaXMubGFiZWwsXCJ1aS1jaGVja2JveHJhZGlvLXJhZGlvLWxhYmVsXCIpLHRoaXMub3B0aW9ucy5sYWJlbCYmdGhpcy5vcHRpb25zLmxhYmVsIT09dGhpcy5vcmlnaW5hbExhYmVsP3RoaXMuX3VwZGF0ZUxhYmVsKCk6dGhpcy5vcmlnaW5hbExhYmVsJiYodGhpcy5vcHRpb25zLmxhYmVsPXRoaXMub3JpZ2luYWxMYWJlbCksdGhpcy5fZW5oYW5jZSgpLHQmJih0aGlzLl9hZGRDbGFzcyh0aGlzLmxhYmVsLFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsXCJ1aS1zdGF0ZS1hY3RpdmVcIiksdGhpcy5pY29uJiZ0aGlzLl9hZGRDbGFzcyh0aGlzLmljb24sbnVsbCxcInVpLXN0YXRlLWhvdmVyXCIpKSx0aGlzLl9vbih7Y2hhbmdlOlwiX3RvZ2dsZUNsYXNzZXNcIixmb2N1czpmdW5jdGlvbigpe3RoaXMuX2FkZENsYXNzKHRoaXMubGFiZWwsbnVsbCxcInVpLXN0YXRlLWZvY3VzIHVpLXZpc3VhbC1mb2N1c1wiKX0sYmx1cjpmdW5jdGlvbigpe3RoaXMuX3JlbW92ZUNsYXNzKHRoaXMubGFiZWwsbnVsbCxcInVpLXN0YXRlLWZvY3VzIHVpLXZpc3VhbC1mb2N1c1wiKX19KX0sX3JlYWRUeXBlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbGVtZW50WzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7dGhpcy50eXBlPXRoaXMuZWxlbWVudFswXS50eXBlLFwiaW5wdXRcIj09PWUmJi9yYWRpb3xjaGVja2JveC8udGVzdCh0aGlzLnR5cGUpfHx0LmVycm9yKFwiQ2FuJ3QgY3JlYXRlIGNoZWNrYm94cmFkaW8gb24gZWxlbWVudC5ub2RlTmFtZT1cIitlK1wiIGFuZCBlbGVtZW50LnR5cGU9XCIrdGhpcy50eXBlKX0sX2VuaGFuY2U6ZnVuY3Rpb24oKXt0aGlzLl91cGRhdGVJY29uKHRoaXMuZWxlbWVudFswXS5jaGVja2VkKX0sd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGFiZWx9LF9nZXRSYWRpb0dyb3VwOmZ1bmN0aW9uKCl7dmFyIGUsaT10aGlzLmVsZW1lbnRbMF0ubmFtZSxzPVwiaW5wdXRbbmFtZT0nXCIrdC51aS5lc2NhcGVTZWxlY3RvcihpKStcIiddXCI7cmV0dXJuIGk/KGU9dGhpcy5mb3JtLmxlbmd0aD90KHRoaXMuZm9ybVswXS5lbGVtZW50cykuZmlsdGVyKHMpOnQocykuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIDA9PT10KHRoaXMpLmZvcm0oKS5sZW5ndGh9KSxlLm5vdCh0aGlzLmVsZW1lbnQpKTp0KFtdKX0sX3RvZ2dsZUNsYXNzZXM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLmVsZW1lbnRbMF0uY2hlY2tlZDt0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmxhYmVsLFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsXCJ1aS1zdGF0ZS1hY3RpdmVcIixlKSx0aGlzLm9wdGlvbnMuaWNvbiYmXCJjaGVja2JveFwiPT09dGhpcy50eXBlJiZ0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmljb24sbnVsbCxcInVpLWljb24tY2hlY2sgdWktc3RhdGUtY2hlY2tlZFwiLGUpLl90b2dnbGVDbGFzcyh0aGlzLmljb24sbnVsbCxcInVpLWljb24tYmxhbmtcIiwhZSksXCJyYWRpb1wiPT09dGhpcy50eXBlJiZ0aGlzLl9nZXRSYWRpb0dyb3VwKCkuZWFjaChmdW5jdGlvbigpe3ZhciBlPXQodGhpcykuY2hlY2tib3hyYWRpbyhcImluc3RhbmNlXCIpO2UmJmUuX3JlbW92ZUNsYXNzKGUubGFiZWwsXCJ1aS1jaGVja2JveHJhZGlvLWNoZWNrZWRcIixcInVpLXN0YXRlLWFjdGl2ZVwiKX0pfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuX3VuYmluZEZvcm1SZXNldEhhbmRsZXIoKSx0aGlzLmljb24mJih0aGlzLmljb24ucmVtb3ZlKCksdGhpcy5pY29uU3BhY2UucmVtb3ZlKCkpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJsYWJlbFwiIT09dHx8ZT8odGhpcy5fc3VwZXIodCxlKSxcImRpc2FibGVkXCI9PT10Pyh0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmxhYmVsLG51bGwsXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLGUpLHRoaXMuZWxlbWVudFswXS5kaXNhYmxlZD1lLHZvaWQgMCk6KHRoaXMucmVmcmVzaCgpLHZvaWQgMCkpOnZvaWQgMH0sX3VwZGF0ZUljb246ZnVuY3Rpb24oZSl7dmFyIGk9XCJ1aS1pY29uIHVpLWljb24tYmFja2dyb3VuZCBcIjt0aGlzLm9wdGlvbnMuaWNvbj8odGhpcy5pY29ufHwodGhpcy5pY29uPXQoXCI8c3Bhbj5cIiksdGhpcy5pY29uU3BhY2U9dChcIjxzcGFuPiA8L3NwYW4+XCIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaWNvblNwYWNlLFwidWktY2hlY2tib3hyYWRpby1pY29uLXNwYWNlXCIpKSxcImNoZWNrYm94XCI9PT10aGlzLnR5cGU/KGkrPWU/XCJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWRcIjpcInVpLWljb24tYmxhbmtcIix0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmljb24sbnVsbCxlP1widWktaWNvbi1ibGFua1wiOlwidWktaWNvbi1jaGVja1wiKSk6aSs9XCJ1aS1pY29uLWJsYW5rXCIsdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uLFwidWktY2hlY2tib3hyYWRpby1pY29uXCIsaSksZXx8dGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5pY29uLG51bGwsXCJ1aS1pY29uLWNoZWNrIHVpLXN0YXRlLWNoZWNrZWRcIiksdGhpcy5pY29uLnByZXBlbmRUbyh0aGlzLmxhYmVsKS5hZnRlcih0aGlzLmljb25TcGFjZSkpOnZvaWQgMCE9PXRoaXMuaWNvbiYmKHRoaXMuaWNvbi5yZW1vdmUoKSx0aGlzLmljb25TcGFjZS5yZW1vdmUoKSxkZWxldGUgdGhpcy5pY29uKX0sX3VwZGF0ZUxhYmVsOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5sYWJlbC5jb250ZW50cygpLm5vdCh0aGlzLmVsZW1lbnRbMF0pO3RoaXMuaWNvbiYmKHQ9dC5ub3QodGhpcy5pY29uWzBdKSksdGhpcy5pY29uU3BhY2UmJih0PXQubm90KHRoaXMuaWNvblNwYWNlWzBdKSksdC5yZW1vdmUoKSx0aGlzLmxhYmVsLmFwcGVuZCh0aGlzLm9wdGlvbnMubGFiZWwpfSxyZWZyZXNoOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5lbGVtZW50WzBdLmNoZWNrZWQsZT10aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWQ7dGhpcy5fdXBkYXRlSWNvbih0KSx0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmxhYmVsLFwidWktY2hlY2tib3hyYWRpby1jaGVja2VkXCIsXCJ1aS1zdGF0ZS1hY3RpdmVcIix0KSxudWxsIT09dGhpcy5vcHRpb25zLmxhYmVsJiZ0aGlzLl91cGRhdGVMYWJlbCgpLGUhPT10aGlzLm9wdGlvbnMuZGlzYWJsZWQmJnRoaXMuX3NldE9wdGlvbnMoe2Rpc2FibGVkOmV9KX19XSksdC51aS5jaGVja2JveHJhZGlvLHQud2lkZ2V0KFwidWkuYnV0dG9uXCIse3ZlcnNpb246XCIxLjEyLjFcIixkZWZhdWx0RWxlbWVudDpcIjxidXR0b24+XCIsb3B0aW9uczp7Y2xhc3Nlczp7XCJ1aS1idXR0b25cIjpcInVpLWNvcm5lci1hbGxcIn0sZGlzYWJsZWQ6bnVsbCxpY29uOm51bGwsaWNvblBvc2l0aW9uOlwiYmVnaW5uaW5nXCIsbGFiZWw6bnVsbCxzaG93TGFiZWw6ITB9LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLl9zdXBlcigpfHx7fTtyZXR1cm4gdGhpcy5pc0lucHV0PXRoaXMuZWxlbWVudC5pcyhcImlucHV0XCIpLHQ9dGhpcy5lbGVtZW50WzBdLmRpc2FibGVkLG51bGwhPXQmJihlLmRpc2FibGVkPXQpLHRoaXMub3JpZ2luYWxMYWJlbD10aGlzLmlzSW5wdXQ/dGhpcy5lbGVtZW50LnZhbCgpOnRoaXMuZWxlbWVudC5odG1sKCksdGhpcy5vcmlnaW5hbExhYmVsJiYoZS5sYWJlbD10aGlzLm9yaWdpbmFsTGFiZWwpLGV9LF9jcmVhdGU6ZnVuY3Rpb24oKXshdGhpcy5vcHRpb24uc2hvd0xhYmVsJiF0aGlzLm9wdGlvbnMuaWNvbiYmKHRoaXMub3B0aW9ucy5zaG93TGFiZWw9ITApLG51bGw9PXRoaXMub3B0aW9ucy5kaXNhYmxlZCYmKHRoaXMub3B0aW9ucy5kaXNhYmxlZD10aGlzLmVsZW1lbnRbMF0uZGlzYWJsZWR8fCExKSx0aGlzLmhhc1RpdGxlPSEhdGhpcy5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiKSx0aGlzLm9wdGlvbnMubGFiZWwmJnRoaXMub3B0aW9ucy5sYWJlbCE9PXRoaXMub3JpZ2luYWxMYWJlbCYmKHRoaXMuaXNJbnB1dD90aGlzLmVsZW1lbnQudmFsKHRoaXMub3B0aW9ucy5sYWJlbCk6dGhpcy5lbGVtZW50Lmh0bWwodGhpcy5vcHRpb25zLmxhYmVsKSksdGhpcy5fYWRkQ2xhc3MoXCJ1aS1idXR0b25cIixcInVpLXdpZGdldFwiKSx0aGlzLl9zZXRPcHRpb24oXCJkaXNhYmxlZFwiLHRoaXMub3B0aW9ucy5kaXNhYmxlZCksdGhpcy5fZW5oYW5jZSgpLHRoaXMuZWxlbWVudC5pcyhcImFcIikmJnRoaXMuX29uKHtrZXl1cDpmdW5jdGlvbihlKXtlLmtleUNvZGU9PT10LnVpLmtleUNvZGUuU1BBQ0UmJihlLnByZXZlbnREZWZhdWx0KCksdGhpcy5lbGVtZW50WzBdLmNsaWNrP3RoaXMuZWxlbWVudFswXS5jbGljaygpOnRoaXMuZWxlbWVudC50cmlnZ2VyKFwiY2xpY2tcIikpfX0pfSxfZW5oYW5jZTpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5pcyhcImJ1dHRvblwiKXx8dGhpcy5lbGVtZW50LmF0dHIoXCJyb2xlXCIsXCJidXR0b25cIiksdGhpcy5vcHRpb25zLmljb24mJih0aGlzLl91cGRhdGVJY29uKFwiaWNvblwiLHRoaXMub3B0aW9ucy5pY29uKSx0aGlzLl91cGRhdGVUb29sdGlwKCkpfSxfdXBkYXRlVG9vbHRpcDpmdW5jdGlvbigpe3RoaXMudGl0bGU9dGhpcy5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiKSx0aGlzLm9wdGlvbnMuc2hvd0xhYmVsfHx0aGlzLnRpdGxlfHx0aGlzLmVsZW1lbnQuYXR0cihcInRpdGxlXCIsdGhpcy5vcHRpb25zLmxhYmVsKX0sX3VwZGF0ZUljb246ZnVuY3Rpb24oZSxpKXt2YXIgcz1cImljb25Qb3NpdGlvblwiIT09ZSxuPXM/dGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbjppLG89XCJ0b3BcIj09PW58fFwiYm90dG9tXCI9PT1uO3RoaXMuaWNvbj9zJiZ0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmljb24sbnVsbCx0aGlzLm9wdGlvbnMuaWNvbik6KHRoaXMuaWNvbj10KFwiPHNwYW4+XCIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaWNvbixcInVpLWJ1dHRvbi1pY29uXCIsXCJ1aS1pY29uXCIpLHRoaXMub3B0aW9ucy5zaG93TGFiZWx8fHRoaXMuX2FkZENsYXNzKFwidWktYnV0dG9uLWljb24tb25seVwiKSkscyYmdGhpcy5fYWRkQ2xhc3ModGhpcy5pY29uLG51bGwsaSksdGhpcy5fYXR0YWNoSWNvbihuKSxvPyh0aGlzLl9hZGRDbGFzcyh0aGlzLmljb24sbnVsbCxcInVpLXdpZGdldC1pY29uLWJsb2NrXCIpLHRoaXMuaWNvblNwYWNlJiZ0aGlzLmljb25TcGFjZS5yZW1vdmUoKSk6KHRoaXMuaWNvblNwYWNlfHwodGhpcy5pY29uU3BhY2U9dChcIjxzcGFuPiA8L3NwYW4+XCIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaWNvblNwYWNlLFwidWktYnV0dG9uLWljb24tc3BhY2VcIikpLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaWNvbixudWxsLFwidWktd2lnZXQtaWNvbi1ibG9ja1wiKSx0aGlzLl9hdHRhY2hJY29uU3BhY2UobikpfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwicm9sZVwiKSx0aGlzLmljb24mJnRoaXMuaWNvbi5yZW1vdmUoKSx0aGlzLmljb25TcGFjZSYmdGhpcy5pY29uU3BhY2UucmVtb3ZlKCksdGhpcy5oYXNUaXRsZXx8dGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoXCJ0aXRsZVwiKX0sX2F0dGFjaEljb25TcGFjZTpmdW5jdGlvbih0KXt0aGlzLmljb25bL14oPzplbmR8Ym90dG9tKS8udGVzdCh0KT9cImJlZm9yZVwiOlwiYWZ0ZXJcIl0odGhpcy5pY29uU3BhY2UpfSxfYXR0YWNoSWNvbjpmdW5jdGlvbih0KXt0aGlzLmVsZW1lbnRbL14oPzplbmR8Ym90dG9tKS8udGVzdCh0KT9cImFwcGVuZFwiOlwicHJlcGVuZFwiXSh0aGlzLmljb24pfSxfc2V0T3B0aW9uczpmdW5jdGlvbih0KXt2YXIgZT12b2lkIDA9PT10LnNob3dMYWJlbD90aGlzLm9wdGlvbnMuc2hvd0xhYmVsOnQuc2hvd0xhYmVsLGk9dm9pZCAwPT09dC5pY29uP3RoaXMub3B0aW9ucy5pY29uOnQuaWNvbjtlfHxpfHwodC5zaG93TGFiZWw9ITApLHRoaXMuX3N1cGVyKHQpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7XCJpY29uXCI9PT10JiYoZT90aGlzLl91cGRhdGVJY29uKHQsZSk6dGhpcy5pY29uJiYodGhpcy5pY29uLnJlbW92ZSgpLHRoaXMuaWNvblNwYWNlJiZ0aGlzLmljb25TcGFjZS5yZW1vdmUoKSkpLFwiaWNvblBvc2l0aW9uXCI9PT10JiZ0aGlzLl91cGRhdGVJY29uKHQsZSksXCJzaG93TGFiZWxcIj09PXQmJih0aGlzLl90b2dnbGVDbGFzcyhcInVpLWJ1dHRvbi1pY29uLW9ubHlcIixudWxsLCFlKSx0aGlzLl91cGRhdGVUb29sdGlwKCkpLFwibGFiZWxcIj09PXQmJih0aGlzLmlzSW5wdXQ/dGhpcy5lbGVtZW50LnZhbChlKToodGhpcy5lbGVtZW50Lmh0bWwoZSksdGhpcy5pY29uJiYodGhpcy5fYXR0YWNoSWNvbih0aGlzLm9wdGlvbnMuaWNvblBvc2l0aW9uKSx0aGlzLl9hdHRhY2hJY29uU3BhY2UodGhpcy5vcHRpb25zLmljb25Qb3NpdGlvbikpKSksdGhpcy5fc3VwZXIodCxlKSxcImRpc2FibGVkXCI9PT10JiYodGhpcy5fdG9nZ2xlQ2xhc3MobnVsbCxcInVpLXN0YXRlLWRpc2FibGVkXCIsZSksdGhpcy5lbGVtZW50WzBdLmRpc2FibGVkPWUsZSYmdGhpcy5lbGVtZW50LmJsdXIoKSl9LHJlZnJlc2g6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmVsZW1lbnQuaXMoXCJpbnB1dCwgYnV0dG9uXCIpP3RoaXMuZWxlbWVudFswXS5kaXNhYmxlZDp0aGlzLmVsZW1lbnQuaGFzQ2xhc3MoXCJ1aS1idXR0b24tZGlzYWJsZWRcIik7dCE9PXRoaXMub3B0aW9ucy5kaXNhYmxlZCYmdGhpcy5fc2V0T3B0aW9ucyh7ZGlzYWJsZWQ6dH0pLHRoaXMuX3VwZGF0ZVRvb2x0aXAoKX19KSx0LnVpQmFja0NvbXBhdCE9PSExJiYodC53aWRnZXQoXCJ1aS5idXR0b25cIix0LnVpLmJ1dHRvbix7b3B0aW9uczp7dGV4dDohMCxpY29uczp7cHJpbWFyeTpudWxsLHNlY29uZGFyeTpudWxsfX0sX2NyZWF0ZTpmdW5jdGlvbigpe3RoaXMub3B0aW9ucy5zaG93TGFiZWwmJiF0aGlzLm9wdGlvbnMudGV4dCYmKHRoaXMub3B0aW9ucy5zaG93TGFiZWw9dGhpcy5vcHRpb25zLnRleHQpLCF0aGlzLm9wdGlvbnMuc2hvd0xhYmVsJiZ0aGlzLm9wdGlvbnMudGV4dCYmKHRoaXMub3B0aW9ucy50ZXh0PXRoaXMub3B0aW9ucy5zaG93TGFiZWwpLHRoaXMub3B0aW9ucy5pY29ufHwhdGhpcy5vcHRpb25zLmljb25zLnByaW1hcnkmJiF0aGlzLm9wdGlvbnMuaWNvbnMuc2Vjb25kYXJ5P3RoaXMub3B0aW9ucy5pY29uJiYodGhpcy5vcHRpb25zLmljb25zLnByaW1hcnk9dGhpcy5vcHRpb25zLmljb24pOnRoaXMub3B0aW9ucy5pY29ucy5wcmltYXJ5P3RoaXMub3B0aW9ucy5pY29uPXRoaXMub3B0aW9ucy5pY29ucy5wcmltYXJ5Oih0aGlzLm9wdGlvbnMuaWNvbj10aGlzLm9wdGlvbnMuaWNvbnMuc2Vjb25kYXJ5LHRoaXMub3B0aW9ucy5pY29uUG9zaXRpb249XCJlbmRcIiksdGhpcy5fc3VwZXIoKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe3JldHVyblwidGV4dFwiPT09dD8odGhpcy5fc3VwZXIoXCJzaG93TGFiZWxcIixlKSx2b2lkIDApOihcInNob3dMYWJlbFwiPT09dCYmKHRoaXMub3B0aW9ucy50ZXh0PWUpLFwiaWNvblwiPT09dCYmKHRoaXMub3B0aW9ucy5pY29ucy5wcmltYXJ5PWUpLFwiaWNvbnNcIj09PXQmJihlLnByaW1hcnk/KHRoaXMuX3N1cGVyKFwiaWNvblwiLGUucHJpbWFyeSksdGhpcy5fc3VwZXIoXCJpY29uUG9zaXRpb25cIixcImJlZ2lubmluZ1wiKSk6ZS5zZWNvbmRhcnkmJih0aGlzLl9zdXBlcihcImljb25cIixlLnNlY29uZGFyeSksdGhpcy5fc3VwZXIoXCJpY29uUG9zaXRpb25cIixcImVuZFwiKSkpLHRoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKSx2b2lkIDApfX0pLHQuZm4uYnV0dG9uPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiF0aGlzLmxlbmd0aHx8dGhpcy5sZW5ndGgmJlwiSU5QVVRcIiE9PXRoaXNbMF0udGFnTmFtZXx8dGhpcy5sZW5ndGgmJlwiSU5QVVRcIj09PXRoaXNbMF0udGFnTmFtZSYmXCJjaGVja2JveFwiIT09dGhpcy5hdHRyKFwidHlwZVwiKSYmXCJyYWRpb1wiIT09dGhpcy5hdHRyKFwidHlwZVwiKT9lLmFwcGx5KHRoaXMsYXJndW1lbnRzKToodC51aS5jaGVja2JveHJhZGlvfHx0LmVycm9yKFwiQ2hlY2tib3hyYWRpbyB3aWRnZXQgbWlzc2luZ1wiKSwwPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLmNoZWNrYm94cmFkaW8oe2ljb246ITF9KTp0aGlzLmNoZWNrYm94cmFkaW8uYXBwbHkodGhpcyxhcmd1bWVudHMpKX19KHQuZm4uYnV0dG9uKSx0LmZuLmJ1dHRvbnNldD1mdW5jdGlvbigpe3JldHVybiB0LnVpLmNvbnRyb2xncm91cHx8dC5lcnJvcihcIkNvbnRyb2xncm91cCB3aWRnZXQgbWlzc2luZ1wiKSxcIm9wdGlvblwiPT09YXJndW1lbnRzWzBdJiZcIml0ZW1zXCI9PT1hcmd1bWVudHNbMV0mJmFyZ3VtZW50c1syXT90aGlzLmNvbnRyb2xncm91cC5hcHBseSh0aGlzLFthcmd1bWVudHNbMF0sXCJpdGVtcy5idXR0b25cIixhcmd1bWVudHNbMl1dKTpcIm9wdGlvblwiPT09YXJndW1lbnRzWzBdJiZcIml0ZW1zXCI9PT1hcmd1bWVudHNbMV0/dGhpcy5jb250cm9sZ3JvdXAuYXBwbHkodGhpcyxbYXJndW1lbnRzWzBdLFwiaXRlbXMuYnV0dG9uXCJdKTooXCJvYmplY3RcIj09dHlwZW9mIGFyZ3VtZW50c1swXSYmYXJndW1lbnRzWzBdLml0ZW1zJiYoYXJndW1lbnRzWzBdLml0ZW1zPXtidXR0b246YXJndW1lbnRzWzBdLml0ZW1zfSksdGhpcy5jb250cm9sZ3JvdXAuYXBwbHkodGhpcyxhcmd1bWVudHMpKX0pLHQudWkuYnV0dG9uLHQuZXh0ZW5kKHQudWkse2RhdGVwaWNrZXI6e3ZlcnNpb246XCIxLjEyLjFcIn19KTt2YXIgbTt0LmV4dGVuZChzLnByb3RvdHlwZSx7bWFya2VyQ2xhc3NOYW1lOlwiaGFzRGF0ZXBpY2tlclwiLG1heFJvd3M6NCxfd2lkZ2V0RGF0ZXBpY2tlcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRwRGl2fSxzZXREZWZhdWx0czpmdW5jdGlvbih0KXtyZXR1cm4gYSh0aGlzLl9kZWZhdWx0cyx0fHx7fSksdGhpc30sX2F0dGFjaERhdGVwaWNrZXI6ZnVuY3Rpb24oZSxpKXt2YXIgcyxuLG87cz1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksbj1cImRpdlwiPT09c3x8XCJzcGFuXCI9PT1zLGUuaWR8fCh0aGlzLnV1aWQrPTEsZS5pZD1cImRwXCIrdGhpcy51dWlkKSxvPXRoaXMuX25ld0luc3QodChlKSxuKSxvLnNldHRpbmdzPXQuZXh0ZW5kKHt9LGl8fHt9KSxcImlucHV0XCI9PT1zP3RoaXMuX2Nvbm5lY3REYXRlcGlja2VyKGUsbyk6biYmdGhpcy5faW5saW5lRGF0ZXBpY2tlcihlLG8pfSxfbmV3SW5zdDpmdW5jdGlvbihlLGkpe3ZhciBzPWVbMF0uaWQucmVwbGFjZSgvKFteQS1aYS16MC05X1xcLV0pL2csXCJcXFxcXFxcXCQxXCIpO3JldHVybntpZDpzLGlucHV0OmUsc2VsZWN0ZWREYXk6MCxzZWxlY3RlZE1vbnRoOjAsc2VsZWN0ZWRZZWFyOjAsZHJhd01vbnRoOjAsZHJhd1llYXI6MCxpbmxpbmU6aSxkcERpdjppP24odChcIjxkaXYgY2xhc3M9J1wiK3RoaXMuX2lubGluZUNsYXNzK1wiIHVpLWRhdGVwaWNrZXIgdWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50IHVpLWhlbHBlci1jbGVhcmZpeCB1aS1jb3JuZXItYWxsJz48L2Rpdj5cIikpOnRoaXMuZHBEaXZ9fSxfY29ubmVjdERhdGVwaWNrZXI6ZnVuY3Rpb24oZSxpKXt2YXIgcz10KGUpO2kuYXBwZW5kPXQoW10pLGkudHJpZ2dlcj10KFtdKSxzLmhhc0NsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKXx8KHRoaXMuX2F0dGFjaG1lbnRzKHMsaSkscy5hZGRDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkub24oXCJrZXlkb3duXCIsdGhpcy5fZG9LZXlEb3duKS5vbihcImtleXByZXNzXCIsdGhpcy5fZG9LZXlQcmVzcykub24oXCJrZXl1cFwiLHRoaXMuX2RvS2V5VXApLHRoaXMuX2F1dG9TaXplKGkpLHQuZGF0YShlLFwiZGF0ZXBpY2tlclwiLGkpLGkuc2V0dGluZ3MuZGlzYWJsZWQmJnRoaXMuX2Rpc2FibGVEYXRlcGlja2VyKGUpKX0sX2F0dGFjaG1lbnRzOmZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvLGE9dGhpcy5fZ2V0KGksXCJhcHBlbmRUZXh0XCIpLHI9dGhpcy5fZ2V0KGksXCJpc1JUTFwiKTtpLmFwcGVuZCYmaS5hcHBlbmQucmVtb3ZlKCksYSYmKGkuYXBwZW5kPXQoXCI8c3BhbiBjbGFzcz0nXCIrdGhpcy5fYXBwZW5kQ2xhc3MrXCInPlwiK2ErXCI8L3NwYW4+XCIpLGVbcj9cImJlZm9yZVwiOlwiYWZ0ZXJcIl0oaS5hcHBlbmQpKSxlLm9mZihcImZvY3VzXCIsdGhpcy5fc2hvd0RhdGVwaWNrZXIpLGkudHJpZ2dlciYmaS50cmlnZ2VyLnJlbW92ZSgpLHM9dGhpcy5fZ2V0KGksXCJzaG93T25cIiksKFwiZm9jdXNcIj09PXN8fFwiYm90aFwiPT09cykmJmUub24oXCJmb2N1c1wiLHRoaXMuX3Nob3dEYXRlcGlja2VyKSwoXCJidXR0b25cIj09PXN8fFwiYm90aFwiPT09cykmJihuPXRoaXMuX2dldChpLFwiYnV0dG9uVGV4dFwiKSxvPXRoaXMuX2dldChpLFwiYnV0dG9uSW1hZ2VcIiksaS50cmlnZ2VyPXQodGhpcy5fZ2V0KGksXCJidXR0b25JbWFnZU9ubHlcIik/dChcIjxpbWcvPlwiKS5hZGRDbGFzcyh0aGlzLl90cmlnZ2VyQ2xhc3MpLmF0dHIoe3NyYzpvLGFsdDpuLHRpdGxlOm59KTp0KFwiPGJ1dHRvbiB0eXBlPSdidXR0b24nPjwvYnV0dG9uPlwiKS5hZGRDbGFzcyh0aGlzLl90cmlnZ2VyQ2xhc3MpLmh0bWwobz90KFwiPGltZy8+XCIpLmF0dHIoe3NyYzpvLGFsdDpuLHRpdGxlOm59KTpuKSksZVtyP1wiYmVmb3JlXCI6XCJhZnRlclwiXShpLnRyaWdnZXIpLGkudHJpZ2dlci5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtyZXR1cm4gdC5kYXRlcGlja2VyLl9kYXRlcGlja2VyU2hvd2luZyYmdC5kYXRlcGlja2VyLl9sYXN0SW5wdXQ9PT1lWzBdP3QuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKTp0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nJiZ0LmRhdGVwaWNrZXIuX2xhc3RJbnB1dCE9PWVbMF0/KHQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKSx0LmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKGVbMF0pKTp0LmRhdGVwaWNrZXIuX3Nob3dEYXRlcGlja2VyKGVbMF0pLCExfSkpfSxfYXV0b1NpemU6ZnVuY3Rpb24odCl7aWYodGhpcy5fZ2V0KHQsXCJhdXRvU2l6ZVwiKSYmIXQuaW5saW5lKXt2YXIgZSxpLHMsbixvPW5ldyBEYXRlKDIwMDksMTEsMjApLGE9dGhpcy5fZ2V0KHQsXCJkYXRlRm9ybWF0XCIpO2EubWF0Y2goL1tETV0vKSYmKGU9ZnVuY3Rpb24odCl7Zm9yKGk9MCxzPTAsbj0wO3QubGVuZ3RoPm47bisrKXRbbl0ubGVuZ3RoPmkmJihpPXRbbl0ubGVuZ3RoLHM9bik7cmV0dXJuIHN9LG8uc2V0TW9udGgoZSh0aGlzLl9nZXQodCxhLm1hdGNoKC9NTS8pP1wibW9udGhOYW1lc1wiOlwibW9udGhOYW1lc1Nob3J0XCIpKSksby5zZXREYXRlKGUodGhpcy5fZ2V0KHQsYS5tYXRjaCgvREQvKT9cImRheU5hbWVzXCI6XCJkYXlOYW1lc1Nob3J0XCIpKSsyMC1vLmdldERheSgpKSksdC5pbnB1dC5hdHRyKFwic2l6ZVwiLHRoaXMuX2Zvcm1hdERhdGUodCxvKS5sZW5ndGgpfX0sX2lubGluZURhdGVwaWNrZXI6ZnVuY3Rpb24oZSxpKXt2YXIgcz10KGUpO3MuaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpfHwocy5hZGRDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkuYXBwZW5kKGkuZHBEaXYpLHQuZGF0YShlLFwiZGF0ZXBpY2tlclwiLGkpLHRoaXMuX3NldERhdGUoaSx0aGlzLl9nZXREZWZhdWx0RGF0ZShpKSwhMCksdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpKSx0aGlzLl91cGRhdGVBbHRlcm5hdGUoaSksaS5zZXR0aW5ncy5kaXNhYmxlZCYmdGhpcy5fZGlzYWJsZURhdGVwaWNrZXIoZSksaS5kcERpdi5jc3MoXCJkaXNwbGF5XCIsXCJibG9ja1wiKSl9LF9kaWFsb2dEYXRlcGlja2VyOmZ1bmN0aW9uKGUsaSxzLG4sbyl7dmFyIHIsaCxsLGMsdSxkPXRoaXMuX2RpYWxvZ0luc3Q7cmV0dXJuIGR8fCh0aGlzLnV1aWQrPTEscj1cImRwXCIrdGhpcy51dWlkLHRoaXMuX2RpYWxvZ0lucHV0PXQoXCI8aW5wdXQgdHlwZT0ndGV4dCcgaWQ9J1wiK3IrXCInIHN0eWxlPSdwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTEwMHB4OyB3aWR0aDogMHB4OycvPlwiKSx0aGlzLl9kaWFsb2dJbnB1dC5vbihcImtleWRvd25cIix0aGlzLl9kb0tleURvd24pLHQoXCJib2R5XCIpLmFwcGVuZCh0aGlzLl9kaWFsb2dJbnB1dCksZD10aGlzLl9kaWFsb2dJbnN0PXRoaXMuX25ld0luc3QodGhpcy5fZGlhbG9nSW5wdXQsITEpLGQuc2V0dGluZ3M9e30sdC5kYXRhKHRoaXMuX2RpYWxvZ0lucHV0WzBdLFwiZGF0ZXBpY2tlclwiLGQpKSxhKGQuc2V0dGluZ3Msbnx8e30pLGk9aSYmaS5jb25zdHJ1Y3Rvcj09PURhdGU/dGhpcy5fZm9ybWF0RGF0ZShkLGkpOmksdGhpcy5fZGlhbG9nSW5wdXQudmFsKGkpLHRoaXMuX3Bvcz1vP28ubGVuZ3RoP286W28ucGFnZVgsby5wYWdlWV06bnVsbCx0aGlzLl9wb3N8fChoPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxsPWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsYz1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdHx8ZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LHU9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcHx8ZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AsdGhpcy5fcG9zPVtoLzItMTAwK2MsbC8yLTE1MCt1XSksdGhpcy5fZGlhbG9nSW5wdXQuY3NzKFwibGVmdFwiLHRoaXMuX3Bvc1swXSsyMCtcInB4XCIpLmNzcyhcInRvcFwiLHRoaXMuX3Bvc1sxXStcInB4XCIpLGQuc2V0dGluZ3Mub25TZWxlY3Q9cyx0aGlzLl9pbkRpYWxvZz0hMCx0aGlzLmRwRGl2LmFkZENsYXNzKHRoaXMuX2RpYWxvZ0NsYXNzKSx0aGlzLl9zaG93RGF0ZXBpY2tlcih0aGlzLl9kaWFsb2dJbnB1dFswXSksdC5ibG9ja1VJJiZ0LmJsb2NrVUkodGhpcy5kcERpdiksdC5kYXRhKHRoaXMuX2RpYWxvZ0lucHV0WzBdLFwiZGF0ZXBpY2tlclwiLGQpLHRoaXN9LF9kZXN0cm95RGF0ZXBpY2tlcjpmdW5jdGlvbihlKXt2YXIgaSxzPXQoZSksbj10LmRhdGEoZSxcImRhdGVwaWNrZXJcIik7cy5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkmJihpPWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSx0LnJlbW92ZURhdGEoZSxcImRhdGVwaWNrZXJcIiksXCJpbnB1dFwiPT09aT8obi5hcHBlbmQucmVtb3ZlKCksbi50cmlnZ2VyLnJlbW92ZSgpLHMucmVtb3ZlQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpLm9mZihcImZvY3VzXCIsdGhpcy5fc2hvd0RhdGVwaWNrZXIpLm9mZihcImtleWRvd25cIix0aGlzLl9kb0tleURvd24pLm9mZihcImtleXByZXNzXCIsdGhpcy5fZG9LZXlQcmVzcykub2ZmKFwia2V5dXBcIix0aGlzLl9kb0tleVVwKSk6KFwiZGl2XCI9PT1pfHxcInNwYW5cIj09PWkpJiZzLnJlbW92ZUNsYXNzKHRoaXMubWFya2VyQ2xhc3NOYW1lKS5lbXB0eSgpLG09PT1uJiYobT1udWxsKSl9LF9lbmFibGVEYXRlcGlja2VyOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbj10KGUpLG89dC5kYXRhKGUsXCJkYXRlcGlja2VyXCIpO24uaGFzQ2xhc3ModGhpcy5tYXJrZXJDbGFzc05hbWUpJiYoaT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXCJpbnB1dFwiPT09aT8oZS5kaXNhYmxlZD0hMSxvLnRyaWdnZXIuZmlsdGVyKFwiYnV0dG9uXCIpLmVhY2goZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkPSExfSkuZW5kKCkuZmlsdGVyKFwiaW1nXCIpLmNzcyh7b3BhY2l0eTpcIjEuMFwiLGN1cnNvcjpcIlwifSkpOihcImRpdlwiPT09aXx8XCJzcGFuXCI9PT1pKSYmKHM9bi5jaGlsZHJlbihcIi5cIit0aGlzLl9pbmxpbmVDbGFzcykscy5jaGlsZHJlbigpLnJlbW92ZUNsYXNzKFwidWktc3RhdGUtZGlzYWJsZWRcIikscy5maW5kKFwic2VsZWN0LnVpLWRhdGVwaWNrZXItbW9udGgsIHNlbGVjdC51aS1kYXRlcGlja2VyLXllYXJcIikucHJvcChcImRpc2FibGVkXCIsITEpKSx0aGlzLl9kaXNhYmxlZElucHV0cz10Lm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cyxmdW5jdGlvbih0KXtyZXR1cm4gdD09PWU/bnVsbDp0fSkpfSxfZGlzYWJsZURhdGVwaWNrZXI6ZnVuY3Rpb24oZSl7dmFyIGkscyxuPXQoZSksbz10LmRhdGEoZSxcImRhdGVwaWNrZXJcIik7bi5oYXNDbGFzcyh0aGlzLm1hcmtlckNsYXNzTmFtZSkmJihpPWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcImlucHV0XCI9PT1pPyhlLmRpc2FibGVkPSEwLG8udHJpZ2dlci5maWx0ZXIoXCJidXR0b25cIikuZWFjaChmdW5jdGlvbigpe3RoaXMuZGlzYWJsZWQ9ITB9KS5lbmQoKS5maWx0ZXIoXCJpbWdcIikuY3NzKHtvcGFjaXR5OlwiMC41XCIsY3Vyc29yOlwiZGVmYXVsdFwifSkpOihcImRpdlwiPT09aXx8XCJzcGFuXCI9PT1pKSYmKHM9bi5jaGlsZHJlbihcIi5cIit0aGlzLl9pbmxpbmVDbGFzcykscy5jaGlsZHJlbigpLmFkZENsYXNzKFwidWktc3RhdGUtZGlzYWJsZWRcIikscy5maW5kKFwic2VsZWN0LnVpLWRhdGVwaWNrZXItbW9udGgsIHNlbGVjdC51aS1kYXRlcGlja2VyLXllYXJcIikucHJvcChcImRpc2FibGVkXCIsITApKSx0aGlzLl9kaXNhYmxlZElucHV0cz10Lm1hcCh0aGlzLl9kaXNhYmxlZElucHV0cyxmdW5jdGlvbih0KXtyZXR1cm4gdD09PWU/bnVsbDp0fSksdGhpcy5fZGlzYWJsZWRJbnB1dHNbdGhpcy5fZGlzYWJsZWRJbnB1dHMubGVuZ3RoXT1lKX0sX2lzRGlzYWJsZWREYXRlcGlja2VyOmZ1bmN0aW9uKHQpe2lmKCF0KXJldHVybiExO2Zvcih2YXIgZT0wO3RoaXMuX2Rpc2FibGVkSW5wdXRzLmxlbmd0aD5lO2UrKylpZih0aGlzLl9kaXNhYmxlZElucHV0c1tlXT09PXQpcmV0dXJuITA7cmV0dXJuITF9LF9nZXRJbnN0OmZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gdC5kYXRhKGUsXCJkYXRlcGlja2VyXCIpfWNhdGNoKGkpe3Rocm93XCJNaXNzaW5nIGluc3RhbmNlIGRhdGEgZm9yIHRoaXMgZGF0ZXBpY2tlclwifX0sX29wdGlvbkRhdGVwaWNrZXI6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuLG8scixoLGw9dGhpcy5fZ2V0SW5zdChlKTtyZXR1cm4gMj09PWFyZ3VtZW50cy5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBpP1wiZGVmYXVsdHNcIj09PWk/dC5leHRlbmQoe30sdC5kYXRlcGlja2VyLl9kZWZhdWx0cyk6bD9cImFsbFwiPT09aT90LmV4dGVuZCh7fSxsLnNldHRpbmdzKTp0aGlzLl9nZXQobCxpKTpudWxsOihuPWl8fHt9LFwic3RyaW5nXCI9PXR5cGVvZiBpJiYobj17fSxuW2ldPXMpLGwmJih0aGlzLl9jdXJJbnN0PT09bCYmdGhpcy5faGlkZURhdGVwaWNrZXIoKSxvPXRoaXMuX2dldERhdGVEYXRlcGlja2VyKGUsITApLHI9dGhpcy5fZ2V0TWluTWF4RGF0ZShsLFwibWluXCIpLGg9dGhpcy5fZ2V0TWluTWF4RGF0ZShsLFwibWF4XCIpLGEobC5zZXR0aW5ncyxuKSxudWxsIT09ciYmdm9pZCAwIT09bi5kYXRlRm9ybWF0JiZ2b2lkIDA9PT1uLm1pbkRhdGUmJihsLnNldHRpbmdzLm1pbkRhdGU9dGhpcy5fZm9ybWF0RGF0ZShsLHIpKSxudWxsIT09aCYmdm9pZCAwIT09bi5kYXRlRm9ybWF0JiZ2b2lkIDA9PT1uLm1heERhdGUmJihsLnNldHRpbmdzLm1heERhdGU9dGhpcy5fZm9ybWF0RGF0ZShsLGgpKSxcImRpc2FibGVkXCJpbiBuJiYobi5kaXNhYmxlZD90aGlzLl9kaXNhYmxlRGF0ZXBpY2tlcihlKTp0aGlzLl9lbmFibGVEYXRlcGlja2VyKGUpKSx0aGlzLl9hdHRhY2htZW50cyh0KGUpLGwpLHRoaXMuX2F1dG9TaXplKGwpLHRoaXMuX3NldERhdGUobCxvKSx0aGlzLl91cGRhdGVBbHRlcm5hdGUobCksdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihsKSksdm9pZCAwKX0sX2NoYW5nZURhdGVwaWNrZXI6ZnVuY3Rpb24odCxlLGkpe3RoaXMuX29wdGlvbkRhdGVwaWNrZXIodCxlLGkpfSxfcmVmcmVzaERhdGVwaWNrZXI6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZ2V0SW5zdCh0KTtlJiZ0aGlzLl91cGRhdGVEYXRlcGlja2VyKGUpfSxfc2V0RGF0ZURhdGVwaWNrZXI6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9nZXRJbnN0KHQpO2kmJih0aGlzLl9zZXREYXRlKGksZSksdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihpKSx0aGlzLl91cGRhdGVBbHRlcm5hdGUoaSkpfSxfZ2V0RGF0ZURhdGVwaWNrZXI6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLl9nZXRJbnN0KHQpO3JldHVybiBpJiYhaS5pbmxpbmUmJnRoaXMuX3NldERhdGVGcm9tRmllbGQoaSxlKSxpP3RoaXMuX2dldERhdGUoaSk6bnVsbH0sX2RvS2V5RG93bjpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbz10LmRhdGVwaWNrZXIuX2dldEluc3QoZS50YXJnZXQpLGE9ITAscj1vLmRwRGl2LmlzKFwiLnVpLWRhdGVwaWNrZXItcnRsXCIpO2lmKG8uX2tleUV2ZW50PSEwLHQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcpc3dpdGNoKGUua2V5Q29kZSl7Y2FzZSA5OnQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIoKSxhPSExO2JyZWFrO2Nhc2UgMTM6cmV0dXJuIG49dChcInRkLlwiK3QuZGF0ZXBpY2tlci5fZGF5T3ZlckNsYXNzK1wiOm5vdCguXCIrdC5kYXRlcGlja2VyLl9jdXJyZW50Q2xhc3MrXCIpXCIsby5kcERpdiksblswXSYmdC5kYXRlcGlja2VyLl9zZWxlY3REYXkoZS50YXJnZXQsby5zZWxlY3RlZE1vbnRoLG8uc2VsZWN0ZWRZZWFyLG5bMF0pLGk9dC5kYXRlcGlja2VyLl9nZXQobyxcIm9uU2VsZWN0XCIpLGk/KHM9dC5kYXRlcGlja2VyLl9mb3JtYXREYXRlKG8pLGkuYXBwbHkoby5pbnB1dD9vLmlucHV0WzBdOm51bGwsW3Msb10pKTp0LmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCksITE7Y2FzZSAyNzp0LmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCk7YnJlYWs7Y2FzZSAzMzp0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsZS5jdHJsS2V5Py10LmRhdGVwaWNrZXIuX2dldChvLFwic3RlcEJpZ01vbnRoc1wiKTotdC5kYXRlcGlja2VyLl9nZXQobyxcInN0ZXBNb250aHNcIiksXCJNXCIpO2JyZWFrO2Nhc2UgMzQ6dC5kYXRlcGlja2VyLl9hZGp1c3REYXRlKGUudGFyZ2V0LGUuY3RybEtleT8rdC5kYXRlcGlja2VyLl9nZXQobyxcInN0ZXBCaWdNb250aHNcIik6K3QuZGF0ZXBpY2tlci5fZ2V0KG8sXCJzdGVwTW9udGhzXCIpLFwiTVwiKTticmVhaztjYXNlIDM1OihlLmN0cmxLZXl8fGUubWV0YUtleSkmJnQuZGF0ZXBpY2tlci5fY2xlYXJEYXRlKGUudGFyZ2V0KSxhPWUuY3RybEtleXx8ZS5tZXRhS2V5O2JyZWFrO2Nhc2UgMzY6KGUuY3RybEtleXx8ZS5tZXRhS2V5KSYmdC5kYXRlcGlja2VyLl9nb3RvVG9kYXkoZS50YXJnZXQpLGE9ZS5jdHJsS2V5fHxlLm1ldGFLZXk7YnJlYWs7Y2FzZSAzNzooZS5jdHJsS2V5fHxlLm1ldGFLZXkpJiZ0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQscj8xOi0xLFwiRFwiKSxhPWUuY3RybEtleXx8ZS5tZXRhS2V5LGUub3JpZ2luYWxFdmVudC5hbHRLZXkmJnQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCxlLmN0cmxLZXk/LXQuZGF0ZXBpY2tlci5fZ2V0KG8sXCJzdGVwQmlnTW9udGhzXCIpOi10LmRhdGVwaWNrZXIuX2dldChvLFwic3RlcE1vbnRoc1wiKSxcIk1cIik7YnJlYWs7Y2FzZSAzODooZS5jdHJsS2V5fHxlLm1ldGFLZXkpJiZ0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsLTcsXCJEXCIpLGE9ZS5jdHJsS2V5fHxlLm1ldGFLZXk7YnJlYWs7Y2FzZSAzOTooZS5jdHJsS2V5fHxlLm1ldGFLZXkpJiZ0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQscj8tMToxLFwiRFwiKSxhPWUuY3RybEtleXx8ZS5tZXRhS2V5LGUub3JpZ2luYWxFdmVudC5hbHRLZXkmJnQuZGF0ZXBpY2tlci5fYWRqdXN0RGF0ZShlLnRhcmdldCxlLmN0cmxLZXk/K3QuZGF0ZXBpY2tlci5fZ2V0KG8sXCJzdGVwQmlnTW9udGhzXCIpOit0LmRhdGVwaWNrZXIuX2dldChvLFwic3RlcE1vbnRoc1wiKSxcIk1cIik7YnJlYWs7Y2FzZSA0MDooZS5jdHJsS2V5fHxlLm1ldGFLZXkpJiZ0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUoZS50YXJnZXQsNyxcIkRcIiksYT1lLmN0cmxLZXl8fGUubWV0YUtleTticmVhaztkZWZhdWx0OmE9ITF9ZWxzZSAzNj09PWUua2V5Q29kZSYmZS5jdHJsS2V5P3QuZGF0ZXBpY2tlci5fc2hvd0RhdGVwaWNrZXIodGhpcyk6YT0hMTthJiYoZS5wcmV2ZW50RGVmYXVsdCgpLGUuc3RvcFByb3BhZ2F0aW9uKCkpfSxfZG9LZXlQcmVzczpmdW5jdGlvbihlKXt2YXIgaSxzLG49dC5kYXRlcGlja2VyLl9nZXRJbnN0KGUudGFyZ2V0KTtyZXR1cm4gdC5kYXRlcGlja2VyLl9nZXQobixcImNvbnN0cmFpbklucHV0XCIpPyhpPXQuZGF0ZXBpY2tlci5fcG9zc2libGVDaGFycyh0LmRhdGVwaWNrZXIuX2dldChuLFwiZGF0ZUZvcm1hdFwiKSkscz1TdHJpbmcuZnJvbUNoYXJDb2RlKG51bGw9PWUuY2hhckNvZGU/ZS5rZXlDb2RlOmUuY2hhckNvZGUpLGUuY3RybEtleXx8ZS5tZXRhS2V5fHxcIiBcIj5zfHwhaXx8aS5pbmRleE9mKHMpPi0xKTp2b2lkIDB9LF9kb0tleVVwOmZ1bmN0aW9uKGUpe3ZhciBpLHM9dC5kYXRlcGlja2VyLl9nZXRJbnN0KGUudGFyZ2V0KTtpZihzLmlucHV0LnZhbCgpIT09cy5sYXN0VmFsKXRyeXtpPXQuZGF0ZXBpY2tlci5wYXJzZURhdGUodC5kYXRlcGlja2VyLl9nZXQocyxcImRhdGVGb3JtYXRcIikscy5pbnB1dD9zLmlucHV0LnZhbCgpOm51bGwsdC5kYXRlcGlja2VyLl9nZXRGb3JtYXRDb25maWcocykpLGkmJih0LmRhdGVwaWNrZXIuX3NldERhdGVGcm9tRmllbGQocyksdC5kYXRlcGlja2VyLl91cGRhdGVBbHRlcm5hdGUocyksdC5kYXRlcGlja2VyLl91cGRhdGVEYXRlcGlja2VyKHMpKX1jYXRjaChuKXt9cmV0dXJuITB9LF9zaG93RGF0ZXBpY2tlcjpmdW5jdGlvbihlKXtpZihlPWUudGFyZ2V0fHxlLFwiaW5wdXRcIiE9PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmKGU9dChcImlucHV0XCIsZS5wYXJlbnROb2RlKVswXSksIXQuZGF0ZXBpY2tlci5faXNEaXNhYmxlZERhdGVwaWNrZXIoZSkmJnQuZGF0ZXBpY2tlci5fbGFzdElucHV0IT09ZSl7dmFyIHMsbixvLHIsaCxsLGM7cz10LmRhdGVwaWNrZXIuX2dldEluc3QoZSksdC5kYXRlcGlja2VyLl9jdXJJbnN0JiZ0LmRhdGVwaWNrZXIuX2N1ckluc3QhPT1zJiYodC5kYXRlcGlja2VyLl9jdXJJbnN0LmRwRGl2LnN0b3AoITAsITApLHMmJnQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcmJnQuZGF0ZXBpY2tlci5faGlkZURhdGVwaWNrZXIodC5kYXRlcGlja2VyLl9jdXJJbnN0LmlucHV0WzBdKSksbj10LmRhdGVwaWNrZXIuX2dldChzLFwiYmVmb3JlU2hvd1wiKSxvPW4/bi5hcHBseShlLFtlLHNdKTp7fSxvIT09ITEmJihhKHMuc2V0dGluZ3Msbykscy5sYXN0VmFsPW51bGwsdC5kYXRlcGlja2VyLl9sYXN0SW5wdXQ9ZSx0LmRhdGVwaWNrZXIuX3NldERhdGVGcm9tRmllbGQocyksdC5kYXRlcGlja2VyLl9pbkRpYWxvZyYmKGUudmFsdWU9XCJcIiksdC5kYXRlcGlja2VyLl9wb3N8fCh0LmRhdGVwaWNrZXIuX3Bvcz10LmRhdGVwaWNrZXIuX2ZpbmRQb3MoZSksdC5kYXRlcGlja2VyLl9wb3NbMV0rPWUub2Zmc2V0SGVpZ2h0KSxyPSExLHQoZSkucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKXtyZXR1cm4gcnw9XCJmaXhlZFwiPT09dCh0aGlzKS5jc3MoXCJwb3NpdGlvblwiKSwhcn0pLGg9e2xlZnQ6dC5kYXRlcGlja2VyLl9wb3NbMF0sdG9wOnQuZGF0ZXBpY2tlci5fcG9zWzFdfSx0LmRhdGVwaWNrZXIuX3Bvcz1udWxsLHMuZHBEaXYuZW1wdHkoKSxzLmRwRGl2LmNzcyh7cG9zaXRpb246XCJhYnNvbHV0ZVwiLGRpc3BsYXk6XCJibG9ja1wiLHRvcDpcIi0xMDAwcHhcIn0pLHQuZGF0ZXBpY2tlci5fdXBkYXRlRGF0ZXBpY2tlcihzKSxoPXQuZGF0ZXBpY2tlci5fY2hlY2tPZmZzZXQocyxoLHIpLHMuZHBEaXYuY3NzKHtwb3NpdGlvbjp0LmRhdGVwaWNrZXIuX2luRGlhbG9nJiZ0LmJsb2NrVUk/XCJzdGF0aWNcIjpyP1wiZml4ZWRcIjpcImFic29sdXRlXCIsZGlzcGxheTpcIm5vbmVcIixsZWZ0OmgubGVmdCtcInB4XCIsdG9wOmgudG9wK1wicHhcIn0pLHMuaW5saW5lfHwobD10LmRhdGVwaWNrZXIuX2dldChzLFwic2hvd0FuaW1cIiksYz10LmRhdGVwaWNrZXIuX2dldChzLFwiZHVyYXRpb25cIikscy5kcERpdi5jc3MoXCJ6LWluZGV4XCIsaSh0KGUpKSsxKSx0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nPSEwLHQuZWZmZWN0cyYmdC5lZmZlY3RzLmVmZmVjdFtsXT9zLmRwRGl2LnNob3cobCx0LmRhdGVwaWNrZXIuX2dldChzLFwic2hvd09wdGlvbnNcIiksYyk6cy5kcERpdltsfHxcInNob3dcIl0obD9jOm51bGwpLHQuZGF0ZXBpY2tlci5fc2hvdWxkRm9jdXNJbnB1dChzKSYmcy5pbnB1dC50cmlnZ2VyKFwiZm9jdXNcIiksdC5kYXRlcGlja2VyLl9jdXJJbnN0PXMpKVxufX0sX3VwZGF0ZURhdGVwaWNrZXI6ZnVuY3Rpb24oZSl7dGhpcy5tYXhSb3dzPTQsbT1lLGUuZHBEaXYuZW1wdHkoKS5hcHBlbmQodGhpcy5fZ2VuZXJhdGVIVE1MKGUpKSx0aGlzLl9hdHRhY2hIYW5kbGVycyhlKTt2YXIgaSxzPXRoaXMuX2dldE51bWJlck9mTW9udGhzKGUpLG49c1sxXSxhPTE3LHI9ZS5kcERpdi5maW5kKFwiLlwiK3RoaXMuX2RheU92ZXJDbGFzcytcIiBhXCIpO3IubGVuZ3RoPjAmJm8uYXBwbHkoci5nZXQoMCkpLGUuZHBEaXYucmVtb3ZlQ2xhc3MoXCJ1aS1kYXRlcGlja2VyLW11bHRpLTIgdWktZGF0ZXBpY2tlci1tdWx0aS0zIHVpLWRhdGVwaWNrZXItbXVsdGktNFwiKS53aWR0aChcIlwiKSxuPjEmJmUuZHBEaXYuYWRkQ2xhc3MoXCJ1aS1kYXRlcGlja2VyLW11bHRpLVwiK24pLmNzcyhcIndpZHRoXCIsYSpuK1wiZW1cIiksZS5kcERpdlsoMSE9PXNbMF18fDEhPT1zWzFdP1wiYWRkXCI6XCJyZW1vdmVcIikrXCJDbGFzc1wiXShcInVpLWRhdGVwaWNrZXItbXVsdGlcIiksZS5kcERpdlsodGhpcy5fZ2V0KGUsXCJpc1JUTFwiKT9cImFkZFwiOlwicmVtb3ZlXCIpK1wiQ2xhc3NcIl0oXCJ1aS1kYXRlcGlja2VyLXJ0bFwiKSxlPT09dC5kYXRlcGlja2VyLl9jdXJJbnN0JiZ0LmRhdGVwaWNrZXIuX2RhdGVwaWNrZXJTaG93aW5nJiZ0LmRhdGVwaWNrZXIuX3Nob3VsZEZvY3VzSW5wdXQoZSkmJmUuaW5wdXQudHJpZ2dlcihcImZvY3VzXCIpLGUueWVhcnNodG1sJiYoaT1lLnllYXJzaHRtbCxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aT09PWUueWVhcnNodG1sJiZlLnllYXJzaHRtbCYmZS5kcERpdi5maW5kKFwic2VsZWN0LnVpLWRhdGVwaWNrZXIteWVhcjpmaXJzdFwiKS5yZXBsYWNlV2l0aChlLnllYXJzaHRtbCksaT1lLnllYXJzaHRtbD1udWxsfSwwKSl9LF9zaG91bGRGb2N1c0lucHV0OmZ1bmN0aW9uKHQpe3JldHVybiB0LmlucHV0JiZ0LmlucHV0LmlzKFwiOnZpc2libGVcIikmJiF0LmlucHV0LmlzKFwiOmRpc2FibGVkXCIpJiYhdC5pbnB1dC5pcyhcIjpmb2N1c1wiKX0sX2NoZWNrT2Zmc2V0OmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj1lLmRwRGl2Lm91dGVyV2lkdGgoKSxvPWUuZHBEaXYub3V0ZXJIZWlnaHQoKSxhPWUuaW5wdXQ/ZS5pbnB1dC5vdXRlcldpZHRoKCk6MCxyPWUuaW5wdXQ/ZS5pbnB1dC5vdXRlckhlaWdodCgpOjAsaD1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgrKHM/MDp0KGRvY3VtZW50KS5zY3JvbGxMZWZ0KCkpLGw9ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCsocz8wOnQoZG9jdW1lbnQpLnNjcm9sbFRvcCgpKTtyZXR1cm4gaS5sZWZ0LT10aGlzLl9nZXQoZSxcImlzUlRMXCIpP24tYTowLGkubGVmdC09cyYmaS5sZWZ0PT09ZS5pbnB1dC5vZmZzZXQoKS5sZWZ0P3QoZG9jdW1lbnQpLnNjcm9sbExlZnQoKTowLGkudG9wLT1zJiZpLnRvcD09PWUuaW5wdXQub2Zmc2V0KCkudG9wK3I/dChkb2N1bWVudCkuc2Nyb2xsVG9wKCk6MCxpLmxlZnQtPU1hdGgubWluKGkubGVmdCxpLmxlZnQrbj5oJiZoPm4/TWF0aC5hYnMoaS5sZWZ0K24taCk6MCksaS50b3AtPU1hdGgubWluKGkudG9wLGkudG9wK28+bCYmbD5vP01hdGguYWJzKG8rcik6MCksaX0sX2ZpbmRQb3M6ZnVuY3Rpb24oZSl7Zm9yKHZhciBpLHM9dGhpcy5fZ2V0SW5zdChlKSxuPXRoaXMuX2dldChzLFwiaXNSVExcIik7ZSYmKFwiaGlkZGVuXCI9PT1lLnR5cGV8fDEhPT1lLm5vZGVUeXBlfHx0LmV4cHIuZmlsdGVycy5oaWRkZW4oZSkpOyllPWVbbj9cInByZXZpb3VzU2libGluZ1wiOlwibmV4dFNpYmxpbmdcIl07cmV0dXJuIGk9dChlKS5vZmZzZXQoKSxbaS5sZWZ0LGkudG9wXX0sX2hpZGVEYXRlcGlja2VyOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbixvLGE9dGhpcy5fY3VySW5zdDshYXx8ZSYmYSE9PXQuZGF0YShlLFwiZGF0ZXBpY2tlclwiKXx8dGhpcy5fZGF0ZXBpY2tlclNob3dpbmcmJihpPXRoaXMuX2dldChhLFwic2hvd0FuaW1cIikscz10aGlzLl9nZXQoYSxcImR1cmF0aW9uXCIpLG49ZnVuY3Rpb24oKXt0LmRhdGVwaWNrZXIuX3RpZHlEaWFsb2coYSl9LHQuZWZmZWN0cyYmKHQuZWZmZWN0cy5lZmZlY3RbaV18fHQuZWZmZWN0c1tpXSk/YS5kcERpdi5oaWRlKGksdC5kYXRlcGlja2VyLl9nZXQoYSxcInNob3dPcHRpb25zXCIpLHMsbik6YS5kcERpdltcInNsaWRlRG93blwiPT09aT9cInNsaWRlVXBcIjpcImZhZGVJblwiPT09aT9cImZhZGVPdXRcIjpcImhpZGVcIl0oaT9zOm51bGwsbiksaXx8bigpLHRoaXMuX2RhdGVwaWNrZXJTaG93aW5nPSExLG89dGhpcy5fZ2V0KGEsXCJvbkNsb3NlXCIpLG8mJm8uYXBwbHkoYS5pbnB1dD9hLmlucHV0WzBdOm51bGwsW2EuaW5wdXQ/YS5pbnB1dC52YWwoKTpcIlwiLGFdKSx0aGlzLl9sYXN0SW5wdXQ9bnVsbCx0aGlzLl9pbkRpYWxvZyYmKHRoaXMuX2RpYWxvZ0lucHV0LmNzcyh7cG9zaXRpb246XCJhYnNvbHV0ZVwiLGxlZnQ6XCIwXCIsdG9wOlwiLTEwMHB4XCJ9KSx0LmJsb2NrVUkmJih0LnVuYmxvY2tVSSgpLHQoXCJib2R5XCIpLmFwcGVuZCh0aGlzLmRwRGl2KSkpLHRoaXMuX2luRGlhbG9nPSExKX0sX3RpZHlEaWFsb2c6ZnVuY3Rpb24odCl7dC5kcERpdi5yZW1vdmVDbGFzcyh0aGlzLl9kaWFsb2dDbGFzcykub2ZmKFwiLnVpLWRhdGVwaWNrZXItY2FsZW5kYXJcIil9LF9jaGVja0V4dGVybmFsQ2xpY2s6ZnVuY3Rpb24oZSl7aWYodC5kYXRlcGlja2VyLl9jdXJJbnN0KXt2YXIgaT10KGUudGFyZ2V0KSxzPXQuZGF0ZXBpY2tlci5fZ2V0SW5zdChpWzBdKTsoaVswXS5pZCE9PXQuZGF0ZXBpY2tlci5fbWFpbkRpdklkJiYwPT09aS5wYXJlbnRzKFwiI1wiK3QuZGF0ZXBpY2tlci5fbWFpbkRpdklkKS5sZW5ndGgmJiFpLmhhc0NsYXNzKHQuZGF0ZXBpY2tlci5tYXJrZXJDbGFzc05hbWUpJiYhaS5jbG9zZXN0KFwiLlwiK3QuZGF0ZXBpY2tlci5fdHJpZ2dlckNsYXNzKS5sZW5ndGgmJnQuZGF0ZXBpY2tlci5fZGF0ZXBpY2tlclNob3dpbmcmJighdC5kYXRlcGlja2VyLl9pbkRpYWxvZ3x8IXQuYmxvY2tVSSl8fGkuaGFzQ2xhc3ModC5kYXRlcGlja2VyLm1hcmtlckNsYXNzTmFtZSkmJnQuZGF0ZXBpY2tlci5fY3VySW5zdCE9PXMpJiZ0LmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCl9fSxfYWRqdXN0RGF0ZTpmdW5jdGlvbihlLGkscyl7dmFyIG49dChlKSxvPXRoaXMuX2dldEluc3QoblswXSk7dGhpcy5faXNEaXNhYmxlZERhdGVwaWNrZXIoblswXSl8fCh0aGlzLl9hZGp1c3RJbnN0RGF0ZShvLGkrKFwiTVwiPT09cz90aGlzLl9nZXQobyxcInNob3dDdXJyZW50QXRQb3NcIik6MCkscyksdGhpcy5fdXBkYXRlRGF0ZXBpY2tlcihvKSl9LF9nb3RvVG9kYXk6ZnVuY3Rpb24oZSl7dmFyIGkscz10KGUpLG49dGhpcy5fZ2V0SW5zdChzWzBdKTt0aGlzLl9nZXQobixcImdvdG9DdXJyZW50XCIpJiZuLmN1cnJlbnREYXk/KG4uc2VsZWN0ZWREYXk9bi5jdXJyZW50RGF5LG4uZHJhd01vbnRoPW4uc2VsZWN0ZWRNb250aD1uLmN1cnJlbnRNb250aCxuLmRyYXdZZWFyPW4uc2VsZWN0ZWRZZWFyPW4uY3VycmVudFllYXIpOihpPW5ldyBEYXRlLG4uc2VsZWN0ZWREYXk9aS5nZXREYXRlKCksbi5kcmF3TW9udGg9bi5zZWxlY3RlZE1vbnRoPWkuZ2V0TW9udGgoKSxuLmRyYXdZZWFyPW4uc2VsZWN0ZWRZZWFyPWkuZ2V0RnVsbFllYXIoKSksdGhpcy5fbm90aWZ5Q2hhbmdlKG4pLHRoaXMuX2FkanVzdERhdGUocyl9LF9zZWxlY3RNb250aFllYXI6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXQoZSksbz10aGlzLl9nZXRJbnN0KG5bMF0pO29bXCJzZWxlY3RlZFwiKyhcIk1cIj09PXM/XCJNb250aFwiOlwiWWVhclwiKV09b1tcImRyYXdcIisoXCJNXCI9PT1zP1wiTW9udGhcIjpcIlllYXJcIildPXBhcnNlSW50KGkub3B0aW9uc1tpLnNlbGVjdGVkSW5kZXhdLnZhbHVlLDEwKSx0aGlzLl9ub3RpZnlDaGFuZ2UobyksdGhpcy5fYWRqdXN0RGF0ZShuKX0sX3NlbGVjdERheTpmdW5jdGlvbihlLGkscyxuKXt2YXIgbyxhPXQoZSk7dChuKS5oYXNDbGFzcyh0aGlzLl91bnNlbGVjdGFibGVDbGFzcyl8fHRoaXMuX2lzRGlzYWJsZWREYXRlcGlja2VyKGFbMF0pfHwobz10aGlzLl9nZXRJbnN0KGFbMF0pLG8uc2VsZWN0ZWREYXk9by5jdXJyZW50RGF5PXQoXCJhXCIsbikuaHRtbCgpLG8uc2VsZWN0ZWRNb250aD1vLmN1cnJlbnRNb250aD1pLG8uc2VsZWN0ZWRZZWFyPW8uY3VycmVudFllYXI9cyx0aGlzLl9zZWxlY3REYXRlKGUsdGhpcy5fZm9ybWF0RGF0ZShvLG8uY3VycmVudERheSxvLmN1cnJlbnRNb250aCxvLmN1cnJlbnRZZWFyKSkpfSxfY2xlYXJEYXRlOmZ1bmN0aW9uKGUpe3ZhciBpPXQoZSk7dGhpcy5fc2VsZWN0RGF0ZShpLFwiXCIpfSxfc2VsZWN0RGF0ZTpmdW5jdGlvbihlLGkpe3ZhciBzLG49dChlKSxvPXRoaXMuX2dldEluc3QoblswXSk7aT1udWxsIT1pP2k6dGhpcy5fZm9ybWF0RGF0ZShvKSxvLmlucHV0JiZvLmlucHV0LnZhbChpKSx0aGlzLl91cGRhdGVBbHRlcm5hdGUobykscz10aGlzLl9nZXQobyxcIm9uU2VsZWN0XCIpLHM/cy5hcHBseShvLmlucHV0P28uaW5wdXRbMF06bnVsbCxbaSxvXSk6by5pbnB1dCYmby5pbnB1dC50cmlnZ2VyKFwiY2hhbmdlXCIpLG8uaW5saW5lP3RoaXMuX3VwZGF0ZURhdGVwaWNrZXIobyk6KHRoaXMuX2hpZGVEYXRlcGlja2VyKCksdGhpcy5fbGFzdElucHV0PW8uaW5wdXRbMF0sXCJvYmplY3RcIiE9dHlwZW9mIG8uaW5wdXRbMF0mJm8uaW5wdXQudHJpZ2dlcihcImZvY3VzXCIpLHRoaXMuX2xhc3RJbnB1dD1udWxsKX0sX3VwZGF0ZUFsdGVybmF0ZTpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbz10aGlzLl9nZXQoZSxcImFsdEZpZWxkXCIpO28mJihpPXRoaXMuX2dldChlLFwiYWx0Rm9ybWF0XCIpfHx0aGlzLl9nZXQoZSxcImRhdGVGb3JtYXRcIikscz10aGlzLl9nZXREYXRlKGUpLG49dGhpcy5mb3JtYXREYXRlKGkscyx0aGlzLl9nZXRGb3JtYXRDb25maWcoZSkpLHQobykudmFsKG4pKX0sbm9XZWVrZW5kczpmdW5jdGlvbih0KXt2YXIgZT10LmdldERheSgpO3JldHVybltlPjAmJjY+ZSxcIlwiXX0saXNvODYwMVdlZWs6ZnVuY3Rpb24odCl7dmFyIGUsaT1uZXcgRGF0ZSh0LmdldFRpbWUoKSk7cmV0dXJuIGkuc2V0RGF0ZShpLmdldERhdGUoKSs0LShpLmdldERheSgpfHw3KSksZT1pLmdldFRpbWUoKSxpLnNldE1vbnRoKDApLGkuc2V0RGF0ZSgxKSxNYXRoLmZsb29yKE1hdGgucm91bmQoKGUtaSkvODY0ZTUpLzcpKzF9LHBhcnNlRGF0ZTpmdW5jdGlvbihlLGkscyl7aWYobnVsbD09ZXx8bnVsbD09aSl0aHJvd1wiSW52YWxpZCBhcmd1bWVudHNcIjtpZihpPVwib2JqZWN0XCI9PXR5cGVvZiBpP1wiXCIraTppK1wiXCIsXCJcIj09PWkpcmV0dXJuIG51bGw7dmFyIG4sbyxhLHIsaD0wLGw9KHM/cy5zaG9ydFllYXJDdXRvZmY6bnVsbCl8fHRoaXMuX2RlZmF1bHRzLnNob3J0WWVhckN1dG9mZixjPVwic3RyaW5nXCIhPXR5cGVvZiBsP2w6KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpJTEwMCtwYXJzZUludChsLDEwKSx1PShzP3MuZGF5TmFtZXNTaG9ydDpudWxsKXx8dGhpcy5fZGVmYXVsdHMuZGF5TmFtZXNTaG9ydCxkPShzP3MuZGF5TmFtZXM6bnVsbCl8fHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzLHA9KHM/cy5tb250aE5hbWVzU2hvcnQ6bnVsbCl8fHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXNTaG9ydCxmPShzP3MubW9udGhOYW1lczpudWxsKXx8dGhpcy5fZGVmYXVsdHMubW9udGhOYW1lcyxnPS0xLG09LTEsXz0tMSx2PS0xLGI9ITEseT1mdW5jdGlvbih0KXt2YXIgaT1lLmxlbmd0aD5uKzEmJmUuY2hhckF0KG4rMSk9PT10O3JldHVybiBpJiZuKyssaX0sdz1mdW5jdGlvbih0KXt2YXIgZT15KHQpLHM9XCJAXCI9PT10PzE0OlwiIVwiPT09dD8yMDpcInlcIj09PXQmJmU/NDpcIm9cIj09PXQ/MzoyLG49XCJ5XCI9PT10P3M6MSxvPVJlZ0V4cChcIl5cXFxcZHtcIituK1wiLFwiK3MrXCJ9XCIpLGE9aS5zdWJzdHJpbmcoaCkubWF0Y2gobyk7aWYoIWEpdGhyb3dcIk1pc3NpbmcgbnVtYmVyIGF0IHBvc2l0aW9uIFwiK2g7cmV0dXJuIGgrPWFbMF0ubGVuZ3RoLHBhcnNlSW50KGFbMF0sMTApfSxrPWZ1bmN0aW9uKGUscyxuKXt2YXIgbz0tMSxhPXQubWFwKHkoZSk/bjpzLGZ1bmN0aW9uKHQsZSl7cmV0dXJuW1tlLHRdXX0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4tKHRbMV0ubGVuZ3RoLWVbMV0ubGVuZ3RoKX0pO2lmKHQuZWFjaChhLGZ1bmN0aW9uKHQsZSl7dmFyIHM9ZVsxXTtyZXR1cm4gaS5zdWJzdHIoaCxzLmxlbmd0aCkudG9Mb3dlckNhc2UoKT09PXMudG9Mb3dlckNhc2UoKT8obz1lWzBdLGgrPXMubGVuZ3RoLCExKTp2b2lkIDB9KSwtMSE9PW8pcmV0dXJuIG8rMTt0aHJvd1wiVW5rbm93biBuYW1lIGF0IHBvc2l0aW9uIFwiK2h9LHg9ZnVuY3Rpb24oKXtpZihpLmNoYXJBdChoKSE9PWUuY2hhckF0KG4pKXRocm93XCJVbmV4cGVjdGVkIGxpdGVyYWwgYXQgcG9zaXRpb24gXCIraDtoKyt9O2ZvcihuPTA7ZS5sZW5ndGg+bjtuKyspaWYoYilcIidcIiE9PWUuY2hhckF0KG4pfHx5KFwiJ1wiKT94KCk6Yj0hMTtlbHNlIHN3aXRjaChlLmNoYXJBdChuKSl7Y2FzZVwiZFwiOl89dyhcImRcIik7YnJlYWs7Y2FzZVwiRFwiOmsoXCJEXCIsdSxkKTticmVhaztjYXNlXCJvXCI6dj13KFwib1wiKTticmVhaztjYXNlXCJtXCI6bT13KFwibVwiKTticmVhaztjYXNlXCJNXCI6bT1rKFwiTVwiLHAsZik7YnJlYWs7Y2FzZVwieVwiOmc9dyhcInlcIik7YnJlYWs7Y2FzZVwiQFwiOnI9bmV3IERhdGUodyhcIkBcIikpLGc9ci5nZXRGdWxsWWVhcigpLG09ci5nZXRNb250aCgpKzEsXz1yLmdldERhdGUoKTticmVhaztjYXNlXCIhXCI6cj1uZXcgRGF0ZSgodyhcIiFcIiktdGhpcy5fdGlja3NUbzE5NzApLzFlNCksZz1yLmdldEZ1bGxZZWFyKCksbT1yLmdldE1vbnRoKCkrMSxfPXIuZ2V0RGF0ZSgpO2JyZWFrO2Nhc2VcIidcIjp5KFwiJ1wiKT94KCk6Yj0hMDticmVhaztkZWZhdWx0OngoKX1pZihpLmxlbmd0aD5oJiYoYT1pLnN1YnN0cihoKSwhL15cXHMrLy50ZXN0KGEpKSl0aHJvd1wiRXh0cmEvdW5wYXJzZWQgY2hhcmFjdGVycyBmb3VuZCBpbiBkYXRlOiBcIithO2lmKC0xPT09Zz9nPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKToxMDA+ZyYmKGcrPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKS0obmV3IERhdGUpLmdldEZ1bGxZZWFyKCklMTAwKyhjPj1nPzA6LTEwMCkpLHY+LTEpZm9yKG09MSxfPXY7Oyl7aWYobz10aGlzLl9nZXREYXlzSW5Nb250aChnLG0tMSksbz49XylicmVhazttKyssXy09b31pZihyPXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGcsbS0xLF8pKSxyLmdldEZ1bGxZZWFyKCkhPT1nfHxyLmdldE1vbnRoKCkrMSE9PW18fHIuZ2V0RGF0ZSgpIT09Xyl0aHJvd1wiSW52YWxpZCBkYXRlXCI7cmV0dXJuIHJ9LEFUT006XCJ5eS1tbS1kZFwiLENPT0tJRTpcIkQsIGRkIE0geXlcIixJU09fODYwMTpcInl5LW1tLWRkXCIsUkZDXzgyMjpcIkQsIGQgTSB5XCIsUkZDXzg1MDpcIkRELCBkZC1NLXlcIixSRkNfMTAzNjpcIkQsIGQgTSB5XCIsUkZDXzExMjM6XCJELCBkIE0geXlcIixSRkNfMjgyMjpcIkQsIGQgTSB5eVwiLFJTUzpcIkQsIGQgTSB5XCIsVElDS1M6XCIhXCIsVElNRVNUQU1QOlwiQFwiLFczQzpcInl5LW1tLWRkXCIsX3RpY2tzVG8xOTcwOjFlNyo2MCo2MCoyNCooNzE4Njg1K01hdGguZmxvb3IoNDkyLjUpLU1hdGguZmxvb3IoMTkuNykrTWF0aC5mbG9vcig0LjkyNSkpLGZvcm1hdERhdGU6ZnVuY3Rpb24odCxlLGkpe2lmKCFlKXJldHVyblwiXCI7dmFyIHMsbj0oaT9pLmRheU5hbWVzU2hvcnQ6bnVsbCl8fHRoaXMuX2RlZmF1bHRzLmRheU5hbWVzU2hvcnQsbz0oaT9pLmRheU5hbWVzOm51bGwpfHx0aGlzLl9kZWZhdWx0cy5kYXlOYW1lcyxhPShpP2kubW9udGhOYW1lc1Nob3J0Om51bGwpfHx0aGlzLl9kZWZhdWx0cy5tb250aE5hbWVzU2hvcnQscj0oaT9pLm1vbnRoTmFtZXM6bnVsbCl8fHRoaXMuX2RlZmF1bHRzLm1vbnRoTmFtZXMsaD1mdW5jdGlvbihlKXt2YXIgaT10Lmxlbmd0aD5zKzEmJnQuY2hhckF0KHMrMSk9PT1lO3JldHVybiBpJiZzKyssaX0sbD1mdW5jdGlvbih0LGUsaSl7dmFyIHM9XCJcIitlO2lmKGgodCkpZm9yKDtpPnMubGVuZ3RoOylzPVwiMFwiK3M7cmV0dXJuIHN9LGM9ZnVuY3Rpb24odCxlLGkscyl7cmV0dXJuIGgodCk/c1tlXTppW2VdfSx1PVwiXCIsZD0hMTtpZihlKWZvcihzPTA7dC5sZW5ndGg+cztzKyspaWYoZClcIidcIiE9PXQuY2hhckF0KHMpfHxoKFwiJ1wiKT91Kz10LmNoYXJBdChzKTpkPSExO2Vsc2Ugc3dpdGNoKHQuY2hhckF0KHMpKXtjYXNlXCJkXCI6dSs9bChcImRcIixlLmdldERhdGUoKSwyKTticmVhaztjYXNlXCJEXCI6dSs9YyhcIkRcIixlLmdldERheSgpLG4sbyk7YnJlYWs7Y2FzZVwib1wiOnUrPWwoXCJvXCIsTWF0aC5yb3VuZCgobmV3IERhdGUoZS5nZXRGdWxsWWVhcigpLGUuZ2V0TW9udGgoKSxlLmdldERhdGUoKSkuZ2V0VGltZSgpLW5ldyBEYXRlKGUuZ2V0RnVsbFllYXIoKSwwLDApLmdldFRpbWUoKSkvODY0ZTUpLDMpO2JyZWFrO2Nhc2VcIm1cIjp1Kz1sKFwibVwiLGUuZ2V0TW9udGgoKSsxLDIpO2JyZWFrO2Nhc2VcIk1cIjp1Kz1jKFwiTVwiLGUuZ2V0TW9udGgoKSxhLHIpO2JyZWFrO2Nhc2VcInlcIjp1Kz1oKFwieVwiKT9lLmdldEZ1bGxZZWFyKCk6KDEwPmUuZ2V0RnVsbFllYXIoKSUxMDA/XCIwXCI6XCJcIikrZS5nZXRGdWxsWWVhcigpJTEwMDticmVhaztjYXNlXCJAXCI6dSs9ZS5nZXRUaW1lKCk7YnJlYWs7Y2FzZVwiIVwiOnUrPTFlNCplLmdldFRpbWUoKSt0aGlzLl90aWNrc1RvMTk3MDticmVhaztjYXNlXCInXCI6aChcIidcIik/dSs9XCInXCI6ZD0hMDticmVhaztkZWZhdWx0OnUrPXQuY2hhckF0KHMpfXJldHVybiB1fSxfcG9zc2libGVDaGFyczpmdW5jdGlvbih0KXt2YXIgZSxpPVwiXCIscz0hMSxuPWZ1bmN0aW9uKGkpe3ZhciBzPXQubGVuZ3RoPmUrMSYmdC5jaGFyQXQoZSsxKT09PWk7cmV0dXJuIHMmJmUrKyxzfTtmb3IoZT0wO3QubGVuZ3RoPmU7ZSsrKWlmKHMpXCInXCIhPT10LmNoYXJBdChlKXx8bihcIidcIik/aSs9dC5jaGFyQXQoZSk6cz0hMTtlbHNlIHN3aXRjaCh0LmNoYXJBdChlKSl7Y2FzZVwiZFwiOmNhc2VcIm1cIjpjYXNlXCJ5XCI6Y2FzZVwiQFwiOmkrPVwiMDEyMzQ1Njc4OVwiO2JyZWFrO2Nhc2VcIkRcIjpjYXNlXCJNXCI6cmV0dXJuIG51bGw7Y2FzZVwiJ1wiOm4oXCInXCIpP2krPVwiJ1wiOnM9ITA7YnJlYWs7ZGVmYXVsdDppKz10LmNoYXJBdChlKX1yZXR1cm4gaX0sX2dldDpmdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDAhPT10LnNldHRpbmdzW2VdP3Quc2V0dGluZ3NbZV06dGhpcy5fZGVmYXVsdHNbZV19LF9zZXREYXRlRnJvbUZpZWxkOmZ1bmN0aW9uKHQsZSl7aWYodC5pbnB1dC52YWwoKSE9PXQubGFzdFZhbCl7dmFyIGk9dGhpcy5fZ2V0KHQsXCJkYXRlRm9ybWF0XCIpLHM9dC5sYXN0VmFsPXQuaW5wdXQ/dC5pbnB1dC52YWwoKTpudWxsLG49dGhpcy5fZ2V0RGVmYXVsdERhdGUodCksbz1uLGE9dGhpcy5fZ2V0Rm9ybWF0Q29uZmlnKHQpO3RyeXtvPXRoaXMucGFyc2VEYXRlKGkscyxhKXx8bn1jYXRjaChyKXtzPWU/XCJcIjpzfXQuc2VsZWN0ZWREYXk9by5nZXREYXRlKCksdC5kcmF3TW9udGg9dC5zZWxlY3RlZE1vbnRoPW8uZ2V0TW9udGgoKSx0LmRyYXdZZWFyPXQuc2VsZWN0ZWRZZWFyPW8uZ2V0RnVsbFllYXIoKSx0LmN1cnJlbnREYXk9cz9vLmdldERhdGUoKTowLHQuY3VycmVudE1vbnRoPXM/by5nZXRNb250aCgpOjAsdC5jdXJyZW50WWVhcj1zP28uZ2V0RnVsbFllYXIoKTowLHRoaXMuX2FkanVzdEluc3REYXRlKHQpfX0sX2dldERlZmF1bHREYXRlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9yZXN0cmljdE1pbk1heCh0LHRoaXMuX2RldGVybWluZURhdGUodCx0aGlzLl9nZXQodCxcImRlZmF1bHREYXRlXCIpLG5ldyBEYXRlKSl9LF9kZXRlcm1pbmVEYXRlOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgRGF0ZTtyZXR1cm4gZS5zZXREYXRlKGUuZ2V0RGF0ZSgpK3QpLGV9LG89ZnVuY3Rpb24oaSl7dHJ5e3JldHVybiB0LmRhdGVwaWNrZXIucGFyc2VEYXRlKHQuZGF0ZXBpY2tlci5fZ2V0KGUsXCJkYXRlRm9ybWF0XCIpLGksdC5kYXRlcGlja2VyLl9nZXRGb3JtYXRDb25maWcoZSkpfWNhdGNoKHMpe31mb3IodmFyIG49KGkudG9Mb3dlckNhc2UoKS5tYXRjaCgvXmMvKT90LmRhdGVwaWNrZXIuX2dldERhdGUoZSk6bnVsbCl8fG5ldyBEYXRlLG89bi5nZXRGdWxsWWVhcigpLGE9bi5nZXRNb250aCgpLHI9bi5nZXREYXRlKCksaD0vKFsrXFwtXT9bMC05XSspXFxzKihkfER8d3xXfG18TXx5fFkpPy9nLGw9aC5leGVjKGkpO2w7KXtzd2l0Y2gobFsyXXx8XCJkXCIpe2Nhc2VcImRcIjpjYXNlXCJEXCI6cis9cGFyc2VJbnQobFsxXSwxMCk7YnJlYWs7Y2FzZVwid1wiOmNhc2VcIldcIjpyKz03KnBhcnNlSW50KGxbMV0sMTApO2JyZWFrO2Nhc2VcIm1cIjpjYXNlXCJNXCI6YSs9cGFyc2VJbnQobFsxXSwxMCkscj1NYXRoLm1pbihyLHQuZGF0ZXBpY2tlci5fZ2V0RGF5c0luTW9udGgobyxhKSk7YnJlYWs7Y2FzZVwieVwiOmNhc2VcIllcIjpvKz1wYXJzZUludChsWzFdLDEwKSxyPU1hdGgubWluKHIsdC5kYXRlcGlja2VyLl9nZXREYXlzSW5Nb250aChvLGEpKX1sPWguZXhlYyhpKX1yZXR1cm4gbmV3IERhdGUobyxhLHIpfSxhPW51bGw9PWl8fFwiXCI9PT1pP3M6XCJzdHJpbmdcIj09dHlwZW9mIGk/byhpKTpcIm51bWJlclwiPT10eXBlb2YgaT9pc05hTihpKT9zOm4oaSk6bmV3IERhdGUoaS5nZXRUaW1lKCkpO3JldHVybiBhPWEmJlwiSW52YWxpZCBEYXRlXCI9PVwiXCIrYT9zOmEsYSYmKGEuc2V0SG91cnMoMCksYS5zZXRNaW51dGVzKDApLGEuc2V0U2Vjb25kcygwKSxhLnNldE1pbGxpc2Vjb25kcygwKSksdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QoYSl9LF9kYXlsaWdodFNhdmluZ0FkanVzdDpmdW5jdGlvbih0KXtyZXR1cm4gdD8odC5zZXRIb3Vycyh0LmdldEhvdXJzKCk+MTI/dC5nZXRIb3VycygpKzI6MCksdCk6bnVsbH0sX3NldERhdGU6ZnVuY3Rpb24odCxlLGkpe3ZhciBzPSFlLG49dC5zZWxlY3RlZE1vbnRoLG89dC5zZWxlY3RlZFllYXIsYT10aGlzLl9yZXN0cmljdE1pbk1heCh0LHRoaXMuX2RldGVybWluZURhdGUodCxlLG5ldyBEYXRlKSk7dC5zZWxlY3RlZERheT10LmN1cnJlbnREYXk9YS5nZXREYXRlKCksdC5kcmF3TW9udGg9dC5zZWxlY3RlZE1vbnRoPXQuY3VycmVudE1vbnRoPWEuZ2V0TW9udGgoKSx0LmRyYXdZZWFyPXQuc2VsZWN0ZWRZZWFyPXQuY3VycmVudFllYXI9YS5nZXRGdWxsWWVhcigpLG49PT10LnNlbGVjdGVkTW9udGgmJm89PT10LnNlbGVjdGVkWWVhcnx8aXx8dGhpcy5fbm90aWZ5Q2hhbmdlKHQpLHRoaXMuX2FkanVzdEluc3REYXRlKHQpLHQuaW5wdXQmJnQuaW5wdXQudmFsKHM/XCJcIjp0aGlzLl9mb3JtYXREYXRlKHQpKX0sX2dldERhdGU6ZnVuY3Rpb24odCl7dmFyIGU9IXQuY3VycmVudFllYXJ8fHQuaW5wdXQmJlwiXCI9PT10LmlucHV0LnZhbCgpP251bGw6dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodC5jdXJyZW50WWVhcix0LmN1cnJlbnRNb250aCx0LmN1cnJlbnREYXkpKTtyZXR1cm4gZX0sX2F0dGFjaEhhbmRsZXJzOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX2dldChlLFwic3RlcE1vbnRoc1wiKSxzPVwiI1wiK2UuaWQucmVwbGFjZSgvXFxcXFxcXFwvZyxcIlxcXFxcIik7ZS5kcERpdi5maW5kKFwiW2RhdGEtaGFuZGxlcl1cIikubWFwKGZ1bmN0aW9uKCl7dmFyIGU9e3ByZXY6ZnVuY3Rpb24oKXt0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUocywtaSxcIk1cIil9LG5leHQ6ZnVuY3Rpb24oKXt0LmRhdGVwaWNrZXIuX2FkanVzdERhdGUocywraSxcIk1cIil9LGhpZGU6ZnVuY3Rpb24oKXt0LmRhdGVwaWNrZXIuX2hpZGVEYXRlcGlja2VyKCl9LHRvZGF5OmZ1bmN0aW9uKCl7dC5kYXRlcGlja2VyLl9nb3RvVG9kYXkocyl9LHNlbGVjdERheTpmdW5jdGlvbigpe3JldHVybiB0LmRhdGVwaWNrZXIuX3NlbGVjdERheShzLCt0aGlzLmdldEF0dHJpYnV0ZShcImRhdGEtbW9udGhcIiksK3RoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS15ZWFyXCIpLHRoaXMpLCExfSxzZWxlY3RNb250aDpmdW5jdGlvbigpe3JldHVybiB0LmRhdGVwaWNrZXIuX3NlbGVjdE1vbnRoWWVhcihzLHRoaXMsXCJNXCIpLCExfSxzZWxlY3RZZWFyOmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGF0ZXBpY2tlci5fc2VsZWN0TW9udGhZZWFyKHMsdGhpcyxcIllcIiksITF9fTt0KHRoaXMpLm9uKHRoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1ldmVudFwiKSxlW3RoaXMuZ2V0QXR0cmlidXRlKFwiZGF0YS1oYW5kbGVyXCIpXSl9KX0sX2dlbmVyYXRlSFRNTDpmdW5jdGlvbih0KXt2YXIgZSxpLHMsbixvLGEscixoLGwsYyx1LGQscCxmLGcsbSxfLHYsYix5LHcsayx4LEMsRCxJLFQsUCxNLFMsSCx6LE8sQSxOLFcsRSxGLEwsUj1uZXcgRGF0ZSxCPXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKFIuZ2V0RnVsbFllYXIoKSxSLmdldE1vbnRoKCksUi5nZXREYXRlKCkpKSxZPXRoaXMuX2dldCh0LFwiaXNSVExcIiksaj10aGlzLl9nZXQodCxcInNob3dCdXR0b25QYW5lbFwiKSxxPXRoaXMuX2dldCh0LFwiaGlkZUlmTm9QcmV2TmV4dFwiKSxLPXRoaXMuX2dldCh0LFwibmF2aWdhdGlvbkFzRGF0ZUZvcm1hdFwiKSxVPXRoaXMuX2dldE51bWJlck9mTW9udGhzKHQpLFY9dGhpcy5fZ2V0KHQsXCJzaG93Q3VycmVudEF0UG9zXCIpLCQ9dGhpcy5fZ2V0KHQsXCJzdGVwTW9udGhzXCIpLFg9MSE9PVVbMF18fDEhPT1VWzFdLEc9dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QodC5jdXJyZW50RGF5P25ldyBEYXRlKHQuY3VycmVudFllYXIsdC5jdXJyZW50TW9udGgsdC5jdXJyZW50RGF5KTpuZXcgRGF0ZSg5OTk5LDksOSkpLFE9dGhpcy5fZ2V0TWluTWF4RGF0ZSh0LFwibWluXCIpLEo9dGhpcy5fZ2V0TWluTWF4RGF0ZSh0LFwibWF4XCIpLFo9dC5kcmF3TW9udGgtVix0ZT10LmRyYXdZZWFyO2lmKDA+WiYmKForPTEyLHRlLS0pLEopZm9yKGU9dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUoSi5nZXRGdWxsWWVhcigpLEouZ2V0TW9udGgoKS1VWzBdKlVbMV0rMSxKLmdldERhdGUoKSkpLGU9USYmUT5lP1E6ZTt0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh0ZSxaLDEpKT5lOylaLS0sMD5aJiYoWj0xMSx0ZS0tKTtmb3IodC5kcmF3TW9udGg9Wix0LmRyYXdZZWFyPXRlLGk9dGhpcy5fZ2V0KHQsXCJwcmV2VGV4dFwiKSxpPUs/dGhpcy5mb3JtYXREYXRlKGksdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodGUsWi0kLDEpKSx0aGlzLl9nZXRGb3JtYXRDb25maWcodCkpOmkscz10aGlzLl9jYW5BZGp1c3RNb250aCh0LC0xLHRlLFopP1wiPGEgY2xhc3M9J3VpLWRhdGVwaWNrZXItcHJldiB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J3ByZXYnIGRhdGEtZXZlbnQ9J2NsaWNrJyB0aXRsZT0nXCIraStcIic+PHNwYW4gY2xhc3M9J3VpLWljb24gdWktaWNvbi1jaXJjbGUtdHJpYW5nbGUtXCIrKFk/XCJlXCI6XCJ3XCIpK1wiJz5cIitpK1wiPC9zcGFuPjwvYT5cIjpxP1wiXCI6XCI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1wcmV2IHVpLWNvcm5lci1hbGwgdWktc3RhdGUtZGlzYWJsZWQnIHRpdGxlPSdcIitpK1wiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIisoWT9cImVcIjpcIndcIikrXCInPlwiK2krXCI8L3NwYW4+PC9hPlwiLG49dGhpcy5fZ2V0KHQsXCJuZXh0VGV4dFwiKSxuPUs/dGhpcy5mb3JtYXREYXRlKG4sdGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodGUsWiskLDEpKSx0aGlzLl9nZXRGb3JtYXRDb25maWcodCkpOm4sbz10aGlzLl9jYW5BZGp1c3RNb250aCh0LDEsdGUsWik/XCI8YSBjbGFzcz0ndWktZGF0ZXBpY2tlci1uZXh0IHVpLWNvcm5lci1hbGwnIGRhdGEtaGFuZGxlcj0nbmV4dCcgZGF0YS1ldmVudD0nY2xpY2snIHRpdGxlPSdcIituK1wiJz48c3BhbiBjbGFzcz0ndWktaWNvbiB1aS1pY29uLWNpcmNsZS10cmlhbmdsZS1cIisoWT9cIndcIjpcImVcIikrXCInPlwiK24rXCI8L3NwYW4+PC9hPlwiOnE/XCJcIjpcIjxhIGNsYXNzPSd1aS1kYXRlcGlja2VyLW5leHQgdWktY29ybmVyLWFsbCB1aS1zdGF0ZS1kaXNhYmxlZCcgdGl0bGU9J1wiK24rXCInPjxzcGFuIGNsYXNzPSd1aS1pY29uIHVpLWljb24tY2lyY2xlLXRyaWFuZ2xlLVwiKyhZP1wid1wiOlwiZVwiKStcIic+XCIrbitcIjwvc3Bhbj48L2E+XCIsYT10aGlzLl9nZXQodCxcImN1cnJlbnRUZXh0XCIpLHI9dGhpcy5fZ2V0KHQsXCJnb3RvQ3VycmVudFwiKSYmdC5jdXJyZW50RGF5P0c6QixhPUs/dGhpcy5mb3JtYXREYXRlKGEscix0aGlzLl9nZXRGb3JtYXRDb25maWcodCkpOmEsaD10LmlubGluZT9cIlwiOlwiPGJ1dHRvbiB0eXBlPSdidXR0b24nIGNsYXNzPSd1aS1kYXRlcGlja2VyLWNsb3NlIHVpLXN0YXRlLWRlZmF1bHQgdWktcHJpb3JpdHktcHJpbWFyeSB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J2hpZGUnIGRhdGEtZXZlbnQ9J2NsaWNrJz5cIit0aGlzLl9nZXQodCxcImNsb3NlVGV4dFwiKStcIjwvYnV0dG9uPlwiLGw9aj9cIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItYnV0dG9ucGFuZSB1aS13aWRnZXQtY29udGVudCc+XCIrKFk/aDpcIlwiKSsodGhpcy5faXNJblJhbmdlKHQscik/XCI8YnV0dG9uIHR5cGU9J2J1dHRvbicgY2xhc3M9J3VpLWRhdGVwaWNrZXItY3VycmVudCB1aS1zdGF0ZS1kZWZhdWx0IHVpLXByaW9yaXR5LXNlY29uZGFyeSB1aS1jb3JuZXItYWxsJyBkYXRhLWhhbmRsZXI9J3RvZGF5JyBkYXRhLWV2ZW50PSdjbGljayc+XCIrYStcIjwvYnV0dG9uPlwiOlwiXCIpKyhZP1wiXCI6aCkrXCI8L2Rpdj5cIjpcIlwiLGM9cGFyc2VJbnQodGhpcy5fZ2V0KHQsXCJmaXJzdERheVwiKSwxMCksYz1pc05hTihjKT8wOmMsdT10aGlzLl9nZXQodCxcInNob3dXZWVrXCIpLGQ9dGhpcy5fZ2V0KHQsXCJkYXlOYW1lc1wiKSxwPXRoaXMuX2dldCh0LFwiZGF5TmFtZXNNaW5cIiksZj10aGlzLl9nZXQodCxcIm1vbnRoTmFtZXNcIiksZz10aGlzLl9nZXQodCxcIm1vbnRoTmFtZXNTaG9ydFwiKSxtPXRoaXMuX2dldCh0LFwiYmVmb3JlU2hvd0RheVwiKSxfPXRoaXMuX2dldCh0LFwic2hvd090aGVyTW9udGhzXCIpLHY9dGhpcy5fZ2V0KHQsXCJzZWxlY3RPdGhlck1vbnRoc1wiKSxiPXRoaXMuX2dldERlZmF1bHREYXRlKHQpLHk9XCJcIixrPTA7VVswXT5rO2srKyl7Zm9yKHg9XCJcIix0aGlzLm1heFJvd3M9NCxDPTA7VVsxXT5DO0MrKyl7aWYoRD10aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZSh0ZSxaLHQuc2VsZWN0ZWREYXkpKSxJPVwiIHVpLWNvcm5lci1hbGxcIixUPVwiXCIsWCl7aWYoVCs9XCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWdyb3VwXCIsVVsxXT4xKXN3aXRjaChDKXtjYXNlIDA6VCs9XCIgdWktZGF0ZXBpY2tlci1ncm91cC1maXJzdFwiLEk9XCIgdWktY29ybmVyLVwiKyhZP1wicmlnaHRcIjpcImxlZnRcIik7YnJlYWs7Y2FzZSBVWzFdLTE6VCs9XCIgdWktZGF0ZXBpY2tlci1ncm91cC1sYXN0XCIsST1cIiB1aS1jb3JuZXItXCIrKFk/XCJsZWZ0XCI6XCJyaWdodFwiKTticmVhaztkZWZhdWx0OlQrPVwiIHVpLWRhdGVwaWNrZXItZ3JvdXAtbWlkZGxlXCIsST1cIlwifVQrPVwiJz5cIn1mb3IoVCs9XCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLWhlYWRlciB1aS13aWRnZXQtaGVhZGVyIHVpLWhlbHBlci1jbGVhcmZpeFwiK0krXCInPlwiKygvYWxsfGxlZnQvLnRlc3QoSSkmJjA9PT1rP1k/bzpzOlwiXCIpKygvYWxsfHJpZ2h0Ly50ZXN0KEkpJiYwPT09az9ZP3M6bzpcIlwiKSt0aGlzLl9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlcih0LFosdGUsUSxKLGs+MHx8Qz4wLGYsZykrXCI8L2Rpdj48dGFibGUgY2xhc3M9J3VpLWRhdGVwaWNrZXItY2FsZW5kYXInPjx0aGVhZD5cIitcIjx0cj5cIixQPXU/XCI8dGggY2xhc3M9J3VpLWRhdGVwaWNrZXItd2Vlay1jb2wnPlwiK3RoaXMuX2dldCh0LFwid2Vla0hlYWRlclwiKStcIjwvdGg+XCI6XCJcIix3PTA7Nz53O3crKylNPSh3K2MpJTcsUCs9XCI8dGggc2NvcGU9J2NvbCdcIisoKHcrYys2KSU3Pj01P1wiIGNsYXNzPSd1aS1kYXRlcGlja2VyLXdlZWstZW5kJ1wiOlwiXCIpK1wiPlwiK1wiPHNwYW4gdGl0bGU9J1wiK2RbTV0rXCInPlwiK3BbTV0rXCI8L3NwYW4+PC90aD5cIjtmb3IoVCs9UCtcIjwvdHI+PC90aGVhZD48dGJvZHk+XCIsUz10aGlzLl9nZXREYXlzSW5Nb250aCh0ZSxaKSx0ZT09PXQuc2VsZWN0ZWRZZWFyJiZaPT09dC5zZWxlY3RlZE1vbnRoJiYodC5zZWxlY3RlZERheT1NYXRoLm1pbih0LnNlbGVjdGVkRGF5LFMpKSxIPSh0aGlzLl9nZXRGaXJzdERheU9mTW9udGgodGUsWiktYys3KSU3LHo9TWF0aC5jZWlsKChIK1MpLzcpLE89WD90aGlzLm1heFJvd3M+ej90aGlzLm1heFJvd3M6ejp6LHRoaXMubWF4Um93cz1PLEE9dGhpcy5fZGF5bGlnaHRTYXZpbmdBZGp1c3QobmV3IERhdGUodGUsWiwxLUgpKSxOPTA7Tz5OO04rKyl7Zm9yKFQrPVwiPHRyPlwiLFc9dT9cIjx0ZCBjbGFzcz0ndWktZGF0ZXBpY2tlci13ZWVrLWNvbCc+XCIrdGhpcy5fZ2V0KHQsXCJjYWxjdWxhdGVXZWVrXCIpKEEpK1wiPC90ZD5cIjpcIlwiLHc9MDs3Pnc7dysrKUU9bT9tLmFwcGx5KHQuaW5wdXQ/dC5pbnB1dFswXTpudWxsLFtBXSk6WyEwLFwiXCJdLEY9QS5nZXRNb250aCgpIT09WixMPUYmJiF2fHwhRVswXXx8USYmUT5BfHxKJiZBPkosVys9XCI8dGQgY2xhc3M9J1wiKygodytjKzYpJTc+PTU/XCIgdWktZGF0ZXBpY2tlci13ZWVrLWVuZFwiOlwiXCIpKyhGP1wiIHVpLWRhdGVwaWNrZXItb3RoZXItbW9udGhcIjpcIlwiKSsoQS5nZXRUaW1lKCk9PT1ELmdldFRpbWUoKSYmWj09PXQuc2VsZWN0ZWRNb250aCYmdC5fa2V5RXZlbnR8fGIuZ2V0VGltZSgpPT09QS5nZXRUaW1lKCkmJmIuZ2V0VGltZSgpPT09RC5nZXRUaW1lKCk/XCIgXCIrdGhpcy5fZGF5T3ZlckNsYXNzOlwiXCIpKyhMP1wiIFwiK3RoaXMuX3Vuc2VsZWN0YWJsZUNsYXNzK1wiIHVpLXN0YXRlLWRpc2FibGVkXCI6XCJcIikrKEYmJiFfP1wiXCI6XCIgXCIrRVsxXSsoQS5nZXRUaW1lKCk9PT1HLmdldFRpbWUoKT9cIiBcIit0aGlzLl9jdXJyZW50Q2xhc3M6XCJcIikrKEEuZ2V0VGltZSgpPT09Qi5nZXRUaW1lKCk/XCIgdWktZGF0ZXBpY2tlci10b2RheVwiOlwiXCIpKStcIidcIisoRiYmIV98fCFFWzJdP1wiXCI6XCIgdGl0bGU9J1wiK0VbMl0ucmVwbGFjZSgvJy9nLFwiJiMzOTtcIikrXCInXCIpKyhMP1wiXCI6XCIgZGF0YS1oYW5kbGVyPSdzZWxlY3REYXknIGRhdGEtZXZlbnQ9J2NsaWNrJyBkYXRhLW1vbnRoPSdcIitBLmdldE1vbnRoKCkrXCInIGRhdGEteWVhcj0nXCIrQS5nZXRGdWxsWWVhcigpK1wiJ1wiKStcIj5cIisoRiYmIV8/XCImI3hhMDtcIjpMP1wiPHNwYW4gY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHQnPlwiK0EuZ2V0RGF0ZSgpK1wiPC9zcGFuPlwiOlwiPGEgY2xhc3M9J3VpLXN0YXRlLWRlZmF1bHRcIisoQS5nZXRUaW1lKCk9PT1CLmdldFRpbWUoKT9cIiB1aS1zdGF0ZS1oaWdobGlnaHRcIjpcIlwiKSsoQS5nZXRUaW1lKCk9PT1HLmdldFRpbWUoKT9cIiB1aS1zdGF0ZS1hY3RpdmVcIjpcIlwiKSsoRj9cIiB1aS1wcmlvcml0eS1zZWNvbmRhcnlcIjpcIlwiKStcIicgaHJlZj0nIyc+XCIrQS5nZXREYXRlKCkrXCI8L2E+XCIpK1wiPC90ZD5cIixBLnNldERhdGUoQS5nZXREYXRlKCkrMSksQT10aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChBKTtUKz1XK1wiPC90cj5cIn1aKyssWj4xMSYmKFo9MCx0ZSsrKSxUKz1cIjwvdGJvZHk+PC90YWJsZT5cIisoWD9cIjwvZGl2PlwiKyhVWzBdPjAmJkM9PT1VWzFdLTE/XCI8ZGl2IGNsYXNzPSd1aS1kYXRlcGlja2VyLXJvdy1icmVhayc+PC9kaXY+XCI6XCJcIik6XCJcIikseCs9VH15Kz14fXJldHVybiB5Kz1sLHQuX2tleUV2ZW50PSExLHl9LF9nZW5lcmF0ZU1vbnRoWWVhckhlYWRlcjpmdW5jdGlvbih0LGUsaSxzLG4sbyxhLHIpe3ZhciBoLGwsYyx1LGQscCxmLGcsbT10aGlzLl9nZXQodCxcImNoYW5nZU1vbnRoXCIpLF89dGhpcy5fZ2V0KHQsXCJjaGFuZ2VZZWFyXCIpLHY9dGhpcy5fZ2V0KHQsXCJzaG93TW9udGhBZnRlclllYXJcIiksYj1cIjxkaXYgY2xhc3M9J3VpLWRhdGVwaWNrZXItdGl0bGUnPlwiLHk9XCJcIjtpZihvfHwhbSl5Kz1cIjxzcGFuIGNsYXNzPSd1aS1kYXRlcGlja2VyLW1vbnRoJz5cIithW2VdK1wiPC9zcGFuPlwiO2Vsc2V7Zm9yKGg9cyYmcy5nZXRGdWxsWWVhcigpPT09aSxsPW4mJm4uZ2V0RnVsbFllYXIoKT09PWkseSs9XCI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLW1vbnRoJyBkYXRhLWhhbmRsZXI9J3NlbGVjdE1vbnRoJyBkYXRhLWV2ZW50PSdjaGFuZ2UnPlwiLGM9MDsxMj5jO2MrKykoIWh8fGM+PXMuZ2V0TW9udGgoKSkmJighbHx8bi5nZXRNb250aCgpPj1jKSYmKHkrPVwiPG9wdGlvbiB2YWx1ZT0nXCIrYytcIidcIisoYz09PWU/XCIgc2VsZWN0ZWQ9J3NlbGVjdGVkJ1wiOlwiXCIpK1wiPlwiK3JbY10rXCI8L29wdGlvbj5cIik7eSs9XCI8L3NlbGVjdD5cIn1pZih2fHwoYis9eSsoIW8mJm0mJl8/XCJcIjpcIiYjeGEwO1wiKSksIXQueWVhcnNodG1sKWlmKHQueWVhcnNodG1sPVwiXCIsb3x8IV8pYis9XCI8c3BhbiBjbGFzcz0ndWktZGF0ZXBpY2tlci15ZWFyJz5cIitpK1wiPC9zcGFuPlwiO2Vsc2V7Zm9yKHU9dGhpcy5fZ2V0KHQsXCJ5ZWFyUmFuZ2VcIikuc3BsaXQoXCI6XCIpLGQ9KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpLHA9ZnVuY3Rpb24odCl7dmFyIGU9dC5tYXRjaCgvY1srXFwtXS4qLyk/aStwYXJzZUludCh0LnN1YnN0cmluZygxKSwxMCk6dC5tYXRjaCgvWytcXC1dLiovKT9kK3BhcnNlSW50KHQsMTApOnBhcnNlSW50KHQsMTApO3JldHVybiBpc05hTihlKT9kOmV9LGY9cCh1WzBdKSxnPU1hdGgubWF4KGYscCh1WzFdfHxcIlwiKSksZj1zP01hdGgubWF4KGYscy5nZXRGdWxsWWVhcigpKTpmLGc9bj9NYXRoLm1pbihnLG4uZ2V0RnVsbFllYXIoKSk6Zyx0LnllYXJzaHRtbCs9XCI8c2VsZWN0IGNsYXNzPSd1aS1kYXRlcGlja2VyLXllYXInIGRhdGEtaGFuZGxlcj0nc2VsZWN0WWVhcicgZGF0YS1ldmVudD0nY2hhbmdlJz5cIjtnPj1mO2YrKyl0LnllYXJzaHRtbCs9XCI8b3B0aW9uIHZhbHVlPSdcIitmK1wiJ1wiKyhmPT09aT9cIiBzZWxlY3RlZD0nc2VsZWN0ZWQnXCI6XCJcIikrXCI+XCIrZitcIjwvb3B0aW9uPlwiO3QueWVhcnNodG1sKz1cIjwvc2VsZWN0PlwiLGIrPXQueWVhcnNodG1sLHQueWVhcnNodG1sPW51bGx9cmV0dXJuIGIrPXRoaXMuX2dldCh0LFwieWVhclN1ZmZpeFwiKSx2JiYoYis9KCFvJiZtJiZfP1wiXCI6XCImI3hhMDtcIikreSksYis9XCI8L2Rpdj5cIn0sX2FkanVzdEluc3REYXRlOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcz10LnNlbGVjdGVkWWVhcisoXCJZXCI9PT1pP2U6MCksbj10LnNlbGVjdGVkTW9udGgrKFwiTVwiPT09aT9lOjApLG89TWF0aC5taW4odC5zZWxlY3RlZERheSx0aGlzLl9nZXREYXlzSW5Nb250aChzLG4pKSsoXCJEXCI9PT1pP2U6MCksYT10aGlzLl9yZXN0cmljdE1pbk1heCh0LHRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHMsbixvKSkpO3Quc2VsZWN0ZWREYXk9YS5nZXREYXRlKCksdC5kcmF3TW9udGg9dC5zZWxlY3RlZE1vbnRoPWEuZ2V0TW9udGgoKSx0LmRyYXdZZWFyPXQuc2VsZWN0ZWRZZWFyPWEuZ2V0RnVsbFllYXIoKSwoXCJNXCI9PT1pfHxcIllcIj09PWkpJiZ0aGlzLl9ub3RpZnlDaGFuZ2UodCl9LF9yZXN0cmljdE1pbk1heDpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuX2dldE1pbk1heERhdGUodCxcIm1pblwiKSxzPXRoaXMuX2dldE1pbk1heERhdGUodCxcIm1heFwiKSxuPWkmJmk+ZT9pOmU7cmV0dXJuIHMmJm4+cz9zOm59LF9ub3RpZnlDaGFuZ2U6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZ2V0KHQsXCJvbkNoYW5nZU1vbnRoWWVhclwiKTtlJiZlLmFwcGx5KHQuaW5wdXQ/dC5pbnB1dFswXTpudWxsLFt0LnNlbGVjdGVkWWVhcix0LnNlbGVjdGVkTW9udGgrMSx0XSl9LF9nZXROdW1iZXJPZk1vbnRoczpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9nZXQodCxcIm51bWJlck9mTW9udGhzXCIpO3JldHVybiBudWxsPT1lP1sxLDFdOlwibnVtYmVyXCI9PXR5cGVvZiBlP1sxLGVdOmV9LF9nZXRNaW5NYXhEYXRlOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX2RldGVybWluZURhdGUodCx0aGlzLl9nZXQodCxlK1wiRGF0ZVwiKSxudWxsKX0sX2dldERheXNJbk1vbnRoOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIDMyLXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHQsZSwzMikpLmdldERhdGUoKX0sX2dldEZpcnN0RGF5T2ZNb250aDpmdW5jdGlvbih0LGUpe3JldHVybiBuZXcgRGF0ZSh0LGUsMSkuZ2V0RGF5KCl9LF9jYW5BZGp1c3RNb250aDpmdW5jdGlvbih0LGUsaSxzKXt2YXIgbj10aGlzLl9nZXROdW1iZXJPZk1vbnRocyh0KSxvPXRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKGkscysoMD5lP2U6blswXSpuWzFdKSwxKSk7cmV0dXJuIDA+ZSYmby5zZXREYXRlKHRoaXMuX2dldERheXNJbk1vbnRoKG8uZ2V0RnVsbFllYXIoKSxvLmdldE1vbnRoKCkpKSx0aGlzLl9pc0luUmFuZ2UodCxvKX0sX2lzSW5SYW5nZTpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbj10aGlzLl9nZXRNaW5NYXhEYXRlKHQsXCJtaW5cIiksbz10aGlzLl9nZXRNaW5NYXhEYXRlKHQsXCJtYXhcIiksYT1udWxsLHI9bnVsbCxoPXRoaXMuX2dldCh0LFwieWVhclJhbmdlXCIpO3JldHVybiBoJiYoaT1oLnNwbGl0KFwiOlwiKSxzPShuZXcgRGF0ZSkuZ2V0RnVsbFllYXIoKSxhPXBhcnNlSW50KGlbMF0sMTApLHI9cGFyc2VJbnQoaVsxXSwxMCksaVswXS5tYXRjaCgvWytcXC1dLiovKSYmKGErPXMpLGlbMV0ubWF0Y2goL1srXFwtXS4qLykmJihyKz1zKSksKCFufHxlLmdldFRpbWUoKT49bi5nZXRUaW1lKCkpJiYoIW98fGUuZ2V0VGltZSgpPD1vLmdldFRpbWUoKSkmJighYXx8ZS5nZXRGdWxsWWVhcigpPj1hKSYmKCFyfHxyPj1lLmdldEZ1bGxZZWFyKCkpfSxfZ2V0Rm9ybWF0Q29uZmlnOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2dldCh0LFwic2hvcnRZZWFyQ3V0b2ZmXCIpO3JldHVybiBlPVwic3RyaW5nXCIhPXR5cGVvZiBlP2U6KG5ldyBEYXRlKS5nZXRGdWxsWWVhcigpJTEwMCtwYXJzZUludChlLDEwKSx7c2hvcnRZZWFyQ3V0b2ZmOmUsZGF5TmFtZXNTaG9ydDp0aGlzLl9nZXQodCxcImRheU5hbWVzU2hvcnRcIiksZGF5TmFtZXM6dGhpcy5fZ2V0KHQsXCJkYXlOYW1lc1wiKSxtb250aE5hbWVzU2hvcnQ6dGhpcy5fZ2V0KHQsXCJtb250aE5hbWVzU2hvcnRcIiksbW9udGhOYW1lczp0aGlzLl9nZXQodCxcIm1vbnRoTmFtZXNcIil9fSxfZm9ybWF0RGF0ZTpmdW5jdGlvbih0LGUsaSxzKXtlfHwodC5jdXJyZW50RGF5PXQuc2VsZWN0ZWREYXksdC5jdXJyZW50TW9udGg9dC5zZWxlY3RlZE1vbnRoLHQuY3VycmVudFllYXI9dC5zZWxlY3RlZFllYXIpO3ZhciBuPWU/XCJvYmplY3RcIj09dHlwZW9mIGU/ZTp0aGlzLl9kYXlsaWdodFNhdmluZ0FkanVzdChuZXcgRGF0ZShzLGksZSkpOnRoaXMuX2RheWxpZ2h0U2F2aW5nQWRqdXN0KG5ldyBEYXRlKHQuY3VycmVudFllYXIsdC5jdXJyZW50TW9udGgsdC5jdXJyZW50RGF5KSk7cmV0dXJuIHRoaXMuZm9ybWF0RGF0ZSh0aGlzLl9nZXQodCxcImRhdGVGb3JtYXRcIiksbix0aGlzLl9nZXRGb3JtYXRDb25maWcodCkpfX0pLHQuZm4uZGF0ZXBpY2tlcj1mdW5jdGlvbihlKXtpZighdGhpcy5sZW5ndGgpcmV0dXJuIHRoaXM7dC5kYXRlcGlja2VyLmluaXRpYWxpemVkfHwodChkb2N1bWVudCkub24oXCJtb3VzZWRvd25cIix0LmRhdGVwaWNrZXIuX2NoZWNrRXh0ZXJuYWxDbGljayksdC5kYXRlcGlja2VyLmluaXRpYWxpemVkPSEwKSwwPT09dChcIiNcIit0LmRhdGVwaWNrZXIuX21haW5EaXZJZCkubGVuZ3RoJiZ0KFwiYm9keVwiKS5hcHBlbmQodC5kYXRlcGlja2VyLmRwRGl2KTt2YXIgaT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGV8fFwiaXNEaXNhYmxlZFwiIT09ZSYmXCJnZXREYXRlXCIhPT1lJiZcIndpZGdldFwiIT09ZT9cIm9wdGlvblwiPT09ZSYmMj09PWFyZ3VtZW50cy5sZW5ndGgmJlwic3RyaW5nXCI9PXR5cGVvZiBhcmd1bWVudHNbMV0/dC5kYXRlcGlja2VyW1wiX1wiK2UrXCJEYXRlcGlja2VyXCJdLmFwcGx5KHQuZGF0ZXBpY2tlcixbdGhpc1swXV0uY29uY2F0KGkpKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtcInN0cmluZ1wiPT10eXBlb2YgZT90LmRhdGVwaWNrZXJbXCJfXCIrZStcIkRhdGVwaWNrZXJcIl0uYXBwbHkodC5kYXRlcGlja2VyLFt0aGlzXS5jb25jYXQoaSkpOnQuZGF0ZXBpY2tlci5fYXR0YWNoRGF0ZXBpY2tlcih0aGlzLGUpfSk6dC5kYXRlcGlja2VyW1wiX1wiK2UrXCJEYXRlcGlja2VyXCJdLmFwcGx5KHQuZGF0ZXBpY2tlcixbdGhpc1swXV0uY29uY2F0KGkpKX0sdC5kYXRlcGlja2VyPW5ldyBzLHQuZGF0ZXBpY2tlci5pbml0aWFsaXplZD0hMSx0LmRhdGVwaWNrZXIudXVpZD0obmV3IERhdGUpLmdldFRpbWUoKSx0LmRhdGVwaWNrZXIudmVyc2lvbj1cIjEuMTIuMVwiLHQuZGF0ZXBpY2tlcix0LnVpLmllPSEhL21zaWUgW1xcdy5dKy8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkpO3ZhciBfPSExO3QoZG9jdW1lbnQpLm9uKFwibW91c2V1cFwiLGZ1bmN0aW9uKCl7Xz0hMX0pLHQud2lkZ2V0KFwidWkubW91c2VcIix7dmVyc2lvbjpcIjEuMTIuMVwiLG9wdGlvbnM6e2NhbmNlbDpcImlucHV0LCB0ZXh0YXJlYSwgYnV0dG9uLCBzZWxlY3QsIG9wdGlvblwiLGRpc3RhbmNlOjEsZGVsYXk6MH0sX21vdXNlSW5pdDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5lbGVtZW50Lm9uKFwibW91c2Vkb3duLlwiK3RoaXMud2lkZ2V0TmFtZSxmdW5jdGlvbih0KXtyZXR1cm4gZS5fbW91c2VEb3duKHQpfSkub24oXCJjbGljay5cIit0aGlzLndpZGdldE5hbWUsZnVuY3Rpb24oaSl7cmV0dXJuITA9PT10LmRhdGEoaS50YXJnZXQsZS53aWRnZXROYW1lK1wiLnByZXZlbnRDbGlja0V2ZW50XCIpPyh0LnJlbW92ZURhdGEoaS50YXJnZXQsZS53aWRnZXROYW1lK1wiLnByZXZlbnRDbGlja0V2ZW50XCIpLGkuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksITEpOnZvaWQgMH0pLHRoaXMuc3RhcnRlZD0hMX0sX21vdXNlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5vZmYoXCIuXCIrdGhpcy53aWRnZXROYW1lKSx0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSYmdGhpcy5kb2N1bWVudC5vZmYoXCJtb3VzZW1vdmUuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKS5vZmYoXCJtb3VzZXVwLlwiK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZVVwRGVsZWdhdGUpfSxfbW91c2VEb3duOmZ1bmN0aW9uKGUpe2lmKCFfKXt0aGlzLl9tb3VzZU1vdmVkPSExLHRoaXMuX21vdXNlU3RhcnRlZCYmdGhpcy5fbW91c2VVcChlKSx0aGlzLl9tb3VzZURvd25FdmVudD1lO3ZhciBpPXRoaXMscz0xPT09ZS53aGljaCxuPVwic3RyaW5nXCI9PXR5cGVvZiB0aGlzLm9wdGlvbnMuY2FuY2VsJiZlLnRhcmdldC5ub2RlTmFtZT90KGUudGFyZ2V0KS5jbG9zZXN0KHRoaXMub3B0aW9ucy5jYW5jZWwpLmxlbmd0aDohMTtyZXR1cm4gcyYmIW4mJnRoaXMuX21vdXNlQ2FwdHVyZShlKT8odGhpcy5tb3VzZURlbGF5TWV0PSF0aGlzLm9wdGlvbnMuZGVsYXksdGhpcy5tb3VzZURlbGF5TWV0fHwodGhpcy5fbW91c2VEZWxheVRpbWVyPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtpLm1vdXNlRGVsYXlNZXQ9ITB9LHRoaXMub3B0aW9ucy5kZWxheSkpLHRoaXMuX21vdXNlRGlzdGFuY2VNZXQoZSkmJnRoaXMuX21vdXNlRGVsYXlNZXQoZSkmJih0aGlzLl9tb3VzZVN0YXJ0ZWQ9dGhpcy5fbW91c2VTdGFydChlKSE9PSExLCF0aGlzLl9tb3VzZVN0YXJ0ZWQpPyhlLnByZXZlbnREZWZhdWx0KCksITApOighMD09PXQuZGF0YShlLnRhcmdldCx0aGlzLndpZGdldE5hbWUrXCIucHJldmVudENsaWNrRXZlbnRcIikmJnQucmVtb3ZlRGF0YShlLnRhcmdldCx0aGlzLndpZGdldE5hbWUrXCIucHJldmVudENsaWNrRXZlbnRcIiksdGhpcy5fbW91c2VNb3ZlRGVsZWdhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIGkuX21vdXNlTW92ZSh0KX0sdGhpcy5fbW91c2VVcERlbGVnYXRlPWZ1bmN0aW9uKHQpe3JldHVybiBpLl9tb3VzZVVwKHQpfSx0aGlzLmRvY3VtZW50Lm9uKFwibW91c2Vtb3ZlLlwiK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZU1vdmVEZWxlZ2F0ZSkub24oXCJtb3VzZXVwLlwiK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZVVwRGVsZWdhdGUpLGUucHJldmVudERlZmF1bHQoKSxfPSEwLCEwKSk6ITB9fSxfbW91c2VNb3ZlOmZ1bmN0aW9uKGUpe2lmKHRoaXMuX21vdXNlTW92ZWQpe2lmKHQudWkuaWUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PmRvY3VtZW50LmRvY3VtZW50TW9kZSkmJiFlLmJ1dHRvbilyZXR1cm4gdGhpcy5fbW91c2VVcChlKTtpZighZS53aGljaClpZihlLm9yaWdpbmFsRXZlbnQuYWx0S2V5fHxlLm9yaWdpbmFsRXZlbnQuY3RybEtleXx8ZS5vcmlnaW5hbEV2ZW50Lm1ldGFLZXl8fGUub3JpZ2luYWxFdmVudC5zaGlmdEtleSl0aGlzLmlnbm9yZU1pc3NpbmdXaGljaD0hMDtlbHNlIGlmKCF0aGlzLmlnbm9yZU1pc3NpbmdXaGljaClyZXR1cm4gdGhpcy5fbW91c2VVcChlKX1yZXR1cm4oZS53aGljaHx8ZS5idXR0b24pJiYodGhpcy5fbW91c2VNb3ZlZD0hMCksdGhpcy5fbW91c2VTdGFydGVkPyh0aGlzLl9tb3VzZURyYWcoZSksZS5wcmV2ZW50RGVmYXVsdCgpKToodGhpcy5fbW91c2VEaXN0YW5jZU1ldChlKSYmdGhpcy5fbW91c2VEZWxheU1ldChlKSYmKHRoaXMuX21vdXNlU3RhcnRlZD10aGlzLl9tb3VzZVN0YXJ0KHRoaXMuX21vdXNlRG93bkV2ZW50LGUpIT09ITEsdGhpcy5fbW91c2VTdGFydGVkP3RoaXMuX21vdXNlRHJhZyhlKTp0aGlzLl9tb3VzZVVwKGUpKSwhdGhpcy5fbW91c2VTdGFydGVkKX0sX21vdXNlVXA6ZnVuY3Rpb24oZSl7dGhpcy5kb2N1bWVudC5vZmYoXCJtb3VzZW1vdmUuXCIrdGhpcy53aWRnZXROYW1lLHRoaXMuX21vdXNlTW92ZURlbGVnYXRlKS5vZmYoXCJtb3VzZXVwLlwiK3RoaXMud2lkZ2V0TmFtZSx0aGlzLl9tb3VzZVVwRGVsZWdhdGUpLHRoaXMuX21vdXNlU3RhcnRlZCYmKHRoaXMuX21vdXNlU3RhcnRlZD0hMSxlLnRhcmdldD09PXRoaXMuX21vdXNlRG93bkV2ZW50LnRhcmdldCYmdC5kYXRhKGUudGFyZ2V0LHRoaXMud2lkZ2V0TmFtZStcIi5wcmV2ZW50Q2xpY2tFdmVudFwiLCEwKSx0aGlzLl9tb3VzZVN0b3AoZSkpLHRoaXMuX21vdXNlRGVsYXlUaW1lciYmKGNsZWFyVGltZW91dCh0aGlzLl9tb3VzZURlbGF5VGltZXIpLGRlbGV0ZSB0aGlzLl9tb3VzZURlbGF5VGltZXIpLHRoaXMuaWdub3JlTWlzc2luZ1doaWNoPSExLF89ITEsZS5wcmV2ZW50RGVmYXVsdCgpfSxfbW91c2VEaXN0YW5jZU1ldDpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5tYXgoTWF0aC5hYnModGhpcy5fbW91c2VEb3duRXZlbnQucGFnZVgtdC5wYWdlWCksTWF0aC5hYnModGhpcy5fbW91c2VEb3duRXZlbnQucGFnZVktdC5wYWdlWSkpPj10aGlzLm9wdGlvbnMuZGlzdGFuY2V9LF9tb3VzZURlbGF5TWV0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW91c2VEZWxheU1ldH0sX21vdXNlU3RhcnQ6ZnVuY3Rpb24oKXt9LF9tb3VzZURyYWc6ZnVuY3Rpb24oKXt9LF9tb3VzZVN0b3A6ZnVuY3Rpb24oKXt9LF9tb3VzZUNhcHR1cmU6ZnVuY3Rpb24oKXtyZXR1cm4hMH19KSx0LnVpLnBsdWdpbj17YWRkOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbixvPXQudWlbZV0ucHJvdG90eXBlO2ZvcihuIGluIHMpby5wbHVnaW5zW25dPW8ucGx1Z2luc1tuXXx8W10sby5wbHVnaW5zW25dLnB1c2goW2ksc1tuXV0pfSxjYWxsOmZ1bmN0aW9uKHQsZSxpLHMpe3ZhciBuLG89dC5wbHVnaW5zW2VdO2lmKG8mJihzfHx0LmVsZW1lbnRbMF0ucGFyZW50Tm9kZSYmMTEhPT10LmVsZW1lbnRbMF0ucGFyZW50Tm9kZS5ub2RlVHlwZSkpZm9yKG49MDtvLmxlbmd0aD5uO24rKyl0Lm9wdGlvbnNbb1tuXVswXV0mJm9bbl1bMV0uYXBwbHkodC5lbGVtZW50LGkpfX0sdC51aS5zYWZlQmx1cj1mdW5jdGlvbihlKXtlJiZcImJvZHlcIiE9PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmdChlKS50cmlnZ2VyKFwiYmx1clwiKX0sdC53aWRnZXQoXCJ1aS5kcmFnZ2FibGVcIix0LnVpLm1vdXNlLHt2ZXJzaW9uOlwiMS4xMi4xXCIsd2lkZ2V0RXZlbnRQcmVmaXg6XCJkcmFnXCIsb3B0aW9uczp7YWRkQ2xhc3NlczohMCxhcHBlbmRUbzpcInBhcmVudFwiLGF4aXM6ITEsY29ubmVjdFRvU29ydGFibGU6ITEsY29udGFpbm1lbnQ6ITEsY3Vyc29yOlwiYXV0b1wiLGN1cnNvckF0OiExLGdyaWQ6ITEsaGFuZGxlOiExLGhlbHBlcjpcIm9yaWdpbmFsXCIsaWZyYW1lRml4OiExLG9wYWNpdHk6ITEscmVmcmVzaFBvc2l0aW9uczohMSxyZXZlcnQ6ITEscmV2ZXJ0RHVyYXRpb246NTAwLHNjb3BlOlwiZGVmYXVsdFwiLHNjcm9sbDohMCxzY3JvbGxTZW5zaXRpdml0eToyMCxzY3JvbGxTcGVlZDoyMCxzbmFwOiExLHNuYXBNb2RlOlwiYm90aFwiLHNuYXBUb2xlcmFuY2U6MjAsc3RhY2s6ITEsekluZGV4OiExLGRyYWc6bnVsbCxzdGFydDpudWxsLHN0b3A6bnVsbH0sX2NyZWF0ZTpmdW5jdGlvbigpe1wib3JpZ2luYWxcIj09PXRoaXMub3B0aW9ucy5oZWxwZXImJnRoaXMuX3NldFBvc2l0aW9uUmVsYXRpdmUoKSx0aGlzLm9wdGlvbnMuYWRkQ2xhc3NlcyYmdGhpcy5fYWRkQ2xhc3MoXCJ1aS1kcmFnZ2FibGVcIiksdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCksdGhpcy5fbW91c2VJbml0KCl9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXt0aGlzLl9zdXBlcih0LGUpLFwiaGFuZGxlXCI9PT10JiYodGhpcy5fcmVtb3ZlSGFuZGxlQ2xhc3NOYW1lKCksdGhpcy5fc2V0SGFuZGxlQ2xhc3NOYW1lKCkpfSxfZGVzdHJveTpmdW5jdGlvbigpe3JldHVybih0aGlzLmhlbHBlcnx8dGhpcy5lbGVtZW50KS5pcyhcIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIik/KHRoaXMuZGVzdHJveU9uQ2xlYXI9ITAsdm9pZCAwKToodGhpcy5fcmVtb3ZlSGFuZGxlQ2xhc3NOYW1lKCksdGhpcy5fbW91c2VEZXN0cm95KCksdm9pZCAwKX0sX21vdXNlQ2FwdHVyZTpmdW5jdGlvbihlKXt2YXIgaT10aGlzLm9wdGlvbnM7cmV0dXJuIHRoaXMuaGVscGVyfHxpLmRpc2FibGVkfHx0KGUudGFyZ2V0KS5jbG9zZXN0KFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIikubGVuZ3RoPjA/ITE6KHRoaXMuaGFuZGxlPXRoaXMuX2dldEhhbmRsZShlKSx0aGlzLmhhbmRsZT8odGhpcy5fYmx1ckFjdGl2ZUVsZW1lbnQoZSksdGhpcy5fYmxvY2tGcmFtZXMoaS5pZnJhbWVGaXg9PT0hMD9cImlmcmFtZVwiOmkuaWZyYW1lRml4KSwhMCk6ITEpfSxfYmxvY2tGcmFtZXM6ZnVuY3Rpb24oZSl7dGhpcy5pZnJhbWVCbG9ja3M9dGhpcy5kb2N1bWVudC5maW5kKGUpLm1hcChmdW5jdGlvbigpe3ZhciBlPXQodGhpcyk7cmV0dXJuIHQoXCI8ZGl2PlwiKS5jc3MoXCJwb3NpdGlvblwiLFwiYWJzb2x1dGVcIikuYXBwZW5kVG8oZS5wYXJlbnQoKSkub3V0ZXJXaWR0aChlLm91dGVyV2lkdGgoKSkub3V0ZXJIZWlnaHQoZS5vdXRlckhlaWdodCgpKS5vZmZzZXQoZS5vZmZzZXQoKSlbMF19KX0sX3VuYmxvY2tGcmFtZXM6ZnVuY3Rpb24oKXt0aGlzLmlmcmFtZUJsb2NrcyYmKHRoaXMuaWZyYW1lQmxvY2tzLnJlbW92ZSgpLGRlbGV0ZSB0aGlzLmlmcmFtZUJsb2Nrcyl9LF9ibHVyQWN0aXZlRWxlbWVudDpmdW5jdGlvbihlKXt2YXIgaT10LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pLHM9dChlLnRhcmdldCk7cy5jbG9zZXN0KGkpLmxlbmd0aHx8dC51aS5zYWZlQmx1cihpKX0sX21vdXNlU3RhcnQ6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zO3JldHVybiB0aGlzLmhlbHBlcj10aGlzLl9jcmVhdGVIZWxwZXIoZSksdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWxwZXIsXCJ1aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiksdGhpcy5fY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpLHQudWkuZGRtYW5hZ2VyJiYodC51aS5kZG1hbmFnZXIuY3VycmVudD10aGlzKSx0aGlzLl9jYWNoZU1hcmdpbnMoKSx0aGlzLmNzc1Bvc2l0aW9uPXRoaXMuaGVscGVyLmNzcyhcInBvc2l0aW9uXCIpLHRoaXMuc2Nyb2xsUGFyZW50PXRoaXMuaGVscGVyLnNjcm9sbFBhcmVudCghMCksdGhpcy5vZmZzZXRQYXJlbnQ9dGhpcy5oZWxwZXIub2Zmc2V0UGFyZW50KCksdGhpcy5oYXNGaXhlZEFuY2VzdG9yPXRoaXMuaGVscGVyLnBhcmVudHMoKS5maWx0ZXIoZnVuY3Rpb24oKXtyZXR1cm5cImZpeGVkXCI9PT10KHRoaXMpLmNzcyhcInBvc2l0aW9uXCIpfSkubGVuZ3RoPjAsdGhpcy5wb3NpdGlvbkFicz10aGlzLmVsZW1lbnQub2Zmc2V0KCksdGhpcy5fcmVmcmVzaE9mZnNldHMoZSksdGhpcy5vcmlnaW5hbFBvc2l0aW9uPXRoaXMucG9zaXRpb249dGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihlLCExKSx0aGlzLm9yaWdpbmFsUGFnZVg9ZS5wYWdlWCx0aGlzLm9yaWdpbmFsUGFnZVk9ZS5wYWdlWSxpLmN1cnNvckF0JiZ0aGlzLl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyKGkuY3Vyc29yQXQpLHRoaXMuX3NldENvbnRhaW5tZW50KCksdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsZSk9PT0hMT8odGhpcy5fY2xlYXIoKSwhMSk6KHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKSx0LnVpLmRkbWFuYWdlciYmIWkuZHJvcEJlaGF2aW91ciYmdC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHModGhpcyxlKSx0aGlzLl9tb3VzZURyYWcoZSwhMCksdC51aS5kZG1hbmFnZXImJnQudWkuZGRtYW5hZ2VyLmRyYWdTdGFydCh0aGlzLGUpLCEwKX0sX3JlZnJlc2hPZmZzZXRzOmZ1bmN0aW9uKHQpe3RoaXMub2Zmc2V0PXt0b3A6dGhpcy5wb3NpdGlvbkFicy50b3AtdGhpcy5tYXJnaW5zLnRvcCxsZWZ0OnRoaXMucG9zaXRpb25BYnMubGVmdC10aGlzLm1hcmdpbnMubGVmdCxzY3JvbGw6ITEscGFyZW50OnRoaXMuX2dldFBhcmVudE9mZnNldCgpLHJlbGF0aXZlOnRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCl9LHRoaXMub2Zmc2V0LmNsaWNrPXtsZWZ0OnQucGFnZVgtdGhpcy5vZmZzZXQubGVmdCx0b3A6dC5wYWdlWS10aGlzLm9mZnNldC50b3B9fSxfbW91c2VEcmFnOmZ1bmN0aW9uKGUsaSl7aWYodGhpcy5oYXNGaXhlZEFuY2VzdG9yJiYodGhpcy5vZmZzZXQucGFyZW50PXRoaXMuX2dldFBhcmVudE9mZnNldCgpKSx0aGlzLnBvc2l0aW9uPXRoaXMuX2dlbmVyYXRlUG9zaXRpb24oZSwhMCksdGhpcy5wb3NpdGlvbkFicz10aGlzLl9jb252ZXJ0UG9zaXRpb25UbyhcImFic29sdXRlXCIpLCFpKXt2YXIgcz10aGlzLl91aUhhc2goKTtpZih0aGlzLl90cmlnZ2VyKFwiZHJhZ1wiLGUscyk9PT0hMSlyZXR1cm4gdGhpcy5fbW91c2VVcChuZXcgdC5FdmVudChcIm1vdXNldXBcIixlKSksITE7dGhpcy5wb3NpdGlvbj1zLnBvc2l0aW9ufXJldHVybiB0aGlzLmhlbHBlclswXS5zdHlsZS5sZWZ0PXRoaXMucG9zaXRpb24ubGVmdCtcInB4XCIsdGhpcy5oZWxwZXJbMF0uc3R5bGUudG9wPXRoaXMucG9zaXRpb24udG9wK1wicHhcIix0LnVpLmRkbWFuYWdlciYmdC51aS5kZG1hbmFnZXIuZHJhZyh0aGlzLGUpLCExfSxfbW91c2VTdG9wOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMscz0hMTtyZXR1cm4gdC51aS5kZG1hbmFnZXImJiF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91ciYmKHM9dC51aS5kZG1hbmFnZXIuZHJvcCh0aGlzLGUpKSx0aGlzLmRyb3BwZWQmJihzPXRoaXMuZHJvcHBlZCx0aGlzLmRyb3BwZWQ9ITEpLFwiaW52YWxpZFwiPT09dGhpcy5vcHRpb25zLnJldmVydCYmIXN8fFwidmFsaWRcIj09PXRoaXMub3B0aW9ucy5yZXZlcnQmJnN8fHRoaXMub3B0aW9ucy5yZXZlcnQ9PT0hMHx8dC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5yZXZlcnQpJiZ0aGlzLm9wdGlvbnMucmV2ZXJ0LmNhbGwodGhpcy5lbGVtZW50LHMpP3QodGhpcy5oZWxwZXIpLmFuaW1hdGUodGhpcy5vcmlnaW5hbFBvc2l0aW9uLHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnREdXJhdGlvbiwxMCksZnVuY3Rpb24oKXtpLl90cmlnZ2VyKFwic3RvcFwiLGUpIT09ITEmJmkuX2NsZWFyKCl9KTp0aGlzLl90cmlnZ2VyKFwic3RvcFwiLGUpIT09ITEmJnRoaXMuX2NsZWFyKCksITF9LF9tb3VzZVVwOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLl91bmJsb2NrRnJhbWVzKCksdC51aS5kZG1hbmFnZXImJnQudWkuZGRtYW5hZ2VyLmRyYWdTdG9wKHRoaXMsZSksdGhpcy5oYW5kbGVFbGVtZW50LmlzKGUudGFyZ2V0KSYmdGhpcy5lbGVtZW50LnRyaWdnZXIoXCJmb2N1c1wiKSx0LnVpLm1vdXNlLnByb3RvdHlwZS5fbW91c2VVcC5jYWxsKHRoaXMsZSl9LGNhbmNlbDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhlbHBlci5pcyhcIi51aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIik/dGhpcy5fbW91c2VVcChuZXcgdC5FdmVudChcIm1vdXNldXBcIix7dGFyZ2V0OnRoaXMuZWxlbWVudFswXX0pKTp0aGlzLl9jbGVhcigpLHRoaXN9LF9nZXRIYW5kbGU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMub3B0aW9ucy5oYW5kbGU/ISF0KGUudGFyZ2V0KS5jbG9zZXN0KHRoaXMuZWxlbWVudC5maW5kKHRoaXMub3B0aW9ucy5oYW5kbGUpKS5sZW5ndGg6ITB9LF9zZXRIYW5kbGVDbGFzc05hbWU6ZnVuY3Rpb24oKXt0aGlzLmhhbmRsZUVsZW1lbnQ9dGhpcy5vcHRpb25zLmhhbmRsZT90aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMuaGFuZGxlKTp0aGlzLmVsZW1lbnQsdGhpcy5fYWRkQ2xhc3ModGhpcy5oYW5kbGVFbGVtZW50LFwidWktZHJhZ2dhYmxlLWhhbmRsZVwiKX0sX3JlbW92ZUhhbmRsZUNsYXNzTmFtZTpmdW5jdGlvbigpe3RoaXMuX3JlbW92ZUNsYXNzKHRoaXMuaGFuZGxlRWxlbWVudCxcInVpLWRyYWdnYWJsZS1oYW5kbGVcIil9LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLHM9dC5pc0Z1bmN0aW9uKGkuaGVscGVyKSxuPXM/dChpLmhlbHBlci5hcHBseSh0aGlzLmVsZW1lbnRbMF0sW2VdKSk6XCJjbG9uZVwiPT09aS5oZWxwZXI/dGhpcy5lbGVtZW50LmNsb25lKCkucmVtb3ZlQXR0cihcImlkXCIpOnRoaXMuZWxlbWVudDtyZXR1cm4gbi5wYXJlbnRzKFwiYm9keVwiKS5sZW5ndGh8fG4uYXBwZW5kVG8oXCJwYXJlbnRcIj09PWkuYXBwZW5kVG8/dGhpcy5lbGVtZW50WzBdLnBhcmVudE5vZGU6aS5hcHBlbmRUbykscyYmblswXT09PXRoaXMuZWxlbWVudFswXSYmdGhpcy5fc2V0UG9zaXRpb25SZWxhdGl2ZSgpLG5bMF09PT10aGlzLmVsZW1lbnRbMF18fC8oZml4ZWR8YWJzb2x1dGUpLy50ZXN0KG4uY3NzKFwicG9zaXRpb25cIikpfHxuLmNzcyhcInBvc2l0aW9uXCIsXCJhYnNvbHV0ZVwiKSxufSxfc2V0UG9zaXRpb25SZWxhdGl2ZTpmdW5jdGlvbigpey9eKD86cnxhfGYpLy50ZXN0KHRoaXMuZWxlbWVudC5jc3MoXCJwb3NpdGlvblwiKSl8fCh0aGlzLmVsZW1lbnRbMF0uc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKX0sX2FkanVzdE9mZnNldEZyb21IZWxwZXI6ZnVuY3Rpb24oZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWUuc3BsaXQoXCIgXCIpKSx0LmlzQXJyYXkoZSkmJihlPXtsZWZ0OitlWzBdLHRvcDorZVsxXXx8MH0pLFwibGVmdFwiaW4gZSYmKHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ9ZS5sZWZ0K3RoaXMubWFyZ2lucy5sZWZ0KSxcInJpZ2h0XCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2subGVmdD10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLWUucmlnaHQrdGhpcy5tYXJnaW5zLmxlZnQpLFwidG9wXCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2sudG9wPWUudG9wK3RoaXMubWFyZ2lucy50b3ApLFwiYm90dG9tXCJpbiBlJiYodGhpcy5vZmZzZXQuY2xpY2sudG9wPXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LWUuYm90dG9tK3RoaXMubWFyZ2lucy50b3ApfSxfaXNSb290Tm9kZTpmdW5jdGlvbih0KXtyZXR1cm4vKGh0bWx8Ym9keSkvaS50ZXN0KHQudGFnTmFtZSl8fHQ9PT10aGlzLmRvY3VtZW50WzBdfSxfZ2V0UGFyZW50T2Zmc2V0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vZmZzZXRQYXJlbnQub2Zmc2V0KCksaT10aGlzLmRvY3VtZW50WzBdO3JldHVyblwiYWJzb2x1dGVcIj09PXRoaXMuY3NzUG9zaXRpb24mJnRoaXMuc2Nyb2xsUGFyZW50WzBdIT09aSYmdC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSx0aGlzLm9mZnNldFBhcmVudFswXSkmJihlLmxlZnQrPXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSxlLnRvcCs9dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkpLHRoaXMuX2lzUm9vdE5vZGUodGhpcy5vZmZzZXRQYXJlbnRbMF0pJiYoZT17dG9wOjAsbGVmdDowfSkse3RvcDplLnRvcCsocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApfHwwKSxsZWZ0OmUubGVmdCsocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpLDEwKXx8MCl9fSxfZ2V0UmVsYXRpdmVPZmZzZXQ6ZnVuY3Rpb24oKXtpZihcInJlbGF0aXZlXCIhPT10aGlzLmNzc1Bvc2l0aW9uKXJldHVybnt0b3A6MCxsZWZ0OjB9O3ZhciB0PXRoaXMuZWxlbWVudC5wb3NpdGlvbigpLGU9dGhpcy5faXNSb290Tm9kZSh0aGlzLnNjcm9sbFBhcmVudFswXSk7cmV0dXJue3RvcDp0LnRvcC0ocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKFwidG9wXCIpLDEwKXx8MCkrKGU/MDp0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSksbGVmdDp0LmxlZnQtKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcyhcImxlZnRcIiksMTApfHwwKSsoZT8wOnRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSl9XG59LF9jYWNoZU1hcmdpbnM6ZnVuY3Rpb24oKXt0aGlzLm1hcmdpbnM9e2xlZnQ6cGFyc2VJbnQodGhpcy5lbGVtZW50LmNzcyhcIm1hcmdpbkxlZnRcIiksMTApfHwwLHRvcDpwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKFwibWFyZ2luVG9wXCIpLDEwKXx8MCxyaWdodDpwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKFwibWFyZ2luUmlnaHRcIiksMTApfHwwLGJvdHRvbTpwYXJzZUludCh0aGlzLmVsZW1lbnQuY3NzKFwibWFyZ2luQm90dG9tXCIpLDEwKXx8MH19LF9jYWNoZUhlbHBlclByb3BvcnRpb25zOmZ1bmN0aW9uKCl7dGhpcy5oZWxwZXJQcm9wb3J0aW9ucz17d2lkdGg6dGhpcy5oZWxwZXIub3V0ZXJXaWR0aCgpLGhlaWdodDp0aGlzLmhlbHBlci5vdXRlckhlaWdodCgpfX0sX3NldENvbnRhaW5tZW50OmZ1bmN0aW9uKCl7dmFyIGUsaSxzLG49dGhpcy5vcHRpb25zLG89dGhpcy5kb2N1bWVudFswXTtyZXR1cm4gdGhpcy5yZWxhdGl2ZUNvbnRhaW5lcj1udWxsLG4uY29udGFpbm1lbnQ/XCJ3aW5kb3dcIj09PW4uY29udGFpbm1lbnQ/KHRoaXMuY29udGFpbm1lbnQ9W3Qod2luZG93KS5zY3JvbGxMZWZ0KCktdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdC10aGlzLm9mZnNldC5wYXJlbnQubGVmdCx0KHdpbmRvdykuc2Nyb2xsVG9wKCktdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3AsdCh3aW5kb3cpLnNjcm9sbExlZnQoKSt0KHdpbmRvdykud2lkdGgoKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LHQod2luZG93KS5zY3JvbGxUb3AoKSsodCh3aW5kb3cpLmhlaWdodCgpfHxvLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LXRoaXMubWFyZ2lucy50b3BdLHZvaWQgMCk6XCJkb2N1bWVudFwiPT09bi5jb250YWlubWVudD8odGhpcy5jb250YWlubWVudD1bMCwwLHQobykud2lkdGgoKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LCh0KG8pLmhlaWdodCgpfHxvLmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQpLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LXRoaXMubWFyZ2lucy50b3BdLHZvaWQgMCk6bi5jb250YWlubWVudC5jb25zdHJ1Y3Rvcj09PUFycmF5Pyh0aGlzLmNvbnRhaW5tZW50PW4uY29udGFpbm1lbnQsdm9pZCAwKTooXCJwYXJlbnRcIj09PW4uY29udGFpbm1lbnQmJihuLmNvbnRhaW5tZW50PXRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUpLGk9dChuLmNvbnRhaW5tZW50KSxzPWlbMF0scyYmKGU9LyhzY3JvbGx8YXV0bykvLnRlc3QoaS5jc3MoXCJvdmVyZmxvd1wiKSksdGhpcy5jb250YWlubWVudD1bKHBhcnNlSW50KGkuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpLDEwKXx8MCkrKHBhcnNlSW50KGkuY3NzKFwicGFkZGluZ0xlZnRcIiksMTApfHwwKSwocGFyc2VJbnQoaS5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwxMCl8fDApKyhwYXJzZUludChpLmNzcyhcInBhZGRpbmdUb3BcIiksMTApfHwwKSwoZT9NYXRoLm1heChzLnNjcm9sbFdpZHRoLHMub2Zmc2V0V2lkdGgpOnMub2Zmc2V0V2lkdGgpLShwYXJzZUludChpLmNzcyhcImJvcmRlclJpZ2h0V2lkdGhcIiksMTApfHwwKS0ocGFyc2VJbnQoaS5jc3MoXCJwYWRkaW5nUmlnaHRcIiksMTApfHwwKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LXRoaXMubWFyZ2lucy5yaWdodCwoZT9NYXRoLm1heChzLnNjcm9sbEhlaWdodCxzLm9mZnNldEhlaWdodCk6cy5vZmZzZXRIZWlnaHQpLShwYXJzZUludChpLmNzcyhcImJvcmRlckJvdHRvbVdpZHRoXCIpLDEwKXx8MCktKHBhcnNlSW50KGkuY3NzKFwicGFkZGluZ0JvdHRvbVwiKSwxMCl8fDApLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LXRoaXMubWFyZ2lucy50b3AtdGhpcy5tYXJnaW5zLmJvdHRvbV0sdGhpcy5yZWxhdGl2ZUNvbnRhaW5lcj1pKSx2b2lkIDApOih0aGlzLmNvbnRhaW5tZW50PW51bGwsdm9pZCAwKX0sX2NvbnZlcnRQb3NpdGlvblRvOmZ1bmN0aW9uKHQsZSl7ZXx8KGU9dGhpcy5wb3NpdGlvbik7dmFyIGk9XCJhYnNvbHV0ZVwiPT09dD8xOi0xLHM9dGhpcy5faXNSb290Tm9kZSh0aGlzLnNjcm9sbFBhcmVudFswXSk7cmV0dXJue3RvcDplLnRvcCt0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3AqaSt0aGlzLm9mZnNldC5wYXJlbnQudG9wKmktKFwiZml4ZWRcIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMub2Zmc2V0LnNjcm9sbC50b3A6cz8wOnRoaXMub2Zmc2V0LnNjcm9sbC50b3ApKmksbGVmdDplLmxlZnQrdGhpcy5vZmZzZXQucmVsYXRpdmUubGVmdCppK3RoaXMub2Zmc2V0LnBhcmVudC5sZWZ0KmktKFwiZml4ZWRcIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMub2Zmc2V0LnNjcm9sbC5sZWZ0OnM/MDp0aGlzLm9mZnNldC5zY3JvbGwubGVmdCkqaX19LF9nZW5lcmF0ZVBvc2l0aW9uOmZ1bmN0aW9uKHQsZSl7dmFyIGkscyxuLG8sYT10aGlzLm9wdGlvbnMscj10aGlzLl9pc1Jvb3ROb2RlKHRoaXMuc2Nyb2xsUGFyZW50WzBdKSxoPXQucGFnZVgsbD10LnBhZ2VZO3JldHVybiByJiZ0aGlzLm9mZnNldC5zY3JvbGx8fCh0aGlzLm9mZnNldC5zY3JvbGw9e3RvcDp0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxUb3AoKSxsZWZ0OnRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKX0pLGUmJih0aGlzLmNvbnRhaW5tZW50JiYodGhpcy5yZWxhdGl2ZUNvbnRhaW5lcj8ocz10aGlzLnJlbGF0aXZlQ29udGFpbmVyLm9mZnNldCgpLGk9W3RoaXMuY29udGFpbm1lbnRbMF0rcy5sZWZ0LHRoaXMuY29udGFpbm1lbnRbMV0rcy50b3AsdGhpcy5jb250YWlubWVudFsyXStzLmxlZnQsdGhpcy5jb250YWlubWVudFszXStzLnRvcF0pOmk9dGhpcy5jb250YWlubWVudCx0LnBhZ2VYLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ8aVswXSYmKGg9aVswXSt0aGlzLm9mZnNldC5jbGljay5sZWZ0KSx0LnBhZ2VZLXRoaXMub2Zmc2V0LmNsaWNrLnRvcDxpWzFdJiYobD1pWzFdK3RoaXMub2Zmc2V0LmNsaWNrLnRvcCksdC5wYWdlWC10aGlzLm9mZnNldC5jbGljay5sZWZ0PmlbMl0mJihoPWlbMl0rdGhpcy5vZmZzZXQuY2xpY2subGVmdCksdC5wYWdlWS10aGlzLm9mZnNldC5jbGljay50b3A+aVszXSYmKGw9aVszXSt0aGlzLm9mZnNldC5jbGljay50b3ApKSxhLmdyaWQmJihuPWEuZ3JpZFsxXT90aGlzLm9yaWdpbmFsUGFnZVkrTWF0aC5yb3VuZCgobC10aGlzLm9yaWdpbmFsUGFnZVkpL2EuZ3JpZFsxXSkqYS5ncmlkWzFdOnRoaXMub3JpZ2luYWxQYWdlWSxsPWk/bi10aGlzLm9mZnNldC5jbGljay50b3A+PWlbMV18fG4tdGhpcy5vZmZzZXQuY2xpY2sudG9wPmlbM10/bjpuLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49aVsxXT9uLWEuZ3JpZFsxXTpuK2EuZ3JpZFsxXTpuLG89YS5ncmlkWzBdP3RoaXMub3JpZ2luYWxQYWdlWCtNYXRoLnJvdW5kKChoLXRoaXMub3JpZ2luYWxQYWdlWCkvYS5ncmlkWzBdKSphLmdyaWRbMF06dGhpcy5vcmlnaW5hbFBhZ2VYLGg9aT9vLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ+PWlbMF18fG8tdGhpcy5vZmZzZXQuY2xpY2subGVmdD5pWzJdP286by10aGlzLm9mZnNldC5jbGljay5sZWZ0Pj1pWzBdP28tYS5ncmlkWzBdOm8rYS5ncmlkWzBdOm8pLFwieVwiPT09YS5heGlzJiYoaD10aGlzLm9yaWdpbmFsUGFnZVgpLFwieFwiPT09YS5heGlzJiYobD10aGlzLm9yaWdpbmFsUGFnZVkpKSx7dG9wOmwtdGhpcy5vZmZzZXQuY2xpY2sudG9wLXRoaXMub2Zmc2V0LnJlbGF0aXZlLnRvcC10aGlzLm9mZnNldC5wYXJlbnQudG9wKyhcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLm9mZnNldC5zY3JvbGwudG9wOnI/MDp0aGlzLm9mZnNldC5zY3JvbGwudG9wKSxsZWZ0OmgtdGhpcy5vZmZzZXQuY2xpY2subGVmdC10aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0LXRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0KyhcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLm9mZnNldC5zY3JvbGwubGVmdDpyPzA6dGhpcy5vZmZzZXQuc2Nyb2xsLmxlZnQpfX0sX2NsZWFyOmZ1bmN0aW9uKCl7dGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5oZWxwZXIsXCJ1aS1kcmFnZ2FibGUtZHJhZ2dpbmdcIiksdGhpcy5oZWxwZXJbMF09PT10aGlzLmVsZW1lbnRbMF18fHRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbHx8dGhpcy5oZWxwZXIucmVtb3ZlKCksdGhpcy5oZWxwZXI9bnVsbCx0aGlzLmNhbmNlbEhlbHBlclJlbW92YWw9ITEsdGhpcy5kZXN0cm95T25DbGVhciYmdGhpcy5kZXN0cm95KCl9LF90cmlnZ2VyOmZ1bmN0aW9uKGUsaSxzKXtyZXR1cm4gcz1zfHx0aGlzLl91aUhhc2goKSx0LnVpLnBsdWdpbi5jYWxsKHRoaXMsZSxbaSxzLHRoaXNdLCEwKSwvXihkcmFnfHN0YXJ0fHN0b3ApLy50ZXN0KGUpJiYodGhpcy5wb3NpdGlvbkFicz10aGlzLl9jb252ZXJ0UG9zaXRpb25UbyhcImFic29sdXRlXCIpLHMub2Zmc2V0PXRoaXMucG9zaXRpb25BYnMpLHQuV2lkZ2V0LnByb3RvdHlwZS5fdHJpZ2dlci5jYWxsKHRoaXMsZSxpLHMpfSxwbHVnaW5zOnt9LF91aUhhc2g6ZnVuY3Rpb24oKXtyZXR1cm57aGVscGVyOnRoaXMuaGVscGVyLHBvc2l0aW9uOnRoaXMucG9zaXRpb24sb3JpZ2luYWxQb3NpdGlvbjp0aGlzLm9yaWdpbmFsUG9zaXRpb24sb2Zmc2V0OnRoaXMucG9zaXRpb25BYnN9fX0pLHQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLFwiY29ubmVjdFRvU29ydGFibGVcIix7c3RhcnQ6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXQuZXh0ZW5kKHt9LGkse2l0ZW06cy5lbGVtZW50fSk7cy5zb3J0YWJsZXM9W10sdChzLm9wdGlvbnMuY29ubmVjdFRvU29ydGFibGUpLmVhY2goZnVuY3Rpb24oKXt2YXIgaT10KHRoaXMpLnNvcnRhYmxlKFwiaW5zdGFuY2VcIik7aSYmIWkub3B0aW9ucy5kaXNhYmxlZCYmKHMuc29ydGFibGVzLnB1c2goaSksaS5yZWZyZXNoUG9zaXRpb25zKCksaS5fdHJpZ2dlcihcImFjdGl2YXRlXCIsZSxuKSl9KX0sc3RvcDpmdW5jdGlvbihlLGkscyl7dmFyIG49dC5leHRlbmQoe30saSx7aXRlbTpzLmVsZW1lbnR9KTtzLmNhbmNlbEhlbHBlclJlbW92YWw9ITEsdC5lYWNoKHMuc29ydGFibGVzLGZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0LmlzT3Zlcj8odC5pc092ZXI9MCxzLmNhbmNlbEhlbHBlclJlbW92YWw9ITAsdC5jYW5jZWxIZWxwZXJSZW1vdmFsPSExLHQuX3N0b3JlZENTUz17cG9zaXRpb246dC5wbGFjZWhvbGRlci5jc3MoXCJwb3NpdGlvblwiKSx0b3A6dC5wbGFjZWhvbGRlci5jc3MoXCJ0b3BcIiksbGVmdDp0LnBsYWNlaG9sZGVyLmNzcyhcImxlZnRcIil9LHQuX21vdXNlU3RvcChlKSx0Lm9wdGlvbnMuaGVscGVyPXQub3B0aW9ucy5faGVscGVyKToodC5jYW5jZWxIZWxwZXJSZW1vdmFsPSEwLHQuX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsZSxuKSl9KX0sZHJhZzpmdW5jdGlvbihlLGkscyl7dC5lYWNoKHMuc29ydGFibGVzLGZ1bmN0aW9uKCl7dmFyIG49ITEsbz10aGlzO28ucG9zaXRpb25BYnM9cy5wb3NpdGlvbkFicyxvLmhlbHBlclByb3BvcnRpb25zPXMuaGVscGVyUHJvcG9ydGlvbnMsby5vZmZzZXQuY2xpY2s9cy5vZmZzZXQuY2xpY2ssby5faW50ZXJzZWN0c1dpdGgoby5jb250YWluZXJDYWNoZSkmJihuPSEwLHQuZWFjaChzLnNvcnRhYmxlcyxmdW5jdGlvbigpe3JldHVybiB0aGlzLnBvc2l0aW9uQWJzPXMucG9zaXRpb25BYnMsdGhpcy5oZWxwZXJQcm9wb3J0aW9ucz1zLmhlbHBlclByb3BvcnRpb25zLHRoaXMub2Zmc2V0LmNsaWNrPXMub2Zmc2V0LmNsaWNrLHRoaXMhPT1vJiZ0aGlzLl9pbnRlcnNlY3RzV2l0aCh0aGlzLmNvbnRhaW5lckNhY2hlKSYmdC5jb250YWlucyhvLmVsZW1lbnRbMF0sdGhpcy5lbGVtZW50WzBdKSYmKG49ITEpLG59KSksbj8oby5pc092ZXJ8fChvLmlzT3Zlcj0xLHMuX3BhcmVudD1pLmhlbHBlci5wYXJlbnQoKSxvLmN1cnJlbnRJdGVtPWkuaGVscGVyLmFwcGVuZFRvKG8uZWxlbWVudCkuZGF0YShcInVpLXNvcnRhYmxlLWl0ZW1cIiwhMCksby5vcHRpb25zLl9oZWxwZXI9by5vcHRpb25zLmhlbHBlcixvLm9wdGlvbnMuaGVscGVyPWZ1bmN0aW9uKCl7cmV0dXJuIGkuaGVscGVyWzBdfSxlLnRhcmdldD1vLmN1cnJlbnRJdGVtWzBdLG8uX21vdXNlQ2FwdHVyZShlLCEwKSxvLl9tb3VzZVN0YXJ0KGUsITAsITApLG8ub2Zmc2V0LmNsaWNrLnRvcD1zLm9mZnNldC5jbGljay50b3Asby5vZmZzZXQuY2xpY2subGVmdD1zLm9mZnNldC5jbGljay5sZWZ0LG8ub2Zmc2V0LnBhcmVudC5sZWZ0LT1zLm9mZnNldC5wYXJlbnQubGVmdC1vLm9mZnNldC5wYXJlbnQubGVmdCxvLm9mZnNldC5wYXJlbnQudG9wLT1zLm9mZnNldC5wYXJlbnQudG9wLW8ub2Zmc2V0LnBhcmVudC50b3Ascy5fdHJpZ2dlcihcInRvU29ydGFibGVcIixlKSxzLmRyb3BwZWQ9by5lbGVtZW50LHQuZWFjaChzLnNvcnRhYmxlcyxmdW5jdGlvbigpe3RoaXMucmVmcmVzaFBvc2l0aW9ucygpfSkscy5jdXJyZW50SXRlbT1zLmVsZW1lbnQsby5mcm9tT3V0c2lkZT1zKSxvLmN1cnJlbnRJdGVtJiYoby5fbW91c2VEcmFnKGUpLGkucG9zaXRpb249by5wb3NpdGlvbikpOm8uaXNPdmVyJiYoby5pc092ZXI9MCxvLmNhbmNlbEhlbHBlclJlbW92YWw9ITAsby5vcHRpb25zLl9yZXZlcnQ9by5vcHRpb25zLnJldmVydCxvLm9wdGlvbnMucmV2ZXJ0PSExLG8uX3RyaWdnZXIoXCJvdXRcIixlLG8uX3VpSGFzaChvKSksby5fbW91c2VTdG9wKGUsITApLG8ub3B0aW9ucy5yZXZlcnQ9by5vcHRpb25zLl9yZXZlcnQsby5vcHRpb25zLmhlbHBlcj1vLm9wdGlvbnMuX2hlbHBlcixvLnBsYWNlaG9sZGVyJiZvLnBsYWNlaG9sZGVyLnJlbW92ZSgpLGkuaGVscGVyLmFwcGVuZFRvKHMuX3BhcmVudCkscy5fcmVmcmVzaE9mZnNldHMoZSksaS5wb3NpdGlvbj1zLl9nZW5lcmF0ZVBvc2l0aW9uKGUsITApLHMuX3RyaWdnZXIoXCJmcm9tU29ydGFibGVcIixlKSxzLmRyb3BwZWQ9ITEsdC5lYWNoKHMuc29ydGFibGVzLGZ1bmN0aW9uKCl7dGhpcy5yZWZyZXNoUG9zaXRpb25zKCl9KSl9KX19KSx0LnVpLnBsdWdpbi5hZGQoXCJkcmFnZ2FibGVcIixcImN1cnNvclwiLHtzdGFydDpmdW5jdGlvbihlLGkscyl7dmFyIG49dChcImJvZHlcIiksbz1zLm9wdGlvbnM7bi5jc3MoXCJjdXJzb3JcIikmJihvLl9jdXJzb3I9bi5jc3MoXCJjdXJzb3JcIikpLG4uY3NzKFwiY3Vyc29yXCIsby5jdXJzb3IpfSxzdG9wOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj1zLm9wdGlvbnM7bi5fY3Vyc29yJiZ0KFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIixuLl9jdXJzb3IpfX0pLHQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLFwib3BhY2l0eVwiLHtzdGFydDpmdW5jdGlvbihlLGkscyl7dmFyIG49dChpLmhlbHBlciksbz1zLm9wdGlvbnM7bi5jc3MoXCJvcGFjaXR5XCIpJiYoby5fb3BhY2l0eT1uLmNzcyhcIm9wYWNpdHlcIikpLG4uY3NzKFwib3BhY2l0eVwiLG8ub3BhY2l0eSl9LHN0b3A6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXMub3B0aW9ucztuLl9vcGFjaXR5JiZ0KGkuaGVscGVyKS5jc3MoXCJvcGFjaXR5XCIsbi5fb3BhY2l0eSl9fSksdC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsXCJzY3JvbGxcIix7c3RhcnQ6ZnVuY3Rpb24odCxlLGkpe2kuc2Nyb2xsUGFyZW50Tm90SGlkZGVufHwoaS5zY3JvbGxQYXJlbnROb3RIaWRkZW49aS5oZWxwZXIuc2Nyb2xsUGFyZW50KCExKSksaS5zY3JvbGxQYXJlbnROb3RIaWRkZW5bMF0hPT1pLmRvY3VtZW50WzBdJiZcIkhUTUxcIiE9PWkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuWzBdLnRhZ05hbWUmJihpLm92ZXJmbG93T2Zmc2V0PWkuc2Nyb2xsUGFyZW50Tm90SGlkZGVuLm9mZnNldCgpKX0sZHJhZzpmdW5jdGlvbihlLGkscyl7dmFyIG49cy5vcHRpb25zLG89ITEsYT1zLnNjcm9sbFBhcmVudE5vdEhpZGRlblswXSxyPXMuZG9jdW1lbnRbMF07YSE9PXImJlwiSFRNTFwiIT09YS50YWdOYW1lPyhuLmF4aXMmJlwieFwiPT09bi5heGlzfHwocy5vdmVyZmxvd09mZnNldC50b3ArYS5vZmZzZXRIZWlnaHQtZS5wYWdlWTxuLnNjcm9sbFNlbnNpdGl2aXR5P2Euc2Nyb2xsVG9wPW89YS5zY3JvbGxUb3Arbi5zY3JvbGxTcGVlZDplLnBhZ2VZLXMub3ZlcmZsb3dPZmZzZXQudG9wPG4uc2Nyb2xsU2Vuc2l0aXZpdHkmJihhLnNjcm9sbFRvcD1vPWEuc2Nyb2xsVG9wLW4uc2Nyb2xsU3BlZWQpKSxuLmF4aXMmJlwieVwiPT09bi5heGlzfHwocy5vdmVyZmxvd09mZnNldC5sZWZ0K2Eub2Zmc2V0V2lkdGgtZS5wYWdlWDxuLnNjcm9sbFNlbnNpdGl2aXR5P2Euc2Nyb2xsTGVmdD1vPWEuc2Nyb2xsTGVmdCtuLnNjcm9sbFNwZWVkOmUucGFnZVgtcy5vdmVyZmxvd09mZnNldC5sZWZ0PG4uc2Nyb2xsU2Vuc2l0aXZpdHkmJihhLnNjcm9sbExlZnQ9bz1hLnNjcm9sbExlZnQtbi5zY3JvbGxTcGVlZCkpKToobi5heGlzJiZcInhcIj09PW4uYXhpc3x8KGUucGFnZVktdChyKS5zY3JvbGxUb3AoKTxuLnNjcm9sbFNlbnNpdGl2aXR5P289dChyKS5zY3JvbGxUb3AodChyKS5zY3JvbGxUb3AoKS1uLnNjcm9sbFNwZWVkKTp0KHdpbmRvdykuaGVpZ2h0KCktKGUucGFnZVktdChyKS5zY3JvbGxUb3AoKSk8bi5zY3JvbGxTZW5zaXRpdml0eSYmKG89dChyKS5zY3JvbGxUb3AodChyKS5zY3JvbGxUb3AoKStuLnNjcm9sbFNwZWVkKSkpLG4uYXhpcyYmXCJ5XCI9PT1uLmF4aXN8fChlLnBhZ2VYLXQocikuc2Nyb2xsTGVmdCgpPG4uc2Nyb2xsU2Vuc2l0aXZpdHk/bz10KHIpLnNjcm9sbExlZnQodChyKS5zY3JvbGxMZWZ0KCktbi5zY3JvbGxTcGVlZCk6dCh3aW5kb3cpLndpZHRoKCktKGUucGFnZVgtdChyKS5zY3JvbGxMZWZ0KCkpPG4uc2Nyb2xsU2Vuc2l0aXZpdHkmJihvPXQocikuc2Nyb2xsTGVmdCh0KHIpLnNjcm9sbExlZnQoKStuLnNjcm9sbFNwZWVkKSkpKSxvIT09ITEmJnQudWkuZGRtYW5hZ2VyJiYhbi5kcm9wQmVoYXZpb3VyJiZ0LnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyhzLGUpfX0pLHQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLFwic25hcFwiLHtzdGFydDpmdW5jdGlvbihlLGkscyl7dmFyIG49cy5vcHRpb25zO3Muc25hcEVsZW1lbnRzPVtdLHQobi5zbmFwLmNvbnN0cnVjdG9yIT09U3RyaW5nP24uc25hcC5pdGVtc3x8XCI6ZGF0YSh1aS1kcmFnZ2FibGUpXCI6bi5zbmFwKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxpPWUub2Zmc2V0KCk7dGhpcyE9PXMuZWxlbWVudFswXSYmcy5zbmFwRWxlbWVudHMucHVzaCh7aXRlbTp0aGlzLHdpZHRoOmUub3V0ZXJXaWR0aCgpLGhlaWdodDplLm91dGVySGVpZ2h0KCksdG9wOmkudG9wLGxlZnQ6aS5sZWZ0fSl9KX0sZHJhZzpmdW5jdGlvbihlLGkscyl7dmFyIG4sbyxhLHIsaCxsLGMsdSxkLHAsZj1zLm9wdGlvbnMsZz1mLnNuYXBUb2xlcmFuY2UsbT1pLm9mZnNldC5sZWZ0LF89bStzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLHY9aS5vZmZzZXQudG9wLGI9ditzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodDtmb3IoZD1zLnNuYXBFbGVtZW50cy5sZW5ndGgtMTtkPj0wO2QtLSloPXMuc25hcEVsZW1lbnRzW2RdLmxlZnQtcy5tYXJnaW5zLmxlZnQsbD1oK3Muc25hcEVsZW1lbnRzW2RdLndpZHRoLGM9cy5zbmFwRWxlbWVudHNbZF0udG9wLXMubWFyZ2lucy50b3AsdT1jK3Muc25hcEVsZW1lbnRzW2RdLmhlaWdodCxoLWc+X3x8bT5sK2d8fGMtZz5ifHx2PnUrZ3x8IXQuY29udGFpbnMocy5zbmFwRWxlbWVudHNbZF0uaXRlbS5vd25lckRvY3VtZW50LHMuc25hcEVsZW1lbnRzW2RdLml0ZW0pPyhzLnNuYXBFbGVtZW50c1tkXS5zbmFwcGluZyYmcy5vcHRpb25zLnNuYXAucmVsZWFzZSYmcy5vcHRpb25zLnNuYXAucmVsZWFzZS5jYWxsKHMuZWxlbWVudCxlLHQuZXh0ZW5kKHMuX3VpSGFzaCgpLHtzbmFwSXRlbTpzLnNuYXBFbGVtZW50c1tkXS5pdGVtfSkpLHMuc25hcEVsZW1lbnRzW2RdLnNuYXBwaW5nPSExKTooXCJpbm5lclwiIT09Zi5zbmFwTW9kZSYmKG49Zz49TWF0aC5hYnMoYy1iKSxvPWc+PU1hdGguYWJzKHUtdiksYT1nPj1NYXRoLmFicyhoLV8pLHI9Zz49TWF0aC5hYnMobC1tKSxuJiYoaS5wb3NpdGlvbi50b3A9cy5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLHt0b3A6Yy1zLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxsZWZ0OjB9KS50b3ApLG8mJihpLnBvc2l0aW9uLnRvcD1zLl9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIse3RvcDp1LGxlZnQ6MH0pLnRvcCksYSYmKGkucG9zaXRpb24ubGVmdD1zLl9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIse3RvcDowLGxlZnQ6aC1zLmhlbHBlclByb3BvcnRpb25zLndpZHRofSkubGVmdCksciYmKGkucG9zaXRpb24ubGVmdD1zLl9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIse3RvcDowLGxlZnQ6bH0pLmxlZnQpKSxwPW58fG98fGF8fHIsXCJvdXRlclwiIT09Zi5zbmFwTW9kZSYmKG49Zz49TWF0aC5hYnMoYy12KSxvPWc+PU1hdGguYWJzKHUtYiksYT1nPj1NYXRoLmFicyhoLW0pLHI9Zz49TWF0aC5hYnMobC1fKSxuJiYoaS5wb3NpdGlvbi50b3A9cy5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLHt0b3A6YyxsZWZ0OjB9KS50b3ApLG8mJihpLnBvc2l0aW9uLnRvcD1zLl9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIse3RvcDp1LXMuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LGxlZnQ6MH0pLnRvcCksYSYmKGkucG9zaXRpb24ubGVmdD1zLl9jb252ZXJ0UG9zaXRpb25UbyhcInJlbGF0aXZlXCIse3RvcDowLGxlZnQ6aH0pLmxlZnQpLHImJihpLnBvc2l0aW9uLmxlZnQ9cy5fY29udmVydFBvc2l0aW9uVG8oXCJyZWxhdGl2ZVwiLHt0b3A6MCxsZWZ0Omwtcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aH0pLmxlZnQpKSwhcy5zbmFwRWxlbWVudHNbZF0uc25hcHBpbmcmJihufHxvfHxhfHxyfHxwKSYmcy5vcHRpb25zLnNuYXAuc25hcCYmcy5vcHRpb25zLnNuYXAuc25hcC5jYWxsKHMuZWxlbWVudCxlLHQuZXh0ZW5kKHMuX3VpSGFzaCgpLHtzbmFwSXRlbTpzLnNuYXBFbGVtZW50c1tkXS5pdGVtfSkpLHMuc25hcEVsZW1lbnRzW2RdLnNuYXBwaW5nPW58fG98fGF8fHJ8fHApfX0pLHQudWkucGx1Z2luLmFkZChcImRyYWdnYWJsZVwiLFwic3RhY2tcIix7c3RhcnQ6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuLG89cy5vcHRpb25zLGE9dC5tYWtlQXJyYXkodChvLnN0YWNrKSkuc29ydChmdW5jdGlvbihlLGkpe3JldHVybihwYXJzZUludCh0KGUpLmNzcyhcInpJbmRleFwiKSwxMCl8fDApLShwYXJzZUludCh0KGkpLmNzcyhcInpJbmRleFwiKSwxMCl8fDApfSk7YS5sZW5ndGgmJihuPXBhcnNlSW50KHQoYVswXSkuY3NzKFwiekluZGV4XCIpLDEwKXx8MCx0KGEpLmVhY2goZnVuY3Rpb24oZSl7dCh0aGlzKS5jc3MoXCJ6SW5kZXhcIixuK2UpfSksdGhpcy5jc3MoXCJ6SW5kZXhcIixuK2EubGVuZ3RoKSl9fSksdC51aS5wbHVnaW4uYWRkKFwiZHJhZ2dhYmxlXCIsXCJ6SW5kZXhcIix7c3RhcnQ6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuPXQoaS5oZWxwZXIpLG89cy5vcHRpb25zO24uY3NzKFwiekluZGV4XCIpJiYoby5fekluZGV4PW4uY3NzKFwiekluZGV4XCIpKSxuLmNzcyhcInpJbmRleFwiLG8uekluZGV4KX0sc3RvcDpmdW5jdGlvbihlLGkscyl7dmFyIG49cy5vcHRpb25zO24uX3pJbmRleCYmdChpLmhlbHBlcikuY3NzKFwiekluZGV4XCIsbi5fekluZGV4KX19KSx0LnVpLmRyYWdnYWJsZSx0LndpZGdldChcInVpLnJlc2l6YWJsZVwiLHQudWkubW91c2Use3ZlcnNpb246XCIxLjEyLjFcIix3aWRnZXRFdmVudFByZWZpeDpcInJlc2l6ZVwiLG9wdGlvbnM6e2Fsc29SZXNpemU6ITEsYW5pbWF0ZTohMSxhbmltYXRlRHVyYXRpb246XCJzbG93XCIsYW5pbWF0ZUVhc2luZzpcInN3aW5nXCIsYXNwZWN0UmF0aW86ITEsYXV0b0hpZGU6ITEsY2xhc3Nlczp7XCJ1aS1yZXNpemFibGUtc2VcIjpcInVpLWljb24gdWktaWNvbi1ncmlwc21hbGwtZGlhZ29uYWwtc2VcIn0sY29udGFpbm1lbnQ6ITEsZ2hvc3Q6ITEsZ3JpZDohMSxoYW5kbGVzOlwiZSxzLHNlXCIsaGVscGVyOiExLG1heEhlaWdodDpudWxsLG1heFdpZHRoOm51bGwsbWluSGVpZ2h0OjEwLG1pbldpZHRoOjEwLHpJbmRleDo5MCxyZXNpemU6bnVsbCxzdGFydDpudWxsLHN0b3A6bnVsbH0sX251bTpmdW5jdGlvbih0KXtyZXR1cm4gcGFyc2VGbG9hdCh0KXx8MH0sX2lzTnVtYmVyOmZ1bmN0aW9uKHQpe3JldHVybiFpc05hTihwYXJzZUZsb2F0KHQpKX0sX2hhc1Njcm9sbDpmdW5jdGlvbihlLGkpe2lmKFwiaGlkZGVuXCI9PT10KGUpLmNzcyhcIm92ZXJmbG93XCIpKXJldHVybiExO3ZhciBzPWkmJlwibGVmdFwiPT09aT9cInNjcm9sbExlZnRcIjpcInNjcm9sbFRvcFwiLG49ITE7cmV0dXJuIGVbc10+MD8hMDooZVtzXT0xLG49ZVtzXT4wLGVbc109MCxuKX0sX2NyZWF0ZTpmdW5jdGlvbigpe3ZhciBlLGk9dGhpcy5vcHRpb25zLHM9dGhpczt0aGlzLl9hZGRDbGFzcyhcInVpLXJlc2l6YWJsZVwiKSx0LmV4dGVuZCh0aGlzLHtfYXNwZWN0UmF0aW86ISFpLmFzcGVjdFJhdGlvLGFzcGVjdFJhdGlvOmkuYXNwZWN0UmF0aW8sb3JpZ2luYWxFbGVtZW50OnRoaXMuZWxlbWVudCxfcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50czpbXSxfaGVscGVyOmkuaGVscGVyfHxpLmdob3N0fHxpLmFuaW1hdGU/aS5oZWxwZXJ8fFwidWktcmVzaXphYmxlLWhlbHBlclwiOm51bGx9KSx0aGlzLmVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL14oY2FudmFzfHRleHRhcmVhfGlucHV0fHNlbGVjdHxidXR0b258aW1nKSQvaSkmJih0aGlzLmVsZW1lbnQud3JhcCh0KFwiPGRpdiBjbGFzcz0ndWktd3JhcHBlcicgc3R5bGU9J292ZXJmbG93OiBoaWRkZW47Jz48L2Rpdj5cIikuY3NzKHtwb3NpdGlvbjp0aGlzLmVsZW1lbnQuY3NzKFwicG9zaXRpb25cIiksd2lkdGg6dGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSxoZWlnaHQ6dGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCksdG9wOnRoaXMuZWxlbWVudC5jc3MoXCJ0b3BcIiksbGVmdDp0aGlzLmVsZW1lbnQuY3NzKFwibGVmdFwiKX0pKSx0aGlzLmVsZW1lbnQ9dGhpcy5lbGVtZW50LnBhcmVudCgpLmRhdGEoXCJ1aS1yZXNpemFibGVcIix0aGlzLmVsZW1lbnQucmVzaXphYmxlKFwiaW5zdGFuY2VcIikpLHRoaXMuZWxlbWVudElzV3JhcHBlcj0hMCxlPXttYXJnaW5Ub3A6dGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKFwibWFyZ2luVG9wXCIpLG1hcmdpblJpZ2h0OnRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyhcIm1hcmdpblJpZ2h0XCIpLG1hcmdpbkJvdHRvbTp0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJtYXJnaW5Cb3R0b21cIiksbWFyZ2luTGVmdDp0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJtYXJnaW5MZWZ0XCIpfSx0aGlzLmVsZW1lbnQuY3NzKGUpLHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyhcIm1hcmdpblwiLDApLHRoaXMub3JpZ2luYWxSZXNpemVTdHlsZT10aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJyZXNpemVcIiksdGhpcy5vcmlnaW5hbEVsZW1lbnQuY3NzKFwicmVzaXplXCIsXCJub25lXCIpLHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMucHVzaCh0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3Moe3Bvc2l0aW9uOlwic3RhdGljXCIsem9vbToxLGRpc3BsYXk6XCJibG9ja1wifSkpLHRoaXMub3JpZ2luYWxFbGVtZW50LmNzcyhlKSx0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpKSx0aGlzLl9zZXR1cEhhbmRsZXMoKSxpLmF1dG9IaWRlJiZ0KHRoaXMuZWxlbWVudCkub24oXCJtb3VzZWVudGVyXCIsZnVuY3Rpb24oKXtpLmRpc2FibGVkfHwocy5fcmVtb3ZlQ2xhc3MoXCJ1aS1yZXNpemFibGUtYXV0b2hpZGVcIikscy5faGFuZGxlcy5zaG93KCkpfSkub24oXCJtb3VzZWxlYXZlXCIsZnVuY3Rpb24oKXtpLmRpc2FibGVkfHxzLnJlc2l6aW5nfHwocy5fYWRkQ2xhc3MoXCJ1aS1yZXNpemFibGUtYXV0b2hpZGVcIikscy5faGFuZGxlcy5oaWRlKCkpfSksdGhpcy5fbW91c2VJbml0KCl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5fbW91c2VEZXN0cm95KCk7dmFyIGUsaT1mdW5jdGlvbihlKXt0KGUpLnJlbW92ZURhdGEoXCJyZXNpemFibGVcIikucmVtb3ZlRGF0YShcInVpLXJlc2l6YWJsZVwiKS5vZmYoXCIucmVzaXphYmxlXCIpLmZpbmQoXCIudWktcmVzaXphYmxlLWhhbmRsZVwiKS5yZW1vdmUoKX07cmV0dXJuIHRoaXMuZWxlbWVudElzV3JhcHBlciYmKGkodGhpcy5lbGVtZW50KSxlPXRoaXMuZWxlbWVudCx0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3Moe3Bvc2l0aW9uOmUuY3NzKFwicG9zaXRpb25cIiksd2lkdGg6ZS5vdXRlcldpZHRoKCksaGVpZ2h0OmUub3V0ZXJIZWlnaHQoKSx0b3A6ZS5jc3MoXCJ0b3BcIiksbGVmdDplLmNzcyhcImxlZnRcIil9KS5pbnNlcnRBZnRlcihlKSxlLnJlbW92ZSgpKSx0aGlzLm9yaWdpbmFsRWxlbWVudC5jc3MoXCJyZXNpemVcIix0aGlzLm9yaWdpbmFsUmVzaXplU3R5bGUpLGkodGhpcy5vcmlnaW5hbEVsZW1lbnQpLHRoaXN9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXtzd2l0Y2godGhpcy5fc3VwZXIodCxlKSx0KXtjYXNlXCJoYW5kbGVzXCI6dGhpcy5fcmVtb3ZlSGFuZGxlcygpLHRoaXMuX3NldHVwSGFuZGxlcygpO2JyZWFrO2RlZmF1bHQ6fX0sX3NldHVwSGFuZGxlczpmdW5jdGlvbigpe3ZhciBlLGkscyxuLG8sYT10aGlzLm9wdGlvbnMscj10aGlzO2lmKHRoaXMuaGFuZGxlcz1hLmhhbmRsZXN8fCh0KFwiLnVpLXJlc2l6YWJsZS1oYW5kbGVcIix0aGlzLmVsZW1lbnQpLmxlbmd0aD97bjpcIi51aS1yZXNpemFibGUtblwiLGU6XCIudWktcmVzaXphYmxlLWVcIixzOlwiLnVpLXJlc2l6YWJsZS1zXCIsdzpcIi51aS1yZXNpemFibGUtd1wiLHNlOlwiLnVpLXJlc2l6YWJsZS1zZVwiLHN3OlwiLnVpLXJlc2l6YWJsZS1zd1wiLG5lOlwiLnVpLXJlc2l6YWJsZS1uZVwiLG53OlwiLnVpLXJlc2l6YWJsZS1ud1wifTpcImUscyxzZVwiKSx0aGlzLl9oYW5kbGVzPXQoKSx0aGlzLmhhbmRsZXMuY29uc3RydWN0b3I9PT1TdHJpbmcpZm9yKFwiYWxsXCI9PT10aGlzLmhhbmRsZXMmJih0aGlzLmhhbmRsZXM9XCJuLGUscyx3LHNlLHN3LG5lLG53XCIpLHM9dGhpcy5oYW5kbGVzLnNwbGl0KFwiLFwiKSx0aGlzLmhhbmRsZXM9e30saT0wO3MubGVuZ3RoPmk7aSsrKWU9dC50cmltKHNbaV0pLG49XCJ1aS1yZXNpemFibGUtXCIrZSxvPXQoXCI8ZGl2PlwiKSx0aGlzLl9hZGRDbGFzcyhvLFwidWktcmVzaXphYmxlLWhhbmRsZSBcIituKSxvLmNzcyh7ekluZGV4OmEuekluZGV4fSksdGhpcy5oYW5kbGVzW2VdPVwiLnVpLXJlc2l6YWJsZS1cIitlLHRoaXMuZWxlbWVudC5hcHBlbmQobyk7dGhpcy5fcmVuZGVyQXhpcz1mdW5jdGlvbihlKXt2YXIgaSxzLG4sbztlPWV8fHRoaXMuZWxlbWVudDtmb3IoaSBpbiB0aGlzLmhhbmRsZXMpdGhpcy5oYW5kbGVzW2ldLmNvbnN0cnVjdG9yPT09U3RyaW5nP3RoaXMuaGFuZGxlc1tpXT10aGlzLmVsZW1lbnQuY2hpbGRyZW4odGhpcy5oYW5kbGVzW2ldKS5maXJzdCgpLnNob3coKToodGhpcy5oYW5kbGVzW2ldLmpxdWVyeXx8dGhpcy5oYW5kbGVzW2ldLm5vZGVUeXBlKSYmKHRoaXMuaGFuZGxlc1tpXT10KHRoaXMuaGFuZGxlc1tpXSksdGhpcy5fb24odGhpcy5oYW5kbGVzW2ldLHttb3VzZWRvd246ci5fbW91c2VEb3dufSkpLHRoaXMuZWxlbWVudElzV3JhcHBlciYmdGhpcy5vcmlnaW5hbEVsZW1lbnRbMF0ubm9kZU5hbWUubWF0Y2goL14odGV4dGFyZWF8aW5wdXR8c2VsZWN0fGJ1dHRvbikkL2kpJiYocz10KHRoaXMuaGFuZGxlc1tpXSx0aGlzLmVsZW1lbnQpLG89L3N3fG5lfG53fHNlfG58cy8udGVzdChpKT9zLm91dGVySGVpZ2h0KCk6cy5vdXRlcldpZHRoKCksbj1bXCJwYWRkaW5nXCIsL25lfG53fG4vLnRlc3QoaSk/XCJUb3BcIjovc2V8c3d8cy8udGVzdChpKT9cIkJvdHRvbVwiOi9eZSQvLnRlc3QoaSk/XCJSaWdodFwiOlwiTGVmdFwiXS5qb2luKFwiXCIpLGUuY3NzKG4sbyksdGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemUoKSksdGhpcy5faGFuZGxlcz10aGlzLl9oYW5kbGVzLmFkZCh0aGlzLmhhbmRsZXNbaV0pfSx0aGlzLl9yZW5kZXJBeGlzKHRoaXMuZWxlbWVudCksdGhpcy5faGFuZGxlcz10aGlzLl9oYW5kbGVzLmFkZCh0aGlzLmVsZW1lbnQuZmluZChcIi51aS1yZXNpemFibGUtaGFuZGxlXCIpKSx0aGlzLl9oYW5kbGVzLmRpc2FibGVTZWxlY3Rpb24oKSx0aGlzLl9oYW5kbGVzLm9uKFwibW91c2VvdmVyXCIsZnVuY3Rpb24oKXtyLnJlc2l6aW5nfHwodGhpcy5jbGFzc05hbWUmJihvPXRoaXMuY2xhc3NOYW1lLm1hdGNoKC91aS1yZXNpemFibGUtKHNlfHN3fG5lfG53fG58ZXxzfHcpL2kpKSxyLmF4aXM9byYmb1sxXT9vWzFdOlwic2VcIil9KSxhLmF1dG9IaWRlJiYodGhpcy5faGFuZGxlcy5oaWRlKCksdGhpcy5fYWRkQ2xhc3MoXCJ1aS1yZXNpemFibGUtYXV0b2hpZGVcIikpfSxfcmVtb3ZlSGFuZGxlczpmdW5jdGlvbigpe3RoaXMuX2hhbmRsZXMucmVtb3ZlKCl9LF9tb3VzZUNhcHR1cmU6ZnVuY3Rpb24oZSl7dmFyIGkscyxuPSExO2ZvcihpIGluIHRoaXMuaGFuZGxlcylzPXQodGhpcy5oYW5kbGVzW2ldKVswXSwocz09PWUudGFyZ2V0fHx0LmNvbnRhaW5zKHMsZS50YXJnZXQpKSYmKG49ITApO3JldHVybiF0aGlzLm9wdGlvbnMuZGlzYWJsZWQmJm59LF9tb3VzZVN0YXJ0OmZ1bmN0aW9uKGUpe3ZhciBpLHMsbixvPXRoaXMub3B0aW9ucyxhPXRoaXMuZWxlbWVudDtyZXR1cm4gdGhpcy5yZXNpemluZz0hMCx0aGlzLl9yZW5kZXJQcm94eSgpLGk9dGhpcy5fbnVtKHRoaXMuaGVscGVyLmNzcyhcImxlZnRcIikpLHM9dGhpcy5fbnVtKHRoaXMuaGVscGVyLmNzcyhcInRvcFwiKSksby5jb250YWlubWVudCYmKGkrPXQoby5jb250YWlubWVudCkuc2Nyb2xsTGVmdCgpfHwwLHMrPXQoby5jb250YWlubWVudCkuc2Nyb2xsVG9wKCl8fDApLHRoaXMub2Zmc2V0PXRoaXMuaGVscGVyLm9mZnNldCgpLHRoaXMucG9zaXRpb249e2xlZnQ6aSx0b3A6c30sdGhpcy5zaXplPXRoaXMuX2hlbHBlcj97d2lkdGg6dGhpcy5oZWxwZXIud2lkdGgoKSxoZWlnaHQ6dGhpcy5oZWxwZXIuaGVpZ2h0KCl9Ont3aWR0aDphLndpZHRoKCksaGVpZ2h0OmEuaGVpZ2h0KCl9LHRoaXMub3JpZ2luYWxTaXplPXRoaXMuX2hlbHBlcj97d2lkdGg6YS5vdXRlcldpZHRoKCksaGVpZ2h0OmEub3V0ZXJIZWlnaHQoKX06e3dpZHRoOmEud2lkdGgoKSxoZWlnaHQ6YS5oZWlnaHQoKX0sdGhpcy5zaXplRGlmZj17d2lkdGg6YS5vdXRlcldpZHRoKCktYS53aWR0aCgpLGhlaWdodDphLm91dGVySGVpZ2h0KCktYS5oZWlnaHQoKX0sdGhpcy5vcmlnaW5hbFBvc2l0aW9uPXtsZWZ0OmksdG9wOnN9LHRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uPXtsZWZ0OmUucGFnZVgsdG9wOmUucGFnZVl9LHRoaXMuYXNwZWN0UmF0aW89XCJudW1iZXJcIj09dHlwZW9mIG8uYXNwZWN0UmF0aW8/by5hc3BlY3RSYXRpbzp0aGlzLm9yaWdpbmFsU2l6ZS53aWR0aC90aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHR8fDEsbj10KFwiLnVpLXJlc2l6YWJsZS1cIit0aGlzLmF4aXMpLmNzcyhcImN1cnNvclwiKSx0KFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIixcImF1dG9cIj09PW4/dGhpcy5heGlzK1wiLXJlc2l6ZVwiOm4pLHRoaXMuX2FkZENsYXNzKFwidWktcmVzaXphYmxlLXJlc2l6aW5nXCIpLHRoaXMuX3Byb3BhZ2F0ZShcInN0YXJ0XCIsZSksITB9LF9tb3VzZURyYWc6ZnVuY3Rpb24oZSl7dmFyIGkscyxuPXRoaXMub3JpZ2luYWxNb3VzZVBvc2l0aW9uLG89dGhpcy5heGlzLGE9ZS5wYWdlWC1uLmxlZnR8fDAscj1lLnBhZ2VZLW4udG9wfHwwLGg9dGhpcy5fY2hhbmdlW29dO3JldHVybiB0aGlzLl91cGRhdGVQcmV2UHJvcGVydGllcygpLGg/KGk9aC5hcHBseSh0aGlzLFtlLGEscl0pLHRoaXMuX3VwZGF0ZVZpcnR1YWxCb3VuZGFyaWVzKGUuc2hpZnRLZXkpLCh0aGlzLl9hc3BlY3RSYXRpb3x8ZS5zaGlmdEtleSkmJihpPXRoaXMuX3VwZGF0ZVJhdGlvKGksZSkpLGk9dGhpcy5fcmVzcGVjdFNpemUoaSxlKSx0aGlzLl91cGRhdGVDYWNoZShpKSx0aGlzLl9wcm9wYWdhdGUoXCJyZXNpemVcIixlKSxzPXRoaXMuX2FwcGx5Q2hhbmdlcygpLCF0aGlzLl9oZWxwZXImJnRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoJiZ0aGlzLl9wcm9wb3J0aW9uYWxseVJlc2l6ZSgpLHQuaXNFbXB0eU9iamVjdChzKXx8KHRoaXMuX3VwZGF0ZVByZXZQcm9wZXJ0aWVzKCksdGhpcy5fdHJpZ2dlcihcInJlc2l6ZVwiLGUsdGhpcy51aSgpKSx0aGlzLl9hcHBseUNoYW5nZXMoKSksITEpOiExfSxfbW91c2VTdG9wOmZ1bmN0aW9uKGUpe3RoaXMucmVzaXppbmc9ITE7dmFyIGkscyxuLG8sYSxyLGgsbD10aGlzLm9wdGlvbnMsYz10aGlzO3JldHVybiB0aGlzLl9oZWxwZXImJihpPXRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMscz1pLmxlbmd0aCYmL3RleHRhcmVhL2kudGVzdChpWzBdLm5vZGVOYW1lKSxuPXMmJnRoaXMuX2hhc1Njcm9sbChpWzBdLFwibGVmdFwiKT8wOmMuc2l6ZURpZmYuaGVpZ2h0LG89cz8wOmMuc2l6ZURpZmYud2lkdGgsYT17d2lkdGg6Yy5oZWxwZXIud2lkdGgoKS1vLGhlaWdodDpjLmhlbHBlci5oZWlnaHQoKS1ufSxyPXBhcnNlRmxvYXQoYy5lbGVtZW50LmNzcyhcImxlZnRcIikpKyhjLnBvc2l0aW9uLmxlZnQtYy5vcmlnaW5hbFBvc2l0aW9uLmxlZnQpfHxudWxsLGg9cGFyc2VGbG9hdChjLmVsZW1lbnQuY3NzKFwidG9wXCIpKSsoYy5wb3NpdGlvbi50b3AtYy5vcmlnaW5hbFBvc2l0aW9uLnRvcCl8fG51bGwsbC5hbmltYXRlfHx0aGlzLmVsZW1lbnQuY3NzKHQuZXh0ZW5kKGEse3RvcDpoLGxlZnQ6cn0pKSxjLmhlbHBlci5oZWlnaHQoYy5zaXplLmhlaWdodCksYy5oZWxwZXIud2lkdGgoYy5zaXplLndpZHRoKSx0aGlzLl9oZWxwZXImJiFsLmFuaW1hdGUmJnRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplKCkpLHQoXCJib2R5XCIpLmNzcyhcImN1cnNvclwiLFwiYXV0b1wiKSx0aGlzLl9yZW1vdmVDbGFzcyhcInVpLXJlc2l6YWJsZS1yZXNpemluZ1wiKSx0aGlzLl9wcm9wYWdhdGUoXCJzdG9wXCIsZSksdGhpcy5faGVscGVyJiZ0aGlzLmhlbHBlci5yZW1vdmUoKSwhMX0sX3VwZGF0ZVByZXZQcm9wZXJ0aWVzOmZ1bmN0aW9uKCl7dGhpcy5wcmV2UG9zaXRpb249e3RvcDp0aGlzLnBvc2l0aW9uLnRvcCxsZWZ0OnRoaXMucG9zaXRpb24ubGVmdH0sdGhpcy5wcmV2U2l6ZT17d2lkdGg6dGhpcy5zaXplLndpZHRoLGhlaWdodDp0aGlzLnNpemUuaGVpZ2h0fX0sX2FwcGx5Q2hhbmdlczpmdW5jdGlvbigpe3ZhciB0PXt9O3JldHVybiB0aGlzLnBvc2l0aW9uLnRvcCE9PXRoaXMucHJldlBvc2l0aW9uLnRvcCYmKHQudG9wPXRoaXMucG9zaXRpb24udG9wK1wicHhcIiksdGhpcy5wb3NpdGlvbi5sZWZ0IT09dGhpcy5wcmV2UG9zaXRpb24ubGVmdCYmKHQubGVmdD10aGlzLnBvc2l0aW9uLmxlZnQrXCJweFwiKSx0aGlzLnNpemUud2lkdGghPT10aGlzLnByZXZTaXplLndpZHRoJiYodC53aWR0aD10aGlzLnNpemUud2lkdGgrXCJweFwiKSx0aGlzLnNpemUuaGVpZ2h0IT09dGhpcy5wcmV2U2l6ZS5oZWlnaHQmJih0LmhlaWdodD10aGlzLnNpemUuaGVpZ2h0K1wicHhcIiksdGhpcy5oZWxwZXIuY3NzKHQpLHR9LF91cGRhdGVWaXJ0dWFsQm91bmRhcmllczpmdW5jdGlvbih0KXt2YXIgZSxpLHMsbixvLGE9dGhpcy5vcHRpb25zO289e21pbldpZHRoOnRoaXMuX2lzTnVtYmVyKGEubWluV2lkdGgpP2EubWluV2lkdGg6MCxtYXhXaWR0aDp0aGlzLl9pc051bWJlcihhLm1heFdpZHRoKT9hLm1heFdpZHRoOjEvMCxtaW5IZWlnaHQ6dGhpcy5faXNOdW1iZXIoYS5taW5IZWlnaHQpP2EubWluSGVpZ2h0OjAsbWF4SGVpZ2h0OnRoaXMuX2lzTnVtYmVyKGEubWF4SGVpZ2h0KT9hLm1heEhlaWdodDoxLzB9LCh0aGlzLl9hc3BlY3RSYXRpb3x8dCkmJihlPW8ubWluSGVpZ2h0KnRoaXMuYXNwZWN0UmF0aW8scz1vLm1pbldpZHRoL3RoaXMuYXNwZWN0UmF0aW8saT1vLm1heEhlaWdodCp0aGlzLmFzcGVjdFJhdGlvLG49by5tYXhXaWR0aC90aGlzLmFzcGVjdFJhdGlvLGU+by5taW5XaWR0aCYmKG8ubWluV2lkdGg9ZSkscz5vLm1pbkhlaWdodCYmKG8ubWluSGVpZ2h0PXMpLG8ubWF4V2lkdGg+aSYmKG8ubWF4V2lkdGg9aSksby5tYXhIZWlnaHQ+biYmKG8ubWF4SGVpZ2h0PW4pKSx0aGlzLl92Qm91bmRhcmllcz1vfSxfdXBkYXRlQ2FjaGU6ZnVuY3Rpb24odCl7dGhpcy5vZmZzZXQ9dGhpcy5oZWxwZXIub2Zmc2V0KCksdGhpcy5faXNOdW1iZXIodC5sZWZ0KSYmKHRoaXMucG9zaXRpb24ubGVmdD10LmxlZnQpLHRoaXMuX2lzTnVtYmVyKHQudG9wKSYmKHRoaXMucG9zaXRpb24udG9wPXQudG9wKSx0aGlzLl9pc051bWJlcih0LmhlaWdodCkmJih0aGlzLnNpemUuaGVpZ2h0PXQuaGVpZ2h0KSx0aGlzLl9pc051bWJlcih0LndpZHRoKSYmKHRoaXMuc2l6ZS53aWR0aD10LndpZHRoKX0sX3VwZGF0ZVJhdGlvOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucG9zaXRpb24saT10aGlzLnNpemUscz10aGlzLmF4aXM7cmV0dXJuIHRoaXMuX2lzTnVtYmVyKHQuaGVpZ2h0KT90LndpZHRoPXQuaGVpZ2h0KnRoaXMuYXNwZWN0UmF0aW86dGhpcy5faXNOdW1iZXIodC53aWR0aCkmJih0LmhlaWdodD10LndpZHRoL3RoaXMuYXNwZWN0UmF0aW8pLFwic3dcIj09PXMmJih0LmxlZnQ9ZS5sZWZ0KyhpLndpZHRoLXQud2lkdGgpLHQudG9wPW51bGwpLFwibndcIj09PXMmJih0LnRvcD1lLnRvcCsoaS5oZWlnaHQtdC5oZWlnaHQpLHQubGVmdD1lLmxlZnQrKGkud2lkdGgtdC53aWR0aCkpLHR9LF9yZXNwZWN0U2l6ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl92Qm91bmRhcmllcyxpPXRoaXMuYXhpcyxzPXRoaXMuX2lzTnVtYmVyKHQud2lkdGgpJiZlLm1heFdpZHRoJiZlLm1heFdpZHRoPHQud2lkdGgsbj10aGlzLl9pc051bWJlcih0LmhlaWdodCkmJmUubWF4SGVpZ2h0JiZlLm1heEhlaWdodDx0LmhlaWdodCxvPXRoaXMuX2lzTnVtYmVyKHQud2lkdGgpJiZlLm1pbldpZHRoJiZlLm1pbldpZHRoPnQud2lkdGgsYT10aGlzLl9pc051bWJlcih0LmhlaWdodCkmJmUubWluSGVpZ2h0JiZlLm1pbkhlaWdodD50LmhlaWdodCxyPXRoaXMub3JpZ2luYWxQb3NpdGlvbi5sZWZ0K3RoaXMub3JpZ2luYWxTaXplLndpZHRoLGg9dGhpcy5vcmlnaW5hbFBvc2l0aW9uLnRvcCt0aGlzLm9yaWdpbmFsU2l6ZS5oZWlnaHQsbD0vc3d8bnd8dy8udGVzdChpKSxjPS9ud3xuZXxuLy50ZXN0KGkpO3JldHVybiBvJiYodC53aWR0aD1lLm1pbldpZHRoKSxhJiYodC5oZWlnaHQ9ZS5taW5IZWlnaHQpLHMmJih0LndpZHRoPWUubWF4V2lkdGgpLG4mJih0LmhlaWdodD1lLm1heEhlaWdodCksbyYmbCYmKHQubGVmdD1yLWUubWluV2lkdGgpLHMmJmwmJih0LmxlZnQ9ci1lLm1heFdpZHRoKSxhJiZjJiYodC50b3A9aC1lLm1pbkhlaWdodCksbiYmYyYmKHQudG9wPWgtZS5tYXhIZWlnaHQpLHQud2lkdGh8fHQuaGVpZ2h0fHx0LmxlZnR8fCF0LnRvcD90LndpZHRofHx0LmhlaWdodHx8dC50b3B8fCF0LmxlZnR8fCh0LmxlZnQ9bnVsbCk6dC50b3A9bnVsbCx0fSxfZ2V0UGFkZGluZ1BsdXNCb3JkZXJEaW1lbnNpb25zOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLGk9W10scz1bdC5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSx0LmNzcyhcImJvcmRlclJpZ2h0V2lkdGhcIiksdC5jc3MoXCJib3JkZXJCb3R0b21XaWR0aFwiKSx0LmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKV0sbj1bdC5jc3MoXCJwYWRkaW5nVG9wXCIpLHQuY3NzKFwicGFkZGluZ1JpZ2h0XCIpLHQuY3NzKFwicGFkZGluZ0JvdHRvbVwiKSx0LmNzcyhcInBhZGRpbmdMZWZ0XCIpXTs0PmU7ZSsrKWlbZV09cGFyc2VGbG9hdChzW2VdKXx8MCxpW2VdKz1wYXJzZUZsb2F0KG5bZV0pfHwwO3JldHVybntoZWlnaHQ6aVswXStpWzJdLHdpZHRoOmlbMV0raVszXX19LF9wcm9wb3J0aW9uYWxseVJlc2l6ZTpmdW5jdGlvbigpe2lmKHRoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoKWZvcih2YXIgdCxlPTAsaT10aGlzLmhlbHBlcnx8dGhpcy5lbGVtZW50O3RoaXMuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMubGVuZ3RoPmU7ZSsrKXQ9dGhpcy5fcHJvcG9ydGlvbmFsbHlSZXNpemVFbGVtZW50c1tlXSx0aGlzLm91dGVyRGltZW5zaW9uc3x8KHRoaXMub3V0ZXJEaW1lbnNpb25zPXRoaXMuX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyh0KSksdC5jc3Moe2hlaWdodDppLmhlaWdodCgpLXRoaXMub3V0ZXJEaW1lbnNpb25zLmhlaWdodHx8MCx3aWR0aDppLndpZHRoKCktdGhpcy5vdXRlckRpbWVuc2lvbnMud2lkdGh8fDB9KX0sX3JlbmRlclByb3h5OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5lbGVtZW50LGk9dGhpcy5vcHRpb25zO3RoaXMuZWxlbWVudE9mZnNldD1lLm9mZnNldCgpLHRoaXMuX2hlbHBlcj8odGhpcy5oZWxwZXI9dGhpcy5oZWxwZXJ8fHQoXCI8ZGl2IHN0eWxlPSdvdmVyZmxvdzpoaWRkZW47Jz48L2Rpdj5cIiksdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWxwZXIsdGhpcy5faGVscGVyKSx0aGlzLmhlbHBlci5jc3Moe3dpZHRoOnRoaXMuZWxlbWVudC5vdXRlcldpZHRoKCksaGVpZ2h0OnRoaXMuZWxlbWVudC5vdXRlckhlaWdodCgpLHBvc2l0aW9uOlwiYWJzb2x1dGVcIixsZWZ0OnRoaXMuZWxlbWVudE9mZnNldC5sZWZ0K1wicHhcIix0b3A6dGhpcy5lbGVtZW50T2Zmc2V0LnRvcCtcInB4XCIsekluZGV4OisraS56SW5kZXh9KSx0aGlzLmhlbHBlci5hcHBlbmRUbyhcImJvZHlcIikuZGlzYWJsZVNlbGVjdGlvbigpKTp0aGlzLmhlbHBlcj10aGlzLmVsZW1lbnR9LF9jaGFuZ2U6e2U6ZnVuY3Rpb24odCxlKXtyZXR1cm57d2lkdGg6dGhpcy5vcmlnaW5hbFNpemUud2lkdGgrZX19LHc6ZnVuY3Rpb24odCxlKXt2YXIgaT10aGlzLm9yaWdpbmFsU2l6ZSxzPXRoaXMub3JpZ2luYWxQb3NpdGlvbjtyZXR1cm57bGVmdDpzLmxlZnQrZSx3aWR0aDppLndpZHRoLWV9fSxuOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcz10aGlzLm9yaWdpbmFsU2l6ZSxuPXRoaXMub3JpZ2luYWxQb3NpdGlvbjtyZXR1cm57dG9wOm4udG9wK2ksaGVpZ2h0OnMuaGVpZ2h0LWl9fSxzOmZ1bmN0aW9uKHQsZSxpKXtyZXR1cm57aGVpZ2h0OnRoaXMub3JpZ2luYWxTaXplLmhlaWdodCtpfX0sc2U6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiB0LmV4dGVuZCh0aGlzLl9jaGFuZ2Uucy5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5fY2hhbmdlLmUuYXBwbHkodGhpcyxbZSxpLHNdKSl9LHN3OmZ1bmN0aW9uKGUsaSxzKXtyZXR1cm4gdC5leHRlbmQodGhpcy5fY2hhbmdlLnMuYXBwbHkodGhpcyxhcmd1bWVudHMpLHRoaXMuX2NoYW5nZS53LmFwcGx5KHRoaXMsW2UsaSxzXSkpfSxuZTpmdW5jdGlvbihlLGkscyl7cmV0dXJuIHQuZXh0ZW5kKHRoaXMuX2NoYW5nZS5uLmFwcGx5KHRoaXMsYXJndW1lbnRzKSx0aGlzLl9jaGFuZ2UuZS5hcHBseSh0aGlzLFtlLGksc10pKX0sbnc6ZnVuY3Rpb24oZSxpLHMpe3JldHVybiB0LmV4dGVuZCh0aGlzLl9jaGFuZ2Uubi5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5fY2hhbmdlLncuYXBwbHkodGhpcyxbZSxpLHNdKSl9fSxfcHJvcGFnYXRlOmZ1bmN0aW9uKGUsaSl7dC51aS5wbHVnaW4uY2FsbCh0aGlzLGUsW2ksdGhpcy51aSgpXSksXCJyZXNpemVcIiE9PWUmJnRoaXMuX3RyaWdnZXIoZSxpLHRoaXMudWkoKSl9LHBsdWdpbnM6e30sdWk6ZnVuY3Rpb24oKXtyZXR1cm57b3JpZ2luYWxFbGVtZW50OnRoaXMub3JpZ2luYWxFbGVtZW50LGVsZW1lbnQ6dGhpcy5lbGVtZW50LGhlbHBlcjp0aGlzLmhlbHBlcixwb3NpdGlvbjp0aGlzLnBvc2l0aW9uLHNpemU6dGhpcy5zaXplLG9yaWdpbmFsU2l6ZTp0aGlzLm9yaWdpbmFsU2l6ZSxvcmlnaW5hbFBvc2l0aW9uOnRoaXMub3JpZ2luYWxQb3NpdGlvbn19fSksdC51aS5wbHVnaW4uYWRkKFwicmVzaXphYmxlXCIsXCJhbmltYXRlXCIse3N0b3A6ZnVuY3Rpb24oZSl7dmFyIGk9dCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKSxzPWkub3B0aW9ucyxuPWkuX3Byb3BvcnRpb25hbGx5UmVzaXplRWxlbWVudHMsbz1uLmxlbmd0aCYmL3RleHRhcmVhL2kudGVzdChuWzBdLm5vZGVOYW1lKSxhPW8mJmkuX2hhc1Njcm9sbChuWzBdLFwibGVmdFwiKT8wOmkuc2l6ZURpZmYuaGVpZ2h0LHI9bz8wOmkuc2l6ZURpZmYud2lkdGgsaD17d2lkdGg6aS5zaXplLndpZHRoLXIsaGVpZ2h0Omkuc2l6ZS5oZWlnaHQtYX0sbD1wYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoXCJsZWZ0XCIpKSsoaS5wb3NpdGlvbi5sZWZ0LWkub3JpZ2luYWxQb3NpdGlvbi5sZWZ0KXx8bnVsbCxjPXBhcnNlRmxvYXQoaS5lbGVtZW50LmNzcyhcInRvcFwiKSkrKGkucG9zaXRpb24udG9wLWkub3JpZ2luYWxQb3NpdGlvbi50b3ApfHxudWxsO2kuZWxlbWVudC5hbmltYXRlKHQuZXh0ZW5kKGgsYyYmbD97dG9wOmMsbGVmdDpsfTp7fSkse2R1cmF0aW9uOnMuYW5pbWF0ZUR1cmF0aW9uLGVhc2luZzpzLmFuaW1hdGVFYXNpbmcsc3RlcDpmdW5jdGlvbigpe3ZhciBzPXt3aWR0aDpwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoXCJ3aWR0aFwiKSksaGVpZ2h0OnBhcnNlRmxvYXQoaS5lbGVtZW50LmNzcyhcImhlaWdodFwiKSksdG9wOnBhcnNlRmxvYXQoaS5lbGVtZW50LmNzcyhcInRvcFwiKSksbGVmdDpwYXJzZUZsb2F0KGkuZWxlbWVudC5jc3MoXCJsZWZ0XCIpKX07biYmbi5sZW5ndGgmJnQoblswXSkuY3NzKHt3aWR0aDpzLndpZHRoLGhlaWdodDpzLmhlaWdodH0pLGkuX3VwZGF0ZUNhY2hlKHMpLGkuX3Byb3BhZ2F0ZShcInJlc2l6ZVwiLGUpfX0pfX0pLHQudWkucGx1Z2luLmFkZChcInJlc2l6YWJsZVwiLFwiY29udGFpbm1lbnRcIix7c3RhcnQ6ZnVuY3Rpb24oKXt2YXIgZSxpLHMsbixvLGEscixoPXQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIiksbD1oLm9wdGlvbnMsYz1oLmVsZW1lbnQsdT1sLmNvbnRhaW5tZW50LGQ9dSBpbnN0YW5jZW9mIHQ/dS5nZXQoMCk6L3BhcmVudC8udGVzdCh1KT9jLnBhcmVudCgpLmdldCgwKTp1O2QmJihoLmNvbnRhaW5lckVsZW1lbnQ9dChkKSwvZG9jdW1lbnQvLnRlc3QodSl8fHU9PT1kb2N1bWVudD8oaC5jb250YWluZXJPZmZzZXQ9e2xlZnQ6MCx0b3A6MH0saC5jb250YWluZXJQb3NpdGlvbj17bGVmdDowLHRvcDowfSxoLnBhcmVudERhdGE9e2VsZW1lbnQ6dChkb2N1bWVudCksbGVmdDowLHRvcDowLHdpZHRoOnQoZG9jdW1lbnQpLndpZHRoKCksaGVpZ2h0OnQoZG9jdW1lbnQpLmhlaWdodCgpfHxkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuc2Nyb2xsSGVpZ2h0fSk6KGU9dChkKSxpPVtdLHQoW1wiVG9wXCIsXCJSaWdodFwiLFwiTGVmdFwiLFwiQm90dG9tXCJdKS5lYWNoKGZ1bmN0aW9uKHQscyl7aVt0XT1oLl9udW0oZS5jc3MoXCJwYWRkaW5nXCIrcykpfSksaC5jb250YWluZXJPZmZzZXQ9ZS5vZmZzZXQoKSxoLmNvbnRhaW5lclBvc2l0aW9uPWUucG9zaXRpb24oKSxoLmNvbnRhaW5lclNpemU9e2hlaWdodDplLmlubmVySGVpZ2h0KCktaVszXSx3aWR0aDplLmlubmVyV2lkdGgoKS1pWzFdfSxzPWguY29udGFpbmVyT2Zmc2V0LG49aC5jb250YWluZXJTaXplLmhlaWdodCxvPWguY29udGFpbmVyU2l6ZS53aWR0aCxhPWguX2hhc1Njcm9sbChkLFwibGVmdFwiKT9kLnNjcm9sbFdpZHRoOm8scj1oLl9oYXNTY3JvbGwoZCk/ZC5zY3JvbGxIZWlnaHQ6bixoLnBhcmVudERhdGE9e2VsZW1lbnQ6ZCxsZWZ0OnMubGVmdCx0b3A6cy50b3Asd2lkdGg6YSxoZWlnaHQ6cn0pKX0scmVzaXplOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbixvLGE9dCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKSxyPWEub3B0aW9ucyxoPWEuY29udGFpbmVyT2Zmc2V0LGw9YS5wb3NpdGlvbixjPWEuX2FzcGVjdFJhdGlvfHxlLnNoaWZ0S2V5LHU9e3RvcDowLGxlZnQ6MH0sZD1hLmNvbnRhaW5lckVsZW1lbnQscD0hMDtkWzBdIT09ZG9jdW1lbnQmJi9zdGF0aWMvLnRlc3QoZC5jc3MoXCJwb3NpdGlvblwiKSkmJih1PWgpLGwubGVmdDwoYS5faGVscGVyP2gubGVmdDowKSYmKGEuc2l6ZS53aWR0aD1hLnNpemUud2lkdGgrKGEuX2hlbHBlcj9hLnBvc2l0aW9uLmxlZnQtaC5sZWZ0OmEucG9zaXRpb24ubGVmdC11LmxlZnQpLGMmJihhLnNpemUuaGVpZ2h0PWEuc2l6ZS53aWR0aC9hLmFzcGVjdFJhdGlvLHA9ITEpLGEucG9zaXRpb24ubGVmdD1yLmhlbHBlcj9oLmxlZnQ6MCksbC50b3A8KGEuX2hlbHBlcj9oLnRvcDowKSYmKGEuc2l6ZS5oZWlnaHQ9YS5zaXplLmhlaWdodCsoYS5faGVscGVyP2EucG9zaXRpb24udG9wLWgudG9wOmEucG9zaXRpb24udG9wKSxjJiYoYS5zaXplLndpZHRoPWEuc2l6ZS5oZWlnaHQqYS5hc3BlY3RSYXRpbyxwPSExKSxhLnBvc2l0aW9uLnRvcD1hLl9oZWxwZXI/aC50b3A6MCksbj1hLmNvbnRhaW5lckVsZW1lbnQuZ2V0KDApPT09YS5lbGVtZW50LnBhcmVudCgpLmdldCgwKSxvPS9yZWxhdGl2ZXxhYnNvbHV0ZS8udGVzdChhLmNvbnRhaW5lckVsZW1lbnQuY3NzKFwicG9zaXRpb25cIikpLG4mJm8/KGEub2Zmc2V0LmxlZnQ9YS5wYXJlbnREYXRhLmxlZnQrYS5wb3NpdGlvbi5sZWZ0LGEub2Zmc2V0LnRvcD1hLnBhcmVudERhdGEudG9wK2EucG9zaXRpb24udG9wKTooYS5vZmZzZXQubGVmdD1hLmVsZW1lbnQub2Zmc2V0KCkubGVmdCxhLm9mZnNldC50b3A9YS5lbGVtZW50Lm9mZnNldCgpLnRvcCksaT1NYXRoLmFicyhhLnNpemVEaWZmLndpZHRoKyhhLl9oZWxwZXI/YS5vZmZzZXQubGVmdC11LmxlZnQ6YS5vZmZzZXQubGVmdC1oLmxlZnQpKSxzPU1hdGguYWJzKGEuc2l6ZURpZmYuaGVpZ2h0KyhhLl9oZWxwZXI/YS5vZmZzZXQudG9wLXUudG9wOmEub2Zmc2V0LnRvcC1oLnRvcCkpLGkrYS5zaXplLndpZHRoPj1hLnBhcmVudERhdGEud2lkdGgmJihhLnNpemUud2lkdGg9YS5wYXJlbnREYXRhLndpZHRoLWksYyYmKGEuc2l6ZS5oZWlnaHQ9YS5zaXplLndpZHRoL2EuYXNwZWN0UmF0aW8scD0hMSkpLHMrYS5zaXplLmhlaWdodD49YS5wYXJlbnREYXRhLmhlaWdodCYmKGEuc2l6ZS5oZWlnaHQ9YS5wYXJlbnREYXRhLmhlaWdodC1zLGMmJihhLnNpemUud2lkdGg9YS5zaXplLmhlaWdodCphLmFzcGVjdFJhdGlvLHA9ITEpKSxwfHwoYS5wb3NpdGlvbi5sZWZ0PWEucHJldlBvc2l0aW9uLmxlZnQsYS5wb3NpdGlvbi50b3A9YS5wcmV2UG9zaXRpb24udG9wLGEuc2l6ZS53aWR0aD1hLnByZXZTaXplLndpZHRoLGEuc2l6ZS5oZWlnaHQ9YS5wcmV2U2l6ZS5oZWlnaHQpfSxzdG9wOmZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKSxpPWUub3B0aW9ucyxzPWUuY29udGFpbmVyT2Zmc2V0LG49ZS5jb250YWluZXJQb3NpdGlvbixvPWUuY29udGFpbmVyRWxlbWVudCxhPXQoZS5oZWxwZXIpLHI9YS5vZmZzZXQoKSxoPWEub3V0ZXJXaWR0aCgpLWUuc2l6ZURpZmYud2lkdGgsbD1hLm91dGVySGVpZ2h0KCktZS5zaXplRGlmZi5oZWlnaHQ7ZS5faGVscGVyJiYhaS5hbmltYXRlJiYvcmVsYXRpdmUvLnRlc3Qoby5jc3MoXCJwb3NpdGlvblwiKSkmJnQodGhpcykuY3NzKHtsZWZ0OnIubGVmdC1uLmxlZnQtcy5sZWZ0LHdpZHRoOmgsaGVpZ2h0Omx9KSxlLl9oZWxwZXImJiFpLmFuaW1hdGUmJi9zdGF0aWMvLnRlc3Qoby5jc3MoXCJwb3NpdGlvblwiKSkmJnQodGhpcykuY3NzKHtsZWZ0OnIubGVmdC1uLmxlZnQtcy5sZWZ0LHdpZHRoOmgsaGVpZ2h0Omx9KX19KSx0LnVpLnBsdWdpbi5hZGQoXCJyZXNpemFibGVcIixcImFsc29SZXNpemVcIix7c3RhcnQ6ZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpLnJlc2l6YWJsZShcImluc3RhbmNlXCIpLGk9ZS5vcHRpb25zO3QoaS5hbHNvUmVzaXplKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKTtlLmRhdGEoXCJ1aS1yZXNpemFibGUtYWxzb3Jlc2l6ZVwiLHt3aWR0aDpwYXJzZUZsb2F0KGUud2lkdGgoKSksaGVpZ2h0OnBhcnNlRmxvYXQoZS5oZWlnaHQoKSksbGVmdDpwYXJzZUZsb2F0KGUuY3NzKFwibGVmdFwiKSksdG9wOnBhcnNlRmxvYXQoZS5jc3MoXCJ0b3BcIikpfSl9KX0scmVzaXplOmZ1bmN0aW9uKGUsaSl7dmFyIHM9dCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKSxuPXMub3B0aW9ucyxvPXMub3JpZ2luYWxTaXplLGE9cy5vcmlnaW5hbFBvc2l0aW9uLHI9e2hlaWdodDpzLnNpemUuaGVpZ2h0LW8uaGVpZ2h0fHwwLHdpZHRoOnMuc2l6ZS53aWR0aC1vLndpZHRofHwwLHRvcDpzLnBvc2l0aW9uLnRvcC1hLnRvcHx8MCxsZWZ0OnMucG9zaXRpb24ubGVmdC1hLmxlZnR8fDB9O3Qobi5hbHNvUmVzaXplKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKSxzPXQodGhpcykuZGF0YShcInVpLXJlc2l6YWJsZS1hbHNvcmVzaXplXCIpLG49e30sbz1lLnBhcmVudHMoaS5vcmlnaW5hbEVsZW1lbnRbMF0pLmxlbmd0aD9bXCJ3aWR0aFwiLFwiaGVpZ2h0XCJdOltcIndpZHRoXCIsXCJoZWlnaHRcIixcInRvcFwiLFwibGVmdFwiXTt0LmVhY2gobyxmdW5jdGlvbih0LGUpe3ZhciBpPShzW2VdfHwwKSsocltlXXx8MCk7aSYmaT49MCYmKG5bZV09aXx8bnVsbCl9KSxlLmNzcyhuKX0pfSxzdG9wOmZ1bmN0aW9uKCl7dCh0aGlzKS5yZW1vdmVEYXRhKFwidWktcmVzaXphYmxlLWFsc29yZXNpemVcIil9fSksdC51aS5wbHVnaW4uYWRkKFwicmVzaXphYmxlXCIsXCJnaG9zdFwiLHtzdGFydDpmdW5jdGlvbigpe3ZhciBlPXQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIiksaT1lLnNpemU7ZS5naG9zdD1lLm9yaWdpbmFsRWxlbWVudC5jbG9uZSgpLGUuZ2hvc3QuY3NzKHtvcGFjaXR5Oi4yNSxkaXNwbGF5OlwiYmxvY2tcIixwb3NpdGlvbjpcInJlbGF0aXZlXCIsaGVpZ2h0OmkuaGVpZ2h0LHdpZHRoOmkud2lkdGgsbWFyZ2luOjAsbGVmdDowLHRvcDowfSksZS5fYWRkQ2xhc3MoZS5naG9zdCxcInVpLXJlc2l6YWJsZS1naG9zdFwiKSx0LnVpQmFja0NvbXBhdCE9PSExJiZcInN0cmluZ1wiPT10eXBlb2YgZS5vcHRpb25zLmdob3N0JiZlLmdob3N0LmFkZENsYXNzKHRoaXMub3B0aW9ucy5naG9zdCksZS5naG9zdC5hcHBlbmRUbyhlLmhlbHBlcil9LHJlc2l6ZTpmdW5jdGlvbigpe3ZhciBlPXQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIik7ZS5naG9zdCYmZS5naG9zdC5jc3Moe3Bvc2l0aW9uOlwicmVsYXRpdmVcIixoZWlnaHQ6ZS5zaXplLmhlaWdodCx3aWR0aDplLnNpemUud2lkdGh9KX0sc3RvcDpmdW5jdGlvbigpe3ZhciBlPXQodGhpcykucmVzaXphYmxlKFwiaW5zdGFuY2VcIik7ZS5naG9zdCYmZS5oZWxwZXImJmUuaGVscGVyLmdldCgwKS5yZW1vdmVDaGlsZChlLmdob3N0LmdldCgwKSl9fSksdC51aS5wbHVnaW4uYWRkKFwicmVzaXphYmxlXCIsXCJncmlkXCIse3Jlc2l6ZTpmdW5jdGlvbigpe3ZhciBlLGk9dCh0aGlzKS5yZXNpemFibGUoXCJpbnN0YW5jZVwiKSxzPWkub3B0aW9ucyxuPWkuc2l6ZSxvPWkub3JpZ2luYWxTaXplLGE9aS5vcmlnaW5hbFBvc2l0aW9uLHI9aS5heGlzLGg9XCJudW1iZXJcIj09dHlwZW9mIHMuZ3JpZD9bcy5ncmlkLHMuZ3JpZF06cy5ncmlkLGw9aFswXXx8MSxjPWhbMV18fDEsdT1NYXRoLnJvdW5kKChuLndpZHRoLW8ud2lkdGgpL2wpKmwsZD1NYXRoLnJvdW5kKChuLmhlaWdodC1vLmhlaWdodCkvYykqYyxwPW8ud2lkdGgrdSxmPW8uaGVpZ2h0K2QsZz1zLm1heFdpZHRoJiZwPnMubWF4V2lkdGgsbT1zLm1heEhlaWdodCYmZj5zLm1heEhlaWdodCxfPXMubWluV2lkdGgmJnMubWluV2lkdGg+cCx2PXMubWluSGVpZ2h0JiZzLm1pbkhlaWdodD5mO3MuZ3JpZD1oLF8mJihwKz1sKSx2JiYoZis9YyksZyYmKHAtPWwpLG0mJihmLT1jKSwvXihzZXxzfGUpJC8udGVzdChyKT8oaS5zaXplLndpZHRoPXAsaS5zaXplLmhlaWdodD1mKTovXihuZSkkLy50ZXN0KHIpPyhpLnNpemUud2lkdGg9cCxpLnNpemUuaGVpZ2h0PWYsaS5wb3NpdGlvbi50b3A9YS50b3AtZCk6L14oc3cpJC8udGVzdChyKT8oaS5zaXplLndpZHRoPXAsaS5zaXplLmhlaWdodD1mLGkucG9zaXRpb24ubGVmdD1hLmxlZnQtdSk6KCgwPj1mLWN8fDA+PXAtbCkmJihlPWkuX2dldFBhZGRpbmdQbHVzQm9yZGVyRGltZW5zaW9ucyh0aGlzKSksZi1jPjA/KGkuc2l6ZS5oZWlnaHQ9ZixpLnBvc2l0aW9uLnRvcD1hLnRvcC1kKTooZj1jLWUuaGVpZ2h0LGkuc2l6ZS5oZWlnaHQ9ZixpLnBvc2l0aW9uLnRvcD1hLnRvcCtvLmhlaWdodC1mKSxwLWw+MD8oaS5zaXplLndpZHRoPXAsaS5wb3NpdGlvbi5sZWZ0PWEubGVmdC11KToocD1sLWUud2lkdGgsaS5zaXplLndpZHRoPXAsaS5wb3NpdGlvbi5sZWZ0PWEubGVmdCtvLndpZHRoLXApKX19KSx0LnVpLnJlc2l6YWJsZSx0LndpZGdldChcInVpLmRpYWxvZ1wiLHt2ZXJzaW9uOlwiMS4xMi4xXCIsb3B0aW9uczp7YXBwZW5kVG86XCJib2R5XCIsYXV0b09wZW46ITAsYnV0dG9uczpbXSxjbGFzc2VzOntcInVpLWRpYWxvZ1wiOlwidWktY29ybmVyLWFsbFwiLFwidWktZGlhbG9nLXRpdGxlYmFyXCI6XCJ1aS1jb3JuZXItYWxsXCJ9LGNsb3NlT25Fc2NhcGU6ITAsY2xvc2VUZXh0OlwiQ2xvc2VcIixkcmFnZ2FibGU6ITAsaGlkZTpudWxsLGhlaWdodDpcImF1dG9cIixtYXhIZWlnaHQ6bnVsbCxtYXhXaWR0aDpudWxsLG1pbkhlaWdodDoxNTAsbWluV2lkdGg6MTUwLG1vZGFsOiExLHBvc2l0aW9uOntteTpcImNlbnRlclwiLGF0OlwiY2VudGVyXCIsb2Y6d2luZG93LGNvbGxpc2lvbjpcImZpdFwiLHVzaW5nOmZ1bmN0aW9uKGUpe3ZhciBpPXQodGhpcykuY3NzKGUpLm9mZnNldCgpLnRvcDswPmkmJnQodGhpcykuY3NzKFwidG9wXCIsZS50b3AtaSl9fSxyZXNpemFibGU6ITAsc2hvdzpudWxsLHRpdGxlOm51bGwsd2lkdGg6MzAwLGJlZm9yZUNsb3NlOm51bGwsY2xvc2U6bnVsbCxkcmFnOm51bGwsZHJhZ1N0YXJ0Om51bGwsZHJhZ1N0b3A6bnVsbCxmb2N1czpudWxsLG9wZW46bnVsbCxyZXNpemU6bnVsbCxyZXNpemVTdGFydDpudWxsLHJlc2l6ZVN0b3A6bnVsbH0sc2l6ZVJlbGF0ZWRPcHRpb25zOntidXR0b25zOiEwLGhlaWdodDohMCxtYXhIZWlnaHQ6ITAsbWF4V2lkdGg6ITAsbWluSGVpZ2h0OiEwLG1pbldpZHRoOiEwLHdpZHRoOiEwfSxyZXNpemFibGVSZWxhdGVkT3B0aW9uczp7bWF4SGVpZ2h0OiEwLG1heFdpZHRoOiEwLG1pbkhlaWdodDohMCxtaW5XaWR0aDohMH0sX2NyZWF0ZTpmdW5jdGlvbigpe3RoaXMub3JpZ2luYWxDc3M9e2Rpc3BsYXk6dGhpcy5lbGVtZW50WzBdLnN0eWxlLmRpc3BsYXksd2lkdGg6dGhpcy5lbGVtZW50WzBdLnN0eWxlLndpZHRoLG1pbkhlaWdodDp0aGlzLmVsZW1lbnRbMF0uc3R5bGUubWluSGVpZ2h0LG1heEhlaWdodDp0aGlzLmVsZW1lbnRbMF0uc3R5bGUubWF4SGVpZ2h0LGhlaWdodDp0aGlzLmVsZW1lbnRbMF0uc3R5bGUuaGVpZ2h0fSx0aGlzLm9yaWdpbmFsUG9zaXRpb249e3BhcmVudDp0aGlzLmVsZW1lbnQucGFyZW50KCksaW5kZXg6dGhpcy5lbGVtZW50LnBhcmVudCgpLmNoaWxkcmVuKCkuaW5kZXgodGhpcy5lbGVtZW50KX0sdGhpcy5vcmlnaW5hbFRpdGxlPXRoaXMuZWxlbWVudC5hdHRyKFwidGl0bGVcIiksbnVsbD09dGhpcy5vcHRpb25zLnRpdGxlJiZudWxsIT10aGlzLm9yaWdpbmFsVGl0bGUmJih0aGlzLm9wdGlvbnMudGl0bGU9dGhpcy5vcmlnaW5hbFRpdGxlKSx0aGlzLm9wdGlvbnMuZGlzYWJsZWQmJih0aGlzLm9wdGlvbnMuZGlzYWJsZWQ9ITEpLHRoaXMuX2NyZWF0ZVdyYXBwZXIoKSx0aGlzLmVsZW1lbnQuc2hvdygpLnJlbW92ZUF0dHIoXCJ0aXRsZVwiKS5hcHBlbmRUbyh0aGlzLnVpRGlhbG9nKSx0aGlzLl9hZGRDbGFzcyhcInVpLWRpYWxvZy1jb250ZW50XCIsXCJ1aS13aWRnZXQtY29udGVudFwiKSx0aGlzLl9jcmVhdGVUaXRsZWJhcigpLHRoaXMuX2NyZWF0ZUJ1dHRvblBhbmUoKSx0aGlzLm9wdGlvbnMuZHJhZ2dhYmxlJiZ0LmZuLmRyYWdnYWJsZSYmdGhpcy5fbWFrZURyYWdnYWJsZSgpLHRoaXMub3B0aW9ucy5yZXNpemFibGUmJnQuZm4ucmVzaXphYmxlJiZ0aGlzLl9tYWtlUmVzaXphYmxlKCksdGhpcy5faXNPcGVuPSExLHRoaXMuX3RyYWNrRm9jdXMoKX0sX2luaXQ6ZnVuY3Rpb24oKXt0aGlzLm9wdGlvbnMuYXV0b09wZW4mJnRoaXMub3BlbigpfSxfYXBwZW5kVG86ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnMuYXBwZW5kVG87cmV0dXJuIGUmJihlLmpxdWVyeXx8ZS5ub2RlVHlwZSk/dChlKTp0aGlzLmRvY3VtZW50LmZpbmQoZXx8XCJib2R5XCIpLmVxKDApfSxfZGVzdHJveTpmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5vcmlnaW5hbFBvc2l0aW9uO3RoaXMuX3VudHJhY2tJbnN0YW5jZSgpLHRoaXMuX2Rlc3Ryb3lPdmVybGF5KCksdGhpcy5lbGVtZW50LnJlbW92ZVVuaXF1ZUlkKCkuY3NzKHRoaXMub3JpZ2luYWxDc3MpLmRldGFjaCgpLHRoaXMudWlEaWFsb2cucmVtb3ZlKCksdGhpcy5vcmlnaW5hbFRpdGxlJiZ0aGlzLmVsZW1lbnQuYXR0cihcInRpdGxlXCIsdGhpcy5vcmlnaW5hbFRpdGxlKSx0PWUucGFyZW50LmNoaWxkcmVuKCkuZXEoZS5pbmRleCksdC5sZW5ndGgmJnRbMF0hPT10aGlzLmVsZW1lbnRbMF0/dC5iZWZvcmUodGhpcy5lbGVtZW50KTplLnBhcmVudC5hcHBlbmQodGhpcy5lbGVtZW50KX0sd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudWlEaWFsb2dcbn0sZGlzYWJsZTp0Lm5vb3AsZW5hYmxlOnQubm9vcCxjbG9zZTpmdW5jdGlvbihlKXt2YXIgaT10aGlzO3RoaXMuX2lzT3BlbiYmdGhpcy5fdHJpZ2dlcihcImJlZm9yZUNsb3NlXCIsZSkhPT0hMSYmKHRoaXMuX2lzT3Blbj0hMSx0aGlzLl9mb2N1c2VkRWxlbWVudD1udWxsLHRoaXMuX2Rlc3Ryb3lPdmVybGF5KCksdGhpcy5fdW50cmFja0luc3RhbmNlKCksdGhpcy5vcGVuZXIuZmlsdGVyKFwiOmZvY3VzYWJsZVwiKS50cmlnZ2VyKFwiZm9jdXNcIikubGVuZ3RofHx0LnVpLnNhZmVCbHVyKHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSkpLHRoaXMuX2hpZGUodGhpcy51aURpYWxvZyx0aGlzLm9wdGlvbnMuaGlkZSxmdW5jdGlvbigpe2kuX3RyaWdnZXIoXCJjbG9zZVwiLGUpfSkpfSxpc09wZW46ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5faXNPcGVufSxtb3ZlVG9Ub3A6ZnVuY3Rpb24oKXt0aGlzLl9tb3ZlVG9Ub3AoKX0sX21vdmVUb1RvcDpmdW5jdGlvbihlLGkpe3ZhciBzPSExLG49dGhpcy51aURpYWxvZy5zaWJsaW5ncyhcIi51aS1mcm9udDp2aXNpYmxlXCIpLm1hcChmdW5jdGlvbigpe3JldHVybit0KHRoaXMpLmNzcyhcInotaW5kZXhcIil9KS5nZXQoKSxvPU1hdGgubWF4LmFwcGx5KG51bGwsbik7cmV0dXJuIG8+PSt0aGlzLnVpRGlhbG9nLmNzcyhcInotaW5kZXhcIikmJih0aGlzLnVpRGlhbG9nLmNzcyhcInotaW5kZXhcIixvKzEpLHM9ITApLHMmJiFpJiZ0aGlzLl90cmlnZ2VyKFwiZm9jdXNcIixlKSxzfSxvcGVuOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gdGhpcy5faXNPcGVuPyh0aGlzLl9tb3ZlVG9Ub3AoKSYmdGhpcy5fZm9jdXNUYWJiYWJsZSgpLHZvaWQgMCk6KHRoaXMuX2lzT3Blbj0hMCx0aGlzLm9wZW5lcj10KHQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSkpLHRoaXMuX3NpemUoKSx0aGlzLl9wb3NpdGlvbigpLHRoaXMuX2NyZWF0ZU92ZXJsYXkoKSx0aGlzLl9tb3ZlVG9Ub3AobnVsbCwhMCksdGhpcy5vdmVybGF5JiZ0aGlzLm92ZXJsYXkuY3NzKFwiei1pbmRleFwiLHRoaXMudWlEaWFsb2cuY3NzKFwiei1pbmRleFwiKS0xKSx0aGlzLl9zaG93KHRoaXMudWlEaWFsb2csdGhpcy5vcHRpb25zLnNob3csZnVuY3Rpb24oKXtlLl9mb2N1c1RhYmJhYmxlKCksZS5fdHJpZ2dlcihcImZvY3VzXCIpfSksdGhpcy5fbWFrZUZvY3VzVGFyZ2V0KCksdGhpcy5fdHJpZ2dlcihcIm9wZW5cIiksdm9pZCAwKX0sX2ZvY3VzVGFiYmFibGU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9mb2N1c2VkRWxlbWVudDt0fHwodD10aGlzLmVsZW1lbnQuZmluZChcIlthdXRvZm9jdXNdXCIpKSx0Lmxlbmd0aHx8KHQ9dGhpcy5lbGVtZW50LmZpbmQoXCI6dGFiYmFibGVcIikpLHQubGVuZ3RofHwodD10aGlzLnVpRGlhbG9nQnV0dG9uUGFuZS5maW5kKFwiOnRhYmJhYmxlXCIpKSx0Lmxlbmd0aHx8KHQ9dGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UuZmlsdGVyKFwiOnRhYmJhYmxlXCIpKSx0Lmxlbmd0aHx8KHQ9dGhpcy51aURpYWxvZyksdC5lcSgwKS50cmlnZ2VyKFwiZm9jdXNcIil9LF9rZWVwRm9jdXM6ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gaSgpe3ZhciBlPXQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSksaT10aGlzLnVpRGlhbG9nWzBdPT09ZXx8dC5jb250YWlucyh0aGlzLnVpRGlhbG9nWzBdLGUpO2l8fHRoaXMuX2ZvY3VzVGFiYmFibGUoKX1lLnByZXZlbnREZWZhdWx0KCksaS5jYWxsKHRoaXMpLHRoaXMuX2RlbGF5KGkpfSxfY3JlYXRlV3JhcHBlcjpmdW5jdGlvbigpe3RoaXMudWlEaWFsb2c9dChcIjxkaXY+XCIpLmhpZGUoKS5hdHRyKHt0YWJJbmRleDotMSxyb2xlOlwiZGlhbG9nXCJ9KS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnVpRGlhbG9nLFwidWktZGlhbG9nXCIsXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnQgdWktZnJvbnRcIiksdGhpcy5fb24odGhpcy51aURpYWxvZyx7a2V5ZG93bjpmdW5jdGlvbihlKXtpZih0aGlzLm9wdGlvbnMuY2xvc2VPbkVzY2FwZSYmIWUuaXNEZWZhdWx0UHJldmVudGVkKCkmJmUua2V5Q29kZSYmZS5rZXlDb2RlPT09dC51aS5rZXlDb2RlLkVTQ0FQRSlyZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuY2xvc2UoZSksdm9pZCAwO2lmKGUua2V5Q29kZT09PXQudWkua2V5Q29kZS5UQUImJiFlLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt2YXIgaT10aGlzLnVpRGlhbG9nLmZpbmQoXCI6dGFiYmFibGVcIikscz1pLmZpbHRlcihcIjpmaXJzdFwiKSxuPWkuZmlsdGVyKFwiOmxhc3RcIik7ZS50YXJnZXQhPT1uWzBdJiZlLnRhcmdldCE9PXRoaXMudWlEaWFsb2dbMF18fGUuc2hpZnRLZXk/ZS50YXJnZXQhPT1zWzBdJiZlLnRhcmdldCE9PXRoaXMudWlEaWFsb2dbMF18fCFlLnNoaWZ0S2V5fHwodGhpcy5fZGVsYXkoZnVuY3Rpb24oKXtuLnRyaWdnZXIoXCJmb2N1c1wiKX0pLGUucHJldmVudERlZmF1bHQoKSk6KHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7cy50cmlnZ2VyKFwiZm9jdXNcIil9KSxlLnByZXZlbnREZWZhdWx0KCkpfX0sbW91c2Vkb3duOmZ1bmN0aW9uKHQpe3RoaXMuX21vdmVUb1RvcCh0KSYmdGhpcy5fZm9jdXNUYWJiYWJsZSgpfX0pLHRoaXMuZWxlbWVudC5maW5kKFwiW2FyaWEtZGVzY3JpYmVkYnldXCIpLmxlbmd0aHx8dGhpcy51aURpYWxvZy5hdHRyKHtcImFyaWEtZGVzY3JpYmVkYnlcIjp0aGlzLmVsZW1lbnQudW5pcXVlSWQoKS5hdHRyKFwiaWRcIil9KX0sX2NyZWF0ZVRpdGxlYmFyOmZ1bmN0aW9uKCl7dmFyIGU7dGhpcy51aURpYWxvZ1RpdGxlYmFyPXQoXCI8ZGl2PlwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnVpRGlhbG9nVGl0bGViYXIsXCJ1aS1kaWFsb2ctdGl0bGViYXJcIixcInVpLXdpZGdldC1oZWFkZXIgdWktaGVscGVyLWNsZWFyZml4XCIpLHRoaXMuX29uKHRoaXMudWlEaWFsb2dUaXRsZWJhcix7bW91c2Vkb3duOmZ1bmN0aW9uKGUpe3QoZS50YXJnZXQpLmNsb3Nlc3QoXCIudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIpfHx0aGlzLnVpRGlhbG9nLnRyaWdnZXIoXCJmb2N1c1wiKX19KSx0aGlzLnVpRGlhbG9nVGl0bGViYXJDbG9zZT10KFwiPGJ1dHRvbiB0eXBlPSdidXR0b24nPjwvYnV0dG9uPlwiKS5idXR0b24oe2xhYmVsOnQoXCI8YT5cIikudGV4dCh0aGlzLm9wdGlvbnMuY2xvc2VUZXh0KS5odG1sKCksaWNvbjpcInVpLWljb24tY2xvc2V0aGlja1wiLHNob3dMYWJlbDohMX0pLmFwcGVuZFRvKHRoaXMudWlEaWFsb2dUaXRsZWJhciksdGhpcy5fYWRkQ2xhc3ModGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UsXCJ1aS1kaWFsb2ctdGl0bGViYXItY2xvc2VcIiksdGhpcy5fb24odGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2Use2NsaWNrOmZ1bmN0aW9uKHQpe3QucHJldmVudERlZmF1bHQoKSx0aGlzLmNsb3NlKHQpfX0pLGU9dChcIjxzcGFuPlwiKS51bmlxdWVJZCgpLnByZXBlbmRUbyh0aGlzLnVpRGlhbG9nVGl0bGViYXIpLHRoaXMuX2FkZENsYXNzKGUsXCJ1aS1kaWFsb2ctdGl0bGVcIiksdGhpcy5fdGl0bGUoZSksdGhpcy51aURpYWxvZ1RpdGxlYmFyLnByZXBlbmRUbyh0aGlzLnVpRGlhbG9nKSx0aGlzLnVpRGlhbG9nLmF0dHIoe1wiYXJpYS1sYWJlbGxlZGJ5XCI6ZS5hdHRyKFwiaWRcIil9KX0sX3RpdGxlOmZ1bmN0aW9uKHQpe3RoaXMub3B0aW9ucy50aXRsZT90LnRleHQodGhpcy5vcHRpb25zLnRpdGxlKTp0Lmh0bWwoXCImIzE2MDtcIil9LF9jcmVhdGVCdXR0b25QYW5lOmZ1bmN0aW9uKCl7dGhpcy51aURpYWxvZ0J1dHRvblBhbmU9dChcIjxkaXY+XCIpLHRoaXMuX2FkZENsYXNzKHRoaXMudWlEaWFsb2dCdXR0b25QYW5lLFwidWktZGlhbG9nLWJ1dHRvbnBhbmVcIixcInVpLXdpZGdldC1jb250ZW50IHVpLWhlbHBlci1jbGVhcmZpeFwiKSx0aGlzLnVpQnV0dG9uU2V0PXQoXCI8ZGl2PlwiKS5hcHBlbmRUbyh0aGlzLnVpRGlhbG9nQnV0dG9uUGFuZSksdGhpcy5fYWRkQ2xhc3ModGhpcy51aUJ1dHRvblNldCxcInVpLWRpYWxvZy1idXR0b25zZXRcIiksdGhpcy5fY3JlYXRlQnV0dG9ucygpfSxfY3JlYXRlQnV0dG9uczpmdW5jdGlvbigpe3ZhciBlPXRoaXMsaT10aGlzLm9wdGlvbnMuYnV0dG9ucztyZXR1cm4gdGhpcy51aURpYWxvZ0J1dHRvblBhbmUucmVtb3ZlKCksdGhpcy51aUJ1dHRvblNldC5lbXB0eSgpLHQuaXNFbXB0eU9iamVjdChpKXx8dC5pc0FycmF5KGkpJiYhaS5sZW5ndGg/KHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMudWlEaWFsb2csXCJ1aS1kaWFsb2ctYnV0dG9uc1wiKSx2b2lkIDApOih0LmVhY2goaSxmdW5jdGlvbihpLHMpe3ZhciBuLG87cz10LmlzRnVuY3Rpb24ocyk/e2NsaWNrOnMsdGV4dDppfTpzLHM9dC5leHRlbmQoe3R5cGU6XCJidXR0b25cIn0scyksbj1zLmNsaWNrLG89e2ljb246cy5pY29uLGljb25Qb3NpdGlvbjpzLmljb25Qb3NpdGlvbixzaG93TGFiZWw6cy5zaG93TGFiZWwsaWNvbnM6cy5pY29ucyx0ZXh0OnMudGV4dH0sZGVsZXRlIHMuY2xpY2ssZGVsZXRlIHMuaWNvbixkZWxldGUgcy5pY29uUG9zaXRpb24sZGVsZXRlIHMuc2hvd0xhYmVsLGRlbGV0ZSBzLmljb25zLFwiYm9vbGVhblwiPT10eXBlb2Ygcy50ZXh0JiZkZWxldGUgcy50ZXh0LHQoXCI8YnV0dG9uPjwvYnV0dG9uPlwiLHMpLmJ1dHRvbihvKS5hcHBlbmRUbyhlLnVpQnV0dG9uU2V0KS5vbihcImNsaWNrXCIsZnVuY3Rpb24oKXtuLmFwcGx5KGUuZWxlbWVudFswXSxhcmd1bWVudHMpfSl9KSx0aGlzLl9hZGRDbGFzcyh0aGlzLnVpRGlhbG9nLFwidWktZGlhbG9nLWJ1dHRvbnNcIiksdGhpcy51aURpYWxvZ0J1dHRvblBhbmUuYXBwZW5kVG8odGhpcy51aURpYWxvZyksdm9pZCAwKX0sX21ha2VEcmFnZ2FibGU6ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3JldHVybntwb3NpdGlvbjp0LnBvc2l0aW9uLG9mZnNldDp0Lm9mZnNldH19dmFyIGk9dGhpcyxzPXRoaXMub3B0aW9uczt0aGlzLnVpRGlhbG9nLmRyYWdnYWJsZSh7Y2FuY2VsOlwiLnVpLWRpYWxvZy1jb250ZW50LCAudWktZGlhbG9nLXRpdGxlYmFyLWNsb3NlXCIsaGFuZGxlOlwiLnVpLWRpYWxvZy10aXRsZWJhclwiLGNvbnRhaW5tZW50OlwiZG9jdW1lbnRcIixzdGFydDpmdW5jdGlvbihzLG4pe2kuX2FkZENsYXNzKHQodGhpcyksXCJ1aS1kaWFsb2ctZHJhZ2dpbmdcIiksaS5fYmxvY2tGcmFtZXMoKSxpLl90cmlnZ2VyKFwiZHJhZ1N0YXJ0XCIscyxlKG4pKX0sZHJhZzpmdW5jdGlvbih0LHMpe2kuX3RyaWdnZXIoXCJkcmFnXCIsdCxlKHMpKX0sc3RvcDpmdW5jdGlvbihuLG8pe3ZhciBhPW8ub2Zmc2V0LmxlZnQtaS5kb2N1bWVudC5zY3JvbGxMZWZ0KCkscj1vLm9mZnNldC50b3AtaS5kb2N1bWVudC5zY3JvbGxUb3AoKTtzLnBvc2l0aW9uPXtteTpcImxlZnQgdG9wXCIsYXQ6XCJsZWZ0XCIrKGE+PTA/XCIrXCI6XCJcIikrYStcIiBcIitcInRvcFwiKyhyPj0wP1wiK1wiOlwiXCIpK3Isb2Y6aS53aW5kb3d9LGkuX3JlbW92ZUNsYXNzKHQodGhpcyksXCJ1aS1kaWFsb2ctZHJhZ2dpbmdcIiksaS5fdW5ibG9ja0ZyYW1lcygpLGkuX3RyaWdnZXIoXCJkcmFnU3RvcFwiLG4sZShvKSl9fSl9LF9tYWtlUmVzaXphYmxlOmZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXtyZXR1cm57b3JpZ2luYWxQb3NpdGlvbjp0Lm9yaWdpbmFsUG9zaXRpb24sb3JpZ2luYWxTaXplOnQub3JpZ2luYWxTaXplLHBvc2l0aW9uOnQucG9zaXRpb24sc2l6ZTp0LnNpemV9fXZhciBpPXRoaXMscz10aGlzLm9wdGlvbnMsbj1zLnJlc2l6YWJsZSxvPXRoaXMudWlEaWFsb2cuY3NzKFwicG9zaXRpb25cIiksYT1cInN0cmluZ1wiPT10eXBlb2Ygbj9uOlwibixlLHMsdyxzZSxzdyxuZSxud1wiO3RoaXMudWlEaWFsb2cucmVzaXphYmxlKHtjYW5jZWw6XCIudWktZGlhbG9nLWNvbnRlbnRcIixjb250YWlubWVudDpcImRvY3VtZW50XCIsYWxzb1Jlc2l6ZTp0aGlzLmVsZW1lbnQsbWF4V2lkdGg6cy5tYXhXaWR0aCxtYXhIZWlnaHQ6cy5tYXhIZWlnaHQsbWluV2lkdGg6cy5taW5XaWR0aCxtaW5IZWlnaHQ6dGhpcy5fbWluSGVpZ2h0KCksaGFuZGxlczphLHN0YXJ0OmZ1bmN0aW9uKHMsbil7aS5fYWRkQ2xhc3ModCh0aGlzKSxcInVpLWRpYWxvZy1yZXNpemluZ1wiKSxpLl9ibG9ja0ZyYW1lcygpLGkuX3RyaWdnZXIoXCJyZXNpemVTdGFydFwiLHMsZShuKSl9LHJlc2l6ZTpmdW5jdGlvbih0LHMpe2kuX3RyaWdnZXIoXCJyZXNpemVcIix0LGUocykpfSxzdG9wOmZ1bmN0aW9uKG4sbyl7dmFyIGE9aS51aURpYWxvZy5vZmZzZXQoKSxyPWEubGVmdC1pLmRvY3VtZW50LnNjcm9sbExlZnQoKSxoPWEudG9wLWkuZG9jdW1lbnQuc2Nyb2xsVG9wKCk7cy5oZWlnaHQ9aS51aURpYWxvZy5oZWlnaHQoKSxzLndpZHRoPWkudWlEaWFsb2cud2lkdGgoKSxzLnBvc2l0aW9uPXtteTpcImxlZnQgdG9wXCIsYXQ6XCJsZWZ0XCIrKHI+PTA/XCIrXCI6XCJcIikrcitcIiBcIitcInRvcFwiKyhoPj0wP1wiK1wiOlwiXCIpK2gsb2Y6aS53aW5kb3d9LGkuX3JlbW92ZUNsYXNzKHQodGhpcyksXCJ1aS1kaWFsb2ctcmVzaXppbmdcIiksaS5fdW5ibG9ja0ZyYW1lcygpLGkuX3RyaWdnZXIoXCJyZXNpemVTdG9wXCIsbixlKG8pKX19KS5jc3MoXCJwb3NpdGlvblwiLG8pfSxfdHJhY2tGb2N1czpmdW5jdGlvbigpe3RoaXMuX29uKHRoaXMud2lkZ2V0KCkse2ZvY3VzaW46ZnVuY3Rpb24oZSl7dGhpcy5fbWFrZUZvY3VzVGFyZ2V0KCksdGhpcy5fZm9jdXNlZEVsZW1lbnQ9dChlLnRhcmdldCl9fSl9LF9tYWtlRm9jdXNUYXJnZXQ6ZnVuY3Rpb24oKXt0aGlzLl91bnRyYWNrSW5zdGFuY2UoKSx0aGlzLl90cmFja2luZ0luc3RhbmNlcygpLnVuc2hpZnQodGhpcyl9LF91bnRyYWNrSW5zdGFuY2U6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLl90cmFja2luZ0luc3RhbmNlcygpLGk9dC5pbkFycmF5KHRoaXMsZSk7LTEhPT1pJiZlLnNwbGljZShpLDEpfSxfdHJhY2tpbmdJbnN0YW5jZXM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmRvY3VtZW50LmRhdGEoXCJ1aS1kaWFsb2ctaW5zdGFuY2VzXCIpO3JldHVybiB0fHwodD1bXSx0aGlzLmRvY3VtZW50LmRhdGEoXCJ1aS1kaWFsb2ctaW5zdGFuY2VzXCIsdCkpLHR9LF9taW5IZWlnaHQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnM7cmV0dXJuXCJhdXRvXCI9PT10LmhlaWdodD90Lm1pbkhlaWdodDpNYXRoLm1pbih0Lm1pbkhlaWdodCx0LmhlaWdodCl9LF9wb3NpdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMudWlEaWFsb2cuaXMoXCI6dmlzaWJsZVwiKTt0fHx0aGlzLnVpRGlhbG9nLnNob3coKSx0aGlzLnVpRGlhbG9nLnBvc2l0aW9uKHRoaXMub3B0aW9ucy5wb3NpdGlvbiksdHx8dGhpcy51aURpYWxvZy5oaWRlKCl9LF9zZXRPcHRpb25zOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMscz0hMSxuPXt9O3QuZWFjaChlLGZ1bmN0aW9uKHQsZSl7aS5fc2V0T3B0aW9uKHQsZSksdCBpbiBpLnNpemVSZWxhdGVkT3B0aW9ucyYmKHM9ITApLHQgaW4gaS5yZXNpemFibGVSZWxhdGVkT3B0aW9ucyYmKG5bdF09ZSl9KSxzJiYodGhpcy5fc2l6ZSgpLHRoaXMuX3Bvc2l0aW9uKCkpLHRoaXMudWlEaWFsb2cuaXMoXCI6ZGF0YSh1aS1yZXNpemFibGUpXCIpJiZ0aGlzLnVpRGlhbG9nLnJlc2l6YWJsZShcIm9wdGlvblwiLG4pfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvPXRoaXMudWlEaWFsb2c7XCJkaXNhYmxlZFwiIT09ZSYmKHRoaXMuX3N1cGVyKGUsaSksXCJhcHBlbmRUb1wiPT09ZSYmdGhpcy51aURpYWxvZy5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSxcImJ1dHRvbnNcIj09PWUmJnRoaXMuX2NyZWF0ZUJ1dHRvbnMoKSxcImNsb3NlVGV4dFwiPT09ZSYmdGhpcy51aURpYWxvZ1RpdGxlYmFyQ2xvc2UuYnV0dG9uKHtsYWJlbDp0KFwiPGE+XCIpLnRleHQoXCJcIit0aGlzLm9wdGlvbnMuY2xvc2VUZXh0KS5odG1sKCl9KSxcImRyYWdnYWJsZVwiPT09ZSYmKHM9by5pcyhcIjpkYXRhKHVpLWRyYWdnYWJsZSlcIikscyYmIWkmJm8uZHJhZ2dhYmxlKFwiZGVzdHJveVwiKSwhcyYmaSYmdGhpcy5fbWFrZURyYWdnYWJsZSgpKSxcInBvc2l0aW9uXCI9PT1lJiZ0aGlzLl9wb3NpdGlvbigpLFwicmVzaXphYmxlXCI9PT1lJiYobj1vLmlzKFwiOmRhdGEodWktcmVzaXphYmxlKVwiKSxuJiYhaSYmby5yZXNpemFibGUoXCJkZXN0cm95XCIpLG4mJlwic3RyaW5nXCI9PXR5cGVvZiBpJiZvLnJlc2l6YWJsZShcIm9wdGlvblwiLFwiaGFuZGxlc1wiLGkpLG58fGk9PT0hMXx8dGhpcy5fbWFrZVJlc2l6YWJsZSgpKSxcInRpdGxlXCI9PT1lJiZ0aGlzLl90aXRsZSh0aGlzLnVpRGlhbG9nVGl0bGViYXIuZmluZChcIi51aS1kaWFsb2ctdGl0bGVcIikpKX0sX3NpemU6ZnVuY3Rpb24oKXt2YXIgdCxlLGkscz10aGlzLm9wdGlvbnM7dGhpcy5lbGVtZW50LnNob3coKS5jc3Moe3dpZHRoOlwiYXV0b1wiLG1pbkhlaWdodDowLG1heEhlaWdodDpcIm5vbmVcIixoZWlnaHQ6MH0pLHMubWluV2lkdGg+cy53aWR0aCYmKHMud2lkdGg9cy5taW5XaWR0aCksdD10aGlzLnVpRGlhbG9nLmNzcyh7aGVpZ2h0OlwiYXV0b1wiLHdpZHRoOnMud2lkdGh9KS5vdXRlckhlaWdodCgpLGU9TWF0aC5tYXgoMCxzLm1pbkhlaWdodC10KSxpPVwibnVtYmVyXCI9PXR5cGVvZiBzLm1heEhlaWdodD9NYXRoLm1heCgwLHMubWF4SGVpZ2h0LXQpOlwibm9uZVwiLFwiYXV0b1wiPT09cy5oZWlnaHQ/dGhpcy5lbGVtZW50LmNzcyh7bWluSGVpZ2h0OmUsbWF4SGVpZ2h0OmksaGVpZ2h0OlwiYXV0b1wifSk6dGhpcy5lbGVtZW50LmhlaWdodChNYXRoLm1heCgwLHMuaGVpZ2h0LXQpKSx0aGlzLnVpRGlhbG9nLmlzKFwiOmRhdGEodWktcmVzaXphYmxlKVwiKSYmdGhpcy51aURpYWxvZy5yZXNpemFibGUoXCJvcHRpb25cIixcIm1pbkhlaWdodFwiLHRoaXMuX21pbkhlaWdodCgpKX0sX2Jsb2NrRnJhbWVzOmZ1bmN0aW9uKCl7dGhpcy5pZnJhbWVCbG9ja3M9dGhpcy5kb2N1bWVudC5maW5kKFwiaWZyYW1lXCIpLm1hcChmdW5jdGlvbigpe3ZhciBlPXQodGhpcyk7cmV0dXJuIHQoXCI8ZGl2PlwiKS5jc3Moe3Bvc2l0aW9uOlwiYWJzb2x1dGVcIix3aWR0aDplLm91dGVyV2lkdGgoKSxoZWlnaHQ6ZS5vdXRlckhlaWdodCgpfSkuYXBwZW5kVG8oZS5wYXJlbnQoKSkub2Zmc2V0KGUub2Zmc2V0KCkpWzBdfSl9LF91bmJsb2NrRnJhbWVzOmZ1bmN0aW9uKCl7dGhpcy5pZnJhbWVCbG9ja3MmJih0aGlzLmlmcmFtZUJsb2Nrcy5yZW1vdmUoKSxkZWxldGUgdGhpcy5pZnJhbWVCbG9ja3MpfSxfYWxsb3dJbnRlcmFjdGlvbjpmdW5jdGlvbihlKXtyZXR1cm4gdChlLnRhcmdldCkuY2xvc2VzdChcIi51aS1kaWFsb2dcIikubGVuZ3RoPyEwOiEhdChlLnRhcmdldCkuY2xvc2VzdChcIi51aS1kYXRlcGlja2VyXCIpLmxlbmd0aH0sX2NyZWF0ZU92ZXJsYXk6ZnVuY3Rpb24oKXtpZih0aGlzLm9wdGlvbnMubW9kYWwpe3ZhciBlPSEwO3RoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7ZT0hMX0pLHRoaXMuZG9jdW1lbnQuZGF0YShcInVpLWRpYWxvZy1vdmVybGF5c1wiKXx8dGhpcy5fb24odGhpcy5kb2N1bWVudCx7Zm9jdXNpbjpmdW5jdGlvbih0KXtlfHx0aGlzLl9hbGxvd0ludGVyYWN0aW9uKHQpfHwodC5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuX3RyYWNraW5nSW5zdGFuY2VzKClbMF0uX2ZvY3VzVGFiYmFibGUoKSl9fSksdGhpcy5vdmVybGF5PXQoXCI8ZGl2PlwiKS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSx0aGlzLl9hZGRDbGFzcyh0aGlzLm92ZXJsYXksbnVsbCxcInVpLXdpZGdldC1vdmVybGF5IHVpLWZyb250XCIpLHRoaXMuX29uKHRoaXMub3ZlcmxheSx7bW91c2Vkb3duOlwiX2tlZXBGb2N1c1wifSksdGhpcy5kb2N1bWVudC5kYXRhKFwidWktZGlhbG9nLW92ZXJsYXlzXCIsKHRoaXMuZG9jdW1lbnQuZGF0YShcInVpLWRpYWxvZy1vdmVybGF5c1wiKXx8MCkrMSl9fSxfZGVzdHJveU92ZXJsYXk6ZnVuY3Rpb24oKXtpZih0aGlzLm9wdGlvbnMubW9kYWwmJnRoaXMub3ZlcmxheSl7dmFyIHQ9dGhpcy5kb2N1bWVudC5kYXRhKFwidWktZGlhbG9nLW92ZXJsYXlzXCIpLTE7dD90aGlzLmRvY3VtZW50LmRhdGEoXCJ1aS1kaWFsb2ctb3ZlcmxheXNcIix0KToodGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQsXCJmb2N1c2luXCIpLHRoaXMuZG9jdW1lbnQucmVtb3ZlRGF0YShcInVpLWRpYWxvZy1vdmVybGF5c1wiKSksdGhpcy5vdmVybGF5LnJlbW92ZSgpLHRoaXMub3ZlcmxheT1udWxsfX19KSx0LnVpQmFja0NvbXBhdCE9PSExJiZ0LndpZGdldChcInVpLmRpYWxvZ1wiLHQudWkuZGlhbG9nLHtvcHRpb25zOntkaWFsb2dDbGFzczpcIlwifSxfY3JlYXRlV3JhcHBlcjpmdW5jdGlvbigpe3RoaXMuX3N1cGVyKCksdGhpcy51aURpYWxvZy5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuZGlhbG9nQ2xhc3MpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7XCJkaWFsb2dDbGFzc1wiPT09dCYmdGhpcy51aURpYWxvZy5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZGlhbG9nQ2xhc3MpLmFkZENsYXNzKGUpLHRoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKX19KSx0LnVpLmRpYWxvZyx0LndpZGdldChcInVpLmRyb3BwYWJsZVwiLHt2ZXJzaW9uOlwiMS4xMi4xXCIsd2lkZ2V0RXZlbnRQcmVmaXg6XCJkcm9wXCIsb3B0aW9uczp7YWNjZXB0OlwiKlwiLGFkZENsYXNzZXM6ITAsZ3JlZWR5OiExLHNjb3BlOlwiZGVmYXVsdFwiLHRvbGVyYW5jZTpcImludGVyc2VjdFwiLGFjdGl2YXRlOm51bGwsZGVhY3RpdmF0ZTpudWxsLGRyb3A6bnVsbCxvdXQ6bnVsbCxvdmVyOm51bGx9LF9jcmVhdGU6ZnVuY3Rpb24oKXt2YXIgZSxpPXRoaXMub3B0aW9ucyxzPWkuYWNjZXB0O3RoaXMuaXNvdmVyPSExLHRoaXMuaXNvdXQ9ITAsdGhpcy5hY2NlcHQ9dC5pc0Z1bmN0aW9uKHMpP3M6ZnVuY3Rpb24odCl7cmV0dXJuIHQuaXMocyl9LHRoaXMucHJvcG9ydGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT1hcmd1bWVudHNbMF0sdm9pZCAwKTplP2U6ZT17d2lkdGg6dGhpcy5lbGVtZW50WzBdLm9mZnNldFdpZHRoLGhlaWdodDp0aGlzLmVsZW1lbnRbMF0ub2Zmc2V0SGVpZ2h0fX0sdGhpcy5fYWRkVG9NYW5hZ2VyKGkuc2NvcGUpLGkuYWRkQ2xhc3NlcyYmdGhpcy5fYWRkQ2xhc3MoXCJ1aS1kcm9wcGFibGVcIil9LF9hZGRUb01hbmFnZXI6ZnVuY3Rpb24oZSl7dC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1tlXT10LnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2VdfHxbXSx0LnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2VdLnB1c2godGhpcyl9LF9zcGxpY2U6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTA7dC5sZW5ndGg+ZTtlKyspdFtlXT09PXRoaXMmJnQuc3BsaWNlKGUsMSl9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dmFyIGU9dC51aS5kZG1hbmFnZXIuZHJvcHBhYmxlc1t0aGlzLm9wdGlvbnMuc2NvcGVdO3RoaXMuX3NwbGljZShlKX0sX3NldE9wdGlvbjpmdW5jdGlvbihlLGkpe2lmKFwiYWNjZXB0XCI9PT1lKXRoaXMuYWNjZXB0PXQuaXNGdW5jdGlvbihpKT9pOmZ1bmN0aW9uKHQpe3JldHVybiB0LmlzKGkpfTtlbHNlIGlmKFwic2NvcGVcIj09PWUpe3ZhciBzPXQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbdGhpcy5vcHRpb25zLnNjb3BlXTt0aGlzLl9zcGxpY2UocyksdGhpcy5fYWRkVG9NYW5hZ2VyKGkpfXRoaXMuX3N1cGVyKGUsaSl9LF9hY3RpdmF0ZTpmdW5jdGlvbihlKXt2YXIgaT10LnVpLmRkbWFuYWdlci5jdXJyZW50O3RoaXMuX2FkZEFjdGl2ZUNsYXNzKCksaSYmdGhpcy5fdHJpZ2dlcihcImFjdGl2YXRlXCIsZSx0aGlzLnVpKGkpKX0sX2RlYWN0aXZhdGU6ZnVuY3Rpb24oZSl7dmFyIGk9dC51aS5kZG1hbmFnZXIuY3VycmVudDt0aGlzLl9yZW1vdmVBY3RpdmVDbGFzcygpLGkmJnRoaXMuX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsZSx0aGlzLnVpKGkpKX0sX292ZXI6ZnVuY3Rpb24oZSl7dmFyIGk9dC51aS5kZG1hbmFnZXIuY3VycmVudDtpJiYoaS5jdXJyZW50SXRlbXx8aS5lbGVtZW50KVswXSE9PXRoaXMuZWxlbWVudFswXSYmdGhpcy5hY2NlcHQuY2FsbCh0aGlzLmVsZW1lbnRbMF0saS5jdXJyZW50SXRlbXx8aS5lbGVtZW50KSYmKHRoaXMuX2FkZEhvdmVyQ2xhc3MoKSx0aGlzLl90cmlnZ2VyKFwib3ZlclwiLGUsdGhpcy51aShpKSkpfSxfb3V0OmZ1bmN0aW9uKGUpe3ZhciBpPXQudWkuZGRtYW5hZ2VyLmN1cnJlbnQ7aSYmKGkuY3VycmVudEl0ZW18fGkuZWxlbWVudClbMF0hPT10aGlzLmVsZW1lbnRbMF0mJnRoaXMuYWNjZXB0LmNhbGwodGhpcy5lbGVtZW50WzBdLGkuY3VycmVudEl0ZW18fGkuZWxlbWVudCkmJih0aGlzLl9yZW1vdmVIb3ZlckNsYXNzKCksdGhpcy5fdHJpZ2dlcihcIm91dFwiLGUsdGhpcy51aShpKSkpfSxfZHJvcDpmdW5jdGlvbihlLGkpe3ZhciBzPWl8fHQudWkuZGRtYW5hZ2VyLmN1cnJlbnQsbj0hMTtyZXR1cm4gcyYmKHMuY3VycmVudEl0ZW18fHMuZWxlbWVudClbMF0hPT10aGlzLmVsZW1lbnRbMF0/KHRoaXMuZWxlbWVudC5maW5kKFwiOmRhdGEodWktZHJvcHBhYmxlKVwiKS5ub3QoXCIudWktZHJhZ2dhYmxlLWRyYWdnaW5nXCIpLmVhY2goZnVuY3Rpb24oKXt2YXIgaT10KHRoaXMpLmRyb3BwYWJsZShcImluc3RhbmNlXCIpO3JldHVybiBpLm9wdGlvbnMuZ3JlZWR5JiYhaS5vcHRpb25zLmRpc2FibGVkJiZpLm9wdGlvbnMuc2NvcGU9PT1zLm9wdGlvbnMuc2NvcGUmJmkuYWNjZXB0LmNhbGwoaS5lbGVtZW50WzBdLHMuY3VycmVudEl0ZW18fHMuZWxlbWVudCkmJnYocyx0LmV4dGVuZChpLHtvZmZzZXQ6aS5lbGVtZW50Lm9mZnNldCgpfSksaS5vcHRpb25zLnRvbGVyYW5jZSxlKT8obj0hMCwhMSk6dm9pZCAwfSksbj8hMTp0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSxzLmN1cnJlbnRJdGVtfHxzLmVsZW1lbnQpPyh0aGlzLl9yZW1vdmVBY3RpdmVDbGFzcygpLHRoaXMuX3JlbW92ZUhvdmVyQ2xhc3MoKSx0aGlzLl90cmlnZ2VyKFwiZHJvcFwiLGUsdGhpcy51aShzKSksdGhpcy5lbGVtZW50KTohMSk6ITF9LHVpOmZ1bmN0aW9uKHQpe3JldHVybntkcmFnZ2FibGU6dC5jdXJyZW50SXRlbXx8dC5lbGVtZW50LGhlbHBlcjp0LmhlbHBlcixwb3NpdGlvbjp0LnBvc2l0aW9uLG9mZnNldDp0LnBvc2l0aW9uQWJzfX0sX2FkZEhvdmVyQ2xhc3M6ZnVuY3Rpb24oKXt0aGlzLl9hZGRDbGFzcyhcInVpLWRyb3BwYWJsZS1ob3ZlclwiKX0sX3JlbW92ZUhvdmVyQ2xhc3M6ZnVuY3Rpb24oKXt0aGlzLl9yZW1vdmVDbGFzcyhcInVpLWRyb3BwYWJsZS1ob3ZlclwiKX0sX2FkZEFjdGl2ZUNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fYWRkQ2xhc3MoXCJ1aS1kcm9wcGFibGUtYWN0aXZlXCIpfSxfcmVtb3ZlQWN0aXZlQ2xhc3M6ZnVuY3Rpb24oKXt0aGlzLl9yZW1vdmVDbGFzcyhcInVpLWRyb3BwYWJsZS1hY3RpdmVcIil9fSk7dmFyIHY9dC51aS5pbnRlcnNlY3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxpKXtyZXR1cm4gdD49ZSYmZStpPnR9cmV0dXJuIGZ1bmN0aW9uKGUsaSxzLG4pe2lmKCFpLm9mZnNldClyZXR1cm4hMTt2YXIgbz0oZS5wb3NpdGlvbkFic3x8ZS5wb3NpdGlvbi5hYnNvbHV0ZSkubGVmdCtlLm1hcmdpbnMubGVmdCxhPShlLnBvc2l0aW9uQWJzfHxlLnBvc2l0aW9uLmFic29sdXRlKS50b3ArZS5tYXJnaW5zLnRvcCxyPW8rZS5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCxoPWErZS5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQsbD1pLm9mZnNldC5sZWZ0LGM9aS5vZmZzZXQudG9wLHU9bCtpLnByb3BvcnRpb25zKCkud2lkdGgsZD1jK2kucHJvcG9ydGlvbnMoKS5oZWlnaHQ7c3dpdGNoKHMpe2Nhc2VcImZpdFwiOnJldHVybiBvPj1sJiZ1Pj1yJiZhPj1jJiZkPj1oO2Nhc2VcImludGVyc2VjdFwiOnJldHVybiBvK2UuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgvMj5sJiZ1PnItZS5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aC8yJiZhK2UuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LzI+YyYmZD5oLWUuaGVscGVyUHJvcG9ydGlvbnMuaGVpZ2h0LzI7Y2FzZVwicG9pbnRlclwiOnJldHVybiB0KG4ucGFnZVksYyxpLnByb3BvcnRpb25zKCkuaGVpZ2h0KSYmdChuLnBhZ2VYLGwsaS5wcm9wb3J0aW9ucygpLndpZHRoKTtjYXNlXCJ0b3VjaFwiOnJldHVybihhPj1jJiZkPj1hfHxoPj1jJiZkPj1ofHxjPmEmJmg+ZCkmJihvPj1sJiZ1Pj1vfHxyPj1sJiZ1Pj1yfHxsPm8mJnI+dSk7ZGVmYXVsdDpyZXR1cm4hMX19fSgpO3QudWkuZGRtYW5hZ2VyPXtjdXJyZW50Om51bGwsZHJvcHBhYmxlczp7XCJkZWZhdWx0XCI6W119LHByZXBhcmVPZmZzZXRzOmZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvPXQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbZS5vcHRpb25zLnNjb3BlXXx8W10sYT1pP2kudHlwZTpudWxsLHI9KGUuY3VycmVudEl0ZW18fGUuZWxlbWVudCkuZmluZChcIjpkYXRhKHVpLWRyb3BwYWJsZSlcIikuYWRkQmFjaygpO3Q6Zm9yKHM9MDtvLmxlbmd0aD5zO3MrKylpZighKG9bc10ub3B0aW9ucy5kaXNhYmxlZHx8ZSYmIW9bc10uYWNjZXB0LmNhbGwob1tzXS5lbGVtZW50WzBdLGUuY3VycmVudEl0ZW18fGUuZWxlbWVudCkpKXtmb3Iobj0wO3IubGVuZ3RoPm47bisrKWlmKHJbbl09PT1vW3NdLmVsZW1lbnRbMF0pe29bc10ucHJvcG9ydGlvbnMoKS5oZWlnaHQ9MDtjb250aW51ZSB0fW9bc10udmlzaWJsZT1cIm5vbmVcIiE9PW9bc10uZWxlbWVudC5jc3MoXCJkaXNwbGF5XCIpLG9bc10udmlzaWJsZSYmKFwibW91c2Vkb3duXCI9PT1hJiZvW3NdLl9hY3RpdmF0ZS5jYWxsKG9bc10saSksb1tzXS5vZmZzZXQ9b1tzXS5lbGVtZW50Lm9mZnNldCgpLG9bc10ucHJvcG9ydGlvbnMoe3dpZHRoOm9bc10uZWxlbWVudFswXS5vZmZzZXRXaWR0aCxoZWlnaHQ6b1tzXS5lbGVtZW50WzBdLm9mZnNldEhlaWdodH0pKX19LGRyb3A6ZnVuY3Rpb24oZSxpKXt2YXIgcz0hMTtyZXR1cm4gdC5lYWNoKCh0LnVpLmRkbWFuYWdlci5kcm9wcGFibGVzW2Uub3B0aW9ucy5zY29wZV18fFtdKS5zbGljZSgpLGZ1bmN0aW9uKCl7dGhpcy5vcHRpb25zJiYoIXRoaXMub3B0aW9ucy5kaXNhYmxlZCYmdGhpcy52aXNpYmxlJiZ2KGUsdGhpcyx0aGlzLm9wdGlvbnMudG9sZXJhbmNlLGkpJiYocz10aGlzLl9kcm9wLmNhbGwodGhpcyxpKXx8cyksIXRoaXMub3B0aW9ucy5kaXNhYmxlZCYmdGhpcy52aXNpYmxlJiZ0aGlzLmFjY2VwdC5jYWxsKHRoaXMuZWxlbWVudFswXSxlLmN1cnJlbnRJdGVtfHxlLmVsZW1lbnQpJiYodGhpcy5pc291dD0hMCx0aGlzLmlzb3Zlcj0hMSx0aGlzLl9kZWFjdGl2YXRlLmNhbGwodGhpcyxpKSkpfSksc30sZHJhZ1N0YXJ0OmZ1bmN0aW9uKGUsaSl7ZS5lbGVtZW50LnBhcmVudHNVbnRpbChcImJvZHlcIikub24oXCJzY3JvbGwuZHJvcHBhYmxlXCIsZnVuY3Rpb24oKXtlLm9wdGlvbnMucmVmcmVzaFBvc2l0aW9uc3x8dC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoZSxpKX0pfSxkcmFnOmZ1bmN0aW9uKGUsaSl7ZS5vcHRpb25zLnJlZnJlc2hQb3NpdGlvbnMmJnQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKGUsaSksdC5lYWNoKHQudWkuZGRtYW5hZ2VyLmRyb3BwYWJsZXNbZS5vcHRpb25zLnNjb3BlXXx8W10sZnVuY3Rpb24oKXtpZighdGhpcy5vcHRpb25zLmRpc2FibGVkJiYhdGhpcy5ncmVlZHlDaGlsZCYmdGhpcy52aXNpYmxlKXt2YXIgcyxuLG8sYT12KGUsdGhpcyx0aGlzLm9wdGlvbnMudG9sZXJhbmNlLGkpLHI9IWEmJnRoaXMuaXNvdmVyP1wiaXNvdXRcIjphJiYhdGhpcy5pc292ZXI/XCJpc292ZXJcIjpudWxsO3ImJih0aGlzLm9wdGlvbnMuZ3JlZWR5JiYobj10aGlzLm9wdGlvbnMuc2NvcGUsbz10aGlzLmVsZW1lbnQucGFyZW50cyhcIjpkYXRhKHVpLWRyb3BwYWJsZSlcIikuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIHQodGhpcykuZHJvcHBhYmxlKFwiaW5zdGFuY2VcIikub3B0aW9ucy5zY29wZT09PW59KSxvLmxlbmd0aCYmKHM9dChvWzBdKS5kcm9wcGFibGUoXCJpbnN0YW5jZVwiKSxzLmdyZWVkeUNoaWxkPVwiaXNvdmVyXCI9PT1yKSkscyYmXCJpc292ZXJcIj09PXImJihzLmlzb3Zlcj0hMSxzLmlzb3V0PSEwLHMuX291dC5jYWxsKHMsaSkpLHRoaXNbcl09ITAsdGhpc1tcImlzb3V0XCI9PT1yP1wiaXNvdmVyXCI6XCJpc291dFwiXT0hMSx0aGlzW1wiaXNvdmVyXCI9PT1yP1wiX292ZXJcIjpcIl9vdXRcIl0uY2FsbCh0aGlzLGkpLHMmJlwiaXNvdXRcIj09PXImJihzLmlzb3V0PSExLHMuaXNvdmVyPSEwLHMuX292ZXIuY2FsbChzLGkpKSl9fSl9LGRyYWdTdG9wOmZ1bmN0aW9uKGUsaSl7ZS5lbGVtZW50LnBhcmVudHNVbnRpbChcImJvZHlcIikub2ZmKFwic2Nyb2xsLmRyb3BwYWJsZVwiKSxlLm9wdGlvbnMucmVmcmVzaFBvc2l0aW9uc3x8dC51aS5kZG1hbmFnZXIucHJlcGFyZU9mZnNldHMoZSxpKX19LHQudWlCYWNrQ29tcGF0IT09ITEmJnQud2lkZ2V0KFwidWkuZHJvcHBhYmxlXCIsdC51aS5kcm9wcGFibGUse29wdGlvbnM6e2hvdmVyQ2xhc3M6ITEsYWN0aXZlQ2xhc3M6ITF9LF9hZGRBY3RpdmVDbGFzczpmdW5jdGlvbigpe3RoaXMuX3N1cGVyKCksdGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzJiZ0aGlzLmVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmFjdGl2ZUNsYXNzKX0sX3JlbW92ZUFjdGl2ZUNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fc3VwZXIoKSx0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MmJnRoaXMuZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuYWN0aXZlQ2xhc3MpfSxfYWRkSG92ZXJDbGFzczpmdW5jdGlvbigpe3RoaXMuX3N1cGVyKCksdGhpcy5vcHRpb25zLmhvdmVyQ2xhc3MmJnRoaXMuZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyl9LF9yZW1vdmVIb3ZlckNsYXNzOmZ1bmN0aW9uKCl7dGhpcy5fc3VwZXIoKSx0aGlzLm9wdGlvbnMuaG92ZXJDbGFzcyYmdGhpcy5lbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ob3ZlckNsYXNzKX19KSx0LnVpLmRyb3BwYWJsZSx0LndpZGdldChcInVpLnByb2dyZXNzYmFyXCIse3ZlcnNpb246XCIxLjEyLjFcIixvcHRpb25zOntjbGFzc2VzOntcInVpLXByb2dyZXNzYmFyXCI6XCJ1aS1jb3JuZXItYWxsXCIsXCJ1aS1wcm9ncmVzc2Jhci12YWx1ZVwiOlwidWktY29ybmVyLWxlZnRcIixcInVpLXByb2dyZXNzYmFyLWNvbXBsZXRlXCI6XCJ1aS1jb3JuZXItcmlnaHRcIn0sbWF4OjEwMCx2YWx1ZTowLGNoYW5nZTpudWxsLGNvbXBsZXRlOm51bGx9LG1pbjowLF9jcmVhdGU6ZnVuY3Rpb24oKXt0aGlzLm9sZFZhbHVlPXRoaXMub3B0aW9ucy52YWx1ZT10aGlzLl9jb25zdHJhaW5lZFZhbHVlKCksdGhpcy5lbGVtZW50LmF0dHIoe3JvbGU6XCJwcm9ncmVzc2JhclwiLFwiYXJpYS12YWx1ZW1pblwiOnRoaXMubWlufSksdGhpcy5fYWRkQ2xhc3MoXCJ1aS1wcm9ncmVzc2JhclwiLFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50XCIpLHRoaXMudmFsdWVEaXY9dChcIjxkaXY+XCIpLmFwcGVuZFRvKHRoaXMuZWxlbWVudCksdGhpcy5fYWRkQ2xhc3ModGhpcy52YWx1ZURpdixcInVpLXByb2dyZXNzYmFyLXZhbHVlXCIsXCJ1aS13aWRnZXQtaGVhZGVyXCIpLHRoaXMuX3JlZnJlc2hWYWx1ZSgpfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwicm9sZSBhcmlhLXZhbHVlbWluIGFyaWEtdmFsdWVtYXggYXJpYS12YWx1ZW5vd1wiKSx0aGlzLnZhbHVlRGl2LnJlbW92ZSgpfSx2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dD90aGlzLm9wdGlvbnMudmFsdWU6KHRoaXMub3B0aW9ucy52YWx1ZT10aGlzLl9jb25zdHJhaW5lZFZhbHVlKHQpLHRoaXMuX3JlZnJlc2hWYWx1ZSgpLHZvaWQgMCl9LF9jb25zdHJhaW5lZFZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD10aGlzLm9wdGlvbnMudmFsdWUpLHRoaXMuaW5kZXRlcm1pbmF0ZT10PT09ITEsXCJudW1iZXJcIiE9dHlwZW9mIHQmJih0PTApLHRoaXMuaW5kZXRlcm1pbmF0ZT8hMTpNYXRoLm1pbih0aGlzLm9wdGlvbnMubWF4LE1hdGgubWF4KHRoaXMubWluLHQpKX0sX3NldE9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU9dC52YWx1ZTtkZWxldGUgdC52YWx1ZSx0aGlzLl9zdXBlcih0KSx0aGlzLm9wdGlvbnMudmFsdWU9dGhpcy5fY29uc3RyYWluZWRWYWx1ZShlKSx0aGlzLl9yZWZyZXNoVmFsdWUoKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe1wibWF4XCI9PT10JiYoZT1NYXRoLm1heCh0aGlzLm1pbixlKSksdGhpcy5fc3VwZXIodCxlKX0sX3NldE9wdGlvbkRpc2FibGVkOmZ1bmN0aW9uKHQpe3RoaXMuX3N1cGVyKHQpLHRoaXMuZWxlbWVudC5hdHRyKFwiYXJpYS1kaXNhYmxlZFwiLHQpLHRoaXMuX3RvZ2dsZUNsYXNzKG51bGwsXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiLCEhdCl9LF9wZXJjZW50YWdlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5kZXRlcm1pbmF0ZT8xMDA6MTAwKih0aGlzLm9wdGlvbnMudmFsdWUtdGhpcy5taW4pLyh0aGlzLm9wdGlvbnMubWF4LXRoaXMubWluKX0sX3JlZnJlc2hWYWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9ucy52YWx1ZSxpPXRoaXMuX3BlcmNlbnRhZ2UoKTt0aGlzLnZhbHVlRGl2LnRvZ2dsZSh0aGlzLmluZGV0ZXJtaW5hdGV8fGU+dGhpcy5taW4pLndpZHRoKGkudG9GaXhlZCgwKStcIiVcIiksdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy52YWx1ZURpdixcInVpLXByb2dyZXNzYmFyLWNvbXBsZXRlXCIsbnVsbCxlPT09dGhpcy5vcHRpb25zLm1heCkuX3RvZ2dsZUNsYXNzKFwidWktcHJvZ3Jlc3NiYXItaW5kZXRlcm1pbmF0ZVwiLG51bGwsdGhpcy5pbmRldGVybWluYXRlKSx0aGlzLmluZGV0ZXJtaW5hdGU/KHRoaXMuZWxlbWVudC5yZW1vdmVBdHRyKFwiYXJpYS12YWx1ZW5vd1wiKSx0aGlzLm92ZXJsYXlEaXZ8fCh0aGlzLm92ZXJsYXlEaXY9dChcIjxkaXY+XCIpLmFwcGVuZFRvKHRoaXMudmFsdWVEaXYpLHRoaXMuX2FkZENsYXNzKHRoaXMub3ZlcmxheURpdixcInVpLXByb2dyZXNzYmFyLW92ZXJsYXlcIikpKToodGhpcy5lbGVtZW50LmF0dHIoe1wiYXJpYS12YWx1ZW1heFwiOnRoaXMub3B0aW9ucy5tYXgsXCJhcmlhLXZhbHVlbm93XCI6ZX0pLHRoaXMub3ZlcmxheURpdiYmKHRoaXMub3ZlcmxheURpdi5yZW1vdmUoKSx0aGlzLm92ZXJsYXlEaXY9bnVsbCkpLHRoaXMub2xkVmFsdWUhPT1lJiYodGhpcy5vbGRWYWx1ZT1lLHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIikpLGU9PT10aGlzLm9wdGlvbnMubWF4JiZ0aGlzLl90cmlnZ2VyKFwiY29tcGxldGVcIil9fSksdC53aWRnZXQoXCJ1aS5zZWxlY3RhYmxlXCIsdC51aS5tb3VzZSx7dmVyc2lvbjpcIjEuMTIuMVwiLG9wdGlvbnM6e2FwcGVuZFRvOlwiYm9keVwiLGF1dG9SZWZyZXNoOiEwLGRpc3RhbmNlOjAsZmlsdGVyOlwiKlwiLHRvbGVyYW5jZTpcInRvdWNoXCIsc2VsZWN0ZWQ6bnVsbCxzZWxlY3Rpbmc6bnVsbCxzdGFydDpudWxsLHN0b3A6bnVsbCx1bnNlbGVjdGVkOm51bGwsdW5zZWxlY3Rpbmc6bnVsbH0sX2NyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5fYWRkQ2xhc3MoXCJ1aS1zZWxlY3RhYmxlXCIpLHRoaXMuZHJhZ2dlZD0hMSx0aGlzLnJlZnJlc2g9ZnVuY3Rpb24oKXtlLmVsZW1lbnRQb3M9dChlLmVsZW1lbnRbMF0pLm9mZnNldCgpLGUuc2VsZWN0ZWVzPXQoZS5vcHRpb25zLmZpbHRlcixlLmVsZW1lbnRbMF0pLGUuX2FkZENsYXNzKGUuc2VsZWN0ZWVzLFwidWktc2VsZWN0ZWVcIiksZS5zZWxlY3RlZXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQodGhpcykscz1pLm9mZnNldCgpLG49e2xlZnQ6cy5sZWZ0LWUuZWxlbWVudFBvcy5sZWZ0LHRvcDpzLnRvcC1lLmVsZW1lbnRQb3MudG9wfTt0LmRhdGEodGhpcyxcInNlbGVjdGFibGUtaXRlbVwiLHtlbGVtZW50OnRoaXMsJGVsZW1lbnQ6aSxsZWZ0Om4ubGVmdCx0b3A6bi50b3AscmlnaHQ6bi5sZWZ0K2kub3V0ZXJXaWR0aCgpLGJvdHRvbTpuLnRvcCtpLm91dGVySGVpZ2h0KCksc3RhcnRzZWxlY3RlZDohMSxzZWxlY3RlZDppLmhhc0NsYXNzKFwidWktc2VsZWN0ZWRcIiksc2VsZWN0aW5nOmkuaGFzQ2xhc3MoXCJ1aS1zZWxlY3RpbmdcIiksdW5zZWxlY3Rpbmc6aS5oYXNDbGFzcyhcInVpLXVuc2VsZWN0aW5nXCIpfSl9KX0sdGhpcy5yZWZyZXNoKCksdGhpcy5fbW91c2VJbml0KCksdGhpcy5oZWxwZXI9dChcIjxkaXY+XCIpLHRoaXMuX2FkZENsYXNzKHRoaXMuaGVscGVyLFwidWktc2VsZWN0YWJsZS1oZWxwZXJcIil9LF9kZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5zZWxlY3RlZXMucmVtb3ZlRGF0YShcInNlbGVjdGFibGUtaXRlbVwiKSx0aGlzLl9tb3VzZURlc3Ryb3koKX0sX21vdXNlU3RhcnQ6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcyxzPXRoaXMub3B0aW9uczt0aGlzLm9wb3M9W2UucGFnZVgsZS5wYWdlWV0sdGhpcy5lbGVtZW50UG9zPXQodGhpcy5lbGVtZW50WzBdKS5vZmZzZXQoKSx0aGlzLm9wdGlvbnMuZGlzYWJsZWR8fCh0aGlzLnNlbGVjdGVlcz10KHMuZmlsdGVyLHRoaXMuZWxlbWVudFswXSksdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsZSksdChzLmFwcGVuZFRvKS5hcHBlbmQodGhpcy5oZWxwZXIpLHRoaXMuaGVscGVyLmNzcyh7bGVmdDplLnBhZ2VYLHRvcDplLnBhZ2VZLHdpZHRoOjAsaGVpZ2h0OjB9KSxzLmF1dG9SZWZyZXNoJiZ0aGlzLnJlZnJlc2goKSx0aGlzLnNlbGVjdGVlcy5maWx0ZXIoXCIudWktc2VsZWN0ZWRcIikuZWFjaChmdW5jdGlvbigpe3ZhciBzPXQuZGF0YSh0aGlzLFwic2VsZWN0YWJsZS1pdGVtXCIpO3Muc3RhcnRzZWxlY3RlZD0hMCxlLm1ldGFLZXl8fGUuY3RybEtleXx8KGkuX3JlbW92ZUNsYXNzKHMuJGVsZW1lbnQsXCJ1aS1zZWxlY3RlZFwiKSxzLnNlbGVjdGVkPSExLGkuX2FkZENsYXNzKHMuJGVsZW1lbnQsXCJ1aS11bnNlbGVjdGluZ1wiKSxzLnVuc2VsZWN0aW5nPSEwLGkuX3RyaWdnZXIoXCJ1bnNlbGVjdGluZ1wiLGUse3Vuc2VsZWN0aW5nOnMuZWxlbWVudH0pKX0pLHQoZS50YXJnZXQpLnBhcmVudHMoKS5hZGRCYWNrKCkuZWFjaChmdW5jdGlvbigpe3ZhciBzLG49dC5kYXRhKHRoaXMsXCJzZWxlY3RhYmxlLWl0ZW1cIik7cmV0dXJuIG4/KHM9IWUubWV0YUtleSYmIWUuY3RybEtleXx8IW4uJGVsZW1lbnQuaGFzQ2xhc3MoXCJ1aS1zZWxlY3RlZFwiKSxpLl9yZW1vdmVDbGFzcyhuLiRlbGVtZW50LHM/XCJ1aS11bnNlbGVjdGluZ1wiOlwidWktc2VsZWN0ZWRcIikuX2FkZENsYXNzKG4uJGVsZW1lbnQscz9cInVpLXNlbGVjdGluZ1wiOlwidWktdW5zZWxlY3RpbmdcIiksbi51bnNlbGVjdGluZz0hcyxuLnNlbGVjdGluZz1zLG4uc2VsZWN0ZWQ9cyxzP2kuX3RyaWdnZXIoXCJzZWxlY3RpbmdcIixlLHtzZWxlY3Rpbmc6bi5lbGVtZW50fSk6aS5fdHJpZ2dlcihcInVuc2VsZWN0aW5nXCIsZSx7dW5zZWxlY3Rpbmc6bi5lbGVtZW50fSksITEpOnZvaWQgMH0pKX0sX21vdXNlRHJhZzpmdW5jdGlvbihlKXtpZih0aGlzLmRyYWdnZWQ9ITAsIXRoaXMub3B0aW9ucy5kaXNhYmxlZCl7dmFyIGkscz10aGlzLG49dGhpcy5vcHRpb25zLG89dGhpcy5vcG9zWzBdLGE9dGhpcy5vcG9zWzFdLHI9ZS5wYWdlWCxoPWUucGFnZVk7cmV0dXJuIG8+ciYmKGk9cixyPW8sbz1pKSxhPmgmJihpPWgsaD1hLGE9aSksdGhpcy5oZWxwZXIuY3NzKHtsZWZ0Om8sdG9wOmEsd2lkdGg6ci1vLGhlaWdodDpoLWF9KSx0aGlzLnNlbGVjdGVlcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9dC5kYXRhKHRoaXMsXCJzZWxlY3RhYmxlLWl0ZW1cIiksbD0hMSxjPXt9O2kmJmkuZWxlbWVudCE9PXMuZWxlbWVudFswXSYmKGMubGVmdD1pLmxlZnQrcy5lbGVtZW50UG9zLmxlZnQsYy5yaWdodD1pLnJpZ2h0K3MuZWxlbWVudFBvcy5sZWZ0LGMudG9wPWkudG9wK3MuZWxlbWVudFBvcy50b3AsYy5ib3R0b209aS5ib3R0b20rcy5lbGVtZW50UG9zLnRvcCxcInRvdWNoXCI9PT1uLnRvbGVyYW5jZT9sPSEoYy5sZWZ0PnJ8fG8+Yy5yaWdodHx8Yy50b3A+aHx8YT5jLmJvdHRvbSk6XCJmaXRcIj09PW4udG9sZXJhbmNlJiYobD1jLmxlZnQ+byYmcj5jLnJpZ2h0JiZjLnRvcD5hJiZoPmMuYm90dG9tKSxsPyhpLnNlbGVjdGVkJiYocy5fcmVtb3ZlQ2xhc3MoaS4kZWxlbWVudCxcInVpLXNlbGVjdGVkXCIpLGkuc2VsZWN0ZWQ9ITEpLGkudW5zZWxlY3RpbmcmJihzLl9yZW1vdmVDbGFzcyhpLiRlbGVtZW50LFwidWktdW5zZWxlY3RpbmdcIiksaS51bnNlbGVjdGluZz0hMSksaS5zZWxlY3Rpbmd8fChzLl9hZGRDbGFzcyhpLiRlbGVtZW50LFwidWktc2VsZWN0aW5nXCIpLGkuc2VsZWN0aW5nPSEwLHMuX3RyaWdnZXIoXCJzZWxlY3RpbmdcIixlLHtzZWxlY3Rpbmc6aS5lbGVtZW50fSkpKTooaS5zZWxlY3RpbmcmJigoZS5tZXRhS2V5fHxlLmN0cmxLZXkpJiZpLnN0YXJ0c2VsZWN0ZWQ/KHMuX3JlbW92ZUNsYXNzKGkuJGVsZW1lbnQsXCJ1aS1zZWxlY3RpbmdcIiksaS5zZWxlY3Rpbmc9ITEscy5fYWRkQ2xhc3MoaS4kZWxlbWVudCxcInVpLXNlbGVjdGVkXCIpLGkuc2VsZWN0ZWQ9ITApOihzLl9yZW1vdmVDbGFzcyhpLiRlbGVtZW50LFwidWktc2VsZWN0aW5nXCIpLGkuc2VsZWN0aW5nPSExLGkuc3RhcnRzZWxlY3RlZCYmKHMuX2FkZENsYXNzKGkuJGVsZW1lbnQsXCJ1aS11bnNlbGVjdGluZ1wiKSxpLnVuc2VsZWN0aW5nPSEwKSxzLl90cmlnZ2VyKFwidW5zZWxlY3RpbmdcIixlLHt1bnNlbGVjdGluZzppLmVsZW1lbnR9KSkpLGkuc2VsZWN0ZWQmJihlLm1ldGFLZXl8fGUuY3RybEtleXx8aS5zdGFydHNlbGVjdGVkfHwocy5fcmVtb3ZlQ2xhc3MoaS4kZWxlbWVudCxcInVpLXNlbGVjdGVkXCIpLGkuc2VsZWN0ZWQ9ITEscy5fYWRkQ2xhc3MoaS4kZWxlbWVudCxcInVpLXVuc2VsZWN0aW5nXCIpLGkudW5zZWxlY3Rpbmc9ITAscy5fdHJpZ2dlcihcInVuc2VsZWN0aW5nXCIsZSx7dW5zZWxlY3Rpbmc6aS5lbGVtZW50fSkpKSkpfSksITF9fSxfbW91c2VTdG9wOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXM7cmV0dXJuIHRoaXMuZHJhZ2dlZD0hMSx0KFwiLnVpLXVuc2VsZWN0aW5nXCIsdGhpcy5lbGVtZW50WzBdKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHM9dC5kYXRhKHRoaXMsXCJzZWxlY3RhYmxlLWl0ZW1cIik7aS5fcmVtb3ZlQ2xhc3Mocy4kZWxlbWVudCxcInVpLXVuc2VsZWN0aW5nXCIpLHMudW5zZWxlY3Rpbmc9ITEscy5zdGFydHNlbGVjdGVkPSExLGkuX3RyaWdnZXIoXCJ1bnNlbGVjdGVkXCIsZSx7dW5zZWxlY3RlZDpzLmVsZW1lbnR9KX0pLHQoXCIudWktc2VsZWN0aW5nXCIsdGhpcy5lbGVtZW50WzBdKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHM9dC5kYXRhKHRoaXMsXCJzZWxlY3RhYmxlLWl0ZW1cIik7aS5fcmVtb3ZlQ2xhc3Mocy4kZWxlbWVudCxcInVpLXNlbGVjdGluZ1wiKS5fYWRkQ2xhc3Mocy4kZWxlbWVudCxcInVpLXNlbGVjdGVkXCIpLHMuc2VsZWN0aW5nPSExLHMuc2VsZWN0ZWQ9ITAscy5zdGFydHNlbGVjdGVkPSEwLGkuX3RyaWdnZXIoXCJzZWxlY3RlZFwiLGUse3NlbGVjdGVkOnMuZWxlbWVudH0pfSksdGhpcy5fdHJpZ2dlcihcInN0b3BcIixlKSx0aGlzLmhlbHBlci5yZW1vdmUoKSwhMX19KSx0LndpZGdldChcInVpLnNlbGVjdG1lbnVcIixbdC51aS5mb3JtUmVzZXRNaXhpbix7dmVyc2lvbjpcIjEuMTIuMVwiLGRlZmF1bHRFbGVtZW50OlwiPHNlbGVjdD5cIixvcHRpb25zOnthcHBlbmRUbzpudWxsLGNsYXNzZXM6e1widWktc2VsZWN0bWVudS1idXR0b24tb3BlblwiOlwidWktY29ybmVyLXRvcFwiLFwidWktc2VsZWN0bWVudS1idXR0b24tY2xvc2VkXCI6XCJ1aS1jb3JuZXItYWxsXCJ9LGRpc2FibGVkOm51bGwsaWNvbnM6e2J1dHRvbjpcInVpLWljb24tdHJpYW5nbGUtMS1zXCJ9LHBvc2l0aW9uOntteTpcImxlZnQgdG9wXCIsYXQ6XCJsZWZ0IGJvdHRvbVwiLGNvbGxpc2lvbjpcIm5vbmVcIn0sd2lkdGg6ITEsY2hhbmdlOm51bGwsY2xvc2U6bnVsbCxmb2N1czpudWxsLG9wZW46bnVsbCxzZWxlY3Q6bnVsbH0sX2NyZWF0ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMuZWxlbWVudC51bmlxdWVJZCgpLmF0dHIoXCJpZFwiKTt0aGlzLmlkcz17ZWxlbWVudDplLGJ1dHRvbjplK1wiLWJ1dHRvblwiLG1lbnU6ZStcIi1tZW51XCJ9LHRoaXMuX2RyYXdCdXR0b24oKSx0aGlzLl9kcmF3TWVudSgpLHRoaXMuX2JpbmRGb3JtUmVzZXRIYW5kbGVyKCksdGhpcy5fcmVuZGVyZWQ9ITEsdGhpcy5tZW51SXRlbXM9dCgpfSxfZHJhd0J1dHRvbjpmdW5jdGlvbigpe3ZhciBlLGk9dGhpcyxzPXRoaXMuX3BhcnNlT3B0aW9uKHRoaXMuZWxlbWVudC5maW5kKFwib3B0aW9uOnNlbGVjdGVkXCIpLHRoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4KTt0aGlzLmxhYmVscz10aGlzLmVsZW1lbnQubGFiZWxzKCkuYXR0cihcImZvclwiLHRoaXMuaWRzLmJ1dHRvbiksdGhpcy5fb24odGhpcy5sYWJlbHMse2NsaWNrOmZ1bmN0aW9uKHQpe3RoaXMuYnV0dG9uLmZvY3VzKCksdC5wcmV2ZW50RGVmYXVsdCgpfX0pLHRoaXMuZWxlbWVudC5oaWRlKCksdGhpcy5idXR0b249dChcIjxzcGFuPlwiLHt0YWJpbmRleDp0aGlzLm9wdGlvbnMuZGlzYWJsZWQ/LTE6MCxpZDp0aGlzLmlkcy5idXR0b24scm9sZTpcImNvbWJvYm94XCIsXCJhcmlhLWV4cGFuZGVkXCI6XCJmYWxzZVwiLFwiYXJpYS1hdXRvY29tcGxldGVcIjpcImxpc3RcIixcImFyaWEtb3duc1wiOnRoaXMuaWRzLm1lbnUsXCJhcmlhLWhhc3BvcHVwXCI6XCJ0cnVlXCIsdGl0bGU6dGhpcy5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiKX0pLmluc2VydEFmdGVyKHRoaXMuZWxlbWVudCksdGhpcy5fYWRkQ2xhc3ModGhpcy5idXR0b24sXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbiB1aS1zZWxlY3RtZW51LWJ1dHRvbi1jbG9zZWRcIixcInVpLWJ1dHRvbiB1aS13aWRnZXRcIiksZT10KFwiPHNwYW4+XCIpLmFwcGVuZFRvKHRoaXMuYnV0dG9uKSx0aGlzLl9hZGRDbGFzcyhlLFwidWktc2VsZWN0bWVudS1pY29uXCIsXCJ1aS1pY29uIFwiK3RoaXMub3B0aW9ucy5pY29ucy5idXR0b24pLHRoaXMuYnV0dG9uSXRlbT10aGlzLl9yZW5kZXJCdXR0b25JdGVtKHMpLmFwcGVuZFRvKHRoaXMuYnV0dG9uKSx0aGlzLm9wdGlvbnMud2lkdGghPT0hMSYmdGhpcy5fcmVzaXplQnV0dG9uKCksdGhpcy5fb24odGhpcy5idXR0b24sdGhpcy5fYnV0dG9uRXZlbnRzKSx0aGlzLmJ1dHRvbi5vbmUoXCJmb2N1c2luXCIsZnVuY3Rpb24oKXtpLl9yZW5kZXJlZHx8aS5fcmVmcmVzaE1lbnUoKX0pfSxfZHJhd01lbnU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMubWVudT10KFwiPHVsPlwiLHtcImFyaWEtaGlkZGVuXCI6XCJ0cnVlXCIsXCJhcmlhLWxhYmVsbGVkYnlcIjp0aGlzLmlkcy5idXR0b24saWQ6dGhpcy5pZHMubWVudX0pLHRoaXMubWVudVdyYXA9dChcIjxkaXY+XCIpLmFwcGVuZCh0aGlzLm1lbnUpLHRoaXMuX2FkZENsYXNzKHRoaXMubWVudVdyYXAsXCJ1aS1zZWxlY3RtZW51LW1lbnVcIixcInVpLWZyb250XCIpLHRoaXMubWVudVdyYXAuYXBwZW5kVG8odGhpcy5fYXBwZW5kVG8oKSksdGhpcy5tZW51SW5zdGFuY2U9dGhpcy5tZW51Lm1lbnUoe2NsYXNzZXM6e1widWktbWVudVwiOlwidWktY29ybmVyLWJvdHRvbVwifSxyb2xlOlwibGlzdGJveFwiLHNlbGVjdDpmdW5jdGlvbih0LGkpe3QucHJldmVudERlZmF1bHQoKSxlLl9zZXRTZWxlY3Rpb24oKSxlLl9zZWxlY3QoaS5pdGVtLmRhdGEoXCJ1aS1zZWxlY3RtZW51LWl0ZW1cIiksdCl9LGZvY3VzOmZ1bmN0aW9uKHQsaSl7dmFyIHM9aS5pdGVtLmRhdGEoXCJ1aS1zZWxlY3RtZW51LWl0ZW1cIik7bnVsbCE9ZS5mb2N1c0luZGV4JiZzLmluZGV4IT09ZS5mb2N1c0luZGV4JiYoZS5fdHJpZ2dlcihcImZvY3VzXCIsdCx7aXRlbTpzfSksZS5pc09wZW58fGUuX3NlbGVjdChzLHQpKSxlLmZvY3VzSW5kZXg9cy5pbmRleCxlLmJ1dHRvbi5hdHRyKFwiYXJpYS1hY3RpdmVkZXNjZW5kYW50XCIsZS5tZW51SXRlbXMuZXEocy5pbmRleCkuYXR0cihcImlkXCIpKX19KS5tZW51KFwiaW5zdGFuY2VcIiksdGhpcy5tZW51SW5zdGFuY2UuX29mZih0aGlzLm1lbnUsXCJtb3VzZWxlYXZlXCIpLHRoaXMubWVudUluc3RhbmNlLl9jbG9zZU9uRG9jdW1lbnRDbGljaz1mdW5jdGlvbigpe3JldHVybiExfSx0aGlzLm1lbnVJbnN0YW5jZS5faXNEaXZpZGVyPWZ1bmN0aW9uKCl7cmV0dXJuITF9fSxyZWZyZXNoOmZ1bmN0aW9uKCl7dGhpcy5fcmVmcmVzaE1lbnUoKSx0aGlzLmJ1dHRvbkl0ZW0ucmVwbGFjZVdpdGgodGhpcy5idXR0b25JdGVtPXRoaXMuX3JlbmRlckJ1dHRvbkl0ZW0odGhpcy5fZ2V0U2VsZWN0ZWRJdGVtKCkuZGF0YShcInVpLXNlbGVjdG1lbnUtaXRlbVwiKXx8e30pKSxudWxsPT09dGhpcy5vcHRpb25zLndpZHRoJiZ0aGlzLl9yZXNpemVCdXR0b24oKX0sX3JlZnJlc2hNZW51OmZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLmVsZW1lbnQuZmluZChcIm9wdGlvblwiKTt0aGlzLm1lbnUuZW1wdHkoKSx0aGlzLl9wYXJzZU9wdGlvbnMoZSksdGhpcy5fcmVuZGVyTWVudSh0aGlzLm1lbnUsdGhpcy5pdGVtcyksdGhpcy5tZW51SW5zdGFuY2UucmVmcmVzaCgpLHRoaXMubWVudUl0ZW1zPXRoaXMubWVudS5maW5kKFwibGlcIikubm90KFwiLnVpLXNlbGVjdG1lbnUtb3B0Z3JvdXBcIikuZmluZChcIi51aS1tZW51LWl0ZW0td3JhcHBlclwiKSx0aGlzLl9yZW5kZXJlZD0hMCxlLmxlbmd0aCYmKHQ9dGhpcy5fZ2V0U2VsZWN0ZWRJdGVtKCksdGhpcy5tZW51SW5zdGFuY2UuZm9jdXMobnVsbCx0KSx0aGlzLl9zZXRBcmlhKHQuZGF0YShcInVpLXNlbGVjdG1lbnUtaXRlbVwiKSksdGhpcy5fc2V0T3B0aW9uKFwiZGlzYWJsZWRcIix0aGlzLmVsZW1lbnQucHJvcChcImRpc2FibGVkXCIpKSl9LG9wZW46ZnVuY3Rpb24odCl7dGhpcy5vcHRpb25zLmRpc2FibGVkfHwodGhpcy5fcmVuZGVyZWQ/KHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMubWVudS5maW5kKFwiLnVpLXN0YXRlLWFjdGl2ZVwiKSxudWxsLFwidWktc3RhdGUtYWN0aXZlXCIpLHRoaXMubWVudUluc3RhbmNlLmZvY3VzKG51bGwsdGhpcy5fZ2V0U2VsZWN0ZWRJdGVtKCkpKTp0aGlzLl9yZWZyZXNoTWVudSgpLHRoaXMubWVudUl0ZW1zLmxlbmd0aCYmKHRoaXMuaXNPcGVuPSEwLHRoaXMuX3RvZ2dsZUF0dHIoKSx0aGlzLl9yZXNpemVNZW51KCksdGhpcy5fcG9zaXRpb24oKSx0aGlzLl9vbih0aGlzLmRvY3VtZW50LHRoaXMuX2RvY3VtZW50Q2xpY2spLHRoaXMuX3RyaWdnZXIoXCJvcGVuXCIsdCkpKX0sX3Bvc2l0aW9uOmZ1bmN0aW9uKCl7dGhpcy5tZW51V3JhcC5wb3NpdGlvbih0LmV4dGVuZCh7b2Y6dGhpcy5idXR0b259LHRoaXMub3B0aW9ucy5wb3NpdGlvbikpfSxjbG9zZTpmdW5jdGlvbih0KXt0aGlzLmlzT3BlbiYmKHRoaXMuaXNPcGVuPSExLHRoaXMuX3RvZ2dsZUF0dHIoKSx0aGlzLnJhbmdlPW51bGwsdGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQpLHRoaXMuX3RyaWdnZXIoXCJjbG9zZVwiLHQpKX0sd2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYnV0dG9ufSxtZW51V2lkZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWVudX0sX3JlbmRlckJ1dHRvbkl0ZW06ZnVuY3Rpb24oZSl7dmFyIGk9dChcIjxzcGFuPlwiKTtyZXR1cm4gdGhpcy5fc2V0VGV4dChpLGUubGFiZWwpLHRoaXMuX2FkZENsYXNzKGksXCJ1aS1zZWxlY3RtZW51LXRleHRcIiksaX0sX3JlbmRlck1lbnU6ZnVuY3Rpb24oZSxpKXt2YXIgcz10aGlzLG49XCJcIjt0LmVhY2goaSxmdW5jdGlvbihpLG8pe3ZhciBhO28ub3B0Z3JvdXAhPT1uJiYoYT10KFwiPGxpPlwiLHt0ZXh0Om8ub3B0Z3JvdXB9KSxzLl9hZGRDbGFzcyhhLFwidWktc2VsZWN0bWVudS1vcHRncm91cFwiLFwidWktbWVudS1kaXZpZGVyXCIrKG8uZWxlbWVudC5wYXJlbnQoXCJvcHRncm91cFwiKS5wcm9wKFwiZGlzYWJsZWRcIik/XCIgdWktc3RhdGUtZGlzYWJsZWRcIjpcIlwiKSksYS5hcHBlbmRUbyhlKSxuPW8ub3B0Z3JvdXApLHMuX3JlbmRlckl0ZW1EYXRhKGUsbyl9KX0sX3JlbmRlckl0ZW1EYXRhOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuX3JlbmRlckl0ZW0odCxlKS5kYXRhKFwidWktc2VsZWN0bWVudS1pdGVtXCIsZSl9LF9yZW5kZXJJdGVtOmZ1bmN0aW9uKGUsaSl7dmFyIHM9dChcIjxsaT5cIiksbj10KFwiPGRpdj5cIix7dGl0bGU6aS5lbGVtZW50LmF0dHIoXCJ0aXRsZVwiKX0pO3JldHVybiBpLmRpc2FibGVkJiZ0aGlzLl9hZGRDbGFzcyhzLG51bGwsXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKSx0aGlzLl9zZXRUZXh0KG4saS5sYWJlbCkscy5hcHBlbmQobikuYXBwZW5kVG8oZSl9LF9zZXRUZXh0OmZ1bmN0aW9uKHQsZSl7ZT90LnRleHQoZSk6dC5odG1sKFwiJiMxNjA7XCIpfSxfbW92ZTpmdW5jdGlvbih0LGUpe3ZhciBpLHMsbj1cIi51aS1tZW51LWl0ZW1cIjt0aGlzLmlzT3Blbj9pPXRoaXMubWVudUl0ZW1zLmVxKHRoaXMuZm9jdXNJbmRleCkucGFyZW50KFwibGlcIik6KGk9dGhpcy5tZW51SXRlbXMuZXEodGhpcy5lbGVtZW50WzBdLnNlbGVjdGVkSW5kZXgpLnBhcmVudChcImxpXCIpLG4rPVwiOm5vdCgudWktc3RhdGUtZGlzYWJsZWQpXCIpLHM9XCJmaXJzdFwiPT09dHx8XCJsYXN0XCI9PT10P2lbXCJmaXJzdFwiPT09dD9cInByZXZBbGxcIjpcIm5leHRBbGxcIl0obikuZXEoLTEpOmlbdCtcIkFsbFwiXShuKS5lcSgwKSxzLmxlbmd0aCYmdGhpcy5tZW51SW5zdGFuY2UuZm9jdXMoZSxzKX0sX2dldFNlbGVjdGVkSXRlbTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1lbnVJdGVtcy5lcSh0aGlzLmVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleCkucGFyZW50KFwibGlcIil9LF90b2dnbGU6ZnVuY3Rpb24odCl7dGhpc1t0aGlzLmlzT3Blbj9cImNsb3NlXCI6XCJvcGVuXCJdKHQpfSxfc2V0U2VsZWN0aW9uOmZ1bmN0aW9uKCl7dmFyIHQ7dGhpcy5yYW5nZSYmKHdpbmRvdy5nZXRTZWxlY3Rpb24/KHQ9d2luZG93LmdldFNlbGVjdGlvbigpLHQucmVtb3ZlQWxsUmFuZ2VzKCksdC5hZGRSYW5nZSh0aGlzLnJhbmdlKSk6dGhpcy5yYW5nZS5zZWxlY3QoKSx0aGlzLmJ1dHRvbi5mb2N1cygpKX0sX2RvY3VtZW50Q2xpY2s6e21vdXNlZG93bjpmdW5jdGlvbihlKXt0aGlzLmlzT3BlbiYmKHQoZS50YXJnZXQpLmNsb3Nlc3QoXCIudWktc2VsZWN0bWVudS1tZW51LCAjXCIrdC51aS5lc2NhcGVTZWxlY3Rvcih0aGlzLmlkcy5idXR0b24pKS5sZW5ndGh8fHRoaXMuY2xvc2UoZSkpfX0sX2J1dHRvbkV2ZW50czp7bW91c2Vkb3duOmZ1bmN0aW9uKCl7dmFyIHQ7d2luZG93LmdldFNlbGVjdGlvbj8odD13aW5kb3cuZ2V0U2VsZWN0aW9uKCksdC5yYW5nZUNvdW50JiYodGhpcy5yYW5nZT10LmdldFJhbmdlQXQoMCkpKTp0aGlzLnJhbmdlPWRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpfSxjbGljazpmdW5jdGlvbih0KXt0aGlzLl9zZXRTZWxlY3Rpb24oKSx0aGlzLl90b2dnbGUodCl9LGtleWRvd246ZnVuY3Rpb24oZSl7dmFyIGk9ITA7c3dpdGNoKGUua2V5Q29kZSl7Y2FzZSB0LnVpLmtleUNvZGUuVEFCOmNhc2UgdC51aS5rZXlDb2RlLkVTQ0FQRTp0aGlzLmNsb3NlKGUpLGk9ITE7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuRU5URVI6dGhpcy5pc09wZW4mJnRoaXMuX3NlbGVjdEZvY3VzZWRJdGVtKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlVQOmUuYWx0S2V5P3RoaXMuX3RvZ2dsZShlKTp0aGlzLl9tb3ZlKFwicHJldlwiLGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkRPV046ZS5hbHRLZXk/dGhpcy5fdG9nZ2xlKGUpOnRoaXMuX21vdmUoXCJuZXh0XCIsZSk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuU1BBQ0U6dGhpcy5pc09wZW4/dGhpcy5fc2VsZWN0Rm9jdXNlZEl0ZW0oZSk6dGhpcy5fdG9nZ2xlKGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkxFRlQ6dGhpcy5fbW92ZShcInByZXZcIixlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5SSUdIVDp0aGlzLl9tb3ZlKFwibmV4dFwiLGUpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLkhPTUU6Y2FzZSB0LnVpLmtleUNvZGUuUEFHRV9VUDp0aGlzLl9tb3ZlKFwiZmlyc3RcIixlKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTkQ6Y2FzZSB0LnVpLmtleUNvZGUuUEFHRV9ET1dOOnRoaXMuX21vdmUoXCJsYXN0XCIsZSk7YnJlYWs7ZGVmYXVsdDp0aGlzLm1lbnUudHJpZ2dlcihlKSxpPSExfWkmJmUucHJldmVudERlZmF1bHQoKX19LF9zZWxlY3RGb2N1c2VkSXRlbTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm1lbnVJdGVtcy5lcSh0aGlzLmZvY3VzSW5kZXgpLnBhcmVudChcImxpXCIpO2UuaGFzQ2xhc3MoXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKXx8dGhpcy5fc2VsZWN0KGUuZGF0YShcInVpLXNlbGVjdG1lbnUtaXRlbVwiKSx0KX0sX3NlbGVjdDpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4O3RoaXMuZWxlbWVudFswXS5zZWxlY3RlZEluZGV4PXQuaW5kZXgsdGhpcy5idXR0b25JdGVtLnJlcGxhY2VXaXRoKHRoaXMuYnV0dG9uSXRlbT10aGlzLl9yZW5kZXJCdXR0b25JdGVtKHQpKSx0aGlzLl9zZXRBcmlhKHQpLHRoaXMuX3RyaWdnZXIoXCJzZWxlY3RcIixlLHtpdGVtOnR9KSx0LmluZGV4IT09aSYmdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLGUse2l0ZW06dH0pLHRoaXMuY2xvc2UoZSl9LF9zZXRBcmlhOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubWVudUl0ZW1zLmVxKHQuaW5kZXgpLmF0dHIoXCJpZFwiKTt0aGlzLmJ1dHRvbi5hdHRyKHtcImFyaWEtbGFiZWxsZWRieVwiOmUsXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIjplfSksdGhpcy5tZW51LmF0dHIoXCJhcmlhLWFjdGl2ZWRlc2NlbmRhbnRcIixlKX0sX3NldE9wdGlvbjpmdW5jdGlvbih0LGUpe2lmKFwiaWNvbnNcIj09PXQpe3ZhciBpPXRoaXMuYnV0dG9uLmZpbmQoXCJzcGFuLnVpLWljb25cIik7dGhpcy5fcmVtb3ZlQ2xhc3MoaSxudWxsLHRoaXMub3B0aW9ucy5pY29ucy5idXR0b24pLl9hZGRDbGFzcyhpLG51bGwsZS5idXR0b24pfXRoaXMuX3N1cGVyKHQsZSksXCJhcHBlbmRUb1wiPT09dCYmdGhpcy5tZW51V3JhcC5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbygpKSxcIndpZHRoXCI9PT10JiZ0aGlzLl9yZXNpemVCdXR0b24oKX0sX3NldE9wdGlvbkRpc2FibGVkOmZ1bmN0aW9uKHQpe3RoaXMuX3N1cGVyKHQpLHRoaXMubWVudUluc3RhbmNlLm9wdGlvbihcImRpc2FibGVkXCIsdCksdGhpcy5idXR0b24uYXR0cihcImFyaWEtZGlzYWJsZWRcIix0KSx0aGlzLl90b2dnbGVDbGFzcyh0aGlzLmJ1dHRvbixudWxsLFwidWktc3RhdGUtZGlzYWJsZWRcIix0KSx0aGlzLmVsZW1lbnQucHJvcChcImRpc2FibGVkXCIsdCksdD8odGhpcy5idXR0b24uYXR0cihcInRhYmluZGV4XCIsLTEpLHRoaXMuY2xvc2UoKSk6dGhpcy5idXR0b24uYXR0cihcInRhYmluZGV4XCIsMCl9LF9hcHBlbmRUbzpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9ucy5hcHBlbmRUbztyZXR1cm4gZSYmKGU9ZS5qcXVlcnl8fGUubm9kZVR5cGU/dChlKTp0aGlzLmRvY3VtZW50LmZpbmQoZSkuZXEoMCkpLGUmJmVbMF18fChlPXRoaXMuZWxlbWVudC5jbG9zZXN0KFwiLnVpLWZyb250LCBkaWFsb2dcIikpLGUubGVuZ3RofHwoZT10aGlzLmRvY3VtZW50WzBdLmJvZHkpLGV9LF90b2dnbGVBdHRyOmZ1bmN0aW9uKCl7dGhpcy5idXR0b24uYXR0cihcImFyaWEtZXhwYW5kZWRcIix0aGlzLmlzT3BlbiksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5idXR0b24sXCJ1aS1zZWxlY3RtZW51LWJ1dHRvbi1cIisodGhpcy5pc09wZW4/XCJjbG9zZWRcIjpcIm9wZW5cIikpLl9hZGRDbGFzcyh0aGlzLmJ1dHRvbixcInVpLXNlbGVjdG1lbnUtYnV0dG9uLVwiKyh0aGlzLmlzT3Blbj9cIm9wZW5cIjpcImNsb3NlZFwiKSkuX3RvZ2dsZUNsYXNzKHRoaXMubWVudVdyYXAsXCJ1aS1zZWxlY3RtZW51LW9wZW5cIixudWxsLHRoaXMuaXNPcGVuKSx0aGlzLm1lbnUuYXR0cihcImFyaWEtaGlkZGVuXCIsIXRoaXMuaXNPcGVuKX0sX3Jlc2l6ZUJ1dHRvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMub3B0aW9ucy53aWR0aDtyZXR1cm4gdD09PSExPyh0aGlzLmJ1dHRvbi5jc3MoXCJ3aWR0aFwiLFwiXCIpLHZvaWQgMCk6KG51bGw9PT10JiYodD10aGlzLmVsZW1lbnQuc2hvdygpLm91dGVyV2lkdGgoKSx0aGlzLmVsZW1lbnQuaGlkZSgpKSx0aGlzLmJ1dHRvbi5vdXRlcldpZHRoKHQpLHZvaWQgMCl9LF9yZXNpemVNZW51OmZ1bmN0aW9uKCl7dGhpcy5tZW51Lm91dGVyV2lkdGgoTWF0aC5tYXgodGhpcy5idXR0b24ub3V0ZXJXaWR0aCgpLHRoaXMubWVudS53aWR0aChcIlwiKS5vdXRlcldpZHRoKCkrMSkpfSxfZ2V0Q3JlYXRlT3B0aW9uczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX3N1cGVyKCk7cmV0dXJuIHQuZGlzYWJsZWQ9dGhpcy5lbGVtZW50LnByb3AoXCJkaXNhYmxlZFwiKSx0fSxfcGFyc2VPcHRpb25zOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMscz1bXTtlLmVhY2goZnVuY3Rpb24oZSxuKXtzLnB1c2goaS5fcGFyc2VPcHRpb24odChuKSxlKSl9KSx0aGlzLml0ZW1zPXN9LF9wYXJzZU9wdGlvbjpmdW5jdGlvbih0LGUpe3ZhciBpPXQucGFyZW50KFwib3B0Z3JvdXBcIik7cmV0dXJue2VsZW1lbnQ6dCxpbmRleDplLHZhbHVlOnQudmFsKCksbGFiZWw6dC50ZXh0KCksb3B0Z3JvdXA6aS5hdHRyKFwibGFiZWxcIil8fFwiXCIsZGlzYWJsZWQ6aS5wcm9wKFwiZGlzYWJsZWRcIil8fHQucHJvcChcImRpc2FibGVkXCIpfX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLl91bmJpbmRGb3JtUmVzZXRIYW5kbGVyKCksdGhpcy5tZW51V3JhcC5yZW1vdmUoKSx0aGlzLmJ1dHRvbi5yZW1vdmUoKSx0aGlzLmVsZW1lbnQuc2hvdygpLHRoaXMuZWxlbWVudC5yZW1vdmVVbmlxdWVJZCgpLHRoaXMubGFiZWxzLmF0dHIoXCJmb3JcIix0aGlzLmlkcy5lbGVtZW50KX19XSksdC53aWRnZXQoXCJ1aS5zbGlkZXJcIix0LnVpLm1vdXNlLHt2ZXJzaW9uOlwiMS4xMi4xXCIsd2lkZ2V0RXZlbnRQcmVmaXg6XCJzbGlkZVwiLG9wdGlvbnM6e2FuaW1hdGU6ITEsY2xhc3Nlczp7XCJ1aS1zbGlkZXJcIjpcInVpLWNvcm5lci1hbGxcIixcInVpLXNsaWRlci1oYW5kbGVcIjpcInVpLWNvcm5lci1hbGxcIixcInVpLXNsaWRlci1yYW5nZVwiOlwidWktY29ybmVyLWFsbCB1aS13aWRnZXQtaGVhZGVyXCJ9LGRpc3RhbmNlOjAsbWF4OjEwMCxtaW46MCxvcmllbnRhdGlvbjpcImhvcml6b250YWxcIixyYW5nZTohMSxzdGVwOjEsdmFsdWU6MCx2YWx1ZXM6bnVsbCxjaGFuZ2U6bnVsbCxzbGlkZTpudWxsLHN0YXJ0Om51bGwsc3RvcDpudWxsfSxudW1QYWdlczo1LF9jcmVhdGU6ZnVuY3Rpb24oKXt0aGlzLl9rZXlTbGlkaW5nPSExLHRoaXMuX21vdXNlU2xpZGluZz0hMSx0aGlzLl9hbmltYXRlT2ZmPSEwLHRoaXMuX2hhbmRsZUluZGV4PW51bGwsdGhpcy5fZGV0ZWN0T3JpZW50YXRpb24oKSx0aGlzLl9tb3VzZUluaXQoKSx0aGlzLl9jYWxjdWxhdGVOZXdNYXgoKSx0aGlzLl9hZGRDbGFzcyhcInVpLXNsaWRlciB1aS1zbGlkZXItXCIrdGhpcy5vcmllbnRhdGlvbixcInVpLXdpZGdldCB1aS13aWRnZXQtY29udGVudFwiKSx0aGlzLl9yZWZyZXNoKCksdGhpcy5fYW5pbWF0ZU9mZj0hMVxufSxfcmVmcmVzaDpmdW5jdGlvbigpe3RoaXMuX2NyZWF0ZVJhbmdlKCksdGhpcy5fY3JlYXRlSGFuZGxlcygpLHRoaXMuX3NldHVwRXZlbnRzKCksdGhpcy5fcmVmcmVzaFZhbHVlKCl9LF9jcmVhdGVIYW5kbGVzOmZ1bmN0aW9uKCl7dmFyIGUsaSxzPXRoaXMub3B0aW9ucyxuPXRoaXMuZWxlbWVudC5maW5kKFwiLnVpLXNsaWRlci1oYW5kbGVcIiksbz1cIjxzcGFuIHRhYmluZGV4PScwJz48L3NwYW4+XCIsYT1bXTtmb3IoaT1zLnZhbHVlcyYmcy52YWx1ZXMubGVuZ3RofHwxLG4ubGVuZ3RoPmkmJihuLnNsaWNlKGkpLnJlbW92ZSgpLG49bi5zbGljZSgwLGkpKSxlPW4ubGVuZ3RoO2k+ZTtlKyspYS5wdXNoKG8pO3RoaXMuaGFuZGxlcz1uLmFkZCh0KGEuam9pbihcIlwiKSkuYXBwZW5kVG8odGhpcy5lbGVtZW50KSksdGhpcy5fYWRkQ2xhc3ModGhpcy5oYW5kbGVzLFwidWktc2xpZGVyLWhhbmRsZVwiLFwidWktc3RhdGUtZGVmYXVsdFwiKSx0aGlzLmhhbmRsZT10aGlzLmhhbmRsZXMuZXEoMCksdGhpcy5oYW5kbGVzLmVhY2goZnVuY3Rpb24oZSl7dCh0aGlzKS5kYXRhKFwidWktc2xpZGVyLWhhbmRsZS1pbmRleFwiLGUpLmF0dHIoXCJ0YWJJbmRleFwiLDApfSl9LF9jcmVhdGVSYW5nZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3B0aW9ucztlLnJhbmdlPyhlLnJhbmdlPT09ITAmJihlLnZhbHVlcz9lLnZhbHVlcy5sZW5ndGgmJjIhPT1lLnZhbHVlcy5sZW5ndGg/ZS52YWx1ZXM9W2UudmFsdWVzWzBdLGUudmFsdWVzWzBdXTp0LmlzQXJyYXkoZS52YWx1ZXMpJiYoZS52YWx1ZXM9ZS52YWx1ZXMuc2xpY2UoMCkpOmUudmFsdWVzPVt0aGlzLl92YWx1ZU1pbigpLHRoaXMuX3ZhbHVlTWluKCldKSx0aGlzLnJhbmdlJiZ0aGlzLnJhbmdlLmxlbmd0aD8odGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5yYW5nZSxcInVpLXNsaWRlci1yYW5nZS1taW4gdWktc2xpZGVyLXJhbmdlLW1heFwiKSx0aGlzLnJhbmdlLmNzcyh7bGVmdDpcIlwiLGJvdHRvbTpcIlwifSkpOih0aGlzLnJhbmdlPXQoXCI8ZGl2PlwiKS5hcHBlbmRUbyh0aGlzLmVsZW1lbnQpLHRoaXMuX2FkZENsYXNzKHRoaXMucmFuZ2UsXCJ1aS1zbGlkZXItcmFuZ2VcIikpLChcIm1pblwiPT09ZS5yYW5nZXx8XCJtYXhcIj09PWUucmFuZ2UpJiZ0aGlzLl9hZGRDbGFzcyh0aGlzLnJhbmdlLFwidWktc2xpZGVyLXJhbmdlLVwiK2UucmFuZ2UpKToodGhpcy5yYW5nZSYmdGhpcy5yYW5nZS5yZW1vdmUoKSx0aGlzLnJhbmdlPW51bGwpfSxfc2V0dXBFdmVudHM6ZnVuY3Rpb24oKXt0aGlzLl9vZmYodGhpcy5oYW5kbGVzKSx0aGlzLl9vbih0aGlzLmhhbmRsZXMsdGhpcy5faGFuZGxlRXZlbnRzKSx0aGlzLl9ob3ZlcmFibGUodGhpcy5oYW5kbGVzKSx0aGlzLl9mb2N1c2FibGUodGhpcy5oYW5kbGVzKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmhhbmRsZXMucmVtb3ZlKCksdGhpcy5yYW5nZSYmdGhpcy5yYW5nZS5yZW1vdmUoKSx0aGlzLl9tb3VzZURlc3Ryb3koKX0sX21vdXNlQ2FwdHVyZTpmdW5jdGlvbihlKXt2YXIgaSxzLG4sbyxhLHIsaCxsLGM9dGhpcyx1PXRoaXMub3B0aW9ucztyZXR1cm4gdS5kaXNhYmxlZD8hMToodGhpcy5lbGVtZW50U2l6ZT17d2lkdGg6dGhpcy5lbGVtZW50Lm91dGVyV2lkdGgoKSxoZWlnaHQ6dGhpcy5lbGVtZW50Lm91dGVySGVpZ2h0KCl9LHRoaXMuZWxlbWVudE9mZnNldD10aGlzLmVsZW1lbnQub2Zmc2V0KCksaT17eDplLnBhZ2VYLHk6ZS5wYWdlWX0scz10aGlzLl9ub3JtVmFsdWVGcm9tTW91c2UoaSksbj10aGlzLl92YWx1ZU1heCgpLXRoaXMuX3ZhbHVlTWluKCkrMSx0aGlzLmhhbmRsZXMuZWFjaChmdW5jdGlvbihlKXt2YXIgaT1NYXRoLmFicyhzLWMudmFsdWVzKGUpKTsobj5pfHxuPT09aSYmKGU9PT1jLl9sYXN0Q2hhbmdlZFZhbHVlfHxjLnZhbHVlcyhlKT09PXUubWluKSkmJihuPWksbz10KHRoaXMpLGE9ZSl9KSxyPXRoaXMuX3N0YXJ0KGUsYSkscj09PSExPyExOih0aGlzLl9tb3VzZVNsaWRpbmc9ITAsdGhpcy5faGFuZGxlSW5kZXg9YSx0aGlzLl9hZGRDbGFzcyhvLG51bGwsXCJ1aS1zdGF0ZS1hY3RpdmVcIiksby50cmlnZ2VyKFwiZm9jdXNcIiksaD1vLm9mZnNldCgpLGw9IXQoZS50YXJnZXQpLnBhcmVudHMoKS5hZGRCYWNrKCkuaXMoXCIudWktc2xpZGVyLWhhbmRsZVwiKSx0aGlzLl9jbGlja09mZnNldD1sP3tsZWZ0OjAsdG9wOjB9OntsZWZ0OmUucGFnZVgtaC5sZWZ0LW8ud2lkdGgoKS8yLHRvcDplLnBhZ2VZLWgudG9wLW8uaGVpZ2h0KCkvMi0ocGFyc2VJbnQoby5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwxMCl8fDApLShwYXJzZUludChvLmNzcyhcImJvcmRlckJvdHRvbVdpZHRoXCIpLDEwKXx8MCkrKHBhcnNlSW50KG8uY3NzKFwibWFyZ2luVG9wXCIpLDEwKXx8MCl9LHRoaXMuaGFuZGxlcy5oYXNDbGFzcyhcInVpLXN0YXRlLWhvdmVyXCIpfHx0aGlzLl9zbGlkZShlLGEscyksdGhpcy5fYW5pbWF0ZU9mZj0hMCwhMCkpfSxfbW91c2VTdGFydDpmdW5jdGlvbigpe3JldHVybiEwfSxfbW91c2VEcmFnOmZ1bmN0aW9uKHQpe3ZhciBlPXt4OnQucGFnZVgseTp0LnBhZ2VZfSxpPXRoaXMuX25vcm1WYWx1ZUZyb21Nb3VzZShlKTtyZXR1cm4gdGhpcy5fc2xpZGUodCx0aGlzLl9oYW5kbGVJbmRleCxpKSwhMX0sX21vdXNlU3RvcDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5oYW5kbGVzLG51bGwsXCJ1aS1zdGF0ZS1hY3RpdmVcIiksdGhpcy5fbW91c2VTbGlkaW5nPSExLHRoaXMuX3N0b3AodCx0aGlzLl9oYW5kbGVJbmRleCksdGhpcy5fY2hhbmdlKHQsdGhpcy5faGFuZGxlSW5kZXgpLHRoaXMuX2hhbmRsZUluZGV4PW51bGwsdGhpcy5fY2xpY2tPZmZzZXQ9bnVsbCx0aGlzLl9hbmltYXRlT2ZmPSExLCExfSxfZGV0ZWN0T3JpZW50YXRpb246ZnVuY3Rpb24oKXt0aGlzLm9yaWVudGF0aW9uPVwidmVydGljYWxcIj09PXRoaXMub3B0aW9ucy5vcmllbnRhdGlvbj9cInZlcnRpY2FsXCI6XCJob3Jpem9udGFsXCJ9LF9ub3JtVmFsdWVGcm9tTW91c2U6ZnVuY3Rpb24odCl7dmFyIGUsaSxzLG4sbztyZXR1cm5cImhvcml6b250YWxcIj09PXRoaXMub3JpZW50YXRpb24/KGU9dGhpcy5lbGVtZW50U2l6ZS53aWR0aCxpPXQueC10aGlzLmVsZW1lbnRPZmZzZXQubGVmdC0odGhpcy5fY2xpY2tPZmZzZXQ/dGhpcy5fY2xpY2tPZmZzZXQubGVmdDowKSk6KGU9dGhpcy5lbGVtZW50U2l6ZS5oZWlnaHQsaT10LnktdGhpcy5lbGVtZW50T2Zmc2V0LnRvcC0odGhpcy5fY2xpY2tPZmZzZXQ/dGhpcy5fY2xpY2tPZmZzZXQudG9wOjApKSxzPWkvZSxzPjEmJihzPTEpLDA+cyYmKHM9MCksXCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcmllbnRhdGlvbiYmKHM9MS1zKSxuPXRoaXMuX3ZhbHVlTWF4KCktdGhpcy5fdmFsdWVNaW4oKSxvPXRoaXMuX3ZhbHVlTWluKCkrcypuLHRoaXMuX3RyaW1BbGlnblZhbHVlKG8pfSxfdWlIYXNoOmZ1bmN0aW9uKHQsZSxpKXt2YXIgcz17aGFuZGxlOnRoaXMuaGFuZGxlc1t0XSxoYW5kbGVJbmRleDp0LHZhbHVlOnZvaWQgMCE9PWU/ZTp0aGlzLnZhbHVlKCl9O3JldHVybiB0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpJiYocy52YWx1ZT12b2lkIDAhPT1lP2U6dGhpcy52YWx1ZXModCkscy52YWx1ZXM9aXx8dGhpcy52YWx1ZXMoKSksc30sX2hhc011bHRpcGxlVmFsdWVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy52YWx1ZXMmJnRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RofSxfc3RhcnQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsdCx0aGlzLl91aUhhc2goZSkpfSxfc2xpZGU6ZnVuY3Rpb24odCxlLGkpe3ZhciBzLG4sbz10aGlzLnZhbHVlKCksYT10aGlzLnZhbHVlcygpO3RoaXMuX2hhc011bHRpcGxlVmFsdWVzKCkmJihuPXRoaXMudmFsdWVzKGU/MDoxKSxvPXRoaXMudmFsdWVzKGUpLDI9PT10aGlzLm9wdGlvbnMudmFsdWVzLmxlbmd0aCYmdGhpcy5vcHRpb25zLnJhbmdlPT09ITAmJihpPTA9PT1lP01hdGgubWluKG4saSk6TWF0aC5tYXgobixpKSksYVtlXT1pKSxpIT09byYmKHM9dGhpcy5fdHJpZ2dlcihcInNsaWRlXCIsdCx0aGlzLl91aUhhc2goZSxpLGEpKSxzIT09ITEmJih0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpP3RoaXMudmFsdWVzKGUsaSk6dGhpcy52YWx1ZShpKSkpfSxfc3RvcDpmdW5jdGlvbih0LGUpe3RoaXMuX3RyaWdnZXIoXCJzdG9wXCIsdCx0aGlzLl91aUhhc2goZSkpfSxfY2hhbmdlOmZ1bmN0aW9uKHQsZSl7dGhpcy5fa2V5U2xpZGluZ3x8dGhpcy5fbW91c2VTbGlkaW5nfHwodGhpcy5fbGFzdENoYW5nZWRWYWx1ZT1lLHRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIix0LHRoaXMuX3VpSGFzaChlKSkpfSx2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odGhpcy5vcHRpb25zLnZhbHVlPXRoaXMuX3RyaW1BbGlnblZhbHVlKHQpLHRoaXMuX3JlZnJlc2hWYWx1ZSgpLHRoaXMuX2NoYW5nZShudWxsLDApLHZvaWQgMCk6dGhpcy5fdmFsdWUoKX0sdmFsdWVzOmZ1bmN0aW9uKGUsaSl7dmFyIHMsbixvO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlyZXR1cm4gdGhpcy5vcHRpb25zLnZhbHVlc1tlXT10aGlzLl90cmltQWxpZ25WYWx1ZShpKSx0aGlzLl9yZWZyZXNoVmFsdWUoKSx0aGlzLl9jaGFuZ2UobnVsbCxlKSx2b2lkIDA7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuX3ZhbHVlcygpO2lmKCF0LmlzQXJyYXkoYXJndW1lbnRzWzBdKSlyZXR1cm4gdGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKT90aGlzLl92YWx1ZXMoZSk6dGhpcy52YWx1ZSgpO2ZvcihzPXRoaXMub3B0aW9ucy52YWx1ZXMsbj1hcmd1bWVudHNbMF0sbz0wO3MubGVuZ3RoPm87bys9MSlzW29dPXRoaXMuX3RyaW1BbGlnblZhbHVlKG5bb10pLHRoaXMuX2NoYW5nZShudWxsLG8pO3RoaXMuX3JlZnJlc2hWYWx1ZSgpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKGUsaSl7dmFyIHMsbj0wO3N3aXRjaChcInJhbmdlXCI9PT1lJiZ0aGlzLm9wdGlvbnMucmFuZ2U9PT0hMCYmKFwibWluXCI9PT1pPyh0aGlzLm9wdGlvbnMudmFsdWU9dGhpcy5fdmFsdWVzKDApLHRoaXMub3B0aW9ucy52YWx1ZXM9bnVsbCk6XCJtYXhcIj09PWkmJih0aGlzLm9wdGlvbnMudmFsdWU9dGhpcy5fdmFsdWVzKHRoaXMub3B0aW9ucy52YWx1ZXMubGVuZ3RoLTEpLHRoaXMub3B0aW9ucy52YWx1ZXM9bnVsbCkpLHQuaXNBcnJheSh0aGlzLm9wdGlvbnMudmFsdWVzKSYmKG49dGhpcy5vcHRpb25zLnZhbHVlcy5sZW5ndGgpLHRoaXMuX3N1cGVyKGUsaSksZSl7Y2FzZVwib3JpZW50YXRpb25cIjp0aGlzLl9kZXRlY3RPcmllbnRhdGlvbigpLHRoaXMuX3JlbW92ZUNsYXNzKFwidWktc2xpZGVyLWhvcml6b250YWwgdWktc2xpZGVyLXZlcnRpY2FsXCIpLl9hZGRDbGFzcyhcInVpLXNsaWRlci1cIit0aGlzLm9yaWVudGF0aW9uKSx0aGlzLl9yZWZyZXNoVmFsdWUoKSx0aGlzLm9wdGlvbnMucmFuZ2UmJnRoaXMuX3JlZnJlc2hSYW5nZShpKSx0aGlzLmhhbmRsZXMuY3NzKFwiaG9yaXpvbnRhbFwiPT09aT9cImJvdHRvbVwiOlwibGVmdFwiLFwiXCIpO2JyZWFrO2Nhc2VcInZhbHVlXCI6dGhpcy5fYW5pbWF0ZU9mZj0hMCx0aGlzLl9yZWZyZXNoVmFsdWUoKSx0aGlzLl9jaGFuZ2UobnVsbCwwKSx0aGlzLl9hbmltYXRlT2ZmPSExO2JyZWFrO2Nhc2VcInZhbHVlc1wiOmZvcih0aGlzLl9hbmltYXRlT2ZmPSEwLHRoaXMuX3JlZnJlc2hWYWx1ZSgpLHM9bi0xO3M+PTA7cy0tKXRoaXMuX2NoYW5nZShudWxsLHMpO3RoaXMuX2FuaW1hdGVPZmY9ITE7YnJlYWs7Y2FzZVwic3RlcFwiOmNhc2VcIm1pblwiOmNhc2VcIm1heFwiOnRoaXMuX2FuaW1hdGVPZmY9ITAsdGhpcy5fY2FsY3VsYXRlTmV3TWF4KCksdGhpcy5fcmVmcmVzaFZhbHVlKCksdGhpcy5fYW5pbWF0ZU9mZj0hMTticmVhaztjYXNlXCJyYW5nZVwiOnRoaXMuX2FuaW1hdGVPZmY9ITAsdGhpcy5fcmVmcmVzaCgpLHRoaXMuX2FuaW1hdGVPZmY9ITF9fSxfc2V0T3B0aW9uRGlzYWJsZWQ6ZnVuY3Rpb24odCl7dGhpcy5fc3VwZXIodCksdGhpcy5fdG9nZ2xlQ2xhc3MobnVsbCxcInVpLXN0YXRlLWRpc2FibGVkXCIsISF0KX0sX3ZhbHVlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLnZhbHVlO3JldHVybiB0PXRoaXMuX3RyaW1BbGlnblZhbHVlKHQpfSxfdmFsdWVzOmZ1bmN0aW9uKHQpe3ZhciBlLGkscztpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiBlPXRoaXMub3B0aW9ucy52YWx1ZXNbdF0sZT10aGlzLl90cmltQWxpZ25WYWx1ZShlKTtpZih0aGlzLl9oYXNNdWx0aXBsZVZhbHVlcygpKXtmb3IoaT10aGlzLm9wdGlvbnMudmFsdWVzLnNsaWNlKCkscz0wO2kubGVuZ3RoPnM7cys9MSlpW3NdPXRoaXMuX3RyaW1BbGlnblZhbHVlKGlbc10pO3JldHVybiBpfXJldHVybltdfSxfdHJpbUFsaWduVmFsdWU6ZnVuY3Rpb24odCl7aWYodGhpcy5fdmFsdWVNaW4oKT49dClyZXR1cm4gdGhpcy5fdmFsdWVNaW4oKTtpZih0Pj10aGlzLl92YWx1ZU1heCgpKXJldHVybiB0aGlzLl92YWx1ZU1heCgpO3ZhciBlPXRoaXMub3B0aW9ucy5zdGVwPjA/dGhpcy5vcHRpb25zLnN0ZXA6MSxpPSh0LXRoaXMuX3ZhbHVlTWluKCkpJWUscz10LWk7cmV0dXJuIDIqTWF0aC5hYnMoaSk+PWUmJihzKz1pPjA/ZTotZSkscGFyc2VGbG9hdChzLnRvRml4ZWQoNSkpfSxfY2FsY3VsYXRlTmV3TWF4OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5vcHRpb25zLm1heCxlPXRoaXMuX3ZhbHVlTWluKCksaT10aGlzLm9wdGlvbnMuc3RlcCxzPU1hdGgucm91bmQoKHQtZSkvaSkqaTt0PXMrZSx0PnRoaXMub3B0aW9ucy5tYXgmJih0LT1pKSx0aGlzLm1heD1wYXJzZUZsb2F0KHQudG9GaXhlZCh0aGlzLl9wcmVjaXNpb24oKSkpfSxfcHJlY2lzaW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fcHJlY2lzaW9uT2YodGhpcy5vcHRpb25zLnN0ZXApO3JldHVybiBudWxsIT09dGhpcy5vcHRpb25zLm1pbiYmKHQ9TWF0aC5tYXgodCx0aGlzLl9wcmVjaXNpb25PZih0aGlzLm9wdGlvbnMubWluKSkpLHR9LF9wcmVjaXNpb25PZjpmdW5jdGlvbih0KXt2YXIgZT1cIlwiK3QsaT1lLmluZGV4T2YoXCIuXCIpO3JldHVybi0xPT09aT8wOmUubGVuZ3RoLWktMX0sX3ZhbHVlTWluOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3B0aW9ucy5taW59LF92YWx1ZU1heDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1heH0sX3JlZnJlc2hSYW5nZTpmdW5jdGlvbih0KXtcInZlcnRpY2FsXCI9PT10JiZ0aGlzLnJhbmdlLmNzcyh7d2lkdGg6XCJcIixsZWZ0OlwiXCJ9KSxcImhvcml6b250YWxcIj09PXQmJnRoaXMucmFuZ2UuY3NzKHtoZWlnaHQ6XCJcIixib3R0b206XCJcIn0pfSxfcmVmcmVzaFZhbHVlOmZ1bmN0aW9uKCl7dmFyIGUsaSxzLG4sbyxhPXRoaXMub3B0aW9ucy5yYW5nZSxyPXRoaXMub3B0aW9ucyxoPXRoaXMsbD10aGlzLl9hbmltYXRlT2ZmPyExOnIuYW5pbWF0ZSxjPXt9O3RoaXMuX2hhc011bHRpcGxlVmFsdWVzKCk/dGhpcy5oYW5kbGVzLmVhY2goZnVuY3Rpb24ocyl7aT0xMDAqKChoLnZhbHVlcyhzKS1oLl92YWx1ZU1pbigpKS8oaC5fdmFsdWVNYXgoKS1oLl92YWx1ZU1pbigpKSksY1tcImhvcml6b250YWxcIj09PWgub3JpZW50YXRpb24/XCJsZWZ0XCI6XCJib3R0b21cIl09aStcIiVcIix0KHRoaXMpLnN0b3AoMSwxKVtsP1wiYW5pbWF0ZVwiOlwiY3NzXCJdKGMsci5hbmltYXRlKSxoLm9wdGlvbnMucmFuZ2U9PT0hMCYmKFwiaG9yaXpvbnRhbFwiPT09aC5vcmllbnRhdGlvbj8oMD09PXMmJmgucmFuZ2Uuc3RvcCgxLDEpW2w/XCJhbmltYXRlXCI6XCJjc3NcIl0oe2xlZnQ6aStcIiVcIn0sci5hbmltYXRlKSwxPT09cyYmaC5yYW5nZVtsP1wiYW5pbWF0ZVwiOlwiY3NzXCJdKHt3aWR0aDppLWUrXCIlXCJ9LHtxdWV1ZTohMSxkdXJhdGlvbjpyLmFuaW1hdGV9KSk6KDA9PT1zJiZoLnJhbmdlLnN0b3AoMSwxKVtsP1wiYW5pbWF0ZVwiOlwiY3NzXCJdKHtib3R0b206aStcIiVcIn0sci5hbmltYXRlKSwxPT09cyYmaC5yYW5nZVtsP1wiYW5pbWF0ZVwiOlwiY3NzXCJdKHtoZWlnaHQ6aS1lK1wiJVwifSx7cXVldWU6ITEsZHVyYXRpb246ci5hbmltYXRlfSkpKSxlPWl9KToocz10aGlzLnZhbHVlKCksbj10aGlzLl92YWx1ZU1pbigpLG89dGhpcy5fdmFsdWVNYXgoKSxpPW8hPT1uPzEwMCooKHMtbikvKG8tbikpOjAsY1tcImhvcml6b250YWxcIj09PXRoaXMub3JpZW50YXRpb24/XCJsZWZ0XCI6XCJib3R0b21cIl09aStcIiVcIix0aGlzLmhhbmRsZS5zdG9wKDEsMSlbbD9cImFuaW1hdGVcIjpcImNzc1wiXShjLHIuYW5pbWF0ZSksXCJtaW5cIj09PWEmJlwiaG9yaXpvbnRhbFwiPT09dGhpcy5vcmllbnRhdGlvbiYmdGhpcy5yYW5nZS5zdG9wKDEsMSlbbD9cImFuaW1hdGVcIjpcImNzc1wiXSh7d2lkdGg6aStcIiVcIn0sci5hbmltYXRlKSxcIm1heFwiPT09YSYmXCJob3Jpem9udGFsXCI9PT10aGlzLm9yaWVudGF0aW9uJiZ0aGlzLnJhbmdlLnN0b3AoMSwxKVtsP1wiYW5pbWF0ZVwiOlwiY3NzXCJdKHt3aWR0aDoxMDAtaStcIiVcIn0sci5hbmltYXRlKSxcIm1pblwiPT09YSYmXCJ2ZXJ0aWNhbFwiPT09dGhpcy5vcmllbnRhdGlvbiYmdGhpcy5yYW5nZS5zdG9wKDEsMSlbbD9cImFuaW1hdGVcIjpcImNzc1wiXSh7aGVpZ2h0OmkrXCIlXCJ9LHIuYW5pbWF0ZSksXCJtYXhcIj09PWEmJlwidmVydGljYWxcIj09PXRoaXMub3JpZW50YXRpb24mJnRoaXMucmFuZ2Uuc3RvcCgxLDEpW2w/XCJhbmltYXRlXCI6XCJjc3NcIl0oe2hlaWdodDoxMDAtaStcIiVcIn0sci5hbmltYXRlKSl9LF9oYW5kbGVFdmVudHM6e2tleWRvd246ZnVuY3Rpb24oZSl7dmFyIGkscyxuLG8sYT10KGUudGFyZ2V0KS5kYXRhKFwidWktc2xpZGVyLWhhbmRsZS1pbmRleFwiKTtzd2l0Y2goZS5rZXlDb2RlKXtjYXNlIHQudWkua2V5Q29kZS5IT01FOmNhc2UgdC51aS5rZXlDb2RlLkVORDpjYXNlIHQudWkua2V5Q29kZS5QQUdFX1VQOmNhc2UgdC51aS5rZXlDb2RlLlBBR0VfRE9XTjpjYXNlIHQudWkua2V5Q29kZS5VUDpjYXNlIHQudWkua2V5Q29kZS5SSUdIVDpjYXNlIHQudWkua2V5Q29kZS5ET1dOOmNhc2UgdC51aS5rZXlDb2RlLkxFRlQ6aWYoZS5wcmV2ZW50RGVmYXVsdCgpLCF0aGlzLl9rZXlTbGlkaW5nJiYodGhpcy5fa2V5U2xpZGluZz0hMCx0aGlzLl9hZGRDbGFzcyh0KGUudGFyZ2V0KSxudWxsLFwidWktc3RhdGUtYWN0aXZlXCIpLGk9dGhpcy5fc3RhcnQoZSxhKSxpPT09ITEpKXJldHVybn1zd2l0Y2gobz10aGlzLm9wdGlvbnMuc3RlcCxzPW49dGhpcy5faGFzTXVsdGlwbGVWYWx1ZXMoKT90aGlzLnZhbHVlcyhhKTp0aGlzLnZhbHVlKCksZS5rZXlDb2RlKXtjYXNlIHQudWkua2V5Q29kZS5IT01FOm49dGhpcy5fdmFsdWVNaW4oKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTkQ6bj10aGlzLl92YWx1ZU1heCgpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlBBR0VfVVA6bj10aGlzLl90cmltQWxpZ25WYWx1ZShzKyh0aGlzLl92YWx1ZU1heCgpLXRoaXMuX3ZhbHVlTWluKCkpL3RoaXMubnVtUGFnZXMpO2JyZWFrO2Nhc2UgdC51aS5rZXlDb2RlLlBBR0VfRE9XTjpuPXRoaXMuX3RyaW1BbGlnblZhbHVlKHMtKHRoaXMuX3ZhbHVlTWF4KCktdGhpcy5fdmFsdWVNaW4oKSkvdGhpcy5udW1QYWdlcyk7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuVVA6Y2FzZSB0LnVpLmtleUNvZGUuUklHSFQ6aWYocz09PXRoaXMuX3ZhbHVlTWF4KCkpcmV0dXJuO249dGhpcy5fdHJpbUFsaWduVmFsdWUocytvKTticmVhaztjYXNlIHQudWkua2V5Q29kZS5ET1dOOmNhc2UgdC51aS5rZXlDb2RlLkxFRlQ6aWYocz09PXRoaXMuX3ZhbHVlTWluKCkpcmV0dXJuO249dGhpcy5fdHJpbUFsaWduVmFsdWUocy1vKX10aGlzLl9zbGlkZShlLGEsbil9LGtleXVwOmZ1bmN0aW9uKGUpe3ZhciBpPXQoZS50YXJnZXQpLmRhdGEoXCJ1aS1zbGlkZXItaGFuZGxlLWluZGV4XCIpO3RoaXMuX2tleVNsaWRpbmcmJih0aGlzLl9rZXlTbGlkaW5nPSExLHRoaXMuX3N0b3AoZSxpKSx0aGlzLl9jaGFuZ2UoZSxpKSx0aGlzLl9yZW1vdmVDbGFzcyh0KGUudGFyZ2V0KSxudWxsLFwidWktc3RhdGUtYWN0aXZlXCIpKX19fSksdC53aWRnZXQoXCJ1aS5zb3J0YWJsZVwiLHQudWkubW91c2Use3ZlcnNpb246XCIxLjEyLjFcIix3aWRnZXRFdmVudFByZWZpeDpcInNvcnRcIixyZWFkeTohMSxvcHRpb25zOnthcHBlbmRUbzpcInBhcmVudFwiLGF4aXM6ITEsY29ubmVjdFdpdGg6ITEsY29udGFpbm1lbnQ6ITEsY3Vyc29yOlwiYXV0b1wiLGN1cnNvckF0OiExLGRyb3BPbkVtcHR5OiEwLGZvcmNlUGxhY2Vob2xkZXJTaXplOiExLGZvcmNlSGVscGVyU2l6ZTohMSxncmlkOiExLGhhbmRsZTohMSxoZWxwZXI6XCJvcmlnaW5hbFwiLGl0ZW1zOlwiPiAqXCIsb3BhY2l0eTohMSxwbGFjZWhvbGRlcjohMSxyZXZlcnQ6ITEsc2Nyb2xsOiEwLHNjcm9sbFNlbnNpdGl2aXR5OjIwLHNjcm9sbFNwZWVkOjIwLHNjb3BlOlwiZGVmYXVsdFwiLHRvbGVyYW5jZTpcImludGVyc2VjdFwiLHpJbmRleDoxZTMsYWN0aXZhdGU6bnVsbCxiZWZvcmVTdG9wOm51bGwsY2hhbmdlOm51bGwsZGVhY3RpdmF0ZTpudWxsLG91dDpudWxsLG92ZXI6bnVsbCxyZWNlaXZlOm51bGwscmVtb3ZlOm51bGwsc29ydDpudWxsLHN0YXJ0Om51bGwsc3RvcDpudWxsLHVwZGF0ZTpudWxsfSxfaXNPdmVyQXhpczpmdW5jdGlvbih0LGUsaSl7cmV0dXJuIHQ+PWUmJmUraT50fSxfaXNGbG9hdGluZzpmdW5jdGlvbih0KXtyZXR1cm4vbGVmdHxyaWdodC8udGVzdCh0LmNzcyhcImZsb2F0XCIpKXx8L2lubGluZXx0YWJsZS1jZWxsLy50ZXN0KHQuY3NzKFwiZGlzcGxheVwiKSl9LF9jcmVhdGU6ZnVuY3Rpb24oKXt0aGlzLmNvbnRhaW5lckNhY2hlPXt9LHRoaXMuX2FkZENsYXNzKFwidWktc29ydGFibGVcIiksdGhpcy5yZWZyZXNoKCksdGhpcy5vZmZzZXQ9dGhpcy5lbGVtZW50Lm9mZnNldCgpLHRoaXMuX21vdXNlSW5pdCgpLHRoaXMuX3NldEhhbmRsZUNsYXNzTmFtZSgpLHRoaXMucmVhZHk9ITB9LF9zZXRPcHRpb246ZnVuY3Rpb24odCxlKXt0aGlzLl9zdXBlcih0LGUpLFwiaGFuZGxlXCI9PT10JiZ0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKX0sX3NldEhhbmRsZUNsYXNzTmFtZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50LmZpbmQoXCIudWktc29ydGFibGUtaGFuZGxlXCIpLFwidWktc29ydGFibGUtaGFuZGxlXCIpLHQuZWFjaCh0aGlzLml0ZW1zLGZ1bmN0aW9uKCl7ZS5fYWRkQ2xhc3ModGhpcy5pbnN0YW5jZS5vcHRpb25zLmhhbmRsZT90aGlzLml0ZW0uZmluZCh0aGlzLmluc3RhbmNlLm9wdGlvbnMuaGFuZGxlKTp0aGlzLml0ZW0sXCJ1aS1zb3J0YWJsZS1oYW5kbGVcIil9KX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLl9tb3VzZURlc3Ryb3koKTtmb3IodmFyIHQ9dGhpcy5pdGVtcy5sZW5ndGgtMTt0Pj0wO3QtLSl0aGlzLml0ZW1zW3RdLml0ZW0ucmVtb3ZlRGF0YSh0aGlzLndpZGdldE5hbWUrXCItaXRlbVwiKTtyZXR1cm4gdGhpc30sX21vdXNlQ2FwdHVyZTpmdW5jdGlvbihlLGkpe3ZhciBzPW51bGwsbj0hMSxvPXRoaXM7cmV0dXJuIHRoaXMucmV2ZXJ0aW5nPyExOnRoaXMub3B0aW9ucy5kaXNhYmxlZHx8XCJzdGF0aWNcIj09PXRoaXMub3B0aW9ucy50eXBlPyExOih0aGlzLl9yZWZyZXNoSXRlbXMoZSksdChlLnRhcmdldCkucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKXtyZXR1cm4gdC5kYXRhKHRoaXMsby53aWRnZXROYW1lK1wiLWl0ZW1cIik9PT1vPyhzPXQodGhpcyksITEpOnZvaWQgMH0pLHQuZGF0YShlLnRhcmdldCxvLndpZGdldE5hbWUrXCItaXRlbVwiKT09PW8mJihzPXQoZS50YXJnZXQpKSxzPyF0aGlzLm9wdGlvbnMuaGFuZGxlfHxpfHwodCh0aGlzLm9wdGlvbnMuaGFuZGxlLHMpLmZpbmQoXCIqXCIpLmFkZEJhY2soKS5lYWNoKGZ1bmN0aW9uKCl7dGhpcz09PWUudGFyZ2V0JiYobj0hMCl9KSxuKT8odGhpcy5jdXJyZW50SXRlbT1zLHRoaXMuX3JlbW92ZUN1cnJlbnRzRnJvbUl0ZW1zKCksITApOiExOiExKX0sX21vdXNlU3RhcnQ6ZnVuY3Rpb24oZSxpLHMpe3ZhciBuLG8sYT10aGlzLm9wdGlvbnM7aWYodGhpcy5jdXJyZW50Q29udGFpbmVyPXRoaXMsdGhpcy5yZWZyZXNoUG9zaXRpb25zKCksdGhpcy5oZWxwZXI9dGhpcy5fY3JlYXRlSGVscGVyKGUpLHRoaXMuX2NhY2hlSGVscGVyUHJvcG9ydGlvbnMoKSx0aGlzLl9jYWNoZU1hcmdpbnMoKSx0aGlzLnNjcm9sbFBhcmVudD10aGlzLmhlbHBlci5zY3JvbGxQYXJlbnQoKSx0aGlzLm9mZnNldD10aGlzLmN1cnJlbnRJdGVtLm9mZnNldCgpLHRoaXMub2Zmc2V0PXt0b3A6dGhpcy5vZmZzZXQudG9wLXRoaXMubWFyZ2lucy50b3AsbGVmdDp0aGlzLm9mZnNldC5sZWZ0LXRoaXMubWFyZ2lucy5sZWZ0fSx0LmV4dGVuZCh0aGlzLm9mZnNldCx7Y2xpY2s6e2xlZnQ6ZS5wYWdlWC10aGlzLm9mZnNldC5sZWZ0LHRvcDplLnBhZ2VZLXRoaXMub2Zmc2V0LnRvcH0scGFyZW50OnRoaXMuX2dldFBhcmVudE9mZnNldCgpLHJlbGF0aXZlOnRoaXMuX2dldFJlbGF0aXZlT2Zmc2V0KCl9KSx0aGlzLmhlbHBlci5jc3MoXCJwb3NpdGlvblwiLFwiYWJzb2x1dGVcIiksdGhpcy5jc3NQb3NpdGlvbj10aGlzLmhlbHBlci5jc3MoXCJwb3NpdGlvblwiKSx0aGlzLm9yaWdpbmFsUG9zaXRpb249dGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihlKSx0aGlzLm9yaWdpbmFsUGFnZVg9ZS5wYWdlWCx0aGlzLm9yaWdpbmFsUGFnZVk9ZS5wYWdlWSxhLmN1cnNvckF0JiZ0aGlzLl9hZGp1c3RPZmZzZXRGcm9tSGVscGVyKGEuY3Vyc29yQXQpLHRoaXMuZG9tUG9zaXRpb249e3ByZXY6dGhpcy5jdXJyZW50SXRlbS5wcmV2KClbMF0scGFyZW50OnRoaXMuY3VycmVudEl0ZW0ucGFyZW50KClbMF19LHRoaXMuaGVscGVyWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXSYmdGhpcy5jdXJyZW50SXRlbS5oaWRlKCksdGhpcy5fY3JlYXRlUGxhY2Vob2xkZXIoKSxhLmNvbnRhaW5tZW50JiZ0aGlzLl9zZXRDb250YWlubWVudCgpLGEuY3Vyc29yJiZcImF1dG9cIiE9PWEuY3Vyc29yJiYobz10aGlzLmRvY3VtZW50LmZpbmQoXCJib2R5XCIpLHRoaXMuc3RvcmVkQ3Vyc29yPW8uY3NzKFwiY3Vyc29yXCIpLG8uY3NzKFwiY3Vyc29yXCIsYS5jdXJzb3IpLHRoaXMuc3RvcmVkU3R5bGVzaGVldD10KFwiPHN0eWxlPip7IGN1cnNvcjogXCIrYS5jdXJzb3IrXCIgIWltcG9ydGFudDsgfTwvc3R5bGU+XCIpLmFwcGVuZFRvKG8pKSxhLm9wYWNpdHkmJih0aGlzLmhlbHBlci5jc3MoXCJvcGFjaXR5XCIpJiYodGhpcy5fc3RvcmVkT3BhY2l0eT10aGlzLmhlbHBlci5jc3MoXCJvcGFjaXR5XCIpKSx0aGlzLmhlbHBlci5jc3MoXCJvcGFjaXR5XCIsYS5vcGFjaXR5KSksYS56SW5kZXgmJih0aGlzLmhlbHBlci5jc3MoXCJ6SW5kZXhcIikmJih0aGlzLl9zdG9yZWRaSW5kZXg9dGhpcy5oZWxwZXIuY3NzKFwiekluZGV4XCIpKSx0aGlzLmhlbHBlci5jc3MoXCJ6SW5kZXhcIixhLnpJbmRleCkpLHRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5kb2N1bWVudFswXSYmXCJIVE1MXCIhPT10aGlzLnNjcm9sbFBhcmVudFswXS50YWdOYW1lJiYodGhpcy5vdmVyZmxvd09mZnNldD10aGlzLnNjcm9sbFBhcmVudC5vZmZzZXQoKSksdGhpcy5fdHJpZ2dlcihcInN0YXJ0XCIsZSx0aGlzLl91aUhhc2goKSksdGhpcy5fcHJlc2VydmVIZWxwZXJQcm9wb3J0aW9uc3x8dGhpcy5fY2FjaGVIZWxwZXJQcm9wb3J0aW9ucygpLCFzKWZvcihuPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtuPj0wO24tLSl0aGlzLmNvbnRhaW5lcnNbbl0uX3RyaWdnZXIoXCJhY3RpdmF0ZVwiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKTtyZXR1cm4gdC51aS5kZG1hbmFnZXImJih0LnVpLmRkbWFuYWdlci5jdXJyZW50PXRoaXMpLHQudWkuZGRtYW5hZ2VyJiYhYS5kcm9wQmVoYXZpb3VyJiZ0LnVpLmRkbWFuYWdlci5wcmVwYXJlT2Zmc2V0cyh0aGlzLGUpLHRoaXMuZHJhZ2dpbmc9ITAsdGhpcy5fYWRkQ2xhc3ModGhpcy5oZWxwZXIsXCJ1aS1zb3J0YWJsZS1oZWxwZXJcIiksdGhpcy5fbW91c2VEcmFnKGUpLCEwfSxfbW91c2VEcmFnOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbixvLGE9dGhpcy5vcHRpb25zLHI9ITE7Zm9yKHRoaXMucG9zaXRpb249dGhpcy5fZ2VuZXJhdGVQb3NpdGlvbihlKSx0aGlzLnBvc2l0aW9uQWJzPXRoaXMuX2NvbnZlcnRQb3NpdGlvblRvKFwiYWJzb2x1dGVcIiksdGhpcy5sYXN0UG9zaXRpb25BYnN8fCh0aGlzLmxhc3RQb3NpdGlvbkFicz10aGlzLnBvc2l0aW9uQWJzKSx0aGlzLm9wdGlvbnMuc2Nyb2xsJiYodGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZcIkhUTUxcIiE9PXRoaXMuc2Nyb2xsUGFyZW50WzBdLnRhZ05hbWU/KHRoaXMub3ZlcmZsb3dPZmZzZXQudG9wK3RoaXMuc2Nyb2xsUGFyZW50WzBdLm9mZnNldEhlaWdodC1lLnBhZ2VZPGEuc2Nyb2xsU2Vuc2l0aXZpdHk/dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wPXI9dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wK2Euc2Nyb2xsU3BlZWQ6ZS5wYWdlWS10aGlzLm92ZXJmbG93T2Zmc2V0LnRvcDxhLnNjcm9sbFNlbnNpdGl2aXR5JiYodGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wPXI9dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsVG9wLWEuc2Nyb2xsU3BlZWQpLHRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdCt0aGlzLnNjcm9sbFBhcmVudFswXS5vZmZzZXRXaWR0aC1lLnBhZ2VYPGEuc2Nyb2xsU2Vuc2l0aXZpdHk/dGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdD1yPXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQrYS5zY3JvbGxTcGVlZDplLnBhZ2VYLXRoaXMub3ZlcmZsb3dPZmZzZXQubGVmdDxhLnNjcm9sbFNlbnNpdGl2aXR5JiYodGhpcy5zY3JvbGxQYXJlbnRbMF0uc2Nyb2xsTGVmdD1yPXRoaXMuc2Nyb2xsUGFyZW50WzBdLnNjcm9sbExlZnQtYS5zY3JvbGxTcGVlZCkpOihlLnBhZ2VZLXRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCk8YS5zY3JvbGxTZW5zaXRpdml0eT9yPXRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKHRoaXMuZG9jdW1lbnQuc2Nyb2xsVG9wKCktYS5zY3JvbGxTcGVlZCk6dGhpcy53aW5kb3cuaGVpZ2h0KCktKGUucGFnZVktdGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSk8YS5zY3JvbGxTZW5zaXRpdml0eSYmKHI9dGhpcy5kb2N1bWVudC5zY3JvbGxUb3AodGhpcy5kb2N1bWVudC5zY3JvbGxUb3AoKSthLnNjcm9sbFNwZWVkKSksZS5wYWdlWC10aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKTxhLnNjcm9sbFNlbnNpdGl2aXR5P3I9dGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KHRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCgpLWEuc2Nyb2xsU3BlZWQpOnRoaXMud2luZG93LndpZHRoKCktKGUucGFnZVgtdGhpcy5kb2N1bWVudC5zY3JvbGxMZWZ0KCkpPGEuc2Nyb2xsU2Vuc2l0aXZpdHkmJihyPXRoaXMuZG9jdW1lbnQuc2Nyb2xsTGVmdCh0aGlzLmRvY3VtZW50LnNjcm9sbExlZnQoKSthLnNjcm9sbFNwZWVkKSkpLHIhPT0hMSYmdC51aS5kZG1hbmFnZXImJiFhLmRyb3BCZWhhdmlvdXImJnQudWkuZGRtYW5hZ2VyLnByZXBhcmVPZmZzZXRzKHRoaXMsZSkpLHRoaXMucG9zaXRpb25BYnM9dGhpcy5fY29udmVydFBvc2l0aW9uVG8oXCJhYnNvbHV0ZVwiKSx0aGlzLm9wdGlvbnMuYXhpcyYmXCJ5XCI9PT10aGlzLm9wdGlvbnMuYXhpc3x8KHRoaXMuaGVscGVyWzBdLnN0eWxlLmxlZnQ9dGhpcy5wb3NpdGlvbi5sZWZ0K1wicHhcIiksdGhpcy5vcHRpb25zLmF4aXMmJlwieFwiPT09dGhpcy5vcHRpb25zLmF4aXN8fCh0aGlzLmhlbHBlclswXS5zdHlsZS50b3A9dGhpcy5wb3NpdGlvbi50b3ArXCJweFwiKSxpPXRoaXMuaXRlbXMubGVuZ3RoLTE7aT49MDtpLS0paWYocz10aGlzLml0ZW1zW2ldLG49cy5pdGVtWzBdLG89dGhpcy5faW50ZXJzZWN0c1dpdGhQb2ludGVyKHMpLG8mJnMuaW5zdGFuY2U9PT10aGlzLmN1cnJlbnRDb250YWluZXImJm4hPT10aGlzLmN1cnJlbnRJdGVtWzBdJiZ0aGlzLnBsYWNlaG9sZGVyWzE9PT1vP1wibmV4dFwiOlwicHJldlwiXSgpWzBdIT09biYmIXQuY29udGFpbnModGhpcy5wbGFjZWhvbGRlclswXSxuKSYmKFwic2VtaS1keW5hbWljXCI9PT10aGlzLm9wdGlvbnMudHlwZT8hdC5jb250YWlucyh0aGlzLmVsZW1lbnRbMF0sbik6ITApKXtpZih0aGlzLmRpcmVjdGlvbj0xPT09bz9cImRvd25cIjpcInVwXCIsXCJwb2ludGVyXCIhPT10aGlzLm9wdGlvbnMudG9sZXJhbmNlJiYhdGhpcy5faW50ZXJzZWN0c1dpdGhTaWRlcyhzKSlicmVhazt0aGlzLl9yZWFycmFuZ2UoZSxzKSx0aGlzLl90cmlnZ2VyKFwiY2hhbmdlXCIsZSx0aGlzLl91aUhhc2goKSk7YnJlYWt9cmV0dXJuIHRoaXMuX2NvbnRhY3RDb250YWluZXJzKGUpLHQudWkuZGRtYW5hZ2VyJiZ0LnVpLmRkbWFuYWdlci5kcmFnKHRoaXMsZSksdGhpcy5fdHJpZ2dlcihcInNvcnRcIixlLHRoaXMuX3VpSGFzaCgpKSx0aGlzLmxhc3RQb3NpdGlvbkFicz10aGlzLnBvc2l0aW9uQWJzLCExfSxfbW91c2VTdG9wOmZ1bmN0aW9uKGUsaSl7aWYoZSl7aWYodC51aS5kZG1hbmFnZXImJiF0aGlzLm9wdGlvbnMuZHJvcEJlaGF2aW91ciYmdC51aS5kZG1hbmFnZXIuZHJvcCh0aGlzLGUpLHRoaXMub3B0aW9ucy5yZXZlcnQpe3ZhciBzPXRoaXMsbj10aGlzLnBsYWNlaG9sZGVyLm9mZnNldCgpLG89dGhpcy5vcHRpb25zLmF4aXMsYT17fTtvJiZcInhcIiE9PW98fChhLmxlZnQ9bi5sZWZ0LXRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0LXRoaXMubWFyZ2lucy5sZWZ0Kyh0aGlzLm9mZnNldFBhcmVudFswXT09PXRoaXMuZG9jdW1lbnRbMF0uYm9keT8wOnRoaXMub2Zmc2V0UGFyZW50WzBdLnNjcm9sbExlZnQpKSxvJiZcInlcIiE9PW98fChhLnRvcD1uLnRvcC10aGlzLm9mZnNldC5wYXJlbnQudG9wLXRoaXMubWFyZ2lucy50b3ArKHRoaXMub2Zmc2V0UGFyZW50WzBdPT09dGhpcy5kb2N1bWVudFswXS5ib2R5PzA6dGhpcy5vZmZzZXRQYXJlbnRbMF0uc2Nyb2xsVG9wKSksdGhpcy5yZXZlcnRpbmc9ITAsdCh0aGlzLmhlbHBlcikuYW5pbWF0ZShhLHBhcnNlSW50KHRoaXMub3B0aW9ucy5yZXZlcnQsMTApfHw1MDAsZnVuY3Rpb24oKXtzLl9jbGVhcihlKX0pfWVsc2UgdGhpcy5fY2xlYXIoZSxpKTtyZXR1cm4hMX19LGNhbmNlbDpmdW5jdGlvbigpe2lmKHRoaXMuZHJhZ2dpbmcpe3RoaXMuX21vdXNlVXAobmV3IHQuRXZlbnQoXCJtb3VzZXVwXCIse3RhcmdldDpudWxsfSkpLFwib3JpZ2luYWxcIj09PXRoaXMub3B0aW9ucy5oZWxwZXI/KHRoaXMuY3VycmVudEl0ZW0uY3NzKHRoaXMuX3N0b3JlZENTUyksdGhpcy5fcmVtb3ZlQ2xhc3ModGhpcy5jdXJyZW50SXRlbSxcInVpLXNvcnRhYmxlLWhlbHBlclwiKSk6dGhpcy5jdXJyZW50SXRlbS5zaG93KCk7Zm9yKHZhciBlPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtlPj0wO2UtLSl0aGlzLmNvbnRhaW5lcnNbZV0uX3RyaWdnZXIoXCJkZWFjdGl2YXRlXCIsbnVsbCx0aGlzLl91aUhhc2godGhpcykpLHRoaXMuY29udGFpbmVyc1tlXS5jb250YWluZXJDYWNoZS5vdmVyJiYodGhpcy5jb250YWluZXJzW2VdLl90cmlnZ2VyKFwib3V0XCIsbnVsbCx0aGlzLl91aUhhc2godGhpcykpLHRoaXMuY29udGFpbmVyc1tlXS5jb250YWluZXJDYWNoZS5vdmVyPTApfXJldHVybiB0aGlzLnBsYWNlaG9sZGVyJiYodGhpcy5wbGFjZWhvbGRlclswXS5wYXJlbnROb2RlJiZ0aGlzLnBsYWNlaG9sZGVyWzBdLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wbGFjZWhvbGRlclswXSksXCJvcmlnaW5hbFwiIT09dGhpcy5vcHRpb25zLmhlbHBlciYmdGhpcy5oZWxwZXImJnRoaXMuaGVscGVyWzBdLnBhcmVudE5vZGUmJnRoaXMuaGVscGVyLnJlbW92ZSgpLHQuZXh0ZW5kKHRoaXMse2hlbHBlcjpudWxsLGRyYWdnaW5nOiExLHJldmVydGluZzohMSxfbm9GaW5hbFNvcnQ6bnVsbH0pLHRoaXMuZG9tUG9zaXRpb24ucHJldj90KHRoaXMuZG9tUG9zaXRpb24ucHJldikuYWZ0ZXIodGhpcy5jdXJyZW50SXRlbSk6dCh0aGlzLmRvbVBvc2l0aW9uLnBhcmVudCkucHJlcGVuZCh0aGlzLmN1cnJlbnRJdGVtKSksdGhpc30sc2VyaWFsaXplOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMuX2dldEl0ZW1zQXNqUXVlcnkoZSYmZS5jb25uZWN0ZWQpLHM9W107cmV0dXJuIGU9ZXx8e30sdChpKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9KHQoZS5pdGVtfHx0aGlzKS5hdHRyKGUuYXR0cmlidXRlfHxcImlkXCIpfHxcIlwiKS5tYXRjaChlLmV4cHJlc3Npb258fC8oLispW1xcLT1fXSguKykvKTtpJiZzLnB1c2goKGUua2V5fHxpWzFdK1wiW11cIikrXCI9XCIrKGUua2V5JiZlLmV4cHJlc3Npb24/aVsxXTppWzJdKSl9KSwhcy5sZW5ndGgmJmUua2V5JiZzLnB1c2goZS5rZXkrXCI9XCIpLHMuam9pbihcIiZcIil9LHRvQXJyYXk6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5fZ2V0SXRlbXNBc2pRdWVyeShlJiZlLmNvbm5lY3RlZCkscz1bXTtyZXR1cm4gZT1lfHx7fSxpLmVhY2goZnVuY3Rpb24oKXtzLnB1c2godChlLml0ZW18fHRoaXMpLmF0dHIoZS5hdHRyaWJ1dGV8fFwiaWRcIil8fFwiXCIpfSksc30sX2ludGVyc2VjdHNXaXRoOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMucG9zaXRpb25BYnMubGVmdCxpPWUrdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aCxzPXRoaXMucG9zaXRpb25BYnMudG9wLG49cyt0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodCxvPXQubGVmdCxhPW8rdC53aWR0aCxyPXQudG9wLGg9cit0LmhlaWdodCxsPXRoaXMub2Zmc2V0LmNsaWNrLnRvcCxjPXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQsdT1cInhcIj09PXRoaXMub3B0aW9ucy5heGlzfHxzK2w+ciYmaD5zK2wsZD1cInlcIj09PXRoaXMub3B0aW9ucy5heGlzfHxlK2M+byYmYT5lK2MscD11JiZkO3JldHVyblwicG9pbnRlclwiPT09dGhpcy5vcHRpb25zLnRvbGVyYW5jZXx8dGhpcy5vcHRpb25zLmZvcmNlUG9pbnRlckZvckNvbnRhaW5lcnN8fFwicG9pbnRlclwiIT09dGhpcy5vcHRpb25zLnRvbGVyYW5jZSYmdGhpcy5oZWxwZXJQcm9wb3J0aW9uc1t0aGlzLmZsb2F0aW5nP1wid2lkdGhcIjpcImhlaWdodFwiXT50W3RoaXMuZmxvYXRpbmc/XCJ3aWR0aFwiOlwiaGVpZ2h0XCJdP3A6ZSt0aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLzI+byYmYT5pLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgvMiYmcyt0aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yPnImJmg+bi10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC8yfSxfaW50ZXJzZWN0c1dpdGhQb2ludGVyOmZ1bmN0aW9uKHQpe3ZhciBlLGkscz1cInhcIj09PXRoaXMub3B0aW9ucy5heGlzfHx0aGlzLl9pc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMudG9wK3RoaXMub2Zmc2V0LmNsaWNrLnRvcCx0LnRvcCx0LmhlaWdodCksbj1cInlcIj09PXRoaXMub3B0aW9ucy5heGlzfHx0aGlzLl9pc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMubGVmdCt0aGlzLm9mZnNldC5jbGljay5sZWZ0LHQubGVmdCx0LndpZHRoKSxvPXMmJm47cmV0dXJuIG8/KGU9dGhpcy5fZ2V0RHJhZ1ZlcnRpY2FsRGlyZWN0aW9uKCksaT10aGlzLl9nZXREcmFnSG9yaXpvbnRhbERpcmVjdGlvbigpLHRoaXMuZmxvYXRpbmc/XCJyaWdodFwiPT09aXx8XCJkb3duXCI9PT1lPzI6MTplJiYoXCJkb3duXCI9PT1lPzI6MSkpOiExfSxfaW50ZXJzZWN0c1dpdGhTaWRlczpmdW5jdGlvbih0KXt2YXIgZT10aGlzLl9pc092ZXJBeGlzKHRoaXMucG9zaXRpb25BYnMudG9wK3RoaXMub2Zmc2V0LmNsaWNrLnRvcCx0LnRvcCt0LmhlaWdodC8yLHQuaGVpZ2h0KSxpPXRoaXMuX2lzT3ZlckF4aXModGhpcy5wb3NpdGlvbkFicy5sZWZ0K3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQsdC5sZWZ0K3Qud2lkdGgvMix0LndpZHRoKSxzPXRoaXMuX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbigpLG49dGhpcy5fZ2V0RHJhZ0hvcml6b250YWxEaXJlY3Rpb24oKTtyZXR1cm4gdGhpcy5mbG9hdGluZyYmbj9cInJpZ2h0XCI9PT1uJiZpfHxcImxlZnRcIj09PW4mJiFpOnMmJihcImRvd25cIj09PXMmJmV8fFwidXBcIj09PXMmJiFlKX0sX2dldERyYWdWZXJ0aWNhbERpcmVjdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMucG9zaXRpb25BYnMudG9wLXRoaXMubGFzdFBvc2l0aW9uQWJzLnRvcDtyZXR1cm4gMCE9PXQmJih0PjA/XCJkb3duXCI6XCJ1cFwiKX0sX2dldERyYWdIb3Jpem9udGFsRGlyZWN0aW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wb3NpdGlvbkFicy5sZWZ0LXRoaXMubGFzdFBvc2l0aW9uQWJzLmxlZnQ7cmV0dXJuIDAhPT10JiYodD4wP1wicmlnaHRcIjpcImxlZnRcIil9LHJlZnJlc2g6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX3JlZnJlc2hJdGVtcyh0KSx0aGlzLl9zZXRIYW5kbGVDbGFzc05hbWUoKSx0aGlzLnJlZnJlc2hQb3NpdGlvbnMoKSx0aGlzfSxfY29ubmVjdFdpdGg6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnM7cmV0dXJuIHQuY29ubmVjdFdpdGguY29uc3RydWN0b3I9PT1TdHJpbmc/W3QuY29ubmVjdFdpdGhdOnQuY29ubmVjdFdpdGh9LF9nZXRJdGVtc0FzalF1ZXJ5OmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGkoKXtyLnB1c2godGhpcyl9dmFyIHMsbixvLGEscj1bXSxoPVtdLGw9dGhpcy5fY29ubmVjdFdpdGgoKTtpZihsJiZlKWZvcihzPWwubGVuZ3RoLTE7cz49MDtzLS0pZm9yKG89dChsW3NdLHRoaXMuZG9jdW1lbnRbMF0pLG49by5sZW5ndGgtMTtuPj0wO24tLSlhPXQuZGF0YShvW25dLHRoaXMud2lkZ2V0RnVsbE5hbWUpLGEmJmEhPT10aGlzJiYhYS5vcHRpb25zLmRpc2FibGVkJiZoLnB1c2goW3QuaXNGdW5jdGlvbihhLm9wdGlvbnMuaXRlbXMpP2Eub3B0aW9ucy5pdGVtcy5jYWxsKGEuZWxlbWVudCk6dChhLm9wdGlvbnMuaXRlbXMsYS5lbGVtZW50KS5ub3QoXCIudWktc29ydGFibGUtaGVscGVyXCIpLm5vdChcIi51aS1zb3J0YWJsZS1wbGFjZWhvbGRlclwiKSxhXSk7Zm9yKGgucHVzaChbdC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy5pdGVtcyk/dGhpcy5vcHRpb25zLml0ZW1zLmNhbGwodGhpcy5lbGVtZW50LG51bGwse29wdGlvbnM6dGhpcy5vcHRpb25zLGl0ZW06dGhpcy5jdXJyZW50SXRlbX0pOnQodGhpcy5vcHRpb25zLml0ZW1zLHRoaXMuZWxlbWVudCkubm90KFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiKS5ub3QoXCIudWktc29ydGFibGUtcGxhY2Vob2xkZXJcIiksdGhpc10pLHM9aC5sZW5ndGgtMTtzPj0wO3MtLSloW3NdWzBdLmVhY2goaSk7cmV0dXJuIHQocil9LF9yZW1vdmVDdXJyZW50c0Zyb21JdGVtczpmdW5jdGlvbigpe3ZhciBlPXRoaXMuY3VycmVudEl0ZW0uZmluZChcIjpkYXRhKFwiK3RoaXMud2lkZ2V0TmFtZStcIi1pdGVtKVwiKTt0aGlzLml0ZW1zPXQuZ3JlcCh0aGlzLml0ZW1zLGZ1bmN0aW9uKHQpe2Zvcih2YXIgaT0wO2UubGVuZ3RoPmk7aSsrKWlmKGVbaV09PT10Lml0ZW1bMF0pcmV0dXJuITE7cmV0dXJuITB9KX0sX3JlZnJlc2hJdGVtczpmdW5jdGlvbihlKXt0aGlzLml0ZW1zPVtdLHRoaXMuY29udGFpbmVycz1bdGhpc107dmFyIGkscyxuLG8sYSxyLGgsbCxjPXRoaXMuaXRlbXMsdT1bW3QuaXNGdW5jdGlvbih0aGlzLm9wdGlvbnMuaXRlbXMpP3RoaXMub3B0aW9ucy5pdGVtcy5jYWxsKHRoaXMuZWxlbWVudFswXSxlLHtpdGVtOnRoaXMuY3VycmVudEl0ZW19KTp0KHRoaXMub3B0aW9ucy5pdGVtcyx0aGlzLmVsZW1lbnQpLHRoaXNdXSxkPXRoaXMuX2Nvbm5lY3RXaXRoKCk7aWYoZCYmdGhpcy5yZWFkeSlmb3IoaT1kLmxlbmd0aC0xO2k+PTA7aS0tKWZvcihuPXQoZFtpXSx0aGlzLmRvY3VtZW50WzBdKSxzPW4ubGVuZ3RoLTE7cz49MDtzLS0pbz10LmRhdGEobltzXSx0aGlzLndpZGdldEZ1bGxOYW1lKSxvJiZvIT09dGhpcyYmIW8ub3B0aW9ucy5kaXNhYmxlZCYmKHUucHVzaChbdC5pc0Z1bmN0aW9uKG8ub3B0aW9ucy5pdGVtcyk/by5vcHRpb25zLml0ZW1zLmNhbGwoby5lbGVtZW50WzBdLGUse2l0ZW06dGhpcy5jdXJyZW50SXRlbX0pOnQoby5vcHRpb25zLml0ZW1zLG8uZWxlbWVudCksb10pLHRoaXMuY29udGFpbmVycy5wdXNoKG8pKTtmb3IoaT11Lmxlbmd0aC0xO2k+PTA7aS0tKWZvcihhPXVbaV1bMV0scj11W2ldWzBdLHM9MCxsPXIubGVuZ3RoO2w+cztzKyspaD10KHJbc10pLGguZGF0YSh0aGlzLndpZGdldE5hbWUrXCItaXRlbVwiLGEpLGMucHVzaCh7aXRlbTpoLGluc3RhbmNlOmEsd2lkdGg6MCxoZWlnaHQ6MCxsZWZ0OjAsdG9wOjB9KX0scmVmcmVzaFBvc2l0aW9uczpmdW5jdGlvbihlKXt0aGlzLmZsb2F0aW5nPXRoaXMuaXRlbXMubGVuZ3RoP1wieFwiPT09dGhpcy5vcHRpb25zLmF4aXN8fHRoaXMuX2lzRmxvYXRpbmcodGhpcy5pdGVtc1swXS5pdGVtKTohMSx0aGlzLm9mZnNldFBhcmVudCYmdGhpcy5oZWxwZXImJih0aGlzLm9mZnNldC5wYXJlbnQ9dGhpcy5fZ2V0UGFyZW50T2Zmc2V0KCkpO3ZhciBpLHMsbixvO2ZvcihpPXRoaXMuaXRlbXMubGVuZ3RoLTE7aT49MDtpLS0pcz10aGlzLml0ZW1zW2ldLHMuaW5zdGFuY2UhPT10aGlzLmN1cnJlbnRDb250YWluZXImJnRoaXMuY3VycmVudENvbnRhaW5lciYmcy5pdGVtWzBdIT09dGhpcy5jdXJyZW50SXRlbVswXXx8KG49dGhpcy5vcHRpb25zLnRvbGVyYW5jZUVsZW1lbnQ/dCh0aGlzLm9wdGlvbnMudG9sZXJhbmNlRWxlbWVudCxzLml0ZW0pOnMuaXRlbSxlfHwocy53aWR0aD1uLm91dGVyV2lkdGgoKSxzLmhlaWdodD1uLm91dGVySGVpZ2h0KCkpLG89bi5vZmZzZXQoKSxzLmxlZnQ9by5sZWZ0LHMudG9wPW8udG9wKTtpZih0aGlzLm9wdGlvbnMuY3VzdG9tJiZ0aGlzLm9wdGlvbnMuY3VzdG9tLnJlZnJlc2hDb250YWluZXJzKXRoaXMub3B0aW9ucy5jdXN0b20ucmVmcmVzaENvbnRhaW5lcnMuY2FsbCh0aGlzKTtlbHNlIGZvcihpPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtpPj0wO2ktLSlvPXRoaXMuY29udGFpbmVyc1tpXS5lbGVtZW50Lm9mZnNldCgpLHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS5sZWZ0PW8ubGVmdCx0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUudG9wPW8udG9wLHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZS53aWR0aD10aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlcldpZHRoKCksdGhpcy5jb250YWluZXJzW2ldLmNvbnRhaW5lckNhY2hlLmhlaWdodD10aGlzLmNvbnRhaW5lcnNbaV0uZWxlbWVudC5vdXRlckhlaWdodCgpO3JldHVybiB0aGlzfSxfY3JlYXRlUGxhY2Vob2xkZXI6ZnVuY3Rpb24oZSl7ZT1lfHx0aGlzO3ZhciBpLHM9ZS5vcHRpb25zO3MucGxhY2Vob2xkZXImJnMucGxhY2Vob2xkZXIuY29uc3RydWN0b3IhPT1TdHJpbmd8fChpPXMucGxhY2Vob2xkZXIscy5wbGFjZWhvbGRlcj17ZWxlbWVudDpmdW5jdGlvbigpe3ZhciBzPWUuY3VycmVudEl0ZW1bMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxuPXQoXCI8XCIrcytcIj5cIixlLmRvY3VtZW50WzBdKTtyZXR1cm4gZS5fYWRkQ2xhc3MobixcInVpLXNvcnRhYmxlLXBsYWNlaG9sZGVyXCIsaXx8ZS5jdXJyZW50SXRlbVswXS5jbGFzc05hbWUpLl9yZW1vdmVDbGFzcyhuLFwidWktc29ydGFibGUtaGVscGVyXCIpLFwidGJvZHlcIj09PXM/ZS5fY3JlYXRlVHJQbGFjZWhvbGRlcihlLmN1cnJlbnRJdGVtLmZpbmQoXCJ0clwiKS5lcSgwKSx0KFwiPHRyPlwiLGUuZG9jdW1lbnRbMF0pLmFwcGVuZFRvKG4pKTpcInRyXCI9PT1zP2UuX2NyZWF0ZVRyUGxhY2Vob2xkZXIoZS5jdXJyZW50SXRlbSxuKTpcImltZ1wiPT09cyYmbi5hdHRyKFwic3JjXCIsZS5jdXJyZW50SXRlbS5hdHRyKFwic3JjXCIpKSxpfHxuLmNzcyhcInZpc2liaWxpdHlcIixcImhpZGRlblwiKSxufSx1cGRhdGU6ZnVuY3Rpb24odCxuKXsoIWl8fHMuZm9yY2VQbGFjZWhvbGRlclNpemUpJiYobi5oZWlnaHQoKXx8bi5oZWlnaHQoZS5jdXJyZW50SXRlbS5pbm5lckhlaWdodCgpLXBhcnNlSW50KGUuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ1RvcFwiKXx8MCwxMCktcGFyc2VJbnQoZS5jdXJyZW50SXRlbS5jc3MoXCJwYWRkaW5nQm90dG9tXCIpfHwwLDEwKSksbi53aWR0aCgpfHxuLndpZHRoKGUuY3VycmVudEl0ZW0uaW5uZXJXaWR0aCgpLXBhcnNlSW50KGUuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ0xlZnRcIil8fDAsMTApLXBhcnNlSW50KGUuY3VycmVudEl0ZW0uY3NzKFwicGFkZGluZ1JpZ2h0XCIpfHwwLDEwKSkpfX0pLGUucGxhY2Vob2xkZXI9dChzLnBsYWNlaG9sZGVyLmVsZW1lbnQuY2FsbChlLmVsZW1lbnQsZS5jdXJyZW50SXRlbSkpLGUuY3VycmVudEl0ZW0uYWZ0ZXIoZS5wbGFjZWhvbGRlcikscy5wbGFjZWhvbGRlci51cGRhdGUoZSxlLnBsYWNlaG9sZGVyKX0sX2NyZWF0ZVRyUGxhY2Vob2xkZXI6ZnVuY3Rpb24oZSxpKXt2YXIgcz10aGlzO2UuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKCl7dChcIjx0ZD4mIzE2MDs8L3RkPlwiLHMuZG9jdW1lbnRbMF0pLmF0dHIoXCJjb2xzcGFuXCIsdCh0aGlzKS5hdHRyKFwiY29sc3BhblwiKXx8MSkuYXBwZW5kVG8oaSl9KX0sX2NvbnRhY3RDb250YWluZXJzOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbixvLGEscixoLGwsYyx1LGQ9bnVsbCxwPW51bGw7Zm9yKGk9dGhpcy5jb250YWluZXJzLmxlbmd0aC0xO2k+PTA7aS0tKWlmKCF0LmNvbnRhaW5zKHRoaXMuY3VycmVudEl0ZW1bMF0sdGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnRbMF0pKWlmKHRoaXMuX2ludGVyc2VjdHNXaXRoKHRoaXMuY29udGFpbmVyc1tpXS5jb250YWluZXJDYWNoZSkpe2lmKGQmJnQuY29udGFpbnModGhpcy5jb250YWluZXJzW2ldLmVsZW1lbnRbMF0sZC5lbGVtZW50WzBdKSljb250aW51ZTtkPXRoaXMuY29udGFpbmVyc1tpXSxwPWl9ZWxzZSB0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3ZlciYmKHRoaXMuY29udGFpbmVyc1tpXS5fdHJpZ2dlcihcIm91dFwiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmNvbnRhaW5lcnNbaV0uY29udGFpbmVyQ2FjaGUub3Zlcj0wKTtpZihkKWlmKDE9PT10aGlzLmNvbnRhaW5lcnMubGVuZ3RoKXRoaXMuY29udGFpbmVyc1twXS5jb250YWluZXJDYWNoZS5vdmVyfHwodGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKFwib3ZlclwiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmNvbnRhaW5lcnNbcF0uY29udGFpbmVyQ2FjaGUub3Zlcj0xKTtlbHNle2ZvcihuPTFlNCxvPW51bGwsYz1kLmZsb2F0aW5nfHx0aGlzLl9pc0Zsb2F0aW5nKHRoaXMuY3VycmVudEl0ZW0pLGE9Yz9cImxlZnRcIjpcInRvcFwiLHI9Yz9cIndpZHRoXCI6XCJoZWlnaHRcIix1PWM/XCJwYWdlWFwiOlwicGFnZVlcIixzPXRoaXMuaXRlbXMubGVuZ3RoLTE7cz49MDtzLS0pdC5jb250YWlucyh0aGlzLmNvbnRhaW5lcnNbcF0uZWxlbWVudFswXSx0aGlzLml0ZW1zW3NdLml0ZW1bMF0pJiZ0aGlzLml0ZW1zW3NdLml0ZW1bMF0hPT10aGlzLmN1cnJlbnRJdGVtWzBdJiYoaD10aGlzLml0ZW1zW3NdLml0ZW0ub2Zmc2V0KClbYV0sbD0hMSxlW3VdLWg+dGhpcy5pdGVtc1tzXVtyXS8yJiYobD0hMCksbj5NYXRoLmFicyhlW3VdLWgpJiYobj1NYXRoLmFicyhlW3VdLWgpLG89dGhpcy5pdGVtc1tzXSx0aGlzLmRpcmVjdGlvbj1sP1widXBcIjpcImRvd25cIikpO2lmKCFvJiYhdGhpcy5vcHRpb25zLmRyb3BPbkVtcHR5KXJldHVybjtpZih0aGlzLmN1cnJlbnRDb250YWluZXI9PT10aGlzLmNvbnRhaW5lcnNbcF0pcmV0dXJuIHRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyfHwodGhpcy5jb250YWluZXJzW3BdLl90cmlnZ2VyKFwib3ZlclwiLGUsdGhpcy5fdWlIYXNoKCkpLHRoaXMuY3VycmVudENvbnRhaW5lci5jb250YWluZXJDYWNoZS5vdmVyPTEpLHZvaWQgMDtvP3RoaXMuX3JlYXJyYW5nZShlLG8sbnVsbCwhMCk6dGhpcy5fcmVhcnJhbmdlKGUsbnVsbCx0aGlzLmNvbnRhaW5lcnNbcF0uZWxlbWVudCwhMCksdGhpcy5fdHJpZ2dlcihcImNoYW5nZVwiLGUsdGhpcy5fdWlIYXNoKCkpLHRoaXMuY29udGFpbmVyc1twXS5fdHJpZ2dlcihcImNoYW5nZVwiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKSx0aGlzLmN1cnJlbnRDb250YWluZXI9dGhpcy5jb250YWluZXJzW3BdLHRoaXMub3B0aW9ucy5wbGFjZWhvbGRlci51cGRhdGUodGhpcy5jdXJyZW50Q29udGFpbmVyLHRoaXMucGxhY2Vob2xkZXIpLHRoaXMuY29udGFpbmVyc1twXS5fdHJpZ2dlcihcIm92ZXJcIixlLHRoaXMuX3VpSGFzaCh0aGlzKSksdGhpcy5jb250YWluZXJzW3BdLmNvbnRhaW5lckNhY2hlLm92ZXI9MX19LF9jcmVhdGVIZWxwZXI6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLHM9dC5pc0Z1bmN0aW9uKGkuaGVscGVyKT90KGkuaGVscGVyLmFwcGx5KHRoaXMuZWxlbWVudFswXSxbZSx0aGlzLmN1cnJlbnRJdGVtXSkpOlwiY2xvbmVcIj09PWkuaGVscGVyP3RoaXMuY3VycmVudEl0ZW0uY2xvbmUoKTp0aGlzLmN1cnJlbnRJdGVtO3JldHVybiBzLnBhcmVudHMoXCJib2R5XCIpLmxlbmd0aHx8dChcInBhcmVudFwiIT09aS5hcHBlbmRUbz9pLmFwcGVuZFRvOnRoaXMuY3VycmVudEl0ZW1bMF0ucGFyZW50Tm9kZSlbMF0uYXBwZW5kQ2hpbGQoc1swXSksc1swXT09PXRoaXMuY3VycmVudEl0ZW1bMF0mJih0aGlzLl9zdG9yZWRDU1M9e3dpZHRoOnRoaXMuY3VycmVudEl0ZW1bMF0uc3R5bGUud2lkdGgsaGVpZ2h0OnRoaXMuY3VycmVudEl0ZW1bMF0uc3R5bGUuaGVpZ2h0LHBvc2l0aW9uOnRoaXMuY3VycmVudEl0ZW0uY3NzKFwicG9zaXRpb25cIiksdG9wOnRoaXMuY3VycmVudEl0ZW0uY3NzKFwidG9wXCIpLGxlZnQ6dGhpcy5jdXJyZW50SXRlbS5jc3MoXCJsZWZ0XCIpfSksKCFzWzBdLnN0eWxlLndpZHRofHxpLmZvcmNlSGVscGVyU2l6ZSkmJnMud2lkdGgodGhpcy5jdXJyZW50SXRlbS53aWR0aCgpKSwoIXNbMF0uc3R5bGUuaGVpZ2h0fHxpLmZvcmNlSGVscGVyU2l6ZSkmJnMuaGVpZ2h0KHRoaXMuY3VycmVudEl0ZW0uaGVpZ2h0KCkpLHN9LF9hZGp1c3RPZmZzZXRGcm9tSGVscGVyOmZ1bmN0aW9uKGUpe1wic3RyaW5nXCI9PXR5cGVvZiBlJiYoZT1lLnNwbGl0KFwiIFwiKSksdC5pc0FycmF5KGUpJiYoZT17bGVmdDorZVswXSx0b3A6K2VbMV18fDB9KSxcImxlZnRcImluIGUmJih0aGlzLm9mZnNldC5jbGljay5sZWZ0PWUubGVmdCt0aGlzLm1hcmdpbnMubGVmdCksXCJyaWdodFwiaW4gZSYmKHRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ9dGhpcy5oZWxwZXJQcm9wb3J0aW9ucy53aWR0aC1lLnJpZ2h0K3RoaXMubWFyZ2lucy5sZWZ0KSxcInRvcFwiaW4gZSYmKHRoaXMub2Zmc2V0LmNsaWNrLnRvcD1lLnRvcCt0aGlzLm1hcmdpbnMudG9wKSxcImJvdHRvbVwiaW4gZSYmKHRoaXMub2Zmc2V0LmNsaWNrLnRvcD10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC1lLmJvdHRvbSt0aGlzLm1hcmdpbnMudG9wKX0sX2dldFBhcmVudE9mZnNldDpmdW5jdGlvbigpe3RoaXMub2Zmc2V0UGFyZW50PXRoaXMuaGVscGVyLm9mZnNldFBhcmVudCgpO3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50Lm9mZnNldCgpO3JldHVyblwiYWJzb2x1dGVcIj09PXRoaXMuY3NzUG9zaXRpb24mJnRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5kb2N1bWVudFswXSYmdC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSx0aGlzLm9mZnNldFBhcmVudFswXSkmJihlLmxlZnQrPXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbExlZnQoKSxlLnRvcCs9dGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCkpLCh0aGlzLm9mZnNldFBhcmVudFswXT09PXRoaXMuZG9jdW1lbnRbMF0uYm9keXx8dGhpcy5vZmZzZXRQYXJlbnRbMF0udGFnTmFtZSYmXCJodG1sXCI9PT10aGlzLm9mZnNldFBhcmVudFswXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkmJnQudWkuaWUpJiYoZT17dG9wOjAsbGVmdDowfSkse3RvcDplLnRvcCsocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKFwiYm9yZGVyVG9wV2lkdGhcIiksMTApfHwwKSxsZWZ0OmUubGVmdCsocGFyc2VJbnQodGhpcy5vZmZzZXRQYXJlbnQuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpLDEwKXx8MCl9fSxfZ2V0UmVsYXRpdmVPZmZzZXQ6ZnVuY3Rpb24oKXtpZihcInJlbGF0aXZlXCI9PT10aGlzLmNzc1Bvc2l0aW9uKXt2YXIgdD10aGlzLmN1cnJlbnRJdGVtLnBvc2l0aW9uKCk7cmV0dXJue3RvcDp0LnRvcC0ocGFyc2VJbnQodGhpcy5oZWxwZXIuY3NzKFwidG9wXCIpLDEwKXx8MCkrdGhpcy5zY3JvbGxQYXJlbnQuc2Nyb2xsVG9wKCksbGVmdDp0LmxlZnQtKHBhcnNlSW50KHRoaXMuaGVscGVyLmNzcyhcImxlZnRcIiksMTApfHwwKSt0aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCl9fXJldHVybnt0b3A6MCxsZWZ0OjB9fSxfY2FjaGVNYXJnaW5zOmZ1bmN0aW9uKCl7dGhpcy5tYXJnaW5zPXtsZWZ0OnBhcnNlSW50KHRoaXMuY3VycmVudEl0ZW0uY3NzKFwibWFyZ2luTGVmdFwiKSwxMCl8fDAsdG9wOnBhcnNlSW50KHRoaXMuY3VycmVudEl0ZW0uY3NzKFwibWFyZ2luVG9wXCIpLDEwKXx8MH19LF9jYWNoZUhlbHBlclByb3BvcnRpb25zOmZ1bmN0aW9uKCl7dGhpcy5oZWxwZXJQcm9wb3J0aW9ucz17d2lkdGg6dGhpcy5oZWxwZXIub3V0ZXJXaWR0aCgpLGhlaWdodDp0aGlzLmhlbHBlci5vdXRlckhlaWdodCgpfX0sX3NldENvbnRhaW5tZW50OmZ1bmN0aW9uKCl7dmFyIGUsaSxzLG49dGhpcy5vcHRpb25zO1wicGFyZW50XCI9PT1uLmNvbnRhaW5tZW50JiYobi5jb250YWlubWVudD10aGlzLmhlbHBlclswXS5wYXJlbnROb2RlKSwoXCJkb2N1bWVudFwiPT09bi5jb250YWlubWVudHx8XCJ3aW5kb3dcIj09PW4uY29udGFpbm1lbnQpJiYodGhpcy5jb250YWlubWVudD1bMC10aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0LXRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0LDAtdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3AsXCJkb2N1bWVudFwiPT09bi5jb250YWlubWVudD90aGlzLmRvY3VtZW50LndpZHRoKCk6dGhpcy53aW5kb3cud2lkdGgoKS10aGlzLmhlbHBlclByb3BvcnRpb25zLndpZHRoLXRoaXMubWFyZ2lucy5sZWZ0LChcImRvY3VtZW50XCI9PT1uLmNvbnRhaW5tZW50P3RoaXMuZG9jdW1lbnQuaGVpZ2h0KCl8fGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5zY3JvbGxIZWlnaHQ6dGhpcy53aW5kb3cuaGVpZ2h0KCl8fHRoaXMuZG9jdW1lbnRbMF0uYm9keS5wYXJlbnROb2RlLnNjcm9sbEhlaWdodCktdGhpcy5oZWxwZXJQcm9wb3J0aW9ucy5oZWlnaHQtdGhpcy5tYXJnaW5zLnRvcF0pLC9eKGRvY3VtZW50fHdpbmRvd3xwYXJlbnQpJC8udGVzdChuLmNvbnRhaW5tZW50KXx8KGU9dChuLmNvbnRhaW5tZW50KVswXSxpPXQobi5jb250YWlubWVudCkub2Zmc2V0KCkscz1cImhpZGRlblwiIT09dChlKS5jc3MoXCJvdmVyZmxvd1wiKSx0aGlzLmNvbnRhaW5tZW50PVtpLmxlZnQrKHBhcnNlSW50KHQoZSkuY3NzKFwiYm9yZGVyTGVmdFdpZHRoXCIpLDEwKXx8MCkrKHBhcnNlSW50KHQoZSkuY3NzKFwicGFkZGluZ0xlZnRcIiksMTApfHwwKS10aGlzLm1hcmdpbnMubGVmdCxpLnRvcCsocGFyc2VJbnQodChlKS5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwxMCl8fDApKyhwYXJzZUludCh0KGUpLmNzcyhcInBhZGRpbmdUb3BcIiksMTApfHwwKS10aGlzLm1hcmdpbnMudG9wLGkubGVmdCsocz9NYXRoLm1heChlLnNjcm9sbFdpZHRoLGUub2Zmc2V0V2lkdGgpOmUub2Zmc2V0V2lkdGgpLShwYXJzZUludCh0KGUpLmNzcyhcImJvcmRlckxlZnRXaWR0aFwiKSwxMCl8fDApLShwYXJzZUludCh0KGUpLmNzcyhcInBhZGRpbmdSaWdodFwiKSwxMCl8fDApLXRoaXMuaGVscGVyUHJvcG9ydGlvbnMud2lkdGgtdGhpcy5tYXJnaW5zLmxlZnQsaS50b3ArKHM/TWF0aC5tYXgoZS5zY3JvbGxIZWlnaHQsZS5vZmZzZXRIZWlnaHQpOmUub2Zmc2V0SGVpZ2h0KS0ocGFyc2VJbnQodChlKS5jc3MoXCJib3JkZXJUb3BXaWR0aFwiKSwxMCl8fDApLShwYXJzZUludCh0KGUpLmNzcyhcInBhZGRpbmdCb3R0b21cIiksMTApfHwwKS10aGlzLmhlbHBlclByb3BvcnRpb25zLmhlaWdodC10aGlzLm1hcmdpbnMudG9wXSl9LF9jb252ZXJ0UG9zaXRpb25UbzpmdW5jdGlvbihlLGkpe2l8fChpPXRoaXMucG9zaXRpb24pO3ZhciBzPVwiYWJzb2x1dGVcIj09PWU/MTotMSxuPVwiYWJzb2x1dGVcIiE9PXRoaXMuY3NzUG9zaXRpb258fHRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5kb2N1bWVudFswXSYmdC5jb250YWlucyh0aGlzLnNjcm9sbFBhcmVudFswXSx0aGlzLm9mZnNldFBhcmVudFswXSk/dGhpcy5zY3JvbGxQYXJlbnQ6dGhpcy5vZmZzZXRQYXJlbnQsbz0vKGh0bWx8Ym9keSkvaS50ZXN0KG5bMF0udGFnTmFtZSk7cmV0dXJue3RvcDppLnRvcCt0aGlzLm9mZnNldC5yZWxhdGl2ZS50b3Aqcyt0aGlzLm9mZnNldC5wYXJlbnQudG9wKnMtKFwiZml4ZWRcIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOm8/MDpuLnNjcm9sbFRvcCgpKSpzLGxlZnQ6aS5sZWZ0K3RoaXMub2Zmc2V0LnJlbGF0aXZlLmxlZnQqcyt0aGlzLm9mZnNldC5wYXJlbnQubGVmdCpzLShcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk6bz8wOm4uc2Nyb2xsTGVmdCgpKSpzfX0sX2dlbmVyYXRlUG9zaXRpb246ZnVuY3Rpb24oZSl7dmFyIGkscyxuPXRoaXMub3B0aW9ucyxvPWUucGFnZVgsYT1lLnBhZ2VZLHI9XCJhYnNvbHV0ZVwiIT09dGhpcy5jc3NQb3NpdGlvbnx8dGhpcy5zY3JvbGxQYXJlbnRbMF0hPT10aGlzLmRvY3VtZW50WzBdJiZ0LmNvbnRhaW5zKHRoaXMuc2Nyb2xsUGFyZW50WzBdLHRoaXMub2Zmc2V0UGFyZW50WzBdKT90aGlzLnNjcm9sbFBhcmVudDp0aGlzLm9mZnNldFBhcmVudCxoPS8oaHRtbHxib2R5KS9pLnRlc3QoclswXS50YWdOYW1lKTtyZXR1cm5cInJlbGF0aXZlXCIhPT10aGlzLmNzc1Bvc2l0aW9ufHx0aGlzLnNjcm9sbFBhcmVudFswXSE9PXRoaXMuZG9jdW1lbnRbMF0mJnRoaXMuc2Nyb2xsUGFyZW50WzBdIT09dGhpcy5vZmZzZXRQYXJlbnRbMF18fCh0aGlzLm9mZnNldC5yZWxhdGl2ZT10aGlzLl9nZXRSZWxhdGl2ZU9mZnNldCgpKSx0aGlzLm9yaWdpbmFsUG9zaXRpb24mJih0aGlzLmNvbnRhaW5tZW50JiYoZS5wYWdlWC10aGlzLm9mZnNldC5jbGljay5sZWZ0PHRoaXMuY29udGFpbm1lbnRbMF0mJihvPXRoaXMuY29udGFpbm1lbnRbMF0rdGhpcy5vZmZzZXQuY2xpY2subGVmdCksZS5wYWdlWS10aGlzLm9mZnNldC5jbGljay50b3A8dGhpcy5jb250YWlubWVudFsxXSYmKGE9dGhpcy5jb250YWlubWVudFsxXSt0aGlzLm9mZnNldC5jbGljay50b3ApLGUucGFnZVgtdGhpcy5vZmZzZXQuY2xpY2subGVmdD50aGlzLmNvbnRhaW5tZW50WzJdJiYobz10aGlzLmNvbnRhaW5tZW50WzJdK3RoaXMub2Zmc2V0LmNsaWNrLmxlZnQpLGUucGFnZVktdGhpcy5vZmZzZXQuY2xpY2sudG9wPnRoaXMuY29udGFpbm1lbnRbM10mJihhPXRoaXMuY29udGFpbm1lbnRbM10rdGhpcy5vZmZzZXQuY2xpY2sudG9wKSksbi5ncmlkJiYoaT10aGlzLm9yaWdpbmFsUGFnZVkrTWF0aC5yb3VuZCgoYS10aGlzLm9yaWdpbmFsUGFnZVkpL24uZ3JpZFsxXSkqbi5ncmlkWzFdLGE9dGhpcy5jb250YWlubWVudD9pLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49dGhpcy5jb250YWlubWVudFsxXSYmaS10aGlzLm9mZnNldC5jbGljay50b3A8PXRoaXMuY29udGFpbm1lbnRbM10/aTppLXRoaXMub2Zmc2V0LmNsaWNrLnRvcD49dGhpcy5jb250YWlubWVudFsxXT9pLW4uZ3JpZFsxXTppK24uZ3JpZFsxXTppLHM9dGhpcy5vcmlnaW5hbFBhZ2VYK01hdGgucm91bmQoKG8tdGhpcy5vcmlnaW5hbFBhZ2VYKS9uLmdyaWRbMF0pKm4uZ3JpZFswXSxvPXRoaXMuY29udGFpbm1lbnQ/cy10aGlzLm9mZnNldC5jbGljay5sZWZ0Pj10aGlzLmNvbnRhaW5tZW50WzBdJiZzLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ8PXRoaXMuY29udGFpbm1lbnRbMl0/czpzLXRoaXMub2Zmc2V0LmNsaWNrLmxlZnQ+PXRoaXMuY29udGFpbm1lbnRbMF0/cy1uLmdyaWRbMF06cytuLmdyaWRbMF06cykpLHt0b3A6YS10aGlzLm9mZnNldC5jbGljay50b3AtdGhpcy5vZmZzZXQucmVsYXRpdmUudG9wLXRoaXMub2Zmc2V0LnBhcmVudC50b3ArKFwiZml4ZWRcIj09PXRoaXMuY3NzUG9zaXRpb24/LXRoaXMuc2Nyb2xsUGFyZW50LnNjcm9sbFRvcCgpOmg/MDpyLnNjcm9sbFRvcCgpKSxsZWZ0Om8tdGhpcy5vZmZzZXQuY2xpY2subGVmdC10aGlzLm9mZnNldC5yZWxhdGl2ZS5sZWZ0LXRoaXMub2Zmc2V0LnBhcmVudC5sZWZ0KyhcImZpeGVkXCI9PT10aGlzLmNzc1Bvc2l0aW9uPy10aGlzLnNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCk6aD8wOnIuc2Nyb2xsTGVmdCgpKX19LF9yZWFycmFuZ2U6ZnVuY3Rpb24odCxlLGkscyl7aT9pWzBdLmFwcGVuZENoaWxkKHRoaXMucGxhY2Vob2xkZXJbMF0pOmUuaXRlbVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLnBsYWNlaG9sZGVyWzBdLFwiZG93blwiPT09dGhpcy5kaXJlY3Rpb24/ZS5pdGVtWzBdOmUuaXRlbVswXS5uZXh0U2libGluZyksdGhpcy5jb3VudGVyPXRoaXMuY291bnRlcj8rK3RoaXMuY291bnRlcjoxO3ZhciBuPXRoaXMuY291bnRlcjtcbnRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7bj09PXRoaXMuY291bnRlciYmdGhpcy5yZWZyZXNoUG9zaXRpb25zKCFzKX0pfSxfY2xlYXI6ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiBpKHQsZSxpKXtyZXR1cm4gZnVuY3Rpb24ocyl7aS5fdHJpZ2dlcih0LHMsZS5fdWlIYXNoKGUpKX19dGhpcy5yZXZlcnRpbmc9ITE7dmFyIHMsbj1bXTtpZighdGhpcy5fbm9GaW5hbFNvcnQmJnRoaXMuY3VycmVudEl0ZW0ucGFyZW50KCkubGVuZ3RoJiZ0aGlzLnBsYWNlaG9sZGVyLmJlZm9yZSh0aGlzLmN1cnJlbnRJdGVtKSx0aGlzLl9ub0ZpbmFsU29ydD1udWxsLHRoaXMuaGVscGVyWzBdPT09dGhpcy5jdXJyZW50SXRlbVswXSl7Zm9yKHMgaW4gdGhpcy5fc3RvcmVkQ1NTKShcImF1dG9cIj09PXRoaXMuX3N0b3JlZENTU1tzXXx8XCJzdGF0aWNcIj09PXRoaXMuX3N0b3JlZENTU1tzXSkmJih0aGlzLl9zdG9yZWRDU1Nbc109XCJcIik7dGhpcy5jdXJyZW50SXRlbS5jc3ModGhpcy5fc3RvcmVkQ1NTKSx0aGlzLl9yZW1vdmVDbGFzcyh0aGlzLmN1cnJlbnRJdGVtLFwidWktc29ydGFibGUtaGVscGVyXCIpfWVsc2UgdGhpcy5jdXJyZW50SXRlbS5zaG93KCk7Zm9yKHRoaXMuZnJvbU91dHNpZGUmJiFlJiZuLnB1c2goZnVuY3Rpb24odCl7dGhpcy5fdHJpZ2dlcihcInJlY2VpdmVcIix0LHRoaXMuX3VpSGFzaCh0aGlzLmZyb21PdXRzaWRlKSl9KSwhdGhpcy5mcm9tT3V0c2lkZSYmdGhpcy5kb21Qb3NpdGlvbi5wcmV2PT09dGhpcy5jdXJyZW50SXRlbS5wcmV2KCkubm90KFwiLnVpLXNvcnRhYmxlLWhlbHBlclwiKVswXSYmdGhpcy5kb21Qb3NpdGlvbi5wYXJlbnQ9PT10aGlzLmN1cnJlbnRJdGVtLnBhcmVudCgpWzBdfHxlfHxuLnB1c2goZnVuY3Rpb24odCl7dGhpcy5fdHJpZ2dlcihcInVwZGF0ZVwiLHQsdGhpcy5fdWlIYXNoKCkpfSksdGhpcyE9PXRoaXMuY3VycmVudENvbnRhaW5lciYmKGV8fChuLnB1c2goZnVuY3Rpb24odCl7dGhpcy5fdHJpZ2dlcihcInJlbW92ZVwiLHQsdGhpcy5fdWlIYXNoKCkpfSksbi5wdXNoKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlKXt0Ll90cmlnZ2VyKFwicmVjZWl2ZVwiLGUsdGhpcy5fdWlIYXNoKHRoaXMpKX19LmNhbGwodGhpcyx0aGlzLmN1cnJlbnRDb250YWluZXIpKSxuLnB1c2goZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3QuX3RyaWdnZXIoXCJ1cGRhdGVcIixlLHRoaXMuX3VpSGFzaCh0aGlzKSl9fS5jYWxsKHRoaXMsdGhpcy5jdXJyZW50Q29udGFpbmVyKSkpKSxzPXRoaXMuY29udGFpbmVycy5sZW5ndGgtMTtzPj0wO3MtLSllfHxuLnB1c2goaShcImRlYWN0aXZhdGVcIix0aGlzLHRoaXMuY29udGFpbmVyc1tzXSkpLHRoaXMuY29udGFpbmVyc1tzXS5jb250YWluZXJDYWNoZS5vdmVyJiYobi5wdXNoKGkoXCJvdXRcIix0aGlzLHRoaXMuY29udGFpbmVyc1tzXSkpLHRoaXMuY29udGFpbmVyc1tzXS5jb250YWluZXJDYWNoZS5vdmVyPTApO2lmKHRoaXMuc3RvcmVkQ3Vyc29yJiYodGhpcy5kb2N1bWVudC5maW5kKFwiYm9keVwiKS5jc3MoXCJjdXJzb3JcIix0aGlzLnN0b3JlZEN1cnNvciksdGhpcy5zdG9yZWRTdHlsZXNoZWV0LnJlbW92ZSgpKSx0aGlzLl9zdG9yZWRPcGFjaXR5JiZ0aGlzLmhlbHBlci5jc3MoXCJvcGFjaXR5XCIsdGhpcy5fc3RvcmVkT3BhY2l0eSksdGhpcy5fc3RvcmVkWkluZGV4JiZ0aGlzLmhlbHBlci5jc3MoXCJ6SW5kZXhcIixcImF1dG9cIj09PXRoaXMuX3N0b3JlZFpJbmRleD9cIlwiOnRoaXMuX3N0b3JlZFpJbmRleCksdGhpcy5kcmFnZ2luZz0hMSxlfHx0aGlzLl90cmlnZ2VyKFwiYmVmb3JlU3RvcFwiLHQsdGhpcy5fdWlIYXNoKCkpLHRoaXMucGxhY2Vob2xkZXJbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnBsYWNlaG9sZGVyWzBdKSx0aGlzLmNhbmNlbEhlbHBlclJlbW92YWx8fCh0aGlzLmhlbHBlclswXSE9PXRoaXMuY3VycmVudEl0ZW1bMF0mJnRoaXMuaGVscGVyLnJlbW92ZSgpLHRoaXMuaGVscGVyPW51bGwpLCFlKXtmb3Iocz0wO24ubGVuZ3RoPnM7cysrKW5bc10uY2FsbCh0aGlzLHQpO3RoaXMuX3RyaWdnZXIoXCJzdG9wXCIsdCx0aGlzLl91aUhhc2goKSl9cmV0dXJuIHRoaXMuZnJvbU91dHNpZGU9ITEsIXRoaXMuY2FuY2VsSGVscGVyUmVtb3ZhbH0sX3RyaWdnZXI6ZnVuY3Rpb24oKXt0LldpZGdldC5wcm90b3R5cGUuX3RyaWdnZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpPT09ITEmJnRoaXMuY2FuY2VsKCl9LF91aUhhc2g6ZnVuY3Rpb24oZSl7dmFyIGk9ZXx8dGhpcztyZXR1cm57aGVscGVyOmkuaGVscGVyLHBsYWNlaG9sZGVyOmkucGxhY2Vob2xkZXJ8fHQoW10pLHBvc2l0aW9uOmkucG9zaXRpb24sb3JpZ2luYWxQb3NpdGlvbjppLm9yaWdpbmFsUG9zaXRpb24sb2Zmc2V0OmkucG9zaXRpb25BYnMsaXRlbTppLmN1cnJlbnRJdGVtLHNlbmRlcjplP2UuZWxlbWVudDpudWxsfX19KSx0LndpZGdldChcInVpLnNwaW5uZXJcIix7dmVyc2lvbjpcIjEuMTIuMVwiLGRlZmF1bHRFbGVtZW50OlwiPGlucHV0PlwiLHdpZGdldEV2ZW50UHJlZml4Olwic3BpblwiLG9wdGlvbnM6e2NsYXNzZXM6e1widWktc3Bpbm5lclwiOlwidWktY29ybmVyLWFsbFwiLFwidWktc3Bpbm5lci1kb3duXCI6XCJ1aS1jb3JuZXItYnJcIixcInVpLXNwaW5uZXItdXBcIjpcInVpLWNvcm5lci10clwifSxjdWx0dXJlOm51bGwsaWNvbnM6e2Rvd246XCJ1aS1pY29uLXRyaWFuZ2xlLTEtc1wiLHVwOlwidWktaWNvbi10cmlhbmdsZS0xLW5cIn0saW5jcmVtZW50YWw6ITAsbWF4Om51bGwsbWluOm51bGwsbnVtYmVyRm9ybWF0Om51bGwscGFnZToxMCxzdGVwOjEsY2hhbmdlOm51bGwsc3BpbjpudWxsLHN0YXJ0Om51bGwsc3RvcDpudWxsfSxfY3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5fc2V0T3B0aW9uKFwibWF4XCIsdGhpcy5vcHRpb25zLm1heCksdGhpcy5fc2V0T3B0aW9uKFwibWluXCIsdGhpcy5vcHRpb25zLm1pbiksdGhpcy5fc2V0T3B0aW9uKFwic3RlcFwiLHRoaXMub3B0aW9ucy5zdGVwKSxcIlwiIT09dGhpcy52YWx1ZSgpJiZ0aGlzLl92YWx1ZSh0aGlzLmVsZW1lbnQudmFsKCksITApLHRoaXMuX2RyYXcoKSx0aGlzLl9vbih0aGlzLl9ldmVudHMpLHRoaXMuX3JlZnJlc2goKSx0aGlzLl9vbih0aGlzLndpbmRvdyx7YmVmb3JldW5sb2FkOmZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50LnJlbW92ZUF0dHIoXCJhdXRvY29tcGxldGVcIil9fSl9LF9nZXRDcmVhdGVPcHRpb25zOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fc3VwZXIoKSxpPXRoaXMuZWxlbWVudDtyZXR1cm4gdC5lYWNoKFtcIm1pblwiLFwibWF4XCIsXCJzdGVwXCJdLGZ1bmN0aW9uKHQscyl7dmFyIG49aS5hdHRyKHMpO251bGwhPW4mJm4ubGVuZ3RoJiYoZVtzXT1uKX0pLGV9LF9ldmVudHM6e2tleWRvd246ZnVuY3Rpb24odCl7dGhpcy5fc3RhcnQodCkmJnRoaXMuX2tleWRvd24odCkmJnQucHJldmVudERlZmF1bHQoKX0sa2V5dXA6XCJfc3RvcFwiLGZvY3VzOmZ1bmN0aW9uKCl7dGhpcy5wcmV2aW91cz10aGlzLmVsZW1lbnQudmFsKCl9LGJsdXI6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuY2FuY2VsQmx1cj8oZGVsZXRlIHRoaXMuY2FuY2VsQmx1cix2b2lkIDApOih0aGlzLl9zdG9wKCksdGhpcy5fcmVmcmVzaCgpLHRoaXMucHJldmlvdXMhPT10aGlzLmVsZW1lbnQudmFsKCkmJnRoaXMuX3RyaWdnZXIoXCJjaGFuZ2VcIix0KSx2b2lkIDApfSxtb3VzZXdoZWVsOmZ1bmN0aW9uKHQsZSl7aWYoZSl7aWYoIXRoaXMuc3Bpbm5pbmcmJiF0aGlzLl9zdGFydCh0KSlyZXR1cm4hMTt0aGlzLl9zcGluKChlPjA/MTotMSkqdGhpcy5vcHRpb25zLnN0ZXAsdCksY2xlYXJUaW1lb3V0KHRoaXMubW91c2V3aGVlbFRpbWVyKSx0aGlzLm1vdXNld2hlZWxUaW1lcj10aGlzLl9kZWxheShmdW5jdGlvbigpe3RoaXMuc3Bpbm5pbmcmJnRoaXMuX3N0b3AodCl9LDEwMCksdC5wcmV2ZW50RGVmYXVsdCgpfX0sXCJtb3VzZWRvd24gLnVpLXNwaW5uZXItYnV0dG9uXCI6ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gaSgpe3ZhciBlPXRoaXMuZWxlbWVudFswXT09PXQudWkuc2FmZUFjdGl2ZUVsZW1lbnQodGhpcy5kb2N1bWVudFswXSk7ZXx8KHRoaXMuZWxlbWVudC50cmlnZ2VyKFwiZm9jdXNcIiksdGhpcy5wcmV2aW91cz1zLHRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7dGhpcy5wcmV2aW91cz1zfSkpfXZhciBzO3M9dGhpcy5lbGVtZW50WzBdPT09dC51aS5zYWZlQWN0aXZlRWxlbWVudCh0aGlzLmRvY3VtZW50WzBdKT90aGlzLnByZXZpb3VzOnRoaXMuZWxlbWVudC52YWwoKSxlLnByZXZlbnREZWZhdWx0KCksaS5jYWxsKHRoaXMpLHRoaXMuY2FuY2VsQmx1cj0hMCx0aGlzLl9kZWxheShmdW5jdGlvbigpe2RlbGV0ZSB0aGlzLmNhbmNlbEJsdXIsaS5jYWxsKHRoaXMpfSksdGhpcy5fc3RhcnQoZSkhPT0hMSYmdGhpcy5fcmVwZWF0KG51bGwsdChlLmN1cnJlbnRUYXJnZXQpLmhhc0NsYXNzKFwidWktc3Bpbm5lci11cFwiKT8xOi0xLGUpfSxcIm1vdXNldXAgLnVpLXNwaW5uZXItYnV0dG9uXCI6XCJfc3RvcFwiLFwibW91c2VlbnRlciAudWktc3Bpbm5lci1idXR0b25cIjpmdW5jdGlvbihlKXtyZXR1cm4gdChlLmN1cnJlbnRUYXJnZXQpLmhhc0NsYXNzKFwidWktc3RhdGUtYWN0aXZlXCIpP3RoaXMuX3N0YXJ0KGUpPT09ITE/ITE6KHRoaXMuX3JlcGVhdChudWxsLHQoZS5jdXJyZW50VGFyZ2V0KS5oYXNDbGFzcyhcInVpLXNwaW5uZXItdXBcIik/MTotMSxlKSx2b2lkIDApOnZvaWQgMH0sXCJtb3VzZWxlYXZlIC51aS1zcGlubmVyLWJ1dHRvblwiOlwiX3N0b3BcIn0sX2VuaGFuY2U6ZnVuY3Rpb24oKXt0aGlzLnVpU3Bpbm5lcj10aGlzLmVsZW1lbnQuYXR0cihcImF1dG9jb21wbGV0ZVwiLFwib2ZmXCIpLndyYXAoXCI8c3Bhbj5cIikucGFyZW50KCkuYXBwZW5kKFwiPGE+PC9hPjxhPjwvYT5cIil9LF9kcmF3OmZ1bmN0aW9uKCl7dGhpcy5fZW5oYW5jZSgpLHRoaXMuX2FkZENsYXNzKHRoaXMudWlTcGlubmVyLFwidWktc3Bpbm5lclwiLFwidWktd2lkZ2V0IHVpLXdpZGdldC1jb250ZW50XCIpLHRoaXMuX2FkZENsYXNzKFwidWktc3Bpbm5lci1pbnB1dFwiKSx0aGlzLmVsZW1lbnQuYXR0cihcInJvbGVcIixcInNwaW5idXR0b25cIiksdGhpcy5idXR0b25zPXRoaXMudWlTcGlubmVyLmNoaWxkcmVuKFwiYVwiKS5hdHRyKFwidGFiSW5kZXhcIiwtMSkuYXR0cihcImFyaWEtaGlkZGVuXCIsITApLmJ1dHRvbih7Y2xhc3Nlczp7XCJ1aS1idXR0b25cIjpcIlwifX0pLHRoaXMuX3JlbW92ZUNsYXNzKHRoaXMuYnV0dG9ucyxcInVpLWNvcm5lci1hbGxcIiksdGhpcy5fYWRkQ2xhc3ModGhpcy5idXR0b25zLmZpcnN0KCksXCJ1aS1zcGlubmVyLWJ1dHRvbiB1aS1zcGlubmVyLXVwXCIpLHRoaXMuX2FkZENsYXNzKHRoaXMuYnV0dG9ucy5sYXN0KCksXCJ1aS1zcGlubmVyLWJ1dHRvbiB1aS1zcGlubmVyLWRvd25cIiksdGhpcy5idXR0b25zLmZpcnN0KCkuYnV0dG9uKHtpY29uOnRoaXMub3B0aW9ucy5pY29ucy51cCxzaG93TGFiZWw6ITF9KSx0aGlzLmJ1dHRvbnMubGFzdCgpLmJ1dHRvbih7aWNvbjp0aGlzLm9wdGlvbnMuaWNvbnMuZG93bixzaG93TGFiZWw6ITF9KSx0aGlzLmJ1dHRvbnMuaGVpZ2h0KCk+TWF0aC5jZWlsKC41KnRoaXMudWlTcGlubmVyLmhlaWdodCgpKSYmdGhpcy51aVNwaW5uZXIuaGVpZ2h0KCk+MCYmdGhpcy51aVNwaW5uZXIuaGVpZ2h0KHRoaXMudWlTcGlubmVyLmhlaWdodCgpKX0sX2tleWRvd246ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLHM9dC51aS5rZXlDb2RlO3N3aXRjaChlLmtleUNvZGUpe2Nhc2Ugcy5VUDpyZXR1cm4gdGhpcy5fcmVwZWF0KG51bGwsMSxlKSwhMDtjYXNlIHMuRE9XTjpyZXR1cm4gdGhpcy5fcmVwZWF0KG51bGwsLTEsZSksITA7Y2FzZSBzLlBBR0VfVVA6cmV0dXJuIHRoaXMuX3JlcGVhdChudWxsLGkucGFnZSxlKSwhMDtjYXNlIHMuUEFHRV9ET1dOOnJldHVybiB0aGlzLl9yZXBlYXQobnVsbCwtaS5wYWdlLGUpLCEwfXJldHVybiExfSxfc3RhcnQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3Bpbm5pbmd8fHRoaXMuX3RyaWdnZXIoXCJzdGFydFwiLHQpIT09ITE/KHRoaXMuY291bnRlcnx8KHRoaXMuY291bnRlcj0xKSx0aGlzLnNwaW5uaW5nPSEwLCEwKTohMX0sX3JlcGVhdDpmdW5jdGlvbih0LGUsaSl7dD10fHw1MDAsY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpLHRoaXMudGltZXI9dGhpcy5fZGVsYXkoZnVuY3Rpb24oKXt0aGlzLl9yZXBlYXQoNDAsZSxpKX0sdCksdGhpcy5fc3BpbihlKnRoaXMub3B0aW9ucy5zdGVwLGkpfSxfc3BpbjpmdW5jdGlvbih0LGUpe3ZhciBpPXRoaXMudmFsdWUoKXx8MDt0aGlzLmNvdW50ZXJ8fCh0aGlzLmNvdW50ZXI9MSksaT10aGlzLl9hZGp1c3RWYWx1ZShpK3QqdGhpcy5faW5jcmVtZW50KHRoaXMuY291bnRlcikpLHRoaXMuc3Bpbm5pbmcmJnRoaXMuX3RyaWdnZXIoXCJzcGluXCIsZSx7dmFsdWU6aX0pPT09ITF8fCh0aGlzLl92YWx1ZShpKSx0aGlzLmNvdW50ZXIrKyl9LF9pbmNyZW1lbnQ6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLmluY3JlbWVudGFsO3JldHVybiBpP3QuaXNGdW5jdGlvbihpKT9pKGUpOk1hdGguZmxvb3IoZSplKmUvNWU0LWUqZS81MDArMTcqZS8yMDArMSk6MX0sX3ByZWNpc2lvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuX3ByZWNpc2lvbk9mKHRoaXMub3B0aW9ucy5zdGVwKTtyZXR1cm4gbnVsbCE9PXRoaXMub3B0aW9ucy5taW4mJih0PU1hdGgubWF4KHQsdGhpcy5fcHJlY2lzaW9uT2YodGhpcy5vcHRpb25zLm1pbikpKSx0fSxfcHJlY2lzaW9uT2Y6ZnVuY3Rpb24odCl7dmFyIGU9XCJcIit0LGk9ZS5pbmRleE9mKFwiLlwiKTtyZXR1cm4tMT09PWk/MDplLmxlbmd0aC1pLTF9LF9hZGp1c3RWYWx1ZTpmdW5jdGlvbih0KXt2YXIgZSxpLHM9dGhpcy5vcHRpb25zO3JldHVybiBlPW51bGwhPT1zLm1pbj9zLm1pbjowLGk9dC1lLGk9TWF0aC5yb3VuZChpL3Muc3RlcCkqcy5zdGVwLHQ9ZStpLHQ9cGFyc2VGbG9hdCh0LnRvRml4ZWQodGhpcy5fcHJlY2lzaW9uKCkpKSxudWxsIT09cy5tYXgmJnQ+cy5tYXg/cy5tYXg6bnVsbCE9PXMubWluJiZzLm1pbj50P3MubWluOnR9LF9zdG9wOmZ1bmN0aW9uKHQpe3RoaXMuc3Bpbm5pbmcmJihjbGVhclRpbWVvdXQodGhpcy50aW1lciksY2xlYXJUaW1lb3V0KHRoaXMubW91c2V3aGVlbFRpbWVyKSx0aGlzLmNvdW50ZXI9MCx0aGlzLnNwaW5uaW5nPSExLHRoaXMuX3RyaWdnZXIoXCJzdG9wXCIsdCkpfSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7dmFyIGkscyxuO3JldHVyblwiY3VsdHVyZVwiPT09dHx8XCJudW1iZXJGb3JtYXRcIj09PXQ/KGk9dGhpcy5fcGFyc2UodGhpcy5lbGVtZW50LnZhbCgpKSx0aGlzLm9wdGlvbnNbdF09ZSx0aGlzLmVsZW1lbnQudmFsKHRoaXMuX2Zvcm1hdChpKSksdm9pZCAwKTooKFwibWF4XCI9PT10fHxcIm1pblwiPT09dHx8XCJzdGVwXCI9PT10KSYmXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXRoaXMuX3BhcnNlKGUpKSxcImljb25zXCI9PT10JiYocz10aGlzLmJ1dHRvbnMuZmlyc3QoKS5maW5kKFwiLnVpLWljb25cIiksdGhpcy5fcmVtb3ZlQ2xhc3MocyxudWxsLHRoaXMub3B0aW9ucy5pY29ucy51cCksdGhpcy5fYWRkQ2xhc3MocyxudWxsLGUudXApLG49dGhpcy5idXR0b25zLmxhc3QoKS5maW5kKFwiLnVpLWljb25cIiksdGhpcy5fcmVtb3ZlQ2xhc3MobixudWxsLHRoaXMub3B0aW9ucy5pY29ucy5kb3duKSx0aGlzLl9hZGRDbGFzcyhuLG51bGwsZS5kb3duKSksdGhpcy5fc3VwZXIodCxlKSx2b2lkIDApfSxfc2V0T3B0aW9uRGlzYWJsZWQ6ZnVuY3Rpb24odCl7dGhpcy5fc3VwZXIodCksdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy51aVNwaW5uZXIsbnVsbCxcInVpLXN0YXRlLWRpc2FibGVkXCIsISF0KSx0aGlzLmVsZW1lbnQucHJvcChcImRpc2FibGVkXCIsISF0KSx0aGlzLmJ1dHRvbnMuYnV0dG9uKHQ/XCJkaXNhYmxlXCI6XCJlbmFibGVcIil9LF9zZXRPcHRpb25zOnIoZnVuY3Rpb24odCl7dGhpcy5fc3VwZXIodCl9KSxfcGFyc2U6ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQmJlwiXCIhPT10JiYodD13aW5kb3cuR2xvYmFsaXplJiZ0aGlzLm9wdGlvbnMubnVtYmVyRm9ybWF0P0dsb2JhbGl6ZS5wYXJzZUZsb2F0KHQsMTAsdGhpcy5vcHRpb25zLmN1bHR1cmUpOit0KSxcIlwiPT09dHx8aXNOYU4odCk/bnVsbDp0fSxfZm9ybWF0OmZ1bmN0aW9uKHQpe3JldHVyblwiXCI9PT10P1wiXCI6d2luZG93Lkdsb2JhbGl6ZSYmdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdD9HbG9iYWxpemUuZm9ybWF0KHQsdGhpcy5vcHRpb25zLm51bWJlckZvcm1hdCx0aGlzLm9wdGlvbnMuY3VsdHVyZSk6dH0sX3JlZnJlc2g6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQuYXR0cih7XCJhcmlhLXZhbHVlbWluXCI6dGhpcy5vcHRpb25zLm1pbixcImFyaWEtdmFsdWVtYXhcIjp0aGlzLm9wdGlvbnMubWF4LFwiYXJpYS12YWx1ZW5vd1wiOnRoaXMuX3BhcnNlKHRoaXMuZWxlbWVudC52YWwoKSl9KX0saXNWYWxpZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMudmFsdWUoKTtyZXR1cm4gbnVsbD09PXQ/ITE6dD09PXRoaXMuX2FkanVzdFZhbHVlKHQpfSxfdmFsdWU6ZnVuY3Rpb24odCxlKXt2YXIgaTtcIlwiIT09dCYmKGk9dGhpcy5fcGFyc2UodCksbnVsbCE9PWkmJihlfHwoaT10aGlzLl9hZGp1c3RWYWx1ZShpKSksdD10aGlzLl9mb3JtYXQoaSkpKSx0aGlzLmVsZW1lbnQudmFsKHQpLHRoaXMuX3JlZnJlc2goKX0sX2Rlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmVsZW1lbnQucHJvcChcImRpc2FibGVkXCIsITEpLnJlbW92ZUF0dHIoXCJhdXRvY29tcGxldGUgcm9sZSBhcmlhLXZhbHVlbWluIGFyaWEtdmFsdWVtYXggYXJpYS12YWx1ZW5vd1wiKSx0aGlzLnVpU3Bpbm5lci5yZXBsYWNlV2l0aCh0aGlzLmVsZW1lbnQpfSxzdGVwVXA6cihmdW5jdGlvbih0KXt0aGlzLl9zdGVwVXAodCl9KSxfc3RlcFVwOmZ1bmN0aW9uKHQpe3RoaXMuX3N0YXJ0KCkmJih0aGlzLl9zcGluKCh0fHwxKSp0aGlzLm9wdGlvbnMuc3RlcCksdGhpcy5fc3RvcCgpKX0sc3RlcERvd246cihmdW5jdGlvbih0KXt0aGlzLl9zdGVwRG93bih0KX0pLF9zdGVwRG93bjpmdW5jdGlvbih0KXt0aGlzLl9zdGFydCgpJiYodGhpcy5fc3BpbigodHx8MSkqLXRoaXMub3B0aW9ucy5zdGVwKSx0aGlzLl9zdG9wKCkpfSxwYWdlVXA6cihmdW5jdGlvbih0KXt0aGlzLl9zdGVwVXAoKHR8fDEpKnRoaXMub3B0aW9ucy5wYWdlKX0pLHBhZ2VEb3duOnIoZnVuY3Rpb24odCl7dGhpcy5fc3RlcERvd24oKHR8fDEpKnRoaXMub3B0aW9ucy5wYWdlKX0pLHZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyKHRoaXMuX3ZhbHVlKS5jYWxsKHRoaXMsdCksdm9pZCAwKTp0aGlzLl9wYXJzZSh0aGlzLmVsZW1lbnQudmFsKCkpfSx3aWRnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy51aVNwaW5uZXJ9fSksdC51aUJhY2tDb21wYXQhPT0hMSYmdC53aWRnZXQoXCJ1aS5zcGlubmVyXCIsdC51aS5zcGlubmVyLHtfZW5oYW5jZTpmdW5jdGlvbigpe3RoaXMudWlTcGlubmVyPXRoaXMuZWxlbWVudC5hdHRyKFwiYXV0b2NvbXBsZXRlXCIsXCJvZmZcIikud3JhcCh0aGlzLl91aVNwaW5uZXJIdG1sKCkpLnBhcmVudCgpLmFwcGVuZCh0aGlzLl9idXR0b25IdG1sKCkpfSxfdWlTcGlubmVySHRtbDpmdW5jdGlvbigpe3JldHVyblwiPHNwYW4+XCJ9LF9idXR0b25IdG1sOmZ1bmN0aW9uKCl7cmV0dXJuXCI8YT48L2E+PGE+PC9hPlwifX0pLHQudWkuc3Bpbm5lcix0LndpZGdldChcInVpLnRhYnNcIix7dmVyc2lvbjpcIjEuMTIuMVwiLGRlbGF5OjMwMCxvcHRpb25zOnthY3RpdmU6bnVsbCxjbGFzc2VzOntcInVpLXRhYnNcIjpcInVpLWNvcm5lci1hbGxcIixcInVpLXRhYnMtbmF2XCI6XCJ1aS1jb3JuZXItYWxsXCIsXCJ1aS10YWJzLXBhbmVsXCI6XCJ1aS1jb3JuZXItYm90dG9tXCIsXCJ1aS10YWJzLXRhYlwiOlwidWktY29ybmVyLXRvcFwifSxjb2xsYXBzaWJsZTohMSxldmVudDpcImNsaWNrXCIsaGVpZ2h0U3R5bGU6XCJjb250ZW50XCIsaGlkZTpudWxsLHNob3c6bnVsbCxhY3RpdmF0ZTpudWxsLGJlZm9yZUFjdGl2YXRlOm51bGwsYmVmb3JlTG9hZDpudWxsLGxvYWQ6bnVsbH0sX2lzTG9jYWw6ZnVuY3Rpb24oKXt2YXIgdD0vIy4qJC87cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciBpLHM7aT1lLmhyZWYucmVwbGFjZSh0LFwiXCIpLHM9bG9jYXRpb24uaHJlZi5yZXBsYWNlKHQsXCJcIik7dHJ5e2k9ZGVjb2RlVVJJQ29tcG9uZW50KGkpfWNhdGNoKG4pe310cnl7cz1kZWNvZGVVUklDb21wb25lbnQocyl9Y2F0Y2gobil7fXJldHVybiBlLmhhc2gubGVuZ3RoPjEmJmk9PT1zfX0oKSxfY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxpPXRoaXMub3B0aW9uczt0aGlzLnJ1bm5pbmc9ITEsdGhpcy5fYWRkQ2xhc3MoXCJ1aS10YWJzXCIsXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiksdGhpcy5fdG9nZ2xlQ2xhc3MoXCJ1aS10YWJzLWNvbGxhcHNpYmxlXCIsbnVsbCxpLmNvbGxhcHNpYmxlKSx0aGlzLl9wcm9jZXNzVGFicygpLGkuYWN0aXZlPXRoaXMuX2luaXRpYWxBY3RpdmUoKSx0LmlzQXJyYXkoaS5kaXNhYmxlZCkmJihpLmRpc2FibGVkPXQudW5pcXVlKGkuZGlzYWJsZWQuY29uY2F0KHQubWFwKHRoaXMudGFicy5maWx0ZXIoXCIudWktc3RhdGUtZGlzYWJsZWRcIiksZnVuY3Rpb24odCl7cmV0dXJuIGUudGFicy5pbmRleCh0KX0pKSkuc29ydCgpKSx0aGlzLmFjdGl2ZT10aGlzLm9wdGlvbnMuYWN0aXZlIT09ITEmJnRoaXMuYW5jaG9ycy5sZW5ndGg/dGhpcy5fZmluZEFjdGl2ZShpLmFjdGl2ZSk6dCgpLHRoaXMuX3JlZnJlc2goKSx0aGlzLmFjdGl2ZS5sZW5ndGgmJnRoaXMubG9hZChpLmFjdGl2ZSl9LF9pbml0aWFsQWN0aXZlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcHRpb25zLmFjdGl2ZSxpPXRoaXMub3B0aW9ucy5jb2xsYXBzaWJsZSxzPWxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpO3JldHVybiBudWxsPT09ZSYmKHMmJnRoaXMudGFicy5lYWNoKGZ1bmN0aW9uKGksbil7cmV0dXJuIHQobikuYXR0cihcImFyaWEtY29udHJvbHNcIik9PT1zPyhlPWksITEpOnZvaWQgMH0pLG51bGw9PT1lJiYoZT10aGlzLnRhYnMuaW5kZXgodGhpcy50YWJzLmZpbHRlcihcIi51aS10YWJzLWFjdGl2ZVwiKSkpLChudWxsPT09ZXx8LTE9PT1lKSYmKGU9dGhpcy50YWJzLmxlbmd0aD8wOiExKSksZSE9PSExJiYoZT10aGlzLnRhYnMuaW5kZXgodGhpcy50YWJzLmVxKGUpKSwtMT09PWUmJihlPWk/ITE6MCkpLCFpJiZlPT09ITEmJnRoaXMuYW5jaG9ycy5sZW5ndGgmJihlPTApLGV9LF9nZXRDcmVhdGVFdmVudERhdGE6ZnVuY3Rpb24oKXtyZXR1cm57dGFiOnRoaXMuYWN0aXZlLHBhbmVsOnRoaXMuYWN0aXZlLmxlbmd0aD90aGlzLl9nZXRQYW5lbEZvclRhYih0aGlzLmFjdGl2ZSk6dCgpfX0sX3RhYktleWRvd246ZnVuY3Rpb24oZSl7dmFyIGk9dCh0LnVpLnNhZmVBY3RpdmVFbGVtZW50KHRoaXMuZG9jdW1lbnRbMF0pKS5jbG9zZXN0KFwibGlcIikscz10aGlzLnRhYnMuaW5kZXgoaSksbj0hMDtpZighdGhpcy5faGFuZGxlUGFnZU5hdihlKSl7c3dpdGNoKGUua2V5Q29kZSl7Y2FzZSB0LnVpLmtleUNvZGUuUklHSFQ6Y2FzZSB0LnVpLmtleUNvZGUuRE9XTjpzKys7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuVVA6Y2FzZSB0LnVpLmtleUNvZGUuTEVGVDpuPSExLHMtLTticmVhaztjYXNlIHQudWkua2V5Q29kZS5FTkQ6cz10aGlzLmFuY2hvcnMubGVuZ3RoLTE7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuSE9NRTpzPTA7YnJlYWs7Y2FzZSB0LnVpLmtleUNvZGUuU1BBQ0U6cmV0dXJuIGUucHJldmVudERlZmF1bHQoKSxjbGVhclRpbWVvdXQodGhpcy5hY3RpdmF0aW5nKSx0aGlzLl9hY3RpdmF0ZShzKSx2b2lkIDA7Y2FzZSB0LnVpLmtleUNvZGUuRU5URVI6cmV0dXJuIGUucHJldmVudERlZmF1bHQoKSxjbGVhclRpbWVvdXQodGhpcy5hY3RpdmF0aW5nKSx0aGlzLl9hY3RpdmF0ZShzPT09dGhpcy5vcHRpb25zLmFjdGl2ZT8hMTpzKSx2b2lkIDA7ZGVmYXVsdDpyZXR1cm59ZS5wcmV2ZW50RGVmYXVsdCgpLGNsZWFyVGltZW91dCh0aGlzLmFjdGl2YXRpbmcpLHM9dGhpcy5fZm9jdXNOZXh0VGFiKHMsbiksZS5jdHJsS2V5fHxlLm1ldGFLZXl8fChpLmF0dHIoXCJhcmlhLXNlbGVjdGVkXCIsXCJmYWxzZVwiKSx0aGlzLnRhYnMuZXEocykuYXR0cihcImFyaWEtc2VsZWN0ZWRcIixcInRydWVcIiksdGhpcy5hY3RpdmF0aW5nPXRoaXMuX2RlbGF5KGZ1bmN0aW9uKCl7dGhpcy5vcHRpb24oXCJhY3RpdmVcIixzKX0sdGhpcy5kZWxheSkpfX0sX3BhbmVsS2V5ZG93bjpmdW5jdGlvbihlKXt0aGlzLl9oYW5kbGVQYWdlTmF2KGUpfHxlLmN0cmxLZXkmJmUua2V5Q29kZT09PXQudWkua2V5Q29kZS5VUCYmKGUucHJldmVudERlZmF1bHQoKSx0aGlzLmFjdGl2ZS50cmlnZ2VyKFwiZm9jdXNcIikpfSxfaGFuZGxlUGFnZU5hdjpmdW5jdGlvbihlKXtyZXR1cm4gZS5hbHRLZXkmJmUua2V5Q29kZT09PXQudWkua2V5Q29kZS5QQUdFX1VQPyh0aGlzLl9hY3RpdmF0ZSh0aGlzLl9mb2N1c05leHRUYWIodGhpcy5vcHRpb25zLmFjdGl2ZS0xLCExKSksITApOmUuYWx0S2V5JiZlLmtleUNvZGU9PT10LnVpLmtleUNvZGUuUEFHRV9ET1dOPyh0aGlzLl9hY3RpdmF0ZSh0aGlzLl9mb2N1c05leHRUYWIodGhpcy5vcHRpb25zLmFjdGl2ZSsxLCEwKSksITApOnZvaWQgMH0sX2ZpbmROZXh0VGFiOmZ1bmN0aW9uKGUsaSl7ZnVuY3Rpb24gcygpe3JldHVybiBlPm4mJihlPTApLDA+ZSYmKGU9biksZX1mb3IodmFyIG49dGhpcy50YWJzLmxlbmd0aC0xOy0xIT09dC5pbkFycmF5KHMoKSx0aGlzLm9wdGlvbnMuZGlzYWJsZWQpOyllPWk/ZSsxOmUtMTtyZXR1cm4gZX0sX2ZvY3VzTmV4dFRhYjpmdW5jdGlvbih0LGUpe3JldHVybiB0PXRoaXMuX2ZpbmROZXh0VGFiKHQsZSksdGhpcy50YWJzLmVxKHQpLnRyaWdnZXIoXCJmb2N1c1wiKSx0fSxfc2V0T3B0aW9uOmZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJhY3RpdmVcIj09PXQ/KHRoaXMuX2FjdGl2YXRlKGUpLHZvaWQgMCk6KHRoaXMuX3N1cGVyKHQsZSksXCJjb2xsYXBzaWJsZVwiPT09dCYmKHRoaXMuX3RvZ2dsZUNsYXNzKFwidWktdGFicy1jb2xsYXBzaWJsZVwiLG51bGwsZSksZXx8dGhpcy5vcHRpb25zLmFjdGl2ZSE9PSExfHx0aGlzLl9hY3RpdmF0ZSgwKSksXCJldmVudFwiPT09dCYmdGhpcy5fc2V0dXBFdmVudHMoZSksXCJoZWlnaHRTdHlsZVwiPT09dCYmdGhpcy5fc2V0dXBIZWlnaHRTdHlsZShlKSx2b2lkIDApfSxfc2FuaXRpemVTZWxlY3RvcjpmdW5jdGlvbih0KXtyZXR1cm4gdD90LnJlcGxhY2UoL1shXCIkJSYnKCkqKywuXFwvOjs8PT4/QFxcW1xcXVxcXmB7fH1+XS9nLFwiXFxcXCQmXCIpOlwiXCJ9LHJlZnJlc2g6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9wdGlvbnMsaT10aGlzLnRhYmxpc3QuY2hpbGRyZW4oXCI6aGFzKGFbaHJlZl0pXCIpO2UuZGlzYWJsZWQ9dC5tYXAoaS5maWx0ZXIoXCIudWktc3RhdGUtZGlzYWJsZWRcIiksZnVuY3Rpb24odCl7cmV0dXJuIGkuaW5kZXgodCl9KSx0aGlzLl9wcm9jZXNzVGFicygpLGUuYWN0aXZlIT09ITEmJnRoaXMuYW5jaG9ycy5sZW5ndGg/dGhpcy5hY3RpdmUubGVuZ3RoJiYhdC5jb250YWlucyh0aGlzLnRhYmxpc3RbMF0sdGhpcy5hY3RpdmVbMF0pP3RoaXMudGFicy5sZW5ndGg9PT1lLmRpc2FibGVkLmxlbmd0aD8oZS5hY3RpdmU9ITEsdGhpcy5hY3RpdmU9dCgpKTp0aGlzLl9hY3RpdmF0ZSh0aGlzLl9maW5kTmV4dFRhYihNYXRoLm1heCgwLGUuYWN0aXZlLTEpLCExKSk6ZS5hY3RpdmU9dGhpcy50YWJzLmluZGV4KHRoaXMuYWN0aXZlKTooZS5hY3RpdmU9ITEsdGhpcy5hY3RpdmU9dCgpKSx0aGlzLl9yZWZyZXNoKCl9LF9yZWZyZXNoOmZ1bmN0aW9uKCl7dGhpcy5fc2V0T3B0aW9uRGlzYWJsZWQodGhpcy5vcHRpb25zLmRpc2FibGVkKSx0aGlzLl9zZXR1cEV2ZW50cyh0aGlzLm9wdGlvbnMuZXZlbnQpLHRoaXMuX3NldHVwSGVpZ2h0U3R5bGUodGhpcy5vcHRpb25zLmhlaWdodFN0eWxlKSx0aGlzLnRhYnMubm90KHRoaXMuYWN0aXZlKS5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcImZhbHNlXCIsXCJhcmlhLWV4cGFuZGVkXCI6XCJmYWxzZVwiLHRhYkluZGV4Oi0xfSksdGhpcy5wYW5lbHMubm90KHRoaXMuX2dldFBhbmVsRm9yVGFiKHRoaXMuYWN0aXZlKSkuaGlkZSgpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcInRydWVcIn0pLHRoaXMuYWN0aXZlLmxlbmd0aD8odGhpcy5hY3RpdmUuYXR0cih7XCJhcmlhLXNlbGVjdGVkXCI6XCJ0cnVlXCIsXCJhcmlhLWV4cGFuZGVkXCI6XCJ0cnVlXCIsdGFiSW5kZXg6MH0pLHRoaXMuX2FkZENsYXNzKHRoaXMuYWN0aXZlLFwidWktdGFicy1hY3RpdmVcIixcInVpLXN0YXRlLWFjdGl2ZVwiKSx0aGlzLl9nZXRQYW5lbEZvclRhYih0aGlzLmFjdGl2ZSkuc2hvdygpLmF0dHIoe1wiYXJpYS1oaWRkZW5cIjpcImZhbHNlXCJ9KSk6dGhpcy50YWJzLmVxKDApLmF0dHIoXCJ0YWJJbmRleFwiLDApfSxfcHJvY2Vzc1RhYnM6ZnVuY3Rpb24oKXt2YXIgZT10aGlzLGk9dGhpcy50YWJzLHM9dGhpcy5hbmNob3JzLG49dGhpcy5wYW5lbHM7dGhpcy50YWJsaXN0PXRoaXMuX2dldExpc3QoKS5hdHRyKFwicm9sZVwiLFwidGFibGlzdFwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnRhYmxpc3QsXCJ1aS10YWJzLW5hdlwiLFwidWktaGVscGVyLXJlc2V0IHVpLWhlbHBlci1jbGVhcmZpeCB1aS13aWRnZXQtaGVhZGVyXCIpLHRoaXMudGFibGlzdC5vbihcIm1vdXNlZG93blwiK3RoaXMuZXZlbnROYW1lc3BhY2UsXCI+IGxpXCIsZnVuY3Rpb24oZSl7dCh0aGlzKS5pcyhcIi51aS1zdGF0ZS1kaXNhYmxlZFwiKSYmZS5wcmV2ZW50RGVmYXVsdCgpfSkub24oXCJmb2N1c1wiK3RoaXMuZXZlbnROYW1lc3BhY2UsXCIudWktdGFicy1hbmNob3JcIixmdW5jdGlvbigpe3QodGhpcykuY2xvc2VzdChcImxpXCIpLmlzKFwiLnVpLXN0YXRlLWRpc2FibGVkXCIpJiZ0aGlzLmJsdXIoKX0pLHRoaXMudGFicz10aGlzLnRhYmxpc3QuZmluZChcIj4gbGk6aGFzKGFbaHJlZl0pXCIpLmF0dHIoe3JvbGU6XCJ0YWJcIix0YWJJbmRleDotMX0pLHRoaXMuX2FkZENsYXNzKHRoaXMudGFicyxcInVpLXRhYnMtdGFiXCIsXCJ1aS1zdGF0ZS1kZWZhdWx0XCIpLHRoaXMuYW5jaG9ycz10aGlzLnRhYnMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIHQoXCJhXCIsdGhpcylbMF19KS5hdHRyKHtyb2xlOlwicHJlc2VudGF0aW9uXCIsdGFiSW5kZXg6LTF9KSx0aGlzLl9hZGRDbGFzcyh0aGlzLmFuY2hvcnMsXCJ1aS10YWJzLWFuY2hvclwiKSx0aGlzLnBhbmVscz10KCksdGhpcy5hbmNob3JzLmVhY2goZnVuY3Rpb24oaSxzKXt2YXIgbixvLGEscj10KHMpLnVuaXF1ZUlkKCkuYXR0cihcImlkXCIpLGg9dChzKS5jbG9zZXN0KFwibGlcIiksbD1oLmF0dHIoXCJhcmlhLWNvbnRyb2xzXCIpO2UuX2lzTG9jYWwocyk/KG49cy5oYXNoLGE9bi5zdWJzdHJpbmcoMSksbz1lLmVsZW1lbnQuZmluZChlLl9zYW5pdGl6ZVNlbGVjdG9yKG4pKSk6KGE9aC5hdHRyKFwiYXJpYS1jb250cm9sc1wiKXx8dCh7fSkudW5pcXVlSWQoKVswXS5pZCxuPVwiI1wiK2Esbz1lLmVsZW1lbnQuZmluZChuKSxvLmxlbmd0aHx8KG89ZS5fY3JlYXRlUGFuZWwoYSksby5pbnNlcnRBZnRlcihlLnBhbmVsc1tpLTFdfHxlLnRhYmxpc3QpKSxvLmF0dHIoXCJhcmlhLWxpdmVcIixcInBvbGl0ZVwiKSksby5sZW5ndGgmJihlLnBhbmVscz1lLnBhbmVscy5hZGQobykpLGwmJmguZGF0YShcInVpLXRhYnMtYXJpYS1jb250cm9sc1wiLGwpLGguYXR0cih7XCJhcmlhLWNvbnRyb2xzXCI6YSxcImFyaWEtbGFiZWxsZWRieVwiOnJ9KSxvLmF0dHIoXCJhcmlhLWxhYmVsbGVkYnlcIixyKX0pLHRoaXMucGFuZWxzLmF0dHIoXCJyb2xlXCIsXCJ0YWJwYW5lbFwiKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnBhbmVscyxcInVpLXRhYnMtcGFuZWxcIixcInVpLXdpZGdldC1jb250ZW50XCIpLGkmJih0aGlzLl9vZmYoaS5ub3QodGhpcy50YWJzKSksdGhpcy5fb2ZmKHMubm90KHRoaXMuYW5jaG9ycykpLHRoaXMuX29mZihuLm5vdCh0aGlzLnBhbmVscykpKX0sX2dldExpc3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50YWJsaXN0fHx0aGlzLmVsZW1lbnQuZmluZChcIm9sLCB1bFwiKS5lcSgwKX0sX2NyZWF0ZVBhbmVsOmZ1bmN0aW9uKGUpe3JldHVybiB0KFwiPGRpdj5cIikuYXR0cihcImlkXCIsZSkuZGF0YShcInVpLXRhYnMtZGVzdHJveVwiLCEwKX0sX3NldE9wdGlvbkRpc2FibGVkOmZ1bmN0aW9uKGUpe3ZhciBpLHMsbjtmb3IodC5pc0FycmF5KGUpJiYoZS5sZW5ndGg/ZS5sZW5ndGg9PT10aGlzLmFuY2hvcnMubGVuZ3RoJiYoZT0hMCk6ZT0hMSksbj0wO3M9dGhpcy50YWJzW25dO24rKylpPXQocyksZT09PSEwfHwtMSE9PXQuaW5BcnJheShuLGUpPyhpLmF0dHIoXCJhcmlhLWRpc2FibGVkXCIsXCJ0cnVlXCIpLHRoaXMuX2FkZENsYXNzKGksbnVsbCxcInVpLXN0YXRlLWRpc2FibGVkXCIpKTooaS5yZW1vdmVBdHRyKFwiYXJpYS1kaXNhYmxlZFwiKSx0aGlzLl9yZW1vdmVDbGFzcyhpLG51bGwsXCJ1aS1zdGF0ZS1kaXNhYmxlZFwiKSk7dGhpcy5vcHRpb25zLmRpc2FibGVkPWUsdGhpcy5fdG9nZ2xlQ2xhc3ModGhpcy53aWRnZXQoKSx0aGlzLndpZGdldEZ1bGxOYW1lK1wiLWRpc2FibGVkXCIsbnVsbCxlPT09ITApfSxfc2V0dXBFdmVudHM6ZnVuY3Rpb24oZSl7dmFyIGk9e307ZSYmdC5lYWNoKGUuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKHQsZSl7aVtlXT1cIl9ldmVudEhhbmRsZXJcIn0pLHRoaXMuX29mZih0aGlzLmFuY2hvcnMuYWRkKHRoaXMudGFicykuYWRkKHRoaXMucGFuZWxzKSksdGhpcy5fb24oITAsdGhpcy5hbmNob3JzLHtjbGljazpmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCl9fSksdGhpcy5fb24odGhpcy5hbmNob3JzLGkpLHRoaXMuX29uKHRoaXMudGFicyx7a2V5ZG93bjpcIl90YWJLZXlkb3duXCJ9KSx0aGlzLl9vbih0aGlzLnBhbmVscyx7a2V5ZG93bjpcIl9wYW5lbEtleWRvd25cIn0pLHRoaXMuX2ZvY3VzYWJsZSh0aGlzLnRhYnMpLHRoaXMuX2hvdmVyYWJsZSh0aGlzLnRhYnMpfSxfc2V0dXBIZWlnaHRTdHlsZTpmdW5jdGlvbihlKXt2YXIgaSxzPXRoaXMuZWxlbWVudC5wYXJlbnQoKTtcImZpbGxcIj09PWU/KGk9cy5oZWlnaHQoKSxpLT10aGlzLmVsZW1lbnQub3V0ZXJIZWlnaHQoKS10aGlzLmVsZW1lbnQuaGVpZ2h0KCksdGhpcy5lbGVtZW50LnNpYmxpbmdzKFwiOnZpc2libGVcIikuZWFjaChmdW5jdGlvbigpe3ZhciBlPXQodGhpcykscz1lLmNzcyhcInBvc2l0aW9uXCIpO1wiYWJzb2x1dGVcIiE9PXMmJlwiZml4ZWRcIiE9PXMmJihpLT1lLm91dGVySGVpZ2h0KCEwKSl9KSx0aGlzLmVsZW1lbnQuY2hpbGRyZW4oKS5ub3QodGhpcy5wYW5lbHMpLmVhY2goZnVuY3Rpb24oKXtpLT10KHRoaXMpLm91dGVySGVpZ2h0KCEwKX0pLHRoaXMucGFuZWxzLmVhY2goZnVuY3Rpb24oKXt0KHRoaXMpLmhlaWdodChNYXRoLm1heCgwLGktdCh0aGlzKS5pbm5lckhlaWdodCgpK3QodGhpcykuaGVpZ2h0KCkpKX0pLmNzcyhcIm92ZXJmbG93XCIsXCJhdXRvXCIpKTpcImF1dG9cIj09PWUmJihpPTAsdGhpcy5wYW5lbHMuZWFjaChmdW5jdGlvbigpe2k9TWF0aC5tYXgoaSx0KHRoaXMpLmhlaWdodChcIlwiKS5oZWlnaHQoKSl9KS5oZWlnaHQoaSkpfSxfZXZlbnRIYW5kbGVyOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucyxzPXRoaXMuYWN0aXZlLG49dChlLmN1cnJlbnRUYXJnZXQpLG89bi5jbG9zZXN0KFwibGlcIiksYT1vWzBdPT09c1swXSxyPWEmJmkuY29sbGFwc2libGUsaD1yP3QoKTp0aGlzLl9nZXRQYW5lbEZvclRhYihvKSxsPXMubGVuZ3RoP3RoaXMuX2dldFBhbmVsRm9yVGFiKHMpOnQoKSxjPXtvbGRUYWI6cyxvbGRQYW5lbDpsLG5ld1RhYjpyP3QoKTpvLG5ld1BhbmVsOmh9O2UucHJldmVudERlZmF1bHQoKSxvLmhhc0NsYXNzKFwidWktc3RhdGUtZGlzYWJsZWRcIil8fG8uaGFzQ2xhc3MoXCJ1aS10YWJzLWxvYWRpbmdcIil8fHRoaXMucnVubmluZ3x8YSYmIWkuY29sbGFwc2libGV8fHRoaXMuX3RyaWdnZXIoXCJiZWZvcmVBY3RpdmF0ZVwiLGUsYyk9PT0hMXx8KGkuYWN0aXZlPXI/ITE6dGhpcy50YWJzLmluZGV4KG8pLHRoaXMuYWN0aXZlPWE/dCgpOm8sdGhpcy54aHImJnRoaXMueGhyLmFib3J0KCksbC5sZW5ndGh8fGgubGVuZ3RofHx0LmVycm9yKFwialF1ZXJ5IFVJIFRhYnM6IE1pc21hdGNoaW5nIGZyYWdtZW50IGlkZW50aWZpZXIuXCIpLGgubGVuZ3RoJiZ0aGlzLmxvYWQodGhpcy50YWJzLmluZGV4KG8pLGUpLHRoaXMuX3RvZ2dsZShlLGMpKX0sX3RvZ2dsZTpmdW5jdGlvbihlLGkpe2Z1bmN0aW9uIHMoKXtvLnJ1bm5pbmc9ITEsby5fdHJpZ2dlcihcImFjdGl2YXRlXCIsZSxpKX1mdW5jdGlvbiBuKCl7by5fYWRkQ2xhc3MoaS5uZXdUYWIuY2xvc2VzdChcImxpXCIpLFwidWktdGFicy1hY3RpdmVcIixcInVpLXN0YXRlLWFjdGl2ZVwiKSxhLmxlbmd0aCYmby5vcHRpb25zLnNob3c/by5fc2hvdyhhLG8ub3B0aW9ucy5zaG93LHMpOihhLnNob3coKSxzKCkpfXZhciBvPXRoaXMsYT1pLm5ld1BhbmVsLHI9aS5vbGRQYW5lbDt0aGlzLnJ1bm5pbmc9ITAsci5sZW5ndGgmJnRoaXMub3B0aW9ucy5oaWRlP3RoaXMuX2hpZGUocix0aGlzLm9wdGlvbnMuaGlkZSxmdW5jdGlvbigpe28uX3JlbW92ZUNsYXNzKGkub2xkVGFiLmNsb3Nlc3QoXCJsaVwiKSxcInVpLXRhYnMtYWN0aXZlXCIsXCJ1aS1zdGF0ZS1hY3RpdmVcIiksbigpfSk6KHRoaXMuX3JlbW92ZUNsYXNzKGkub2xkVGFiLmNsb3Nlc3QoXCJsaVwiKSxcInVpLXRhYnMtYWN0aXZlXCIsXCJ1aS1zdGF0ZS1hY3RpdmVcIiksci5oaWRlKCksbigpKSxyLmF0dHIoXCJhcmlhLWhpZGRlblwiLFwidHJ1ZVwiKSxpLm9sZFRhYi5hdHRyKHtcImFyaWEtc2VsZWN0ZWRcIjpcImZhbHNlXCIsXCJhcmlhLWV4cGFuZGVkXCI6XCJmYWxzZVwifSksYS5sZW5ndGgmJnIubGVuZ3RoP2kub2xkVGFiLmF0dHIoXCJ0YWJJbmRleFwiLC0xKTphLmxlbmd0aCYmdGhpcy50YWJzLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiAwPT09dCh0aGlzKS5hdHRyKFwidGFiSW5kZXhcIil9KS5hdHRyKFwidGFiSW5kZXhcIiwtMSksYS5hdHRyKFwiYXJpYS1oaWRkZW5cIixcImZhbHNlXCIpLGkubmV3VGFiLmF0dHIoe1wiYXJpYS1zZWxlY3RlZFwiOlwidHJ1ZVwiLFwiYXJpYS1leHBhbmRlZFwiOlwidHJ1ZVwiLHRhYkluZGV4OjB9KX0sX2FjdGl2YXRlOmZ1bmN0aW9uKGUpe3ZhciBpLHM9dGhpcy5fZmluZEFjdGl2ZShlKTtzWzBdIT09dGhpcy5hY3RpdmVbMF0mJihzLmxlbmd0aHx8KHM9dGhpcy5hY3RpdmUpLGk9cy5maW5kKFwiLnVpLXRhYnMtYW5jaG9yXCIpWzBdLHRoaXMuX2V2ZW50SGFuZGxlcih7dGFyZ2V0OmksY3VycmVudFRhcmdldDppLHByZXZlbnREZWZhdWx0OnQubm9vcH0pKX0sX2ZpbmRBY3RpdmU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT0hMT90KCk6dGhpcy50YWJzLmVxKGUpfSxfZ2V0SW5kZXg6ZnVuY3Rpb24oZSl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPXRoaXMuYW5jaG9ycy5pbmRleCh0aGlzLmFuY2hvcnMuZmlsdGVyKFwiW2hyZWYkPSdcIit0LnVpLmVzY2FwZVNlbGVjdG9yKGUpK1wiJ11cIikpKSxlfSxfZGVzdHJveTpmdW5jdGlvbigpe3RoaXMueGhyJiZ0aGlzLnhoci5hYm9ydCgpLHRoaXMudGFibGlzdC5yZW1vdmVBdHRyKFwicm9sZVwiKS5vZmYodGhpcy5ldmVudE5hbWVzcGFjZSksdGhpcy5hbmNob3JzLnJlbW92ZUF0dHIoXCJyb2xlIHRhYkluZGV4XCIpLnJlbW92ZVVuaXF1ZUlkKCksdGhpcy50YWJzLmFkZCh0aGlzLnBhbmVscykuZWFjaChmdW5jdGlvbigpe3QuZGF0YSh0aGlzLFwidWktdGFicy1kZXN0cm95XCIpP3QodGhpcykucmVtb3ZlKCk6dCh0aGlzKS5yZW1vdmVBdHRyKFwicm9sZSB0YWJJbmRleCBhcmlhLWxpdmUgYXJpYS1idXN5IGFyaWEtc2VsZWN0ZWQgYXJpYS1sYWJlbGxlZGJ5IGFyaWEtaGlkZGVuIGFyaWEtZXhwYW5kZWRcIil9KSx0aGlzLnRhYnMuZWFjaChmdW5jdGlvbigpe3ZhciBlPXQodGhpcyksaT1lLmRhdGEoXCJ1aS10YWJzLWFyaWEtY29udHJvbHNcIik7aT9lLmF0dHIoXCJhcmlhLWNvbnRyb2xzXCIsaSkucmVtb3ZlRGF0YShcInVpLXRhYnMtYXJpYS1jb250cm9sc1wiKTplLnJlbW92ZUF0dHIoXCJhcmlhLWNvbnRyb2xzXCIpfSksdGhpcy5wYW5lbHMuc2hvdygpLFwiY29udGVudFwiIT09dGhpcy5vcHRpb25zLmhlaWdodFN0eWxlJiZ0aGlzLnBhbmVscy5jc3MoXCJoZWlnaHRcIixcIlwiKX0sZW5hYmxlOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucy5kaXNhYmxlZDtpIT09ITEmJih2b2lkIDA9PT1lP2k9ITE6KGU9dGhpcy5fZ2V0SW5kZXgoZSksaT10LmlzQXJyYXkoaSk/dC5tYXAoaSxmdW5jdGlvbih0KXtyZXR1cm4gdCE9PWU/dDpudWxsfSk6dC5tYXAodGhpcy50YWJzLGZ1bmN0aW9uKHQsaSl7cmV0dXJuIGkhPT1lP2k6bnVsbH0pKSx0aGlzLl9zZXRPcHRpb25EaXNhYmxlZChpKSl9LGRpc2FibGU6ZnVuY3Rpb24oZSl7dmFyIGk9dGhpcy5vcHRpb25zLmRpc2FibGVkO2lmKGkhPT0hMCl7aWYodm9pZCAwPT09ZSlpPSEwO2Vsc2V7aWYoZT10aGlzLl9nZXRJbmRleChlKSwtMSE9PXQuaW5BcnJheShlLGkpKXJldHVybjtpPXQuaXNBcnJheShpKT90Lm1lcmdlKFtlXSxpKS5zb3J0KCk6W2VdfXRoaXMuX3NldE9wdGlvbkRpc2FibGVkKGkpfX0sbG9hZDpmdW5jdGlvbihlLGkpe2U9dGhpcy5fZ2V0SW5kZXgoZSk7dmFyIHM9dGhpcyxuPXRoaXMudGFicy5lcShlKSxvPW4uZmluZChcIi51aS10YWJzLWFuY2hvclwiKSxhPXRoaXMuX2dldFBhbmVsRm9yVGFiKG4pLHI9e3RhYjpuLHBhbmVsOmF9LGg9ZnVuY3Rpb24odCxlKXtcImFib3J0XCI9PT1lJiZzLnBhbmVscy5zdG9wKCExLCEwKSxzLl9yZW1vdmVDbGFzcyhuLFwidWktdGFicy1sb2FkaW5nXCIpLGEucmVtb3ZlQXR0cihcImFyaWEtYnVzeVwiKSx0PT09cy54aHImJmRlbGV0ZSBzLnhocn07dGhpcy5faXNMb2NhbChvWzBdKXx8KHRoaXMueGhyPXQuYWpheCh0aGlzLl9hamF4U2V0dGluZ3MobyxpLHIpKSx0aGlzLnhociYmXCJjYW5jZWxlZFwiIT09dGhpcy54aHIuc3RhdHVzVGV4dCYmKHRoaXMuX2FkZENsYXNzKG4sXCJ1aS10YWJzLWxvYWRpbmdcIiksYS5hdHRyKFwiYXJpYS1idXN5XCIsXCJ0cnVlXCIpLHRoaXMueGhyLmRvbmUoZnVuY3Rpb24odCxlLG4pe3NldFRpbWVvdXQoZnVuY3Rpb24oKXthLmh0bWwodCkscy5fdHJpZ2dlcihcImxvYWRcIixpLHIpLGgobixlKX0sMSl9KS5mYWlsKGZ1bmN0aW9uKHQsZSl7c2V0VGltZW91dChmdW5jdGlvbigpe2godCxlKX0sMSl9KSkpfSxfYWpheFNldHRpbmdzOmZ1bmN0aW9uKGUsaSxzKXt2YXIgbj10aGlzO3JldHVybnt1cmw6ZS5hdHRyKFwiaHJlZlwiKS5yZXBsYWNlKC8jLiokLyxcIlwiKSxiZWZvcmVTZW5kOmZ1bmN0aW9uKGUsbyl7cmV0dXJuIG4uX3RyaWdnZXIoXCJiZWZvcmVMb2FkXCIsaSx0LmV4dGVuZCh7anFYSFI6ZSxhamF4U2V0dGluZ3M6b30scykpfX19LF9nZXRQYW5lbEZvclRhYjpmdW5jdGlvbihlKXt2YXIgaT10KGUpLmF0dHIoXCJhcmlhLWNvbnRyb2xzXCIpO3JldHVybiB0aGlzLmVsZW1lbnQuZmluZCh0aGlzLl9zYW5pdGl6ZVNlbGVjdG9yKFwiI1wiK2kpKX19KSx0LnVpQmFja0NvbXBhdCE9PSExJiZ0LndpZGdldChcInVpLnRhYnNcIix0LnVpLnRhYnMse19wcm9jZXNzVGFiczpmdW5jdGlvbigpe3RoaXMuX3N1cGVyQXBwbHkoYXJndW1lbnRzKSx0aGlzLl9hZGRDbGFzcyh0aGlzLnRhYnMsXCJ1aS10YWJcIil9fSksdC51aS50YWJzLHQud2lkZ2V0KFwidWkudG9vbHRpcFwiLHt2ZXJzaW9uOlwiMS4xMi4xXCIsb3B0aW9uczp7Y2xhc3Nlczp7XCJ1aS10b29sdGlwXCI6XCJ1aS1jb3JuZXItYWxsIHVpLXdpZGdldC1zaGFkb3dcIn0sY29udGVudDpmdW5jdGlvbigpe3ZhciBlPXQodGhpcykuYXR0cihcInRpdGxlXCIpfHxcIlwiO3JldHVybiB0KFwiPGE+XCIpLnRleHQoZSkuaHRtbCgpfSxoaWRlOiEwLGl0ZW1zOlwiW3RpdGxlXTpub3QoW2Rpc2FibGVkXSlcIixwb3NpdGlvbjp7bXk6XCJsZWZ0IHRvcCsxNVwiLGF0OlwibGVmdCBib3R0b21cIixjb2xsaXNpb246XCJmbGlwZml0IGZsaXBcIn0sc2hvdzohMCx0cmFjazohMSxjbG9zZTpudWxsLG9wZW46bnVsbH0sX2FkZERlc2NyaWJlZEJ5OmZ1bmN0aW9uKGUsaSl7dmFyIHM9KGUuYXR0cihcImFyaWEtZGVzY3JpYmVkYnlcIil8fFwiXCIpLnNwbGl0KC9cXHMrLyk7cy5wdXNoKGkpLGUuZGF0YShcInVpLXRvb2x0aXAtaWRcIixpKS5hdHRyKFwiYXJpYS1kZXNjcmliZWRieVwiLHQudHJpbShzLmpvaW4oXCIgXCIpKSl9LF9yZW1vdmVEZXNjcmliZWRCeTpmdW5jdGlvbihlKXt2YXIgaT1lLmRhdGEoXCJ1aS10b29sdGlwLWlkXCIpLHM9KGUuYXR0cihcImFyaWEtZGVzY3JpYmVkYnlcIil8fFwiXCIpLnNwbGl0KC9cXHMrLyksbj10LmluQXJyYXkoaSxzKTstMSE9PW4mJnMuc3BsaWNlKG4sMSksZS5yZW1vdmVEYXRhKFwidWktdG9vbHRpcC1pZFwiKSxzPXQudHJpbShzLmpvaW4oXCIgXCIpKSxzP2UuYXR0cihcImFyaWEtZGVzY3JpYmVkYnlcIixzKTplLnJlbW92ZUF0dHIoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpfSxfY3JlYXRlOmZ1bmN0aW9uKCl7dGhpcy5fb24oe21vdXNlb3ZlcjpcIm9wZW5cIixmb2N1c2luOlwib3BlblwifSksdGhpcy50b29sdGlwcz17fSx0aGlzLnBhcmVudHM9e30sdGhpcy5saXZlUmVnaW9uPXQoXCI8ZGl2PlwiKS5hdHRyKHtyb2xlOlwibG9nXCIsXCJhcmlhLWxpdmVcIjpcImFzc2VydGl2ZVwiLFwiYXJpYS1yZWxldmFudFwiOlwiYWRkaXRpb25zXCJ9KS5hcHBlbmRUbyh0aGlzLmRvY3VtZW50WzBdLmJvZHkpLHRoaXMuX2FkZENsYXNzKHRoaXMubGl2ZVJlZ2lvbixudWxsLFwidWktaGVscGVyLWhpZGRlbi1hY2Nlc3NpYmxlXCIpLHRoaXMuZGlzYWJsZWRUaXRsZXM9dChbXSl9LF9zZXRPcHRpb246ZnVuY3Rpb24oZSxpKXt2YXIgcz10aGlzO3RoaXMuX3N1cGVyKGUsaSksXCJjb250ZW50XCI9PT1lJiZ0LmVhY2godGhpcy50b29sdGlwcyxmdW5jdGlvbih0LGUpe3MuX3VwZGF0ZUNvbnRlbnQoZS5lbGVtZW50KX0pfSxfc2V0T3B0aW9uRGlzYWJsZWQ6ZnVuY3Rpb24odCl7dGhpc1t0P1wiX2Rpc2FibGVcIjpcIl9lbmFibGVcIl0oKX0sX2Rpc2FibGU6ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3QuZWFjaCh0aGlzLnRvb2x0aXBzLGZ1bmN0aW9uKGkscyl7dmFyIG49dC5FdmVudChcImJsdXJcIik7bi50YXJnZXQ9bi5jdXJyZW50VGFyZ2V0PXMuZWxlbWVudFswXSxlLmNsb3NlKG4sITApfSksdGhpcy5kaXNhYmxlZFRpdGxlcz10aGlzLmRpc2FibGVkVGl0bGVzLmFkZCh0aGlzLmVsZW1lbnQuZmluZCh0aGlzLm9wdGlvbnMuaXRlbXMpLmFkZEJhY2soKS5maWx0ZXIoZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO3JldHVybiBlLmlzKFwiW3RpdGxlXVwiKT9lLmRhdGEoXCJ1aS10b29sdGlwLXRpdGxlXCIsZS5hdHRyKFwidGl0bGVcIikpLnJlbW92ZUF0dHIoXCJ0aXRsZVwiKTp2b2lkIDB9KSl9LF9lbmFibGU6ZnVuY3Rpb24oKXt0aGlzLmRpc2FibGVkVGl0bGVzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpO2UuZGF0YShcInVpLXRvb2x0aXAtdGl0bGVcIikmJmUuYXR0cihcInRpdGxlXCIsZS5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiKSl9KSx0aGlzLmRpc2FibGVkVGl0bGVzPXQoW10pfSxvcGVuOmZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMscz10KGU/ZS50YXJnZXQ6dGhpcy5lbGVtZW50KS5jbG9zZXN0KHRoaXMub3B0aW9ucy5pdGVtcyk7cy5sZW5ndGgmJiFzLmRhdGEoXCJ1aS10b29sdGlwLWlkXCIpJiYocy5hdHRyKFwidGl0bGVcIikmJnMuZGF0YShcInVpLXRvb2x0aXAtdGl0bGVcIixzLmF0dHIoXCJ0aXRsZVwiKSkscy5kYXRhKFwidWktdG9vbHRpcC1vcGVuXCIsITApLGUmJlwibW91c2VvdmVyXCI9PT1lLnR5cGUmJnMucGFyZW50cygpLmVhY2goZnVuY3Rpb24oKXt2YXIgZSxzPXQodGhpcyk7cy5kYXRhKFwidWktdG9vbHRpcC1vcGVuXCIpJiYoZT10LkV2ZW50KFwiYmx1clwiKSxlLnRhcmdldD1lLmN1cnJlbnRUYXJnZXQ9dGhpcyxpLmNsb3NlKGUsITApKSxzLmF0dHIoXCJ0aXRsZVwiKSYmKHMudW5pcXVlSWQoKSxpLnBhcmVudHNbdGhpcy5pZF09e2VsZW1lbnQ6dGhpcyx0aXRsZTpzLmF0dHIoXCJ0aXRsZVwiKX0scy5hdHRyKFwidGl0bGVcIixcIlwiKSl9KSx0aGlzLl9yZWdpc3RlckNsb3NlSGFuZGxlcnMoZSxzKSx0aGlzLl91cGRhdGVDb250ZW50KHMsZSkpfSxfdXBkYXRlQ29udGVudDpmdW5jdGlvbih0LGUpe3ZhciBpLHM9dGhpcy5vcHRpb25zLmNvbnRlbnQsbj10aGlzLG89ZT9lLnR5cGU6bnVsbDtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygc3x8cy5ub2RlVHlwZXx8cy5qcXVlcnk/dGhpcy5fb3BlbihlLHQscyk6KGk9cy5jYWxsKHRbMF0sZnVuY3Rpb24oaSl7bi5fZGVsYXkoZnVuY3Rpb24oKXt0LmRhdGEoXCJ1aS10b29sdGlwLW9wZW5cIikmJihlJiYoZS50eXBlPW8pLHRoaXMuX29wZW4oZSx0LGkpKX0pfSksaSYmdGhpcy5fb3BlbihlLHQsaSksdm9pZCAwKX0sX29wZW46ZnVuY3Rpb24oZSxpLHMpe2Z1bmN0aW9uIG4odCl7bC5vZj10LGEuaXMoXCI6aGlkZGVuXCIpfHxhLnBvc2l0aW9uKGwpfXZhciBvLGEscixoLGw9dC5leHRlbmQoe30sdGhpcy5vcHRpb25zLnBvc2l0aW9uKTtpZihzKXtpZihvPXRoaXMuX2ZpbmQoaSkpcmV0dXJuIG8udG9vbHRpcC5maW5kKFwiLnVpLXRvb2x0aXAtY29udGVudFwiKS5odG1sKHMpLHZvaWQgMDtpLmlzKFwiW3RpdGxlXVwiKSYmKGUmJlwibW91c2VvdmVyXCI9PT1lLnR5cGU/aS5hdHRyKFwidGl0bGVcIixcIlwiKTppLnJlbW92ZUF0dHIoXCJ0aXRsZVwiKSksbz10aGlzLl90b29sdGlwKGkpLGE9by50b29sdGlwLHRoaXMuX2FkZERlc2NyaWJlZEJ5KGksYS5hdHRyKFwiaWRcIikpLGEuZmluZChcIi51aS10b29sdGlwLWNvbnRlbnRcIikuaHRtbChzKSx0aGlzLmxpdmVSZWdpb24uY2hpbGRyZW4oKS5oaWRlKCksaD10KFwiPGRpdj5cIikuaHRtbChhLmZpbmQoXCIudWktdG9vbHRpcC1jb250ZW50XCIpLmh0bWwoKSksaC5yZW1vdmVBdHRyKFwibmFtZVwiKS5maW5kKFwiW25hbWVdXCIpLnJlbW92ZUF0dHIoXCJuYW1lXCIpLGgucmVtb3ZlQXR0cihcImlkXCIpLmZpbmQoXCJbaWRdXCIpLnJlbW92ZUF0dHIoXCJpZFwiKSxoLmFwcGVuZFRvKHRoaXMubGl2ZVJlZ2lvbiksdGhpcy5vcHRpb25zLnRyYWNrJiZlJiYvXm1vdXNlLy50ZXN0KGUudHlwZSk/KHRoaXMuX29uKHRoaXMuZG9jdW1lbnQse21vdXNlbW92ZTpufSksbihlKSk6YS5wb3NpdGlvbih0LmV4dGVuZCh7b2Y6aX0sdGhpcy5vcHRpb25zLnBvc2l0aW9uKSksYS5oaWRlKCksdGhpcy5fc2hvdyhhLHRoaXMub3B0aW9ucy5zaG93KSx0aGlzLm9wdGlvbnMudHJhY2smJnRoaXMub3B0aW9ucy5zaG93JiZ0aGlzLm9wdGlvbnMuc2hvdy5kZWxheSYmKHI9dGhpcy5kZWxheWVkU2hvdz1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2EuaXMoXCI6dmlzaWJsZVwiKSYmKG4obC5vZiksY2xlYXJJbnRlcnZhbChyKSl9LHQuZnguaW50ZXJ2YWwpKSx0aGlzLl90cmlnZ2VyKFwib3BlblwiLGUse3Rvb2x0aXA6YX0pfX0sX3JlZ2lzdGVyQ2xvc2VIYW5kbGVyczpmdW5jdGlvbihlLGkpe3ZhciBzPXtrZXl1cDpmdW5jdGlvbihlKXtpZihlLmtleUNvZGU9PT10LnVpLmtleUNvZGUuRVNDQVBFKXt2YXIgcz10LkV2ZW50KGUpO3MuY3VycmVudFRhcmdldD1pWzBdLHRoaXMuY2xvc2UocywhMCl9fX07aVswXSE9PXRoaXMuZWxlbWVudFswXSYmKHMucmVtb3ZlPWZ1bmN0aW9uKCl7dGhpcy5fcmVtb3ZlVG9vbHRpcCh0aGlzLl9maW5kKGkpLnRvb2x0aXApfSksZSYmXCJtb3VzZW92ZXJcIiE9PWUudHlwZXx8KHMubW91c2VsZWF2ZT1cImNsb3NlXCIpLGUmJlwiZm9jdXNpblwiIT09ZS50eXBlfHwocy5mb2N1c291dD1cImNsb3NlXCIpLHRoaXMuX29uKCEwLGkscyl9LGNsb3NlOmZ1bmN0aW9uKGUpe3ZhciBpLHM9dGhpcyxuPXQoZT9lLmN1cnJlbnRUYXJnZXQ6dGhpcy5lbGVtZW50KSxvPXRoaXMuX2ZpbmQobik7cmV0dXJuIG8/KGk9by50b29sdGlwLG8uY2xvc2luZ3x8KGNsZWFySW50ZXJ2YWwodGhpcy5kZWxheWVkU2hvdyksbi5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiKSYmIW4uYXR0cihcInRpdGxlXCIpJiZuLmF0dHIoXCJ0aXRsZVwiLG4uZGF0YShcInVpLXRvb2x0aXAtdGl0bGVcIikpLHRoaXMuX3JlbW92ZURlc2NyaWJlZEJ5KG4pLG8uaGlkaW5nPSEwLGkuc3RvcCghMCksdGhpcy5faGlkZShpLHRoaXMub3B0aW9ucy5oaWRlLGZ1bmN0aW9uKCl7cy5fcmVtb3ZlVG9vbHRpcCh0KHRoaXMpKX0pLG4ucmVtb3ZlRGF0YShcInVpLXRvb2x0aXAtb3BlblwiKSx0aGlzLl9vZmYobixcIm1vdXNlbGVhdmUgZm9jdXNvdXQga2V5dXBcIiksblswXSE9PXRoaXMuZWxlbWVudFswXSYmdGhpcy5fb2ZmKG4sXCJyZW1vdmVcIiksdGhpcy5fb2ZmKHRoaXMuZG9jdW1lbnQsXCJtb3VzZW1vdmVcIiksZSYmXCJtb3VzZWxlYXZlXCI9PT1lLnR5cGUmJnQuZWFjaCh0aGlzLnBhcmVudHMsZnVuY3Rpb24oZSxpKXt0KGkuZWxlbWVudCkuYXR0cihcInRpdGxlXCIsaS50aXRsZSksZGVsZXRlIHMucGFyZW50c1tlXX0pLG8uY2xvc2luZz0hMCx0aGlzLl90cmlnZ2VyKFwiY2xvc2VcIixlLHt0b29sdGlwOml9KSxvLmhpZGluZ3x8KG8uY2xvc2luZz0hMSkpLHZvaWQgMCk6KG4ucmVtb3ZlRGF0YShcInVpLXRvb2x0aXAtb3BlblwiKSx2b2lkIDApfSxfdG9vbHRpcDpmdW5jdGlvbihlKXt2YXIgaT10KFwiPGRpdj5cIikuYXR0cihcInJvbGVcIixcInRvb2x0aXBcIikscz10KFwiPGRpdj5cIikuYXBwZW5kVG8oaSksbj1pLnVuaXF1ZUlkKCkuYXR0cihcImlkXCIpO3JldHVybiB0aGlzLl9hZGRDbGFzcyhzLFwidWktdG9vbHRpcC1jb250ZW50XCIpLHRoaXMuX2FkZENsYXNzKGksXCJ1aS10b29sdGlwXCIsXCJ1aS13aWRnZXQgdWktd2lkZ2V0LWNvbnRlbnRcIiksaS5hcHBlbmRUbyh0aGlzLl9hcHBlbmRUbyhlKSksdGhpcy50b29sdGlwc1tuXT17ZWxlbWVudDplLHRvb2x0aXA6aX19LF9maW5kOmZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0YShcInVpLXRvb2x0aXAtaWRcIik7cmV0dXJuIGU/dGhpcy50b29sdGlwc1tlXTpudWxsfSxfcmVtb3ZlVG9vbHRpcDpmdW5jdGlvbih0KXt0LnJlbW92ZSgpLGRlbGV0ZSB0aGlzLnRvb2x0aXBzW3QuYXR0cihcImlkXCIpXX0sX2FwcGVuZFRvOmZ1bmN0aW9uKHQpe3ZhciBlPXQuY2xvc2VzdChcIi51aS1mcm9udCwgZGlhbG9nXCIpO3JldHVybiBlLmxlbmd0aHx8KGU9dGhpcy5kb2N1bWVudFswXS5ib2R5KSxlfSxfZGVzdHJveTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dC5lYWNoKHRoaXMudG9vbHRpcHMsZnVuY3Rpb24oaSxzKXt2YXIgbj10LkV2ZW50KFwiYmx1clwiKSxvPXMuZWxlbWVudDtuLnRhcmdldD1uLmN1cnJlbnRUYXJnZXQ9b1swXSxlLmNsb3NlKG4sITApLHQoXCIjXCIraSkucmVtb3ZlKCksby5kYXRhKFwidWktdG9vbHRpcC10aXRsZVwiKSYmKG8uYXR0cihcInRpdGxlXCIpfHxvLmF0dHIoXCJ0aXRsZVwiLG8uZGF0YShcInVpLXRvb2x0aXAtdGl0bGVcIikpLG8ucmVtb3ZlRGF0YShcInVpLXRvb2x0aXAtdGl0bGVcIikpfSksdGhpcy5saXZlUmVnaW9uLnJlbW92ZSgpfX0pLHQudWlCYWNrQ29tcGF0IT09ITEmJnQud2lkZ2V0KFwidWkudG9vbHRpcFwiLHQudWkudG9vbHRpcCx7b3B0aW9uczp7dG9vbHRpcENsYXNzOm51bGx9LF90b29sdGlwOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fc3VwZXJBcHBseShhcmd1bWVudHMpO3JldHVybiB0aGlzLm9wdGlvbnMudG9vbHRpcENsYXNzJiZ0LnRvb2x0aXAuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnRvb2x0aXBDbGFzcyksdH19KSx0LnVpLnRvb2x0aXB9KTsiLCIvKiFcbiAqIGpRdWVyeSBWYWxpZGF0aW9uIFBsdWdpbiB2MS4xOS4xXG4gKlxuICogaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgSsO2cm4gWmFlZmZlcmVyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRcdGRlZmluZSggW1wianF1ZXJ5XCIsIFwiLi9qcXVlcnkudmFsaWRhdGVcIl0sIGZhY3RvcnkgKTtcblx0fSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCByZXF1aXJlKCBcImpxdWVyeVwiICkgKTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBqUXVlcnkgKTtcblx0fVxufShmdW5jdGlvbiggJCApIHtcblxuKCBmdW5jdGlvbigpIHtcblxuXHRmdW5jdGlvbiBzdHJpcEh0bWwoIHZhbHVlICkge1xuXG5cdFx0Ly8gUmVtb3ZlIGh0bWwgdGFncyBhbmQgc3BhY2UgY2hhcnNcblx0XHRyZXR1cm4gdmFsdWUucmVwbGFjZSggLzwuW148Pl0qPz4vZywgXCIgXCIgKS5yZXBsYWNlKCAvJm5ic3A7fCYjMTYwOy9naSwgXCIgXCIgKVxuXG5cdFx0Ly8gUmVtb3ZlIHB1bmN0dWF0aW9uXG5cdFx0LnJlcGxhY2UoIC9bLigpLDs6IT8lIyQnXFxcIl8rPVxcL1xcLeKAnOKAneKAmV0qL2csIFwiXCIgKTtcblx0fVxuXG5cdCQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJtYXhXb3Jkc1wiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtcyApIHtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHN0cmlwSHRtbCggdmFsdWUgKS5tYXRjaCggL1xcYlxcdytcXGIvZyApLmxlbmd0aCA8PSBwYXJhbXM7XG5cdH0sICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgezB9IHdvcmRzIG9yIGxlc3MuXCIgKSApO1xuXG5cdCQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJtaW5Xb3Jkc1wiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtcyApIHtcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHN0cmlwSHRtbCggdmFsdWUgKS5tYXRjaCggL1xcYlxcdytcXGIvZyApLmxlbmd0aCA+PSBwYXJhbXM7XG5cdH0sICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYXQgbGVhc3QgezB9IHdvcmRzLlwiICkgKTtcblxuXHQkLnZhbGlkYXRvci5hZGRNZXRob2QoIFwicmFuZ2VXb3Jkc1wiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtcyApIHtcblx0XHR2YXIgdmFsdWVTdHJpcHBlZCA9IHN0cmlwSHRtbCggdmFsdWUgKSxcblx0XHRcdHJlZ2V4ID0gL1xcYlxcdytcXGIvZztcblx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHZhbHVlU3RyaXBwZWQubWF0Y2goIHJlZ2V4ICkubGVuZ3RoID49IHBhcmFtc1sgMCBdICYmIHZhbHVlU3RyaXBwZWQubWF0Y2goIHJlZ2V4ICkubGVuZ3RoIDw9IHBhcmFtc1sgMSBdO1xuXHR9LCAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGJldHdlZW4gezB9IGFuZCB7MX0gd29yZHMuXCIgKSApO1xuXG59KCkgKTtcblxuLyoqXG4gKiBUaGlzIGlzIHVzZWQgaW4gdGhlIFVuaXRlZCBTdGF0ZXMgdG8gcHJvY2VzcyBwYXltZW50cywgZGVwb3NpdHMsXG4gKiBvciB0cmFuc2ZlcnMgdXNpbmcgdGhlIEF1dG9tYXRlZCBDbGVhcmluZyBIb3VzZSAoQUNIKSBvciBGZWR3aXJlXG4gKiBzeXN0ZW1zLiBBIHZlcnkgY29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHZhbGlkYXRlIGEgZm9ybSBmb3JcbiAqIGFuIEFDSCBiaWxsIHBheW1lbnQuXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJhYmFSb3V0aW5nTnVtYmVyXCIsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0dmFyIGNoZWNrc3VtID0gMDtcblx0dmFyIHRva2VucyA9IHZhbHVlLnNwbGl0KCBcIlwiICk7XG5cdHZhciBsZW5ndGggPSB0b2tlbnMubGVuZ3RoO1xuXG5cdC8vIExlbmd0aCBDaGVja1xuXHRpZiAoIGxlbmd0aCAhPT0gOSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBDYWxjIHRoZSBjaGVja3N1bVxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BQkFfcm91dGluZ190cmFuc2l0X251bWJlclxuXHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMyApIHtcblx0XHRjaGVja3N1bSArPVx0cGFyc2VJbnQoIHRva2Vuc1sgaSBdLCAxMCApICAgICAqIDMgK1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0b2tlbnNbIGkgKyAxIF0sIDEwICkgKiA3ICtcblx0XHRcdFx0XHRwYXJzZUludCggdG9rZW5zWyBpICsgMiBdLCAxMCApO1xuXHR9XG5cblx0Ly8gSWYgbm90IHplcm8gYW5kIGRpdmlzaWJsZSBieSAxMCB0aGVuIHZhbGlkXG5cdGlmICggY2hlY2tzdW0gIT09IDAgJiYgY2hlY2tzdW0gJSAxMCA9PT0gMCApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiBmYWxzZTtcbn0sIFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgcm91dGluZyBudW1iZXIuXCIgKTtcblxuLy8gQWNjZXB0IGEgdmFsdWUgZnJvbSBhIGZpbGUgaW5wdXQgYmFzZWQgb24gYSByZXF1aXJlZCBtaW1ldHlwZVxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImFjY2VwdFwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXG5cdC8vIFNwbGl0IG1pbWUgb24gY29tbWFzIGluIGNhc2Ugd2UgaGF2ZSBtdWx0aXBsZSB0eXBlcyB3ZSBjYW4gYWNjZXB0XG5cdHZhciB0eXBlUGFyYW0gPSB0eXBlb2YgcGFyYW0gPT09IFwic3RyaW5nXCIgPyBwYXJhbS5yZXBsYWNlKCAvXFxzL2csIFwiXCIgKSA6IFwiaW1hZ2UvKlwiLFxuXHRcdG9wdGlvbmFsVmFsdWUgPSB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICksXG5cdFx0aSwgZmlsZSwgcmVnZXg7XG5cblx0Ly8gRWxlbWVudCBpcyBvcHRpb25hbFxuXHRpZiAoIG9wdGlvbmFsVmFsdWUgKSB7XG5cdFx0cmV0dXJuIG9wdGlvbmFsVmFsdWU7XG5cdH1cblxuXHRpZiAoICQoIGVsZW1lbnQgKS5hdHRyKCBcInR5cGVcIiApID09PSBcImZpbGVcIiApIHtcblxuXHRcdC8vIEVzY2FwZSBzdHJpbmcgdG8gYmUgdXNlZCBpbiB0aGUgcmVnZXhcblx0XHQvLyBzZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM0NDYxNzAvZXNjYXBlLXN0cmluZy1mb3ItdXNlLWluLWphdmFzY3JpcHQtcmVnZXhcblx0XHQvLyBFc2NhcGUgYWxzbyBcIi8qXCIgYXMgXCIvLipcIiBhcyBhIHdpbGRjYXJkXG5cdFx0dHlwZVBhcmFtID0gdHlwZVBhcmFtXG5cdFx0XHRcdC5yZXBsYWNlKCAvW1xcLVxcW1xcXVxcL1xce1xcfVxcKFxcKVxcK1xcP1xcLlxcXFxcXF5cXCRcXHxdL2csIFwiXFxcXCQmXCIgKVxuXHRcdFx0XHQucmVwbGFjZSggLywvZywgXCJ8XCIgKVxuXHRcdFx0XHQucmVwbGFjZSggL1xcL1xcKi9nLCBcIi8uKlwiICk7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgZWxlbWVudCBoYXMgYSBGaWxlTGlzdCBiZWZvcmUgY2hlY2tpbmcgZWFjaCBmaWxlXG5cdFx0aWYgKCBlbGVtZW50LmZpbGVzICYmIGVsZW1lbnQuZmlsZXMubGVuZ3RoICkge1xuXHRcdFx0cmVnZXggPSBuZXcgUmVnRXhwKCBcIi4/KFwiICsgdHlwZVBhcmFtICsgXCIpJFwiLCBcImlcIiApO1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBlbGVtZW50LmZpbGVzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRmaWxlID0gZWxlbWVudC5maWxlc1sgaSBdO1xuXG5cdFx0XHRcdC8vIEdyYWIgdGhlIG1pbWV0eXBlIGZyb20gdGhlIGxvYWRlZCBmaWxlLCB2ZXJpZnkgaXQgbWF0Y2hlc1xuXHRcdFx0XHRpZiAoICFmaWxlLnR5cGUubWF0Y2goIHJlZ2V4ICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gRWl0aGVyIHJldHVybiB0cnVlIGJlY2F1c2Ugd2UndmUgdmFsaWRhdGVkIGVhY2ggZmlsZSwgb3IgYmVjYXVzZSB0aGVcblx0Ly8gYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGVsZW1lbnQuZmlsZXMgYW5kIHRoZSBGaWxlTGlzdCBmZWF0dXJlXG5cdHJldHVybiB0cnVlO1xufSwgJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIHdpdGggYSB2YWxpZCBtaW1ldHlwZS5cIiApICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJhbHBoYW51bWVyaWNcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFx3KyQvaS50ZXN0KCB2YWx1ZSApO1xufSwgXCJMZXR0ZXJzLCBudW1iZXJzLCBhbmQgdW5kZXJzY29yZXMgb25seSBwbGVhc2VcIiApO1xuXG4vKlxuICogRHV0Y2ggYmFuayBhY2NvdW50IG51bWJlcnMgKG5vdCAnZ2lybycgbnVtYmVycykgaGF2ZSA5IGRpZ2l0c1xuICogYW5kIHBhc3MgdGhlICcxMSBjaGVjaycuXG4gKiBXZSBhY2NlcHQgdGhlIG5vdGF0aW9uIHdpdGggc3BhY2VzLCBhcyB0aGF0IGlzIGNvbW1vbi5cbiAqIGFjY2VwdGFibGU6IDEyMzQ1Njc4OSBvciAxMiAzNCA1NiA3ODlcbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImJhbmthY2NvdW50TkxcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRpZiAoIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAoICEoIC9eWzAtOV17OX18KFswLTldezJ9ICl7M31bMC05XXszfSQvLnRlc3QoIHZhbHVlICkgKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBOb3cgJzExIGNoZWNrJ1xuXHR2YXIgYWNjb3VudCA9IHZhbHVlLnJlcGxhY2UoIC8gL2csIFwiXCIgKSwgLy8gUmVtb3ZlIHNwYWNlc1xuXHRcdHN1bSA9IDAsXG5cdFx0bGVuID0gYWNjb3VudC5sZW5ndGgsXG5cdFx0cG9zLCBmYWN0b3IsIGRpZ2l0O1xuXHRmb3IgKCBwb3MgPSAwOyBwb3MgPCBsZW47IHBvcysrICkge1xuXHRcdGZhY3RvciA9IGxlbiAtIHBvcztcblx0XHRkaWdpdCA9IGFjY291bnQuc3Vic3RyaW5nKCBwb3MsIHBvcyArIDEgKTtcblx0XHRzdW0gPSBzdW0gKyBmYWN0b3IgKiBkaWdpdDtcblx0fVxuXHRyZXR1cm4gc3VtICUgMTEgPT09IDA7XG59LCBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgYmFuayBhY2NvdW50IG51bWJlclwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJiYW5rb3JnaXJvYWNjb3VudE5MXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fFxuXHRcdFx0KCAkLnZhbGlkYXRvci5tZXRob2RzLmJhbmthY2NvdW50TkwuY2FsbCggdGhpcywgdmFsdWUsIGVsZW1lbnQgKSApIHx8XG5cdFx0XHQoICQudmFsaWRhdG9yLm1ldGhvZHMuZ2lyb2FjY291bnROTC5jYWxsKCB0aGlzLCB2YWx1ZSwgZWxlbWVudCApICk7XG59LCBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgYmFuayBvciBnaXJvIGFjY291bnQgbnVtYmVyXCIgKTtcblxuLyoqXG4gKiBCSUMgaXMgdGhlIGJ1c2luZXNzIGlkZW50aWZpZXIgY29kZSAoSVNPIDkzNjIpLiBUaGlzIEJJQyBjaGVjayBpcyBub3QgYSBndWFyYW50ZWUgZm9yIGF1dGhlbnRpY2l0eS5cbiAqXG4gKiBCSUMgcGF0dGVybjogQkJCQkNDTExiYmIgKDggb3IgMTEgY2hhcmFjdGVycyBsb25nOyBiYmIgaXMgb3B0aW9uYWwpXG4gKlxuICogVmFsaWRhdGlvbiBpcyBjYXNlLWluc2Vuc2l0aXZlLiBQbGVhc2UgbWFrZSBzdXJlIHRvIG5vcm1hbGl6ZSBpbnB1dCB5b3Vyc2VsZi5cbiAqXG4gKiBCSUMgZGVmaW5pdGlvbiBpbiBkZXRhaWw6XG4gKiAtIEZpcnN0IDQgY2hhcmFjdGVycyAtIGJhbmsgY29kZSAob25seSBsZXR0ZXJzKVxuICogLSBOZXh0IDIgY2hhcmFjdGVycyAtIElTTyAzMTY2LTEgYWxwaGEtMiBjb3VudHJ5IGNvZGUgKG9ubHkgbGV0dGVycylcbiAqIC0gTmV4dCAyIGNoYXJhY3RlcnMgLSBsb2NhdGlvbiBjb2RlIChsZXR0ZXJzIGFuZCBkaWdpdHMpXG4gKiAgIGEuIHNoYWxsIG5vdCBzdGFydCB3aXRoICcwJyBvciAnMSdcbiAqICAgYi4gc2Vjb25kIGNoYXJhY3RlciBtdXN0IGJlIGEgbGV0dGVyICgnTycgaXMgbm90IGFsbG93ZWQpIG9yIGRpZ2l0ICgnMCcgZm9yIHRlc3QgKHRoZXJlZm9yZSBub3QgYWxsb3dlZCksICcxJyBkZW5vdGluZyBwYXNzaXZlIHBhcnRpY2lwYW50LCAnMicgdHlwaWNhbGx5IHJldmVyc2UtYmlsbGluZylcbiAqIC0gTGFzdCAzIGNoYXJhY3RlcnMgLSBicmFuY2ggY29kZSwgb3B0aW9uYWwgKHNoYWxsIG5vdCBzdGFydCB3aXRoICdYJyBleGNlcHQgaW4gY2FzZSBvZiAnWFhYJyBmb3IgcHJpbWFyeSBvZmZpY2UpIChsZXR0ZXJzIGFuZCBkaWdpdHMpXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJiaWNcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oW0EtWl17Nn1bQS1aMi05XVtBLU5QLVoxLTldKShYezN9fFtBLVdZLVowLTldW0EtWjAtOV17Mn0pPyQvLnRlc3QoIHZhbHVlLnRvVXBwZXJDYXNlKCkgKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBCSUMgY29kZVwiICk7XG5cbi8qXG4gKiBDw7NkaWdvIGRlIGlkZW50aWZpY2FjacOzbiBmaXNjYWwgKCBDSUYgKSBpcyB0aGUgdGF4IGlkZW50aWZpY2F0aW9uIGNvZGUgZm9yIFNwYW5pc2ggbGVnYWwgZW50aXRpZXNcbiAqIEZ1cnRoZXIgcnVsZXMgY2FuIGJlIGZvdW5kIGluIFNwYW5pc2ggb24gaHR0cDovL2VzLndpa2lwZWRpYS5vcmcvd2lraS9DJUMzJUIzZGlnb19kZV9pZGVudGlmaWNhY2klQzMlQjNuX2Zpc2NhbFxuICpcbiAqIFNwYW5pc2ggQ0lGIHN0cnVjdHVyZTpcbiAqXG4gKiBbIFQgXVsgUCBdWyBQIF1bIE4gXVsgTiBdWyBOIF1bIE4gXVsgTiBdWyBDIF1cbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiBUOiAxIGNoYXJhY3Rlci4gS2luZCBvZiBPcmdhbml6YXRpb24gTGV0dGVyOiBbQUJDREVGR0hKS0xNTlBRUlNVVlddXG4gKiBQOiAyIGNoYXJhY3RlcnMuIFByb3ZpbmNlLlxuICogTjogNSBjaGFyYWN0ZXJzLiBTZWN1ZW5jaWFsIE51bWJlciB3aXRoaW4gdGhlIHByb3ZpbmNlLlxuICogQzogMSBjaGFyYWN0ZXIuIENvbnRyb2wgRGlnaXQ6IFswLTlBLUpdLlxuICpcbiAqIFsgVCBdOiBLaW5kIG9mIE9yZ2FuaXphdGlvbnMuIFBvc3NpYmxlIHZhbHVlczpcbiAqXG4gKiAgIEEuIENvcnBvcmF0aW9uc1xuICogICBCLiBMTENzXG4gKiAgIEMuIEdlbmVyYWwgcGFydG5lcnNoaXBzXG4gKiAgIEQuIENvbXBhbmllcyBsaW1pdGVkIHBhcnRuZXJzaGlwc1xuICogICBFLiBDb21tdW5pdGllcyBvZiBnb29kc1xuICogICBGLiBDb29wZXJhdGl2ZSBTb2NpZXRpZXNcbiAqICAgRy4gQXNzb2NpYXRpb25zXG4gKiAgIEguIENvbW11bml0aWVzIG9mIGhvbWVvd25lcnMgaW4gaG9yaXpvbnRhbCBwcm9wZXJ0eSByZWdpbWVcbiAqICAgSi4gQ2l2aWwgU29jaWV0aWVzXG4gKiAgIEsuIE9sZCBmb3JtYXRcbiAqICAgTC4gT2xkIGZvcm1hdFxuICogICBNLiBPbGQgZm9ybWF0XG4gKiAgIE4uIE5vbnJlc2lkZW50IGVudGl0aWVzXG4gKiAgIFAuIExvY2FsIGF1dGhvcml0aWVzXG4gKiAgIFEuIEF1dG9ub21vdXMgYm9kaWVzLCBzdGF0ZSBvciBub3QsIGFuZCB0aGUgbGlrZSwgYW5kIGNvbmdyZWdhdGlvbnMgYW5kIHJlbGlnaW91cyBpbnN0aXR1dGlvbnNcbiAqICAgUi4gQ29uZ3JlZ2F0aW9ucyBhbmQgcmVsaWdpb3VzIGluc3RpdHV0aW9ucyAoc2luY2UgMjAwOCBPUkRFUiBFSEEvNDUxLzIwMDgpXG4gKiAgIFMuIE9yZ2FucyBvZiBTdGF0ZSBBZG1pbmlzdHJhdGlvbiBhbmQgcmVnaW9uc1xuICogICBWLiBBZ3JhcmlhbiBUcmFuc2Zvcm1hdGlvblxuICogICBXLiBQZXJtYW5lbnQgZXN0YWJsaXNobWVudHMgb2Ygbm9uLXJlc2lkZW50IGluIFNwYWluXG4gKlxuICogWyBDIF06IENvbnRyb2wgRGlnaXQuIEl0IGNhbiBiZSBhIG51bWJlciBvciBhIGxldHRlciBkZXBlbmRpbmcgb24gVCB2YWx1ZTpcbiAqIFsgVCBdICAtLT4gIFsgQyBdXG4gKiAtLS0tLS0gICAgLS0tLS0tLS0tLVxuICogICBBICAgICAgICAgTnVtYmVyXG4gKiAgIEIgICAgICAgICBOdW1iZXJcbiAqICAgRSAgICAgICAgIE51bWJlclxuICogICBIICAgICAgICAgTnVtYmVyXG4gKiAgIEsgICAgICAgICBMZXR0ZXJcbiAqICAgUCAgICAgICAgIExldHRlclxuICogICBRICAgICAgICAgTGV0dGVyXG4gKiAgIFMgICAgICAgICBMZXR0ZXJcbiAqXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJjaWZFU1wiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0dmFyIGNpZlJlZ0V4ID0gbmV3IFJlZ0V4cCggL14oW0FCQ0RFRkdISktMTU5QUVJTVVZXXSkoXFxkezd9KShbMC05QS1KXSkkL2dpICk7XG5cdHZhciBsZXR0ZXIgID0gdmFsdWUuc3Vic3RyaW5nKCAwLCAxICksIC8vIFsgVCBdXG5cdFx0bnVtYmVyICA9IHZhbHVlLnN1YnN0cmluZyggMSwgOCApLCAvLyBbIFAgXVsgUCBdWyBOIF1bIE4gXVsgTiBdWyBOIF1bIE4gXVxuXHRcdGNvbnRyb2wgPSB2YWx1ZS5zdWJzdHJpbmcoIDgsIDkgKSwgLy8gWyBDIF1cblx0XHRhbGxfc3VtID0gMCxcblx0XHRldmVuX3N1bSA9IDAsXG5cdFx0b2RkX3N1bSA9IDAsXG5cdFx0aSwgbixcblx0XHRjb250cm9sX2RpZ2l0LFxuXHRcdGNvbnRyb2xfbGV0dGVyO1xuXG5cdGZ1bmN0aW9uIGlzT2RkKCBuICkge1xuXHRcdHJldHVybiBuICUgMiA9PT0gMDtcblx0fVxuXG5cdC8vIFF1aWNrIGZvcm1hdCB0ZXN0XG5cdGlmICggdmFsdWUubGVuZ3RoICE9PSA5IHx8ICFjaWZSZWdFeC50ZXN0KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZvciAoIGkgPSAwOyBpIDwgbnVtYmVyLmxlbmd0aDsgaSsrICkge1xuXHRcdG4gPSBwYXJzZUludCggbnVtYmVyWyBpIF0sIDEwICk7XG5cblx0XHQvLyBPZGQgcG9zaXRpb25zXG5cdFx0aWYgKCBpc09kZCggaSApICkge1xuXG5cdFx0XHQvLyBPZGQgcG9zaXRpb25zIGFyZSBtdWx0aXBsaWVkIGZpcnN0LlxuXHRcdFx0biAqPSAyO1xuXG5cdFx0XHQvLyBJZiB0aGUgbXVsdGlwbGljYXRpb24gaXMgYmlnZ2VyIHRoYW4gMTAgd2UgbmVlZCB0byBhZGp1c3Rcblx0XHRcdG9kZF9zdW0gKz0gbiA8IDEwID8gbiA6IG4gLSA5O1xuXG5cdFx0Ly8gRXZlbiBwb3NpdGlvbnNcblx0XHQvLyBKdXN0IHN1bSB0aGVtXG5cdFx0fSBlbHNlIHtcblx0XHRcdGV2ZW5fc3VtICs9IG47XG5cdFx0fVxuXHR9XG5cblx0YWxsX3N1bSA9IGV2ZW5fc3VtICsgb2RkX3N1bTtcblx0Y29udHJvbF9kaWdpdCA9ICggMTAgLSAoIGFsbF9zdW0gKS50b1N0cmluZygpLnN1YnN0ciggLTEgKSApLnRvU3RyaW5nKCk7XG5cdGNvbnRyb2xfZGlnaXQgPSBwYXJzZUludCggY29udHJvbF9kaWdpdCwgMTAgKSA+IDkgPyBcIjBcIiA6IGNvbnRyb2xfZGlnaXQ7XG5cdGNvbnRyb2xfbGV0dGVyID0gXCJKQUJDREVGR0hJXCIuc3Vic3RyKCBjb250cm9sX2RpZ2l0LCAxICkudG9TdHJpbmcoKTtcblxuXHQvLyBDb250cm9sIG11c3QgYmUgYSBkaWdpdFxuXHRpZiAoIGxldHRlci5tYXRjaCggL1tBQkVIXS8gKSApIHtcblx0XHRyZXR1cm4gY29udHJvbCA9PT0gY29udHJvbF9kaWdpdDtcblxuXHQvLyBDb250cm9sIG11c3QgYmUgYSBsZXR0ZXJcblx0fSBlbHNlIGlmICggbGV0dGVyLm1hdGNoKCAvW0tQUVNdLyApICkge1xuXHRcdHJldHVybiBjb250cm9sID09PSBjb250cm9sX2xldHRlcjtcblx0fVxuXG5cdC8vIENhbiBiZSBlaXRoZXJcblx0cmV0dXJuIGNvbnRyb2wgPT09IGNvbnRyb2xfZGlnaXQgfHwgY29udHJvbCA9PT0gY29udHJvbF9sZXR0ZXI7XG5cbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBDSUYgbnVtYmVyLlwiICk7XG5cbi8qXG4gKiBCcmF6aWxsaWFuIENOSCBudW1iZXIgKENhcnRlaXJhIE5hY2lvbmFsIGRlIEhhYmlsaXRhY2FvKSBpcyB0aGUgTGljZW5zZSBEcml2ZXIgbnVtYmVyLlxuICogQ05IIG51bWJlcnMgaGF2ZSAxMSBkaWdpdHMgaW4gdG90YWw6IDkgbnVtYmVycyBmb2xsb3dlZCBieSAyIGNoZWNrIG51bWJlcnMgdGhhdCBhcmUgYmVpbmcgdXNlZCBmb3IgdmFsaWRhdGlvbi5cbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImNuaEJSXCIsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblxuICAvLyBSZW1vdmluZyBzcGVjaWFsIGNoYXJhY3RlcnMgZnJvbSB2YWx1ZVxuICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIC8oW34hQCMkJV4mKigpXys9YHt9XFxbXFxdXFwtfFxcXFw6Oyc8PiwuXFwvPyBdKSsvZywgXCJcIiApO1xuXG4gIC8vIENoZWNraW5nIHZhbHVlIHRvIGhhdmUgMTEgZGlnaXRzIG9ubHlcbiAgaWYgKCB2YWx1ZS5sZW5ndGggIT09IDExICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzdW0gPSAwLCBkc2MgPSAwLCBmaXJzdENoYXIsXG5cdFx0Zmlyc3RDTiwgc2Vjb25kQ04sIGksIGosIHY7XG5cbiAgZmlyc3RDaGFyID0gdmFsdWUuY2hhckF0KCAwICk7XG5cbiAgaWYgKCBuZXcgQXJyYXkoIDEyICkuam9pbiggZmlyc3RDaGFyICkgPT09IHZhbHVlICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFN0ZXAgMSAtIHVzaW5nIGZpcnN0IENoZWNrIE51bWJlcjpcbiAgZm9yICggaSA9IDAsIGogPSA5LCB2ID0gMDsgaSA8IDk7ICsraSwgLS1qICkge1xuICAgIHN1bSArPSArKCB2YWx1ZS5jaGFyQXQoIGkgKSAqIGogKTtcbiAgfVxuXG4gIGZpcnN0Q04gPSBzdW0gJSAxMTtcbiAgaWYgKCBmaXJzdENOID49IDEwICkge1xuICAgIGZpcnN0Q04gPSAwO1xuICAgIGRzYyA9IDI7XG4gIH1cblxuICBzdW0gPSAwO1xuICBmb3IgKCBpID0gMCwgaiA9IDEsIHYgPSAwOyBpIDwgOTsgKytpLCArK2ogKSB7XG4gICAgc3VtICs9ICsoIHZhbHVlLmNoYXJBdCggaSApICogaiApO1xuICB9XG5cbiAgc2Vjb25kQ04gPSBzdW0gJSAxMTtcbiAgaWYgKCBzZWNvbmRDTiA+PSAxMCApIHtcbiAgICBzZWNvbmRDTiA9IDA7XG4gIH0gZWxzZSB7XG4gICAgc2Vjb25kQ04gPSBzZWNvbmRDTiAtIGRzYztcbiAgfVxuXG4gIHJldHVybiAoIFN0cmluZyggZmlyc3RDTiApLmNvbmNhdCggc2Vjb25kQ04gKSA9PT0gdmFsdWUuc3Vic3RyKCAtMiApICk7XG5cbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBDTkggbnVtYmVyXCIgKTtcblxuLypcbiAqIEJyYXppbGxpYW4gdmFsdWUgbnVtYmVyIChDYWRhc3RyYWRvIGRlIFBlc3NvYXMgSnVyaWRpY2EpLlxuICogdmFsdWUgbnVtYmVycyBoYXZlIDE0IGRpZ2l0cyBpbiB0b3RhbDogMTIgbnVtYmVycyBmb2xsb3dlZCBieSAyIGNoZWNrIG51bWJlcnMgdGhhdCBhcmUgYmVpbmcgdXNlZCBmb3IgdmFsaWRhdGlvbi5cbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImNucGpCUlwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gUmVtb3Zpbmcgbm8gbnVtYmVyXG5cdHZhbHVlID0gdmFsdWUucmVwbGFjZSggL1teXFxkXSsvZywgXCJcIiApO1xuXG5cdC8vIENoZWNraW5nIHZhbHVlIHRvIGhhdmUgMTQgZGlnaXRzIG9ubHlcblx0aWYgKCB2YWx1ZS5sZW5ndGggIT09IDE0ICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIEVsaW1pbmEgdmFsdWVzIGludmFsaWRvcyBjb25oZWNpZG9zXG5cdGlmICggdmFsdWUgPT09IFwiMDAwMDAwMDAwMDAwMDBcIiB8fFxuXHRcdHZhbHVlID09PSBcIjExMTExMTExMTExMTExXCIgfHxcblx0XHR2YWx1ZSA9PT0gXCIyMjIyMjIyMjIyMjIyMlwiIHx8XG5cdFx0dmFsdWUgPT09IFwiMzMzMzMzMzMzMzMzMzNcIiB8fFxuXHRcdHZhbHVlID09PSBcIjQ0NDQ0NDQ0NDQ0NDQ0XCIgfHxcblx0XHR2YWx1ZSA9PT0gXCI1NTU1NTU1NTU1NTU1NVwiIHx8XG5cdFx0dmFsdWUgPT09IFwiNjY2NjY2NjY2NjY2NjZcIiB8fFxuXHRcdHZhbHVlID09PSBcIjc3Nzc3Nzc3Nzc3Nzc3XCIgfHxcblx0XHR2YWx1ZSA9PT0gXCI4ODg4ODg4ODg4ODg4OFwiIHx8XG5cdFx0dmFsdWUgPT09IFwiOTk5OTk5OTk5OTk5OTlcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBWYWxpZGEgRFZzXG5cdHZhciB0YW1hbmhvID0gKCB2YWx1ZS5sZW5ndGggLSAyICk7XG5cdHZhciBudW1lcm9zID0gdmFsdWUuc3Vic3RyaW5nKCAwLCB0YW1hbmhvICk7XG5cdHZhciBkaWdpdG9zID0gdmFsdWUuc3Vic3RyaW5nKCB0YW1hbmhvICk7XG5cdHZhciBzb21hID0gMDtcblx0dmFyIHBvcyA9IHRhbWFuaG8gLSA3O1xuXG5cdGZvciAoIHZhciBpID0gdGFtYW5obzsgaSA+PSAxOyBpLS0gKSB7XG5cdFx0c29tYSArPSBudW1lcm9zLmNoYXJBdCggdGFtYW5obyAtIGkgKSAqIHBvcy0tO1xuXHRcdGlmICggcG9zIDwgMiApIHtcblx0XHRcdHBvcyA9IDk7XG5cdFx0fVxuXHR9XG5cblx0dmFyIHJlc3VsdGFkbyA9IHNvbWEgJSAxMSA8IDIgPyAwIDogMTEgLSBzb21hICUgMTE7XG5cblx0aWYgKCByZXN1bHRhZG8gIT09IHBhcnNlSW50KCBkaWdpdG9zLmNoYXJBdCggMCApLCAxMCApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHRhbWFuaG8gPSB0YW1hbmhvICsgMTtcblx0bnVtZXJvcyA9IHZhbHVlLnN1YnN0cmluZyggMCwgdGFtYW5obyApO1xuXHRzb21hID0gMDtcblx0cG9zID0gdGFtYW5obyAtIDc7XG5cblx0Zm9yICggdmFyIGlsID0gdGFtYW5obzsgaWwgPj0gMTsgaWwtLSApIHtcblx0XHRzb21hICs9IG51bWVyb3MuY2hhckF0KCB0YW1hbmhvIC0gaWwgKSAqIHBvcy0tO1xuXHRcdGlmICggcG9zIDwgMiApIHtcblx0XHRcdHBvcyA9IDk7XG5cdFx0fVxuXHR9XG5cblx0cmVzdWx0YWRvID0gc29tYSAlIDExIDwgMiA/IDAgOiAxMSAtIHNvbWEgJSAxMTtcblxuXHRpZiAoIHJlc3VsdGFkbyAhPT0gcGFyc2VJbnQoIGRpZ2l0b3MuY2hhckF0KCAxICksIDEwICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cmV0dXJuIHRydWU7XG5cbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSBDTlBKIHZhbHVlIG51bWJlclwiICk7XG5cbi8qXG4gKiBCcmF6aWxsaWFuIENQRiBudW1iZXIgKENhZGFzdHJhZG8gZGUgUGVzc29hcyBGw61zaWNhcykgaXMgdGhlIGVxdWl2YWxlbnQgb2YgYSBCcmF6aWxpYW4gdGF4IHJlZ2lzdHJhdGlvbiBudW1iZXIuXG4gKiBDUEYgbnVtYmVycyBoYXZlIDExIGRpZ2l0cyBpbiB0b3RhbDogOSBudW1iZXJzIGZvbGxvd2VkIGJ5IDIgY2hlY2sgbnVtYmVycyB0aGF0IGFyZSBiZWluZyB1c2VkIGZvciB2YWxpZGF0aW9uLlxuICovXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwiY3BmQlJcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8vIFJlbW92aW5nIHNwZWNpYWwgY2hhcmFjdGVycyBmcm9tIHZhbHVlXG5cdHZhbHVlID0gdmFsdWUucmVwbGFjZSggLyhbfiFAIyQlXiYqKClfKz1ge31cXFtcXF1cXC18XFxcXDo7Jzw+LC5cXC8/IF0pKy9nLCBcIlwiICk7XG5cblx0Ly8gQ2hlY2tpbmcgdmFsdWUgdG8gaGF2ZSAxMSBkaWdpdHMgb25seVxuXHRpZiAoIHZhbHVlLmxlbmd0aCAhPT0gMTEgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIHN1bSA9IDAsXG5cdFx0Zmlyc3RDTiwgc2Vjb25kQ04sIGNoZWNrUmVzdWx0LCBpO1xuXG5cdGZpcnN0Q04gPSBwYXJzZUludCggdmFsdWUuc3Vic3RyaW5nKCA5LCAxMCApLCAxMCApO1xuXHRzZWNvbmRDTiA9IHBhcnNlSW50KCB2YWx1ZS5zdWJzdHJpbmcoIDEwLCAxMSApLCAxMCApO1xuXG5cdGNoZWNrUmVzdWx0ID0gZnVuY3Rpb24oIHN1bSwgY24gKSB7XG5cdFx0dmFyIHJlc3VsdCA9ICggc3VtICogMTAgKSAlIDExO1xuXHRcdGlmICggKCByZXN1bHQgPT09IDEwICkgfHwgKCByZXN1bHQgPT09IDExICkgKSB7XG5cdFx0XHRyZXN1bHQgPSAwO1xuXHRcdH1cblx0XHRyZXR1cm4gKCByZXN1bHQgPT09IGNuICk7XG5cdH07XG5cblx0Ly8gQ2hlY2tpbmcgZm9yIGR1bXAgZGF0YVxuXHRpZiAoIHZhbHVlID09PSBcIlwiIHx8XG5cdFx0dmFsdWUgPT09IFwiMDAwMDAwMDAwMDBcIiB8fFxuXHRcdHZhbHVlID09PSBcIjExMTExMTExMTExXCIgfHxcblx0XHR2YWx1ZSA9PT0gXCIyMjIyMjIyMjIyMlwiIHx8XG5cdFx0dmFsdWUgPT09IFwiMzMzMzMzMzMzMzNcIiB8fFxuXHRcdHZhbHVlID09PSBcIjQ0NDQ0NDQ0NDQ0XCIgfHxcblx0XHR2YWx1ZSA9PT0gXCI1NTU1NTU1NTU1NVwiIHx8XG5cdFx0dmFsdWUgPT09IFwiNjY2NjY2NjY2NjZcIiB8fFxuXHRcdHZhbHVlID09PSBcIjc3Nzc3Nzc3Nzc3XCIgfHxcblx0XHR2YWx1ZSA9PT0gXCI4ODg4ODg4ODg4OFwiIHx8XG5cdFx0dmFsdWUgPT09IFwiOTk5OTk5OTk5OTlcIlxuXHQpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBTdGVwIDEgLSB1c2luZyBmaXJzdCBDaGVjayBOdW1iZXI6XG5cdGZvciAoIGkgPSAxOyBpIDw9IDk7IGkrKyApIHtcblx0XHRzdW0gPSBzdW0gKyBwYXJzZUludCggdmFsdWUuc3Vic3RyaW5nKCBpIC0gMSwgaSApLCAxMCApICogKCAxMSAtIGkgKTtcblx0fVxuXG5cdC8vIElmIGZpcnN0IENoZWNrIE51bWJlciAoQ04pIGlzIHZhbGlkLCBtb3ZlIHRvIFN0ZXAgMiAtIHVzaW5nIHNlY29uZCBDaGVjayBOdW1iZXI6XG5cdGlmICggY2hlY2tSZXN1bHQoIHN1bSwgZmlyc3RDTiApICkge1xuXHRcdHN1bSA9IDA7XG5cdFx0Zm9yICggaSA9IDE7IGkgPD0gMTA7IGkrKyApIHtcblx0XHRcdHN1bSA9IHN1bSArIHBhcnNlSW50KCB2YWx1ZS5zdWJzdHJpbmcoIGkgLSAxLCBpICksIDEwICkgKiAoIDEyIC0gaSApO1xuXHRcdH1cblx0XHRyZXR1cm4gY2hlY2tSZXN1bHQoIHN1bSwgc2Vjb25kQ04gKTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG5cbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBDUEYgbnVtYmVyXCIgKTtcblxuLy8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9jcmVkaXRjYXJkLW1ldGhvZC9cbi8vIGJhc2VkIG9uIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0x1aG5fYWxnb3JpdGhtXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwiY3JlZGl0Y2FyZFwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdHJldHVybiBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIjtcblx0fVxuXG5cdC8vIEFjY2VwdCBvbmx5IHNwYWNlcywgZGlnaXRzIGFuZCBkYXNoZXNcblx0aWYgKCAvW14wLTkgXFwtXSsvLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIG5DaGVjayA9IDAsXG5cdFx0bkRpZ2l0ID0gMCxcblx0XHRiRXZlbiA9IGZhbHNlLFxuXHRcdG4sIGNEaWdpdDtcblxuXHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIC9cXEQvZywgXCJcIiApO1xuXG5cdC8vIEJhc2luZyBtaW4gYW5kIG1heCBsZW5ndGggb25cblx0Ly8gaHR0cHM6Ly9kZXYuZWFuLmNvbS9nZW5lcmFsLWluZm8vdmFsaWQtY2FyZC10eXBlcy9cblx0aWYgKCB2YWx1ZS5sZW5ndGggPCAxMyB8fCB2YWx1ZS5sZW5ndGggPiAxOSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRmb3IgKCBuID0gdmFsdWUubGVuZ3RoIC0gMTsgbiA+PSAwOyBuLS0gKSB7XG5cdFx0Y0RpZ2l0ID0gdmFsdWUuY2hhckF0KCBuICk7XG5cdFx0bkRpZ2l0ID0gcGFyc2VJbnQoIGNEaWdpdCwgMTAgKTtcblx0XHRpZiAoIGJFdmVuICkge1xuXHRcdFx0aWYgKCAoIG5EaWdpdCAqPSAyICkgPiA5ICkge1xuXHRcdFx0XHRuRGlnaXQgLT0gOTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRuQ2hlY2sgKz0gbkRpZ2l0O1xuXHRcdGJFdmVuID0gIWJFdmVuO1xuXHR9XG5cblx0cmV0dXJuICggbkNoZWNrICUgMTAgKSA9PT0gMDtcbn0sIFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgY3JlZGl0IGNhcmQgbnVtYmVyLlwiICk7XG5cbi8qIE5PVElDRTogTW9kaWZpZWQgdmVyc2lvbiBvZiBDYXN0bGUuQ29tcG9uZW50cy5WYWxpZGF0b3IuQ3JlZGl0Q2FyZFZhbGlkYXRvclxuICogUmVkaXN0cmlidXRlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UgMi4wIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICogVmFsaWQgVHlwZXM6IG1hc3RlcmNhcmQsIHZpc2EsIGFtZXgsIGRpbmVyc2NsdWIsIGVucm91dGUsIGRpc2NvdmVyLCBqY2IsIHVua25vd24sIGFsbCAob3ZlcnJpZGVzIGFsbCBvdGhlciBzZXR0aW5ncylcbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImNyZWRpdGNhcmR0eXBlc1wiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRpZiAoIC9bXjAtOVxcLV0rLy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhbHVlID0gdmFsdWUucmVwbGFjZSggL1xcRC9nLCBcIlwiICk7XG5cblx0dmFyIHZhbGlkVHlwZXMgPSAweDAwMDA7XG5cblx0aWYgKCBwYXJhbS5tYXN0ZXJjYXJkICkge1xuXHRcdHZhbGlkVHlwZXMgfD0gMHgwMDAxO1xuXHR9XG5cdGlmICggcGFyYW0udmlzYSApIHtcblx0XHR2YWxpZFR5cGVzIHw9IDB4MDAwMjtcblx0fVxuXHRpZiAoIHBhcmFtLmFtZXggKSB7XG5cdFx0dmFsaWRUeXBlcyB8PSAweDAwMDQ7XG5cdH1cblx0aWYgKCBwYXJhbS5kaW5lcnNjbHViICkge1xuXHRcdHZhbGlkVHlwZXMgfD0gMHgwMDA4O1xuXHR9XG5cdGlmICggcGFyYW0uZW5yb3V0ZSApIHtcblx0XHR2YWxpZFR5cGVzIHw9IDB4MDAxMDtcblx0fVxuXHRpZiAoIHBhcmFtLmRpc2NvdmVyICkge1xuXHRcdHZhbGlkVHlwZXMgfD0gMHgwMDIwO1xuXHR9XG5cdGlmICggcGFyYW0uamNiICkge1xuXHRcdHZhbGlkVHlwZXMgfD0gMHgwMDQwO1xuXHR9XG5cdGlmICggcGFyYW0udW5rbm93biApIHtcblx0XHR2YWxpZFR5cGVzIHw9IDB4MDA4MDtcblx0fVxuXHRpZiAoIHBhcmFtLmFsbCApIHtcblx0XHR2YWxpZFR5cGVzID0gMHgwMDAxIHwgMHgwMDAyIHwgMHgwMDA0IHwgMHgwMDA4IHwgMHgwMDEwIHwgMHgwMDIwIHwgMHgwMDQwIHwgMHgwMDgwO1xuXHR9XG5cdGlmICggdmFsaWRUeXBlcyAmIDB4MDAwMSAmJiAoIC9eKDVbMTIzNDVdKS8udGVzdCggdmFsdWUgKSB8fCAvXigyWzIzNDU2N10pLy50ZXN0KCB2YWx1ZSApICkgKSB7IC8vIE1hc3RlcmNhcmRcblx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoID09PSAxNjtcblx0fVxuXHRpZiAoIHZhbGlkVHlwZXMgJiAweDAwMDIgJiYgL14oNCkvLnRlc3QoIHZhbHVlICkgKSB7IC8vIFZpc2Fcblx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoID09PSAxNjtcblx0fVxuXHRpZiAoIHZhbGlkVHlwZXMgJiAweDAwMDQgJiYgL14oM1s0N10pLy50ZXN0KCB2YWx1ZSApICkgeyAvLyBBbWV4XG5cdFx0cmV0dXJuIHZhbHVlLmxlbmd0aCA9PT0gMTU7XG5cdH1cblx0aWYgKCB2YWxpZFR5cGVzICYgMHgwMDA4ICYmIC9eKDMoMFswMTIzNDVdfFs2OF0pKS8udGVzdCggdmFsdWUgKSApIHsgLy8gRGluZXJzY2x1YlxuXHRcdHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDE0O1xuXHR9XG5cdGlmICggdmFsaWRUeXBlcyAmIDB4MDAxMCAmJiAvXigyKDAxNHwxNDkpKS8udGVzdCggdmFsdWUgKSApIHsgLy8gRW5yb3V0ZVxuXHRcdHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDE1O1xuXHR9XG5cdGlmICggdmFsaWRUeXBlcyAmIDB4MDAyMCAmJiAvXig2MDExKS8udGVzdCggdmFsdWUgKSApIHsgLy8gRGlzY292ZXJcblx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoID09PSAxNjtcblx0fVxuXHRpZiAoIHZhbGlkVHlwZXMgJiAweDAwNDAgJiYgL14oMykvLnRlc3QoIHZhbHVlICkgKSB7IC8vIEpjYlxuXHRcdHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDE2O1xuXHR9XG5cdGlmICggdmFsaWRUeXBlcyAmIDB4MDA0MCAmJiAvXigyMTMxfDE4MDApLy50ZXN0KCB2YWx1ZSApICkgeyAvLyBKY2Jcblx0XHRyZXR1cm4gdmFsdWUubGVuZ3RoID09PSAxNTtcblx0fVxuXHRpZiAoIHZhbGlkVHlwZXMgJiAweDAwODAgKSB7IC8vIFVua25vd25cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59LCBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGNyZWRpdCBjYXJkIG51bWJlci5cIiApO1xuXG4vKipcbiAqIFZhbGlkYXRlcyBjdXJyZW5jaWVzIHdpdGggYW55IGdpdmVuIHN5bWJvbHMgYnkgQGphbWVzbG91aXpcbiAqIFN5bWJvbHMgY2FuIGJlIG9wdGlvbmFsIG9yIHJlcXVpcmVkLiBTeW1ib2xzIHJlcXVpcmVkIGJ5IGRlZmF1bHRcbiAqXG4gKiBVc2FnZSBleGFtcGxlczpcbiAqICBjdXJyZW5jeTogW1wiwqNcIiwgZmFsc2VdIC0gVXNlIGZhbHNlIGZvciBzb2Z0IGN1cnJlbmN5IHZhbGlkYXRpb25cbiAqICBjdXJyZW5jeTogW1wiJFwiLCBmYWxzZV1cbiAqICBjdXJyZW5jeTogW1wiUk1cIiwgZmFsc2VdIC0gYWxzbyB3b3JrcyB3aXRoIHRleHQgYmFzZWQgc3ltYm9scyBzdWNoIGFzIFwiUk1cIiAtIE1hbGF5c2lhIFJpbmdnaXQgZXRjXG4gKlxuICogIDxpbnB1dCBjbGFzcz1cImN1cnJlbmN5SW5wdXRcIiBuYW1lPVwiY3VycmVuY3lJbnB1dFwiPlxuICpcbiAqIFNvZnQgc3ltYm9sIGNoZWNraW5nXG4gKiAgY3VycmVuY3lJbnB1dDoge1xuICogICAgIGN1cnJlbmN5OiBbXCIkXCIsIGZhbHNlXVxuICogIH1cbiAqXG4gKiBTdHJpY3Qgc3ltYm9sIGNoZWNraW5nIChkZWZhdWx0KVxuICogIGN1cnJlbmN5SW5wdXQ6IHtcbiAqICAgICBjdXJyZW5jeTogXCIkXCJcbiAqICAgICAvL09SXG4gKiAgICAgY3VycmVuY3k6IFtcIiRcIiwgdHJ1ZV1cbiAqICB9XG4gKlxuICogTXVsdGlwbGUgU3ltYm9sc1xuICogIGN1cnJlbmN5SW5wdXQ6IHtcbiAqICAgICBjdXJyZW5jeTogXCIkLMKjLMKiXCJcbiAqICB9XG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJjdXJyZW5jeVwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuICAgIHZhciBpc1BhcmFtU3RyaW5nID0gdHlwZW9mIHBhcmFtID09PSBcInN0cmluZ1wiLFxuICAgICAgICBzeW1ib2wgPSBpc1BhcmFtU3RyaW5nID8gcGFyYW0gOiBwYXJhbVsgMCBdLFxuICAgICAgICBzb2Z0ID0gaXNQYXJhbVN0cmluZyA/IHRydWUgOiBwYXJhbVsgMSBdLFxuICAgICAgICByZWdleDtcblxuICAgIHN5bWJvbCA9IHN5bWJvbC5yZXBsYWNlKCAvLC9nLCBcIlwiICk7XG4gICAgc3ltYm9sID0gc29mdCA/IHN5bWJvbCArIFwiXVwiIDogc3ltYm9sICsgXCJdP1wiO1xuICAgIHJlZ2V4ID0gXCJeW1wiICsgc3ltYm9sICsgXCIoWzEtOV17MX1bMC05XXswLDJ9KFxcXFwsWzAtOV17M30pKihcXFxcLlswLTldezAsMn0pP3xbMS05XXsxfVswLTldezAsfShcXFxcLlswLTldezAsMn0pP3wwKFxcXFwuWzAtOV17MCwyfSk/fChcXFxcLlswLTldezEsMn0pPykkXCI7XG4gICAgcmVnZXggPSBuZXcgUmVnRXhwKCByZWdleCApO1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgcmVnZXgudGVzdCggdmFsdWUgKTtcblxufSwgXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIGN1cnJlbmN5XCIgKTtcblxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImRhdGVGQVwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL15bMS00XVxcZHszfVxcLygoMD9bMS02XVxcLygoM1swLTFdKXwoWzEtMl1bMC05XSl8KDA/WzEtOV0pKSl8KCgxWzAtMl18KDA/WzctOV0pKVxcLygzMHwoWzEtMl1bMC05XSl8KDA/WzEtOV0pKSkpJC8udGVzdCggdmFsdWUgKTtcbn0sICQudmFsaWRhdG9yLm1lc3NhZ2VzLmRhdGUgKTtcblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSwgaWYgdGhlIHZhbHVlIGlzIGEgdmFsaWQgZGF0ZSwgYWxzbyBtYWtpbmcgdGhpcyBmb3JtYWwgY2hlY2sgZGQvbW0veXl5eS5cbiAqXG4gKiBAZXhhbXBsZSAkLnZhbGlkYXRvci5tZXRob2RzLmRhdGUoXCIwMS8wMS8xOTAwXCIpXG4gKiBAcmVzdWx0IHRydWVcbiAqXG4gKiBAZXhhbXBsZSAkLnZhbGlkYXRvci5tZXRob2RzLmRhdGUoXCIwMS8xMy8xOTkwXCIpXG4gKiBAcmVzdWx0IGZhbHNlXG4gKlxuICogQGV4YW1wbGUgJC52YWxpZGF0b3IubWV0aG9kcy5kYXRlKFwiMDEuMDEuMTkwMFwiKVxuICogQHJlc3VsdCBmYWxzZVxuICpcbiAqIEBleGFtcGxlIDxpbnB1dCBuYW1lPVwicGlwcG9cIiBjbGFzcz1cIntkYXRlSVRBOnRydWV9XCIgLz5cbiAqIEBkZXNjIERlY2xhcmVzIGFuIG9wdGlvbmFsIGlucHV0IGVsZW1lbnQgd2hvc2UgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGRhdGUuXG4gKlxuICogQG5hbWUgJC52YWxpZGF0b3IubWV0aG9kcy5kYXRlSVRBXG4gKiBAdHlwZSBCb29sZWFuXG4gKiBAY2F0IFBsdWdpbnMvVmFsaWRhdGUvTWV0aG9kc1xuICovXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwiZGF0ZUlUQVwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHZhciBjaGVjayA9IGZhbHNlLFxuXHRcdHJlID0gL15cXGR7MSwyfVxcL1xcZHsxLDJ9XFwvXFxkezR9JC8sXG5cdFx0YWRhdGEsIGdnLCBtbSwgYWFhYSwgeGRhdGE7XG5cdGlmICggcmUudGVzdCggdmFsdWUgKSApIHtcblx0XHRhZGF0YSA9IHZhbHVlLnNwbGl0KCBcIi9cIiApO1xuXHRcdGdnID0gcGFyc2VJbnQoIGFkYXRhWyAwIF0sIDEwICk7XG5cdFx0bW0gPSBwYXJzZUludCggYWRhdGFbIDEgXSwgMTAgKTtcblx0XHRhYWFhID0gcGFyc2VJbnQoIGFkYXRhWyAyIF0sIDEwICk7XG5cdFx0eGRhdGEgPSBuZXcgRGF0ZSggRGF0ZS5VVEMoIGFhYWEsIG1tIC0gMSwgZ2csIDEyLCAwLCAwLCAwICkgKTtcblx0XHRpZiAoICggeGRhdGEuZ2V0VVRDRnVsbFllYXIoKSA9PT0gYWFhYSApICYmICggeGRhdGEuZ2V0VVRDTW9udGgoKSA9PT0gbW0gLSAxICkgJiYgKCB4ZGF0YS5nZXRVVENEYXRlKCkgPT09IGdnICkgKSB7XG5cdFx0XHRjaGVjayA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNoZWNrID0gZmFsc2U7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGNoZWNrID0gZmFsc2U7XG5cdH1cblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBjaGVjaztcbn0sICQudmFsaWRhdG9yLm1lc3NhZ2VzLmRhdGUgKTtcblxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImRhdGVOTFwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oMD9bMS05XXxbMTJdXFxkfDNbMDFdKVtcXC5cXC9cXC1dKDA/WzEtOV18MVswMTJdKVtcXC5cXC9cXC1dKFsxMl1cXGQpPyhcXGRcXGQpJC8udGVzdCggdmFsdWUgKTtcbn0sICQudmFsaWRhdG9yLm1lc3NhZ2VzLmRhdGUgKTtcblxuLy8gT2xkZXIgXCJhY2NlcHRcIiBmaWxlIGV4dGVuc2lvbiBtZXRob2QuIE9sZCBkb2NzOiBodHRwOi8vZG9jcy5qcXVlcnkuY29tL1BsdWdpbnMvVmFsaWRhdGlvbi9NZXRob2RzL2FjY2VwdFxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImV4dGVuc2lvblwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRwYXJhbSA9IHR5cGVvZiBwYXJhbSA9PT0gXCJzdHJpbmdcIiA/IHBhcmFtLnJlcGxhY2UoIC8sL2csIFwifFwiICkgOiBcInBuZ3xqcGU/Z3xnaWZcIjtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWx1ZS5tYXRjaCggbmV3IFJlZ0V4cCggXCJcXFxcLihcIiArIHBhcmFtICsgXCIpJFwiLCBcImlcIiApICk7XG59LCAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgd2l0aCBhIHZhbGlkIGV4dGVuc2lvbi5cIiApICk7XG5cbi8qKlxuICogRHV0Y2ggZ2lybyBhY2NvdW50IG51bWJlcnMgKG5vdCBiYW5rIG51bWJlcnMpIGhhdmUgbWF4IDcgZGlnaXRzXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJnaXJvYWNjb3VudE5MXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXlswLTldezEsN30kLy50ZXN0KCB2YWx1ZSApO1xufSwgXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIGdpcm8gYWNjb3VudCBudW1iZXJcIiApO1xuXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwiZ3JlYXRlclRoYW5cIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcbiAgICB2YXIgdGFyZ2V0ID0gJCggcGFyYW0gKTtcblxuICAgIGlmICggdGhpcy5zZXR0aW5ncy5vbmZvY3Vzb3V0ICYmIHRhcmdldC5ub3QoIFwiLnZhbGlkYXRlLWdyZWF0ZXJUaGFuLWJsdXJcIiApLmxlbmd0aCApIHtcbiAgICAgICAgdGFyZ2V0LmFkZENsYXNzKCBcInZhbGlkYXRlLWdyZWF0ZXJUaGFuLWJsdXJcIiApLm9uKCBcImJsdXIudmFsaWRhdGUtZ3JlYXRlclRoYW5cIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCBlbGVtZW50ICkudmFsaWQoKTtcbiAgICAgICAgfSApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZSA+IHRhcmdldC52YWwoKTtcbn0sIFwiUGxlYXNlIGVudGVyIGEgZ3JlYXRlciB2YWx1ZS5cIiApO1xuXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwiZ3JlYXRlclRoYW5FcXVhbFwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuICAgIHZhciB0YXJnZXQgPSAkKCBwYXJhbSApO1xuXG4gICAgaWYgKCB0aGlzLnNldHRpbmdzLm9uZm9jdXNvdXQgJiYgdGFyZ2V0Lm5vdCggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbC1ibHVyXCIgKS5sZW5ndGggKSB7XG4gICAgICAgIHRhcmdldC5hZGRDbGFzcyggXCJ2YWxpZGF0ZS1ncmVhdGVyVGhhbkVxdWFsLWJsdXJcIiApLm9uKCBcImJsdXIudmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoIGVsZW1lbnQgKS52YWxpZCgpO1xuICAgICAgICB9ICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlID49IHRhcmdldC52YWwoKTtcbn0sIFwiUGxlYXNlIGVudGVyIGEgZ3JlYXRlciB2YWx1ZS5cIiApO1xuXG4vKipcbiAqIElCQU4gaXMgdGhlIGludGVybmF0aW9uYWwgYmFuayBhY2NvdW50IG51bWJlci5cbiAqIEl0IGhhcyBhIGNvdW50cnkgLSBzcGVjaWZpYyBmb3JtYXQsIHRoYXQgaXMgY2hlY2tlZCBoZXJlIHRvb1xuICpcbiAqIFZhbGlkYXRpb24gaXMgY2FzZS1pbnNlbnNpdGl2ZS4gUGxlYXNlIG1ha2Ugc3VyZSB0byBub3JtYWxpemUgaW5wdXQgeW91cnNlbGYuXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJpYmFuXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHQvLyBTb21lIHF1aWNrIHNpbXBsZSB0ZXN0cyB0byBwcmV2ZW50IG5lZWRsZXNzIHdvcmtcblx0aWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvLyBSZW1vdmUgc3BhY2VzIGFuZCB0byB1cHBlciBjYXNlXG5cdHZhciBpYmFuID0gdmFsdWUucmVwbGFjZSggLyAvZywgXCJcIiApLnRvVXBwZXJDYXNlKCksXG5cdFx0aWJhbmNoZWNrZGlnaXRzID0gXCJcIixcblx0XHRsZWFkaW5nWmVyb2VzID0gdHJ1ZSxcblx0XHRjUmVzdCA9IFwiXCIsXG5cdFx0Y09wZXJhdG9yID0gXCJcIixcblx0XHRjb3VudHJ5Y29kZSwgaWJhbmNoZWNrLCBjaGFyQXQsIGNDaGFyLCBiYmFucGF0dGVybiwgYmJhbmNvdW50cnlwYXR0ZXJucywgaWJhbnJlZ2V4cCwgaSwgcDtcblxuXHQvLyBDaGVjayBmb3IgSUJBTiBjb2RlIGxlbmd0aC5cblx0Ly8gSXQgY29udGFpbnM6XG5cdC8vIGNvdW50cnkgY29kZSBJU08gMzE2Ni0xIC0gdHdvIGxldHRlcnMsXG5cdC8vIHR3byBjaGVjayBkaWdpdHMsXG5cdC8vIEJhc2ljIEJhbmsgQWNjb3VudCBOdW1iZXIgKEJCQU4pIC0gdXAgdG8gMzAgY2hhcnNcblx0dmFyIG1pbmltYWxJQkFObGVuZ3RoID0gNTtcblx0aWYgKCBpYmFuLmxlbmd0aCA8IG1pbmltYWxJQkFObGVuZ3RoICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIENoZWNrIHRoZSBjb3VudHJ5IGNvZGUgYW5kIGZpbmQgdGhlIGNvdW50cnkgc3BlY2lmaWMgZm9ybWF0XG5cdGNvdW50cnljb2RlID0gaWJhbi5zdWJzdHJpbmcoIDAsIDIgKTtcblx0YmJhbmNvdW50cnlwYXR0ZXJucyA9IHtcblx0XHRcIkFMXCI6IFwiXFxcXGR7OH1bXFxcXGRBLVpdezE2fVwiLFxuXHRcdFwiQURcIjogXCJcXFxcZHs4fVtcXFxcZEEtWl17MTJ9XCIsXG5cdFx0XCJBVFwiOiBcIlxcXFxkezE2fVwiLFxuXHRcdFwiQVpcIjogXCJbXFxcXGRBLVpdezR9XFxcXGR7MjB9XCIsXG5cdFx0XCJCRVwiOiBcIlxcXFxkezEyfVwiLFxuXHRcdFwiQkhcIjogXCJbQS1aXXs0fVtcXFxcZEEtWl17MTR9XCIsXG5cdFx0XCJCQVwiOiBcIlxcXFxkezE2fVwiLFxuXHRcdFwiQlJcIjogXCJcXFxcZHsyM31bQS1aXVtcXFxcZEEtWl1cIixcblx0XHRcIkJHXCI6IFwiW0EtWl17NH1cXFxcZHs2fVtcXFxcZEEtWl17OH1cIixcblx0XHRcIkNSXCI6IFwiXFxcXGR7MTd9XCIsXG5cdFx0XCJIUlwiOiBcIlxcXFxkezE3fVwiLFxuXHRcdFwiQ1lcIjogXCJcXFxcZHs4fVtcXFxcZEEtWl17MTZ9XCIsXG5cdFx0XCJDWlwiOiBcIlxcXFxkezIwfVwiLFxuXHRcdFwiREtcIjogXCJcXFxcZHsxNH1cIixcblx0XHRcIkRPXCI6IFwiW0EtWl17NH1cXFxcZHsyMH1cIixcblx0XHRcIkVFXCI6IFwiXFxcXGR7MTZ9XCIsXG5cdFx0XCJGT1wiOiBcIlxcXFxkezE0fVwiLFxuXHRcdFwiRklcIjogXCJcXFxcZHsxNH1cIixcblx0XHRcIkZSXCI6IFwiXFxcXGR7MTB9W1xcXFxkQS1aXXsxMX1cXFxcZHsyfVwiLFxuXHRcdFwiR0VcIjogXCJbXFxcXGRBLVpdezJ9XFxcXGR7MTZ9XCIsXG5cdFx0XCJERVwiOiBcIlxcXFxkezE4fVwiLFxuXHRcdFwiR0lcIjogXCJbQS1aXXs0fVtcXFxcZEEtWl17MTV9XCIsXG5cdFx0XCJHUlwiOiBcIlxcXFxkezd9W1xcXFxkQS1aXXsxNn1cIixcblx0XHRcIkdMXCI6IFwiXFxcXGR7MTR9XCIsXG5cdFx0XCJHVFwiOiBcIltcXFxcZEEtWl17NH1bXFxcXGRBLVpdezIwfVwiLFxuXHRcdFwiSFVcIjogXCJcXFxcZHsyNH1cIixcblx0XHRcIklTXCI6IFwiXFxcXGR7MjJ9XCIsXG5cdFx0XCJJRVwiOiBcIltcXFxcZEEtWl17NH1cXFxcZHsxNH1cIixcblx0XHRcIklMXCI6IFwiXFxcXGR7MTl9XCIsXG5cdFx0XCJJVFwiOiBcIltBLVpdXFxcXGR7MTB9W1xcXFxkQS1aXXsxMn1cIixcblx0XHRcIktaXCI6IFwiXFxcXGR7M31bXFxcXGRBLVpdezEzfVwiLFxuXHRcdFwiS1dcIjogXCJbQS1aXXs0fVtcXFxcZEEtWl17MjJ9XCIsXG5cdFx0XCJMVlwiOiBcIltBLVpdezR9W1xcXFxkQS1aXXsxM31cIixcblx0XHRcIkxCXCI6IFwiXFxcXGR7NH1bXFxcXGRBLVpdezIwfVwiLFxuXHRcdFwiTElcIjogXCJcXFxcZHs1fVtcXFxcZEEtWl17MTJ9XCIsXG5cdFx0XCJMVFwiOiBcIlxcXFxkezE2fVwiLFxuXHRcdFwiTFVcIjogXCJcXFxcZHszfVtcXFxcZEEtWl17MTN9XCIsXG5cdFx0XCJNS1wiOiBcIlxcXFxkezN9W1xcXFxkQS1aXXsxMH1cXFxcZHsyfVwiLFxuXHRcdFwiTVRcIjogXCJbQS1aXXs0fVxcXFxkezV9W1xcXFxkQS1aXXsxOH1cIixcblx0XHRcIk1SXCI6IFwiXFxcXGR7MjN9XCIsXG5cdFx0XCJNVVwiOiBcIltBLVpdezR9XFxcXGR7MTl9W0EtWl17M31cIixcblx0XHRcIk1DXCI6IFwiXFxcXGR7MTB9W1xcXFxkQS1aXXsxMX1cXFxcZHsyfVwiLFxuXHRcdFwiTURcIjogXCJbXFxcXGRBLVpdezJ9XFxcXGR7MTh9XCIsXG5cdFx0XCJNRVwiOiBcIlxcXFxkezE4fVwiLFxuXHRcdFwiTkxcIjogXCJbQS1aXXs0fVxcXFxkezEwfVwiLFxuXHRcdFwiTk9cIjogXCJcXFxcZHsxMX1cIixcblx0XHRcIlBLXCI6IFwiW1xcXFxkQS1aXXs0fVxcXFxkezE2fVwiLFxuXHRcdFwiUFNcIjogXCJbXFxcXGRBLVpdezR9XFxcXGR7MjF9XCIsXG5cdFx0XCJQTFwiOiBcIlxcXFxkezI0fVwiLFxuXHRcdFwiUFRcIjogXCJcXFxcZHsyMX1cIixcblx0XHRcIlJPXCI6IFwiW0EtWl17NH1bXFxcXGRBLVpdezE2fVwiLFxuXHRcdFwiU01cIjogXCJbQS1aXVxcXFxkezEwfVtcXFxcZEEtWl17MTJ9XCIsXG5cdFx0XCJTQVwiOiBcIlxcXFxkezJ9W1xcXFxkQS1aXXsxOH1cIixcblx0XHRcIlJTXCI6IFwiXFxcXGR7MTh9XCIsXG5cdFx0XCJTS1wiOiBcIlxcXFxkezIwfVwiLFxuXHRcdFwiU0lcIjogXCJcXFxcZHsxNX1cIixcblx0XHRcIkVTXCI6IFwiXFxcXGR7MjB9XCIsXG5cdFx0XCJTRVwiOiBcIlxcXFxkezIwfVwiLFxuXHRcdFwiQ0hcIjogXCJcXFxcZHs1fVtcXFxcZEEtWl17MTJ9XCIsXG5cdFx0XCJUTlwiOiBcIlxcXFxkezIwfVwiLFxuXHRcdFwiVFJcIjogXCJcXFxcZHs1fVtcXFxcZEEtWl17MTd9XCIsXG5cdFx0XCJBRVwiOiBcIlxcXFxkezN9XFxcXGR7MTZ9XCIsXG5cdFx0XCJHQlwiOiBcIltBLVpdezR9XFxcXGR7MTR9XCIsXG5cdFx0XCJWR1wiOiBcIltcXFxcZEEtWl17NH1cXFxcZHsxNn1cIlxuXHR9O1xuXG5cdGJiYW5wYXR0ZXJuID0gYmJhbmNvdW50cnlwYXR0ZXJuc1sgY291bnRyeWNvZGUgXTtcblxuXHQvLyBBcyBuZXcgY291bnRyaWVzIHdpbGwgc3RhcnQgdXNpbmcgSUJBTiBpbiB0aGVcblx0Ly8gZnV0dXJlLCB3ZSBvbmx5IGNoZWNrIGlmIHRoZSBjb3VudHJ5Y29kZSBpcyBrbm93bi5cblx0Ly8gVGhpcyBwcmV2ZW50cyBmYWxzZSBuZWdhdGl2ZXMsIHdoaWxlIGFsbW9zdCBhbGxcblx0Ly8gZmFsc2UgcG9zaXRpdmVzIGludHJvZHVjZWQgYnkgdGhpcywgd2lsbCBiZSBjYXVnaHRcblx0Ly8gYnkgdGhlIGNoZWNrc3VtIHZhbGlkYXRpb24gYmVsb3cgYW55d2F5LlxuXHQvLyBTdHJpY3QgY2hlY2tpbmcgc2hvdWxkIHJldHVybiBGQUxTRSBmb3IgdW5rbm93blxuXHQvLyBjb3VudHJpZXMuXG5cdGlmICggdHlwZW9mIGJiYW5wYXR0ZXJuICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdGliYW5yZWdleHAgPSBuZXcgUmVnRXhwKCBcIl5bQS1aXXsyfVxcXFxkezJ9XCIgKyBiYmFucGF0dGVybiArIFwiJFwiLCBcIlwiICk7XG5cdFx0aWYgKCAhKCBpYmFucmVnZXhwLnRlc3QoIGliYW4gKSApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBJbnZhbGlkIGNvdW50cnkgc3BlY2lmaWMgZm9ybWF0XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm93IGNoZWNrIHRoZSBjaGVja3N1bSwgZmlyc3QgY29udmVydCB0byBkaWdpdHNcblx0aWJhbmNoZWNrID0gaWJhbi5zdWJzdHJpbmcoIDQsIGliYW4ubGVuZ3RoICkgKyBpYmFuLnN1YnN0cmluZyggMCwgNCApO1xuXHRmb3IgKCBpID0gMDsgaSA8IGliYW5jaGVjay5sZW5ndGg7IGkrKyApIHtcblx0XHRjaGFyQXQgPSBpYmFuY2hlY2suY2hhckF0KCBpICk7XG5cdFx0aWYgKCBjaGFyQXQgIT09IFwiMFwiICkge1xuXHRcdFx0bGVhZGluZ1plcm9lcyA9IGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoICFsZWFkaW5nWmVyb2VzICkge1xuXHRcdFx0aWJhbmNoZWNrZGlnaXRzICs9IFwiMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCIuaW5kZXhPZiggY2hhckF0ICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2FsY3VsYXRlIHRoZSByZXN1bHQgb2Y6IGliYW5jaGVja2RpZ2l0cyAlIDk3XG5cdGZvciAoIHAgPSAwOyBwIDwgaWJhbmNoZWNrZGlnaXRzLmxlbmd0aDsgcCsrICkge1xuXHRcdGNDaGFyID0gaWJhbmNoZWNrZGlnaXRzLmNoYXJBdCggcCApO1xuXHRcdGNPcGVyYXRvciA9IFwiXCIgKyBjUmVzdCArIFwiXCIgKyBjQ2hhcjtcblx0XHRjUmVzdCA9IGNPcGVyYXRvciAlIDk3O1xuXHR9XG5cdHJldHVybiBjUmVzdCA9PT0gMTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBJQkFOXCIgKTtcblxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImludGVnZXJcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eLT9cXGQrJC8udGVzdCggdmFsdWUgKTtcbn0sIFwiQSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBub24tZGVjaW1hbCBudW1iZXIgcGxlYXNlXCIgKTtcblxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImlwdjRcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eKDI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPylcXC4oMjVbMC01XXwyWzAtNF1cXGR8WzAxXT9cXGRcXGQ/KVxcLigyNVswLTVdfDJbMC00XVxcZHxbMDFdP1xcZFxcZD8pXFwuKDI1WzAtNV18MlswLTRdXFxkfFswMV0/XFxkXFxkPykkL2kudGVzdCggdmFsdWUgKTtcbn0sIFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgSVAgdjQgYWRkcmVzcy5cIiApO1xuXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwiaXB2NlwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oKChbMC05QS1GYS1mXXsxLDR9Oil7N31bMC05QS1GYS1mXXsxLDR9KXwoKFswLTlBLUZhLWZdezEsNH06KXs2fTpbMC05QS1GYS1mXXsxLDR9KXwoKFswLTlBLUZhLWZdezEsNH06KXs1fTooWzAtOUEtRmEtZl17MSw0fTopP1swLTlBLUZhLWZdezEsNH0pfCgoWzAtOUEtRmEtZl17MSw0fTopezR9OihbMC05QS1GYS1mXXsxLDR9Oil7MCwyfVswLTlBLUZhLWZdezEsNH0pfCgoWzAtOUEtRmEtZl17MSw0fTopezN9OihbMC05QS1GYS1mXXsxLDR9Oil7MCwzfVswLTlBLUZhLWZdezEsNH0pfCgoWzAtOUEtRmEtZl17MSw0fTopezJ9OihbMC05QS1GYS1mXXsxLDR9Oil7MCw0fVswLTlBLUZhLWZdezEsNH0pfCgoWzAtOUEtRmEtZl17MSw0fTopezZ9KChcXGIoKDI1WzAtNV0pfCgxXFxkezJ9KXwoMlswLTRdXFxkKXwoXFxkezEsMn0pKVxcYilcXC4pezN9KFxcYigoMjVbMC01XSl8KDFcXGR7Mn0pfCgyWzAtNF1cXGQpfChcXGR7MSwyfSkpXFxiKSl8KChbMC05QS1GYS1mXXsxLDR9Oil7MCw1fTooKFxcYigoMjVbMC01XSl8KDFcXGR7Mn0pfCgyWzAtNF1cXGQpfChcXGR7MSwyfSkpXFxiKVxcLil7M30oXFxiKCgyNVswLTVdKXwoMVxcZHsyfSl8KDJbMC00XVxcZCl8KFxcZHsxLDJ9KSlcXGIpKXwoOjooWzAtOUEtRmEtZl17MSw0fTopezAsNX0oKFxcYigoMjVbMC01XSl8KDFcXGR7Mn0pfCgyWzAtNF1cXGQpfChcXGR7MSwyfSkpXFxiKVxcLil7M30oXFxiKCgyNVswLTVdKXwoMVxcZHsyfSl8KDJbMC00XVxcZCl8KFxcZHsxLDJ9KSlcXGIpKXwoWzAtOUEtRmEtZl17MSw0fTo6KFswLTlBLUZhLWZdezEsNH06KXswLDV9WzAtOUEtRmEtZl17MSw0fSl8KDo6KFswLTlBLUZhLWZdezEsNH06KXswLDZ9WzAtOUEtRmEtZl17MSw0fSl8KChbMC05QS1GYS1mXXsxLDR9Oil7MSw3fTopKSQvaS50ZXN0KCB2YWx1ZSApO1xufSwgXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBJUCB2NiBhZGRyZXNzLlwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJsZXNzVGhhblwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuICAgIHZhciB0YXJnZXQgPSAkKCBwYXJhbSApO1xuXG4gICAgaWYgKCB0aGlzLnNldHRpbmdzLm9uZm9jdXNvdXQgJiYgdGFyZ2V0Lm5vdCggXCIudmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiICkubGVuZ3RoICkge1xuICAgICAgICB0YXJnZXQuYWRkQ2xhc3MoIFwidmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiICkub24oIFwiYmx1ci52YWxpZGF0ZS1sZXNzVGhhblwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoIGVsZW1lbnQgKS52YWxpZCgpO1xuICAgICAgICB9ICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlIDwgdGFyZ2V0LnZhbCgpO1xufSwgXCJQbGVhc2UgZW50ZXIgYSBsZXNzZXIgdmFsdWUuXCIgKTtcblxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcImxlc3NUaGFuRXF1YWxcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcbiAgICB2YXIgdGFyZ2V0ID0gJCggcGFyYW0gKTtcblxuICAgIGlmICggdGhpcy5zZXR0aW5ncy5vbmZvY3Vzb3V0ICYmIHRhcmdldC5ub3QoIFwiLnZhbGlkYXRlLWxlc3NUaGFuRXF1YWwtYmx1clwiICkubGVuZ3RoICkge1xuICAgICAgICB0YXJnZXQuYWRkQ2xhc3MoIFwidmFsaWRhdGUtbGVzc1RoYW5FcXVhbC1ibHVyXCIgKS5vbiggXCJibHVyLnZhbGlkYXRlLWxlc3NUaGFuRXF1YWxcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkKCBlbGVtZW50ICkudmFsaWQoKTtcbiAgICAgICAgfSApO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZSA8PSB0YXJnZXQudmFsKCk7XG59LCBcIlBsZWFzZSBlbnRlciBhIGxlc3NlciB2YWx1ZS5cIiApO1xuXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwibGV0dGVyc29ubHlcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW2Etel0rJC9pLnRlc3QoIHZhbHVlICk7XG59LCBcIkxldHRlcnMgb25seSBwbGVhc2VcIiApO1xuXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwibGV0dGVyc3dpdGhiYXNpY3B1bmNcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW2EtelxcLS4sKCknXCJcXHNdKyQvaS50ZXN0KCB2YWx1ZSApO1xufSwgXCJMZXR0ZXJzIG9yIHB1bmN0dWF0aW9uIG9ubHkgcGxlYXNlXCIgKTtcblxuLy8gTGltaXQgdGhlIG51bWJlciBvZiBmaWxlcyBpbiBhIEZpbGVMaXN0LlxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcIm1heGZpbGVzXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCAkKCBlbGVtZW50ICkuYXR0ciggXCJ0eXBlXCIgKSA9PT0gXCJmaWxlXCIgKSB7XG5cdFx0aWYgKCBlbGVtZW50LmZpbGVzICYmIGVsZW1lbnQuZmlsZXMubGVuZ3RoID4gcGFyYW0gKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59LCAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIHNlbGVjdCBubyBtb3JlIHRoYW4gezB9IGZpbGVzLlwiICkgKTtcblxuLy8gTGltaXQgdGhlIHNpemUgb2YgZWFjaCBpbmRpdmlkdWFsIGZpbGUgaW4gYSBGaWxlTGlzdC5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJtYXhzaXplXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCAkKCBlbGVtZW50ICkuYXR0ciggXCJ0eXBlXCIgKSA9PT0gXCJmaWxlXCIgKSB7XG5cdFx0aWYgKCBlbGVtZW50LmZpbGVzICYmIGVsZW1lbnQuZmlsZXMubGVuZ3RoICkge1xuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZWxlbWVudC5maWxlcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBlbGVtZW50LmZpbGVzWyBpIF0uc2l6ZSA+IHBhcmFtICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufSwgJC52YWxpZGF0b3IuZm9ybWF0KCBcIkZpbGUgc2l6ZSBtdXN0IG5vdCBleGNlZWQgezB9IGJ5dGVzIGVhY2guXCIgKSApO1xuXG4vLyBMaW1pdCB0aGUgc2l6ZSBvZiBhbGwgZmlsZXMgaW4gYSBGaWxlTGlzdC5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJtYXhzaXpldG90YWxcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0aWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoICQoIGVsZW1lbnQgKS5hdHRyKCBcInR5cGVcIiApID09PSBcImZpbGVcIiApIHtcblx0XHRpZiAoIGVsZW1lbnQuZmlsZXMgJiYgZWxlbWVudC5maWxlcy5sZW5ndGggKSB7XG5cdFx0XHR2YXIgdG90YWxTaXplID0gMDtcblxuXHRcdFx0Zm9yICggdmFyIGkgPSAwOyBpIDwgZWxlbWVudC5maWxlcy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0dG90YWxTaXplICs9IGVsZW1lbnQuZmlsZXNbIGkgXS5zaXplO1xuXHRcdFx0XHRpZiAoIHRvdGFsU2l6ZSA+IHBhcmFtICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufSwgJC52YWxpZGF0b3IuZm9ybWF0KCBcIlRvdGFsIHNpemUgb2YgYWxsIGZpbGVzIG11c3Qgbm90IGV4Y2VlZCB7MH0gYnl0ZXMuXCIgKSApO1xuXG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJtb2JpbGVOTFwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oKFxcK3wwMChcXHN8XFxzP1xcLVxccz8pPykzMShcXHN8XFxzP1xcLVxccz8pPyhcXCgwXFwpW1xcLVxcc10/KT98MCk2KChcXHN8XFxzP1xcLVxccz8pP1swLTldKXs4fSQvLnRlc3QoIHZhbHVlICk7XG59LCBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgbW9iaWxlIG51bWJlclwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJtb2JpbGVSVVwiLCBmdW5jdGlvbiggcGhvbmVfbnVtYmVyLCBlbGVtZW50ICkge1xuXHR2YXIgcnVQaG9uZV9udW1iZXIgPSBwaG9uZV9udW1iZXIucmVwbGFjZSggL1xcKHxcXCl8XFxzK3wtL2csIFwiXCIgKTtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBydVBob25lX251bWJlci5sZW5ndGggPiA5ICYmIC9eKChcXCs3fDd8OCkrKFswLTldKXsxMH0pJC8udGVzdCggcnVQaG9uZV9udW1iZXIgKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBtb2JpbGUgbnVtYmVyXCIgKTtcblxuLyogRm9yIFVLIHBob25lIGZ1bmN0aW9ucywgZG8gdGhlIGZvbGxvd2luZyBzZXJ2ZXIgc2lkZSBwcm9jZXNzaW5nOlxuICogQ29tcGFyZSBvcmlnaW5hbCBpbnB1dCB3aXRoIHRoaXMgUmVnRXggcGF0dGVybjpcbiAqIF5cXCg/KD86KD86MDBcXCk/W1xcc1xcLV0/XFwoP3xcXCspKDQ0KVxcKT9bXFxzXFwtXT9cXCg/KD86MFxcKT9bXFxzXFwtXT9cXCg/KT98MCkoWzEtOV1cXGR7MSw0fVxcKT9bXFxzXFxkXFwtXSspJFxuICogRXh0cmFjdCAkMSBhbmQgc2V0ICRwcmVmaXggdG8gJys0NDxzcGFjZT4nIGlmICQxIGlzICc0NCcsIG90aGVyd2lzZSBzZXQgJHByZWZpeCB0byAnMCdcbiAqIEV4dHJhY3QgJDIgYW5kIHJlbW92ZSBoeXBoZW5zLCBzcGFjZXMgYW5kIHBhcmVudGhlc2VzLiBQaG9uZSBudW1iZXIgaXMgY29tYmluZWQgJHByZWZpeCBhbmQgJDIuXG4gKiBBIG51bWJlciBvZiB2ZXJ5IGRldGFpbGVkIEdCIHRlbGVwaG9uZSBudW1iZXIgUmVnRXggcGF0dGVybnMgY2FuIGFsc28gYmUgZm91bmQgYXQ6XG4gKiBodHRwOi8vd3d3LmFhLWFzdGVyaXNrLm9yZy51ay9pbmRleC5waHAvUmVndWxhcl9FeHByZXNzaW9uc19mb3JfVmFsaWRhdGluZ19hbmRfRm9ybWF0dGluZ19HQl9UZWxlcGhvbmVfTnVtYmVyc1xuICovXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwibW9iaWxlVUtcIiwgZnVuY3Rpb24oIHBob25lX251bWJlciwgZWxlbWVudCApIHtcblx0cGhvbmVfbnVtYmVyID0gcGhvbmVfbnVtYmVyLnJlcGxhY2UoIC9cXCh8XFwpfFxccyt8LS9nLCBcIlwiICk7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgcGhvbmVfbnVtYmVyLmxlbmd0aCA+IDkgJiZcblx0XHRwaG9uZV9udW1iZXIubWF0Y2goIC9eKD86KD86KD86MDBcXHM/fFxcKyk0NFxccz98MCk3KD86WzEzNDU3ODldXFxkezJ9fDYyNClcXHM/XFxkezN9XFxzP1xcZHszfSkkLyApO1xufSwgXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIG1vYmlsZSBudW1iZXJcIiApO1xuXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwibmV0bWFza1wiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXigyNTR8MjUyfDI0OHwyNDB8MjI0fDE5MnwxMjgpXFwuMFxcLjBcXC4wfDI1NVxcLigyNTR8MjUyfDI0OHwyNDB8MjI0fDE5MnwxMjh8MClcXC4wXFwuMHwyNTVcXC4yNTVcXC4oMjU0fDI1MnwyNDh8MjQwfDIyNHwxOTJ8MTI4fDApXFwuMHwyNTVcXC4yNTVcXC4yNTVcXC4oMjU0fDI1MnwyNDh8MjQwfDIyNHwxOTJ8MTI4fDApL2kudGVzdCggdmFsdWUgKTtcbn0sIFwiUGxlYXNlIGVudGVyIGEgdmFsaWQgbmV0bWFzay5cIiApO1xuXG4vKlxuICogVGhlIE5JRSAoTsO6bWVybyBkZSBJZGVudGlmaWNhY2nDs24gZGUgRXh0cmFuamVybykgaXMgYSBTcGFuaXNoIHRheCBpZGVudGlmaWNhdGlvbiBudW1iZXIgYXNzaWduZWQgYnkgdGhlIFNwYW5pc2hcbiAqIGF1dGhvcml0aWVzIHRvIGFueSBmb3JlaWduZXIuXG4gKlxuICogVGhlIE5JRSBpcyB0aGUgZXF1aXZhbGVudCBvZiBhIFNwYW5pYXJkcyBOw7ptZXJvIGRlIElkZW50aWZpY2FjacOzbiBGaXNjYWwgKE5JRikgd2hpY2ggc2VydmVzIGFzIGEgZmlzY2FsXG4gKiBpZGVudGlmaWNhdGlvbiBudW1iZXIuIFRoZSBDSUYgbnVtYmVyIChDZXJ0aWZpY2FkbyBkZSBJZGVudGlmaWNhY2nDs24gRmlzY2FsKSBpcyBlcXVpdmFsZW50IHRvIHRoZSBOSUYsIGJ1dCBhcHBsaWVzIHRvXG4gKiBjb21wYW5pZXMgcmF0aGVyIHRoYW4gaW5kaXZpZHVhbHMuIFRoZSBOSUUgY29uc2lzdHMgb2YgYW4gJ1gnIG9yICdZJyBmb2xsb3dlZCBieSA3IG9yIDggZGlnaXRzIHRoZW4gYW5vdGhlciBsZXR0ZXIuXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJuaWVFU1wiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0dmFyIG5pZVJlZ0V4ID0gbmV3IFJlZ0V4cCggL15bTVhZWl17MX1bMC05XXs3LDh9W1RSV0FHTVlGUERYQk5KWlNRVkhMQ0tFVF17MX0kL2dpICk7XG5cdHZhciB2YWxpZENoYXJzID0gXCJUUldBR01ZRlBEWEJOSlpTUVZITENLRVRcIixcblx0XHRsZXR0ZXIgPSB2YWx1ZS5zdWJzdHIoIHZhbHVlLmxlbmd0aCAtIDEgKS50b1VwcGVyQ2FzZSgpLFxuXHRcdG51bWJlcjtcblxuXHR2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKTtcblxuXHQvLyBRdWljayBmb3JtYXQgdGVzdFxuXHRpZiAoIHZhbHVlLmxlbmd0aCA+IDEwIHx8IHZhbHVlLmxlbmd0aCA8IDkgfHwgIW5pZVJlZ0V4LnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0Ly8gWCBtZWFucyBzYW1lIG51bWJlclxuXHQvLyBZIG1lYW5zIG51bWJlciArIDEwMDAwMDAwXG5cdC8vIFogbWVhbnMgbnVtYmVyICsgMjAwMDAwMDBcblx0dmFsdWUgPSB2YWx1ZS5yZXBsYWNlKCAvXltYXS8sIFwiMFwiIClcblx0XHQucmVwbGFjZSggL15bWV0vLCBcIjFcIiApXG5cdFx0LnJlcGxhY2UoIC9eW1pdLywgXCIyXCIgKTtcblxuXHRudW1iZXIgPSB2YWx1ZS5sZW5ndGggPT09IDkgPyB2YWx1ZS5zdWJzdHIoIDAsIDggKSA6IHZhbHVlLnN1YnN0ciggMCwgOSApO1xuXG5cdHJldHVybiB2YWxpZENoYXJzLmNoYXJBdCggcGFyc2VJbnQoIG51bWJlciwgMTAgKSAlIDIzICkgPT09IGxldHRlcjtcblxufSwgXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIE5JRSBudW1iZXIuXCIgKTtcblxuLypcbiAqIFRoZSBOw7ptZXJvIGRlIElkZW50aWZpY2FjacOzbiBGaXNjYWwgKCBOSUYgKSBpcyB0aGUgd2F5IHRheCBpZGVudGlmaWNhdGlvbiB1c2VkIGluIFNwYWluIGZvciBpbmRpdmlkdWFsc1xuICovXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwibmlmRVNcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHZhbHVlID0gdmFsdWUudG9VcHBlckNhc2UoKTtcblxuXHQvLyBCYXNpYyBmb3JtYXQgdGVzdFxuXHRpZiAoICF2YWx1ZS5tYXRjaCggXCIoKF5bQS1aXXsxfVswLTldezd9W0EtWjAtOV17MX0kfF5bVF17MX1bQS1aMC05XXs4fSQpfF5bMC05XXs4fVtBLVpdezF9JClcIiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIFRlc3QgTklGXG5cdGlmICggL15bMC05XXs4fVtBLVpdezF9JC8udGVzdCggdmFsdWUgKSApIHtcblx0XHRyZXR1cm4gKCBcIlRSV0FHTVlGUERYQk5KWlNRVkhMQ0tFXCIuY2hhckF0KCB2YWx1ZS5zdWJzdHJpbmcoIDgsIDAgKSAlIDIzICkgPT09IHZhbHVlLmNoYXJBdCggOCApICk7XG5cdH1cblxuXHQvLyBUZXN0IHNwZWNpYWxzIE5JRiAoc3RhcnRzIHdpdGggSywgTCBvciBNKVxuXHRpZiAoIC9eW0tMTV17MX0vLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuICggdmFsdWVbIDggXSA9PT0gXCJUUldBR01ZRlBEWEJOSlpTUVZITENLRVwiLmNoYXJBdCggdmFsdWUuc3Vic3RyaW5nKCA4LCAxICkgJSAyMyApICk7XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG5cbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBOSUYgbnVtYmVyLlwiICk7XG5cbi8qXG4gKiBOdW1lciBpZGVudHlmaWthY2ppIHBvZGF0a293ZWogKCBOSVAgKSBpcyB0aGUgd2F5IHRheCBpZGVudGlmaWNhdGlvbiB1c2VkIGluIFBvbGFuZCBmb3IgY29tcGFuaWVzXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJuaXBQTFwiLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdHZhbHVlID0gdmFsdWUucmVwbGFjZSggL1teMC05XS9nLCBcIlwiICk7XG5cblx0aWYgKCB2YWx1ZS5sZW5ndGggIT09IDEwICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHZhciBhcnJTdGVwcyA9IFsgNiwgNSwgNywgMiwgMywgNCwgNSwgNiwgNyBdO1xuXHR2YXIgaW50U3VtID0gMDtcblx0Zm9yICggdmFyIGkgPSAwOyBpIDwgOTsgaSsrICkge1xuXHRcdGludFN1bSArPSBhcnJTdGVwc1sgaSBdICogdmFsdWVbIGkgXTtcblx0fVxuXHR2YXIgaW50MiA9IGludFN1bSAlIDExO1xuXHR2YXIgaW50Q29udHJvbE5yID0gKCBpbnQyID09PSAxMCApID8gMCA6IGludDI7XG5cblx0cmV0dXJuICggaW50Q29udHJvbE5yID09PSBwYXJzZUludCggdmFsdWVbIDkgXSwgMTAgKSApO1xufSwgXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIE5JUCBudW1iZXIuXCIgKTtcblxuLyoqXG4gKiBDcmVhdGVkIGZvciBwcm9qZWN0IGpxdWVyeS12YWxpZGF0aW9uLlxuICogQERlc2NyaXB0aW9uIEJyYXppbGxpYW4gUElTIG9yIE5JUyBudW1iZXIgKE7Dum1lcm8gZGUgSWRlbnRpZmljYcOnw6NvIFNvY2lhbCBQaXMgb3UgUGFzZXApIGlzIHRoZSBlcXVpdmFsZW50IG9mIGFcbiAqIEJyYXppbGlhbiB0YXggcmVnaXN0cmF0aW9uIG51bWJlciBOSVMgb2YgUElTIG51bWJlcnMgaGF2ZSAxMSBkaWdpdHMgaW4gdG90YWw6IDEwIG51bWJlcnMgZm9sbG93ZWQgYnkgMSBjaGVjayBudW1iZXJzXG4gKiB0aGF0IGFyZSBiZWluZyB1c2VkIGZvciB2YWxpZGF0aW9uLlxuICogQGNvcHlyaWdodCAoYykgMjEvMDgvMjAxOCAxMzoxNCwgQ2xlaXRvbiBkYSBTaWx2YSBNZW5kb27Dp2FcbiAqIEBhdXRob3IgQ2xlaXRvbiBkYSBTaWx2YSBNZW5kb27Dp2EgPGNsZWl0b24ubWVuZG9uY2FAZ21haWwuY29tPlxuICogQGxpbmsgaHR0cDovL2dpdGxhYi5jb20vY3NtZW5kb25jYSBHaXRsYWIgb2YgQ2xlaXRvbiBkYSBTaWx2YSBNZW5kb27Dp2FcbiAqIEBsaW5rIGh0dHA6Ly9naXRodWIuY29tL2NzbWVuZG9uY2EgR2l0aHViIG9mIENsZWl0b24gZGEgU2lsdmEgTWVuZG9uw6dhXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJuaXNCUlwiLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdHZhciBudW1iZXI7XG5cdHZhciBjbjtcblx0dmFyIHN1bSA9IDA7XG5cdHZhciBkdjtcblx0dmFyIGNvdW50O1xuXHR2YXIgbXVsdGlwbGllcjtcblxuXHQvLyBSZW1vdmluZyBzcGVjaWFsIGNoYXJhY3RlcnMgZnJvbSB2YWx1ZVxuXHR2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoIC8oW34hQCMkJV4mKigpXys9YHt9XFxbXFxdXFwtfFxcXFw6Oyc8PiwuXFwvPyBdKSsvZywgXCJcIiApO1xuXG5cdC8vIENoZWNraW5nIHZhbHVlIHRvIGhhdmUgMTEgZGlnaXRzIG9ubHlcblx0aWYgKCB2YWx1ZS5sZW5ndGggIT09IDExICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vR2V0IGNoZWNrIG51bWJlciBvZiB2YWx1ZVxuXHRjbiA9IHBhcnNlSW50KCB2YWx1ZS5zdWJzdHJpbmcoIDEwLCAxMSApLCAxMCApO1xuXG5cdC8vR2V0IG51bWJlciB3aXRoIDEwIGRpZ2l0cyBvZiB0aGUgdmFsdWVcblx0bnVtYmVyID0gcGFyc2VJbnQoIHZhbHVlLnN1YnN0cmluZyggMCwgMTAgKSwgMTAgKTtcblxuXHRmb3IgKCBjb3VudCA9IDI7IGNvdW50IDwgMTI7IGNvdW50KysgKSB7XG5cdFx0bXVsdGlwbGllciA9IGNvdW50O1xuXHRcdGlmICggY291bnQgPT09IDEwICkge1xuXHRcdFx0bXVsdGlwbGllciA9IDI7XG5cdFx0fVxuXHRcdGlmICggY291bnQgPT09IDExICkge1xuXHRcdFx0bXVsdGlwbGllciA9IDM7XG5cdFx0fVxuXHRcdHN1bSArPSAoICggbnVtYmVyICUgMTAgKSAqIG11bHRpcGxpZXIgKTtcblx0XHRudW1iZXIgPSBwYXJzZUludCggbnVtYmVyIC8gMTAsIDEwICk7XG5cdH1cblx0ZHYgPSAoIHN1bSAlIDExICk7XG5cblx0aWYgKCBkdiA+IDEgKSB7XG5cdFx0ZHYgPSAoIDExIC0gZHYgKTtcblx0fSBlbHNlIHtcblx0XHRkdiA9IDA7XG5cdH1cblxuXHRpZiAoIGNuID09PSBkdiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBOSVMvUElTIG51bWJlclwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJub3RFcXVhbFRvXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgISQudmFsaWRhdG9yLm1ldGhvZHMuZXF1YWxUby5jYWxsKCB0aGlzLCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKTtcbn0sIFwiUGxlYXNlIGVudGVyIGEgZGlmZmVyZW50IHZhbHVlLCB2YWx1ZXMgbXVzdCBub3QgYmUgdGhlIHNhbWUuXCIgKTtcblxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcIm5vd2hpdGVzcGFjZVwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL15cXFMrJC9pLnRlc3QoIHZhbHVlICk7XG59LCBcIk5vIHdoaXRlIHNwYWNlIHBsZWFzZVwiICk7XG5cbi8qKlxuKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgZmllbGQgdmFsdWUgbWF0Y2hlcyB0aGUgZ2l2ZW4gZm9ybWF0IFJlZ0V4cFxuKlxuKiBAZXhhbXBsZSAkLnZhbGlkYXRvci5tZXRob2RzLnBhdHRlcm4oXCJBUjEwMDRcIixlbGVtZW50LC9eQVJcXGR7NH0kLylcbiogQHJlc3VsdCB0cnVlXG4qXG4qIEBleGFtcGxlICQudmFsaWRhdG9yLm1ldGhvZHMucGF0dGVybihcIkJSMTAwNFwiLGVsZW1lbnQsL15BUlxcZHs0fSQvKVxuKiBAcmVzdWx0IGZhbHNlXG4qXG4qIEBuYW1lICQudmFsaWRhdG9yLm1ldGhvZHMucGF0dGVyblxuKiBAdHlwZSBCb29sZWFuXG4qIEBjYXQgUGx1Z2lucy9WYWxpZGF0ZS9NZXRob2RzXG4qL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcInBhdHRlcm5cIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0aWYgKCB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKCB0eXBlb2YgcGFyYW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cGFyYW0gPSBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIHBhcmFtICsgXCIpJFwiICk7XG5cdH1cblx0cmV0dXJuIHBhcmFtLnRlc3QoIHZhbHVlICk7XG59LCBcIkludmFsaWQgZm9ybWF0LlwiICk7XG5cbi8qKlxuICogRHV0Y2ggcGhvbmUgbnVtYmVycyBoYXZlIDEwIGRpZ2l0cyAob3IgMTEgYW5kIHN0YXJ0IHdpdGggKzMxKS5cbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcInBob25lTkxcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eKChcXCt8MDAoXFxzfFxccz9cXC1cXHM/KT8pMzEoXFxzfFxccz9cXC1cXHM/KT8oXFwoMFxcKVtcXC1cXHNdPyk/fDApWzEtOV0oKFxcc3xcXHM/XFwtXFxzPyk/WzAtOV0pezh9JC8udGVzdCggdmFsdWUgKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwaG9uZSBudW1iZXIuXCIgKTtcblxuLyoqXG4gKiBQb2xpc2ggdGVsZXBob25lIG51bWJlcnMgaGF2ZSA5IGRpZ2l0cy5cbiAqXG4gKiBNb2JpbGUgcGhvbmUgbnVtYmVycyBzdGFydHMgd2l0aCBmb2xsb3dpbmcgZGlnaXRzOlxuICogNDUsIDUwLCA1MSwgNTMsIDU3LCA2MCwgNjYsIDY5LCA3MiwgNzMsIDc4LCA3OSwgODguXG4gKlxuICogRml4ZWQtbGluZSBudW1iZXJzIHN0YXJ0cyB3aXRoIGFyZWEgY29kZXM6XG4gKiAxMiwgMTMsIDE0LCAxNSwgMTYsIDE3LCAxOCwgMjIsIDIzLCAyNCwgMjUsIDI5LCAzMiwgMzMsXG4gKiAzNCwgNDEsIDQyLCA0MywgNDQsIDQ2LCA0OCwgNTIsIDU0LCA1NSwgNTYsIDU4LCA1OSwgNjEsXG4gKiA2MiwgNjMsIDY1LCA2NywgNjgsIDcxLCA3NCwgNzUsIDc2LCA3NywgODEsIDgyLCA4MywgODQsXG4gKiA4NSwgODYsIDg3LCA4OSwgOTEsIDk0LCA5NS5cbiAqXG4gKiBNaW5pc3RyeSBvZiBOYXRpb25hbCBEZWZlbmNlIG51bWJlcnMgYW5kIFZvSVAgbnVtYmVycyBzdGFydHMgd2l0aCAyNiBhbmQgMzkuXG4gKlxuICogRXhjbHVkZXMgaW50ZWxsaWdlbnQgbmV0d29ya3MgKHByZW1pdW0gcmF0ZSwgc2hhcmVkIGNvc3QsIGZyZWUgcGhvbmUgbnVtYmVycykuXG4gKlxuICogUG9sYW5kIE5hdGlvbmFsIE51bWJlcmluZyBQbGFuIGh0dHA6Ly93d3cuaXR1LmludC9vdGgvVDAyMDIwMDAwQTgvZW5cbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcInBob25lUExcIiwgZnVuY3Rpb24oIHBob25lX251bWJlciwgZWxlbWVudCApIHtcblx0cGhvbmVfbnVtYmVyID0gcGhvbmVfbnVtYmVyLnJlcGxhY2UoIC9cXHMrL2csIFwiXCIgKTtcblx0dmFyIHJlZ2V4cCA9IC9eKD86KD86KD86XFwrfDAwKT80OCl8KD86XFwoXFwrPzQ4XFwpKSk/KD86MVsyLThdfDJbMi02OV18M1syLTQ5XXw0WzEtNjhdfDVbMC05XXw2WzAtMzUtOV18WzctOF1bMS05XXw5WzE0NV0pXFxkezd9JC87XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgcmVnZXhwLnRlc3QoIHBob25lX251bWJlciApO1xufSwgXCJQbGVhc2Ugc3BlY2lmeSBhIHZhbGlkIHBob25lIG51bWJlclwiICk7XG5cbi8qIEZvciBVSyBwaG9uZSBmdW5jdGlvbnMsIGRvIHRoZSBmb2xsb3dpbmcgc2VydmVyIHNpZGUgcHJvY2Vzc2luZzpcbiAqIENvbXBhcmUgb3JpZ2luYWwgaW5wdXQgd2l0aCB0aGlzIFJlZ0V4IHBhdHRlcm46XG4gKiBeXFwoPyg/Oig/OjAwXFwpP1tcXHNcXC1dP1xcKD98XFwrKSg0NClcXCk/W1xcc1xcLV0/XFwoPyg/OjBcXCk/W1xcc1xcLV0/XFwoPyk/fDApKFsxLTldXFxkezEsNH1cXCk/W1xcc1xcZFxcLV0rKSRcbiAqIEV4dHJhY3QgJDEgYW5kIHNldCAkcHJlZml4IHRvICcrNDQ8c3BhY2U+JyBpZiAkMSBpcyAnNDQnLCBvdGhlcndpc2Ugc2V0ICRwcmVmaXggdG8gJzAnXG4gKiBFeHRyYWN0ICQyIGFuZCByZW1vdmUgaHlwaGVucywgc3BhY2VzIGFuZCBwYXJlbnRoZXNlcy4gUGhvbmUgbnVtYmVyIGlzIGNvbWJpbmVkICRwcmVmaXggYW5kICQyLlxuICogQSBudW1iZXIgb2YgdmVyeSBkZXRhaWxlZCBHQiB0ZWxlcGhvbmUgbnVtYmVyIFJlZ0V4IHBhdHRlcm5zIGNhbiBhbHNvIGJlIGZvdW5kIGF0OlxuICogaHR0cDovL3d3dy5hYS1hc3Rlcmlzay5vcmcudWsvaW5kZXgucGhwL1JlZ3VsYXJfRXhwcmVzc2lvbnNfZm9yX1ZhbGlkYXRpbmdfYW5kX0Zvcm1hdHRpbmdfR0JfVGVsZXBob25lX051bWJlcnNcbiAqL1xuXG4vLyBNYXRjaGVzIFVLIGxhbmRsaW5lICsgbW9iaWxlLCBhY2NlcHRpbmcgb25seSAwMS0zIGZvciBsYW5kbGluZSBvciAwNyBmb3IgbW9iaWxlIHRvIGV4Y2x1ZGUgbWFueSBwcmVtaXVtIG51bWJlcnNcbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJwaG9uZXNVS1wiLCBmdW5jdGlvbiggcGhvbmVfbnVtYmVyLCBlbGVtZW50ICkge1xuXHRwaG9uZV9udW1iZXIgPSBwaG9uZV9udW1iZXIucmVwbGFjZSggL1xcKHxcXCl8XFxzK3wtL2csIFwiXCIgKTtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBwaG9uZV9udW1iZXIubGVuZ3RoID4gOSAmJlxuXHRcdHBob25lX251bWJlci5tYXRjaCggL14oPzooPzooPzowMFxccz98XFwrKTQ0XFxzP3wwKSg/OjFcXGR7OCw5fXxbMjNdXFxkezl9fDcoPzpbMTM0NTc4OV1cXGR7OH18NjI0XFxkezZ9KSkpJC8gKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCB1ayBwaG9uZSBudW1iZXJcIiApO1xuXG4vKiBGb3IgVUsgcGhvbmUgZnVuY3Rpb25zLCBkbyB0aGUgZm9sbG93aW5nIHNlcnZlciBzaWRlIHByb2Nlc3Npbmc6XG4gKiBDb21wYXJlIG9yaWdpbmFsIGlucHV0IHdpdGggdGhpcyBSZWdFeCBwYXR0ZXJuOlxuICogXlxcKD8oPzooPzowMFxcKT9bXFxzXFwtXT9cXCg/fFxcKykoNDQpXFwpP1tcXHNcXC1dP1xcKD8oPzowXFwpP1tcXHNcXC1dP1xcKD8pP3wwKShbMS05XVxcZHsxLDR9XFwpP1tcXHNcXGRcXC1dKykkXG4gKiBFeHRyYWN0ICQxIGFuZCBzZXQgJHByZWZpeCB0byAnKzQ0PHNwYWNlPicgaWYgJDEgaXMgJzQ0Jywgb3RoZXJ3aXNlIHNldCAkcHJlZml4IHRvICcwJ1xuICogRXh0cmFjdCAkMiBhbmQgcmVtb3ZlIGh5cGhlbnMsIHNwYWNlcyBhbmQgcGFyZW50aGVzZXMuIFBob25lIG51bWJlciBpcyBjb21iaW5lZCAkcHJlZml4IGFuZCAkMi5cbiAqIEEgbnVtYmVyIG9mIHZlcnkgZGV0YWlsZWQgR0IgdGVsZXBob25lIG51bWJlciBSZWdFeCBwYXR0ZXJucyBjYW4gYWxzbyBiZSBmb3VuZCBhdDpcbiAqIGh0dHA6Ly93d3cuYWEtYXN0ZXJpc2sub3JnLnVrL2luZGV4LnBocC9SZWd1bGFyX0V4cHJlc3Npb25zX2Zvcl9WYWxpZGF0aW5nX2FuZF9Gb3JtYXR0aW5nX0dCX1RlbGVwaG9uZV9OdW1iZXJzXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJwaG9uZVVLXCIsIGZ1bmN0aW9uKCBwaG9uZV9udW1iZXIsIGVsZW1lbnQgKSB7XG5cdHBob25lX251bWJlciA9IHBob25lX251bWJlci5yZXBsYWNlKCAvXFwofFxcKXxcXHMrfC0vZywgXCJcIiApO1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IHBob25lX251bWJlci5sZW5ndGggPiA5ICYmXG5cdFx0cGhvbmVfbnVtYmVyLm1hdGNoKCAvXig/Oig/Oig/OjAwXFxzP3xcXCspNDRcXHM/KXwoPzpcXCg/MCkpKD86XFxkezJ9XFwpP1xccz9cXGR7NH1cXHM/XFxkezR9fFxcZHszfVxcKT9cXHM/XFxkezN9XFxzP1xcZHszLDR9fFxcZHs0fVxcKT9cXHM/KD86XFxkezV9fFxcZHszfVxccz9cXGR7M30pfFxcZHs1fVxcKT9cXHM/XFxkezQsNX0pJC8gKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwaG9uZSBudW1iZXJcIiApO1xuXG4vKipcbiAqIE1hdGNoZXMgVVMgcGhvbmUgbnVtYmVyIGZvcm1hdFxuICpcbiAqIHdoZXJlIHRoZSBhcmVhIGNvZGUgbWF5IG5vdCBzdGFydCB3aXRoIDEgYW5kIHRoZSBwcmVmaXggbWF5IG5vdCBzdGFydCB3aXRoIDFcbiAqIGFsbG93cyAnLScgb3IgJyAnIGFzIGEgc2VwYXJhdG9yIGFuZCBhbGxvd3MgcGFyZW5zIGFyb3VuZCBhcmVhIGNvZGVcbiAqIHNvbWUgcGVvcGxlIG1heSB3YW50IHRvIHB1dCBhICcxJyBpbiBmcm9udCBvZiB0aGVpciBudW1iZXJcbiAqXG4gKiAxKDIxMiktOTk5LTIzNDUgb3JcbiAqIDIxMiA5OTkgMjM0NCBvclxuICogMjEyLTk5OS0wOTgzXG4gKlxuICogYnV0IG5vdFxuICogMTExLTEyMy01NDM0XG4gKiBhbmQgbm90XG4gKiAyMTIgMTIzIDQ1NjdcbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcInBob25lVVNcIiwgZnVuY3Rpb24oIHBob25lX251bWJlciwgZWxlbWVudCApIHtcblx0cGhvbmVfbnVtYmVyID0gcGhvbmVfbnVtYmVyLnJlcGxhY2UoIC9cXHMrL2csIFwiXCIgKTtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCBwaG9uZV9udW1iZXIubGVuZ3RoID4gOSAmJlxuXHRcdHBob25lX251bWJlci5tYXRjaCggL14oXFwrPzEtPyk/KFxcKFsyLTldKFswMi05XVxcZHwxWzAyLTldKVxcKXxbMi05XShbMDItOV1cXGR8MVswMi05XSkpLT9bMi05XVxcZHsyfS0/XFxkezR9JC8gKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwaG9uZSBudW1iZXJcIiApO1xuXG4vKlxuKiBWYWxpZGEgQ0VQcyBkbyBicmFzaWxlaXJvczpcbipcbiogRm9ybWF0b3MgYWNlaXRvczpcbiogOTk5OTktOTk5XG4qIDk5Ljk5OS05OTlcbiogOTk5OTk5OTlcbiovXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwicG9zdGFsY29kZUJSXCIsIGZ1bmN0aW9uKCBjZXBfdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL15cXGR7Mn0uXFxkezN9LVxcZHszfT8kfF5cXGR7NX0tP1xcZHszfT8kLy50ZXN0KCBjZXBfdmFsdWUgKTtcbn0sIFwiSW5mb3JtZSB1bSBDRVAgdsOhbGlkby5cIiApO1xuXG4vKipcbiAqIE1hdGNoZXMgYSB2YWxpZCBDYW5hZGlhbiBQb3N0YWwgQ29kZVxuICpcbiAqIEBleGFtcGxlIGpRdWVyeS52YWxpZGF0b3IubWV0aG9kcy5wb3N0YWxDb2RlQ0EoIFwiSDBIIDBIMFwiLCBlbGVtZW50IClcbiAqIEByZXN1bHQgdHJ1ZVxuICpcbiAqIEBleGFtcGxlIGpRdWVyeS52YWxpZGF0b3IubWV0aG9kcy5wb3N0YWxDb2RlQ0EoIFwiSDBIMEgwXCIsIGVsZW1lbnQgKVxuICogQHJlc3VsdCBmYWxzZVxuICpcbiAqIEBuYW1lIGpRdWVyeS52YWxpZGF0b3IubWV0aG9kcy5wb3N0YWxDb2RlQ0FcbiAqIEB0eXBlIEJvb2xlYW5cbiAqIEBjYXQgUGx1Z2lucy9WYWxpZGF0ZS9NZXRob2RzXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJwb3N0YWxDb2RlQ0FcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW0FCQ0VHSEpLTE1OUFJTVFZYWV1cXGRbQUJDRUdISktMTU5QUlNUVldYWVpdICpcXGRbQUJDRUdISktMTU5QUlNUVldYWVpdXFxkJC9pLnRlc3QoIHZhbHVlICk7XG59LCBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgcG9zdGFsIGNvZGVcIiApO1xuXG4vKiBNYXRjaGVzIEl0YWxpYW4gcG9zdGNvZGUgKENBUCkgKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJwb3N0YWxjb2RlSVRcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkezV9JC8udGVzdCggdmFsdWUgKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBwb3N0YWwgY29kZVwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJwb3N0YWxjb2RlTkxcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eWzEtOV1bMC05XXszfVxccz9bYS16QS1aXXsyfSQvLnRlc3QoIHZhbHVlICk7XG59LCBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgcG9zdGFsIGNvZGVcIiApO1xuXG4vLyBNYXRjaGVzIFVLIHBvc3Rjb2RlLiBEb2VzIG5vdCBtYXRjaCB0byBVSyBDaGFubmVsIElzbGFuZHMgdGhhdCBoYXZlIHRoZWlyIG93biBwb3N0Y29kZXMgKG5vbiBzdGFuZGFyZCBVSylcbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJwb3N0Y29kZVVLXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXigoKFtBLVBSLVVXWVpdWzAtOV0pfChbQS1QUi1VV1laXVswLTldWzAtOV0pfChbQS1QUi1VV1laXVtBLUhLLVldWzAtOV0pfChbQS1QUi1VV1laXVtBLUhLLVldWzAtOV1bMC05XSl8KFtBLVBSLVVXWVpdWzAtOV1bQS1ISktTVFVXXSl8KFtBLVBSLVVXWVpdW0EtSEstWV1bMC05XVtBQkVITU5QUlZXWFldKSlcXHM/KFswLTldW0FCRC1ISkxOUC1VVy1aXXsyfSl8KEdJUilcXHM/KDBBQSkpJC9pLnRlc3QoIHZhbHVlICk7XG59LCBcIlBsZWFzZSBzcGVjaWZ5IGEgdmFsaWQgVUsgcG9zdGNvZGVcIiApO1xuXG4vKlxuICogTGV0cyB5b3Ugc2F5IFwiYXQgbGVhc3QgWCBpbnB1dHMgdGhhdCBtYXRjaCBzZWxlY3RvciBZIG11c3QgYmUgZmlsbGVkLlwiXG4gKlxuICogVGhlIGVuZCByZXN1bHQgaXMgdGhhdCBuZWl0aGVyIG9mIHRoZXNlIGlucHV0czpcbiAqXG4gKlx0PGlucHV0IGNsYXNzPVwicHJvZHVjdGluZm9cIiBuYW1lPVwicGFydG51bWJlclwiPlxuICpcdDxpbnB1dCBjbGFzcz1cInByb2R1Y3RpbmZvXCIgbmFtZT1cImRlc2NyaXB0aW9uXCI+XG4gKlxuICpcdC4uLndpbGwgdmFsaWRhdGUgdW5sZXNzIGF0IGxlYXN0IG9uZSBvZiB0aGVtIGlzIGZpbGxlZC5cbiAqXG4gKiBwYXJ0bnVtYmVyOlx0e3JlcXVpcmVfZnJvbV9ncm91cDogWzEsXCIucHJvZHVjdGluZm9cIl19LFxuICogZGVzY3JpcHRpb246IHtyZXF1aXJlX2Zyb21fZ3JvdXA6IFsxLFwiLnByb2R1Y3RpbmZvXCJdfVxuICpcbiAqIG9wdGlvbnNbMF06IG51bWJlciBvZiBmaWVsZHMgdGhhdCBtdXN0IGJlIGZpbGxlZCBpbiB0aGUgZ3JvdXBcbiAqIG9wdGlvbnNbMV06IENTUyBzZWxlY3RvciB0aGF0IGRlZmluZXMgdGhlIGdyb3VwIG9mIGNvbmRpdGlvbmFsbHkgcmVxdWlyZWQgZmllbGRzXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJyZXF1aXJlX2Zyb21fZ3JvdXBcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBvcHRpb25zICkge1xuXHR2YXIgJGZpZWxkcyA9ICQoIG9wdGlvbnNbIDEgXSwgZWxlbWVudC5mb3JtICksXG5cdFx0JGZpZWxkc0ZpcnN0ID0gJGZpZWxkcy5lcSggMCApLFxuXHRcdHZhbGlkYXRvciA9ICRmaWVsZHNGaXJzdC5kYXRhKCBcInZhbGlkX3JlcV9ncnBcIiApID8gJGZpZWxkc0ZpcnN0LmRhdGEoIFwidmFsaWRfcmVxX2dycFwiICkgOiAkLmV4dGVuZCgge30sIHRoaXMgKSxcblx0XHRpc1ZhbGlkID0gJGZpZWxkcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHZhbGlkYXRvci5lbGVtZW50VmFsdWUoIHRoaXMgKTtcblx0XHR9ICkubGVuZ3RoID49IG9wdGlvbnNbIDAgXTtcblxuXHQvLyBTdG9yZSB0aGUgY2xvbmVkIHZhbGlkYXRvciBmb3IgZnV0dXJlIHZhbGlkYXRpb25cblx0JGZpZWxkc0ZpcnN0LmRhdGEoIFwidmFsaWRfcmVxX2dycFwiLCB2YWxpZGF0b3IgKTtcblxuXHQvLyBJZiBlbGVtZW50IGlzbid0IGJlaW5nIHZhbGlkYXRlZCwgcnVuIGVhY2ggcmVxdWlyZV9mcm9tX2dyb3VwIGZpZWxkJ3MgdmFsaWRhdGlvbiBydWxlc1xuXHRpZiAoICEkKCBlbGVtZW50ICkuZGF0YSggXCJiZWluZ192YWxpZGF0ZWRcIiApICkge1xuXHRcdCRmaWVsZHMuZGF0YSggXCJiZWluZ192YWxpZGF0ZWRcIiwgdHJ1ZSApO1xuXHRcdCRmaWVsZHMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YWxpZGF0b3IuZWxlbWVudCggdGhpcyApO1xuXHRcdH0gKTtcblx0XHQkZmllbGRzLmRhdGEoIFwiYmVpbmdfdmFsaWRhdGVkXCIsIGZhbHNlICk7XG5cdH1cblx0cmV0dXJuIGlzVmFsaWQ7XG59LCAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGZpbGwgYXQgbGVhc3QgezB9IG9mIHRoZXNlIGZpZWxkcy5cIiApICk7XG5cbi8qXG4gKiBMZXRzIHlvdSBzYXkgXCJlaXRoZXIgYXQgbGVhc3QgWCBpbnB1dHMgdGhhdCBtYXRjaCBzZWxlY3RvciBZIG11c3QgYmUgZmlsbGVkLFxuICogT1IgdGhleSBtdXN0IGFsbCBiZSBza2lwcGVkIChsZWZ0IGJsYW5rKS5cIlxuICpcbiAqIFRoZSBlbmQgcmVzdWx0LCBpcyB0aGF0IG5vbmUgb2YgdGhlc2UgaW5wdXRzOlxuICpcbiAqXHQ8aW5wdXQgY2xhc3M9XCJwcm9kdWN0aW5mb1wiIG5hbWU9XCJwYXJ0bnVtYmVyXCI+XG4gKlx0PGlucHV0IGNsYXNzPVwicHJvZHVjdGluZm9cIiBuYW1lPVwiZGVzY3JpcHRpb25cIj5cbiAqXHQ8aW5wdXQgY2xhc3M9XCJwcm9kdWN0aW5mb1wiIG5hbWU9XCJjb2xvclwiPlxuICpcbiAqXHQuLi53aWxsIHZhbGlkYXRlIHVubGVzcyBlaXRoZXIgYXQgbGVhc3QgdHdvIG9mIHRoZW0gYXJlIGZpbGxlZCxcbiAqXHRPUiBub25lIG9mIHRoZW0gYXJlLlxuICpcbiAqIHBhcnRudW1iZXI6XHR7c2tpcF9vcl9maWxsX21pbmltdW06IFsyLFwiLnByb2R1Y3RpbmZvXCJdfSxcbiAqIGRlc2NyaXB0aW9uOiB7c2tpcF9vcl9maWxsX21pbmltdW06IFsyLFwiLnByb2R1Y3RpbmZvXCJdfSxcbiAqIGNvbG9yOlx0XHR7c2tpcF9vcl9maWxsX21pbmltdW06IFsyLFwiLnByb2R1Y3RpbmZvXCJdfVxuICpcbiAqIG9wdGlvbnNbMF06IG51bWJlciBvZiBmaWVsZHMgdGhhdCBtdXN0IGJlIGZpbGxlZCBpbiB0aGUgZ3JvdXBcbiAqIG9wdGlvbnNbMV06IENTUyBzZWxlY3RvciB0aGF0IGRlZmluZXMgdGhlIGdyb3VwIG9mIGNvbmRpdGlvbmFsbHkgcmVxdWlyZWQgZmllbGRzXG4gKlxuICovXG4kLnZhbGlkYXRvci5hZGRNZXRob2QoIFwic2tpcF9vcl9maWxsX21pbmltdW1cIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBvcHRpb25zICkge1xuXHR2YXIgJGZpZWxkcyA9ICQoIG9wdGlvbnNbIDEgXSwgZWxlbWVudC5mb3JtICksXG5cdFx0JGZpZWxkc0ZpcnN0ID0gJGZpZWxkcy5lcSggMCApLFxuXHRcdHZhbGlkYXRvciA9ICRmaWVsZHNGaXJzdC5kYXRhKCBcInZhbGlkX3NraXBcIiApID8gJGZpZWxkc0ZpcnN0LmRhdGEoIFwidmFsaWRfc2tpcFwiICkgOiAkLmV4dGVuZCgge30sIHRoaXMgKSxcblx0XHRudW1iZXJGaWxsZWQgPSAkZmllbGRzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdmFsaWRhdG9yLmVsZW1lbnRWYWx1ZSggdGhpcyApO1xuXHRcdH0gKS5sZW5ndGgsXG5cdFx0aXNWYWxpZCA9IG51bWJlckZpbGxlZCA9PT0gMCB8fCBudW1iZXJGaWxsZWQgPj0gb3B0aW9uc1sgMCBdO1xuXG5cdC8vIFN0b3JlIHRoZSBjbG9uZWQgdmFsaWRhdG9yIGZvciBmdXR1cmUgdmFsaWRhdGlvblxuXHQkZmllbGRzRmlyc3QuZGF0YSggXCJ2YWxpZF9za2lwXCIsIHZhbGlkYXRvciApO1xuXG5cdC8vIElmIGVsZW1lbnQgaXNuJ3QgYmVpbmcgdmFsaWRhdGVkLCBydW4gZWFjaCBza2lwX29yX2ZpbGxfbWluaW11bSBmaWVsZCdzIHZhbGlkYXRpb24gcnVsZXNcblx0aWYgKCAhJCggZWxlbWVudCApLmRhdGEoIFwiYmVpbmdfdmFsaWRhdGVkXCIgKSApIHtcblx0XHQkZmllbGRzLmRhdGEoIFwiYmVpbmdfdmFsaWRhdGVkXCIsIHRydWUgKTtcblx0XHQkZmllbGRzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFsaWRhdG9yLmVsZW1lbnQoIHRoaXMgKTtcblx0XHR9ICk7XG5cdFx0JGZpZWxkcy5kYXRhKCBcImJlaW5nX3ZhbGlkYXRlZFwiLCBmYWxzZSApO1xuXHR9XG5cdHJldHVybiBpc1ZhbGlkO1xufSwgJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlaXRoZXIgc2tpcCB0aGVzZSBmaWVsZHMgb3IgZmlsbCBhdCBsZWFzdCB7MH0gb2YgdGhlbS5cIiApICk7XG5cbi8qIFZhbGlkYXRlcyBVUyBTdGF0ZXMgYW5kL29yIFRlcnJpdG9yaWVzIGJ5IEBqZGZvcnN5dGhlXG4gKiBDYW4gYmUgY2FzZSBpbnNlbnNpdGl2ZSBvciByZXF1aXJlIGNhcGl0YWxpemF0aW9uIC0gZGVmYXVsdCBpcyBjYXNlIGluc2Vuc2l0aXZlXG4gKiBDYW4gaW5jbHVkZSBVUyBUZXJyaXRvcmllcyBvciBub3QgLSBkZWZhdWx0IGRvZXMgbm90XG4gKiBDYW4gaW5jbHVkZSBVUyBNaWxpdGFyeSBwb3N0YWwgYWJicmV2aWF0aW9ucyAoQUEsIEFFLCBBUCkgLSBkZWZhdWx0IGRvZXMgbm90XG4gKlxuICogTm90ZTogXCJTdGF0ZXNcIiBhbHdheXMgaW5jbHVkZXMgREMgKERpc3RyaWN0IG9mIENvbG9tYmlhKVxuICpcbiAqIFVzYWdlIGV4YW1wbGVzOlxuICpcbiAqICBUaGlzIGlzIHRoZSBkZWZhdWx0IC0gY2FzZSBpbnNlbnNpdGl2ZSwgbm8gdGVycml0b3JpZXMsIG5vIG1pbGl0YXJ5IHpvbmVzXG4gKiAgc3RhdGVJbnB1dDoge1xuICogICAgIGNhc2VTZW5zaXRpdmU6IGZhbHNlLFxuICogICAgIGluY2x1ZGVUZXJyaXRvcmllczogZmFsc2UsXG4gKiAgICAgaW5jbHVkZU1pbGl0YXJ5OiBmYWxzZVxuICogIH1cbiAqXG4gKiAgT25seSBhbGxvdyBjYXBpdGFsIGxldHRlcnMsIG5vIHRlcnJpdG9yaWVzLCBubyBtaWxpdGFyeSB6b25lc1xuICogIHN0YXRlSW5wdXQ6IHtcbiAqICAgICBjYXNlU2Vuc2l0aXZlOiBmYWxzZVxuICogIH1cbiAqXG4gKiAgQ2FzZSBpbnNlbnNpdGl2ZSwgaW5jbHVkZSB0ZXJyaXRvcmllcyBidXQgbm90IG1pbGl0YXJ5IHpvbmVzXG4gKiAgc3RhdGVJbnB1dDoge1xuICogICAgIGluY2x1ZGVUZXJyaXRvcmllczogdHJ1ZVxuICogIH1cbiAqXG4gKiAgT25seSBhbGxvdyBjYXBpdGFsIGxldHRlcnMsIGluY2x1ZGUgdGVycml0b3JpZXMgYW5kIG1pbGl0YXJ5IHpvbmVzXG4gKiAgc3RhdGVJbnB1dDoge1xuICogICAgIGNhc2VTZW5zaXRpdmU6IHRydWUsXG4gKiAgICAgaW5jbHVkZVRlcnJpdG9yaWVzOiB0cnVlLFxuICogICAgIGluY2x1ZGVNaWxpdGFyeTogdHJ1ZVxuICogIH1cbiAqXG4gKi9cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJzdGF0ZVVTXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgb3B0aW9ucyApIHtcblx0dmFyIGlzRGVmYXVsdCA9IHR5cGVvZiBvcHRpb25zID09PSBcInVuZGVmaW5lZFwiLFxuXHRcdGNhc2VTZW5zaXRpdmUgPSAoIGlzRGVmYXVsdCB8fCB0eXBlb2Ygb3B0aW9ucy5jYXNlU2Vuc2l0aXZlID09PSBcInVuZGVmaW5lZFwiICkgPyBmYWxzZSA6IG9wdGlvbnMuY2FzZVNlbnNpdGl2ZSxcblx0XHRpbmNsdWRlVGVycml0b3JpZXMgPSAoIGlzRGVmYXVsdCB8fCB0eXBlb2Ygb3B0aW9ucy5pbmNsdWRlVGVycml0b3JpZXMgPT09IFwidW5kZWZpbmVkXCIgKSA/IGZhbHNlIDogb3B0aW9ucy5pbmNsdWRlVGVycml0b3JpZXMsXG5cdFx0aW5jbHVkZU1pbGl0YXJ5ID0gKCBpc0RlZmF1bHQgfHwgdHlwZW9mIG9wdGlvbnMuaW5jbHVkZU1pbGl0YXJ5ID09PSBcInVuZGVmaW5lZFwiICkgPyBmYWxzZSA6IG9wdGlvbnMuaW5jbHVkZU1pbGl0YXJ5LFxuXHRcdHJlZ2V4O1xuXG5cdGlmICggIWluY2x1ZGVUZXJyaXRvcmllcyAmJiAhaW5jbHVkZU1pbGl0YXJ5ICkge1xuXHRcdHJlZ2V4ID0gXCJeKEFbS0xSWl18Q1tBT1RdfERbQ0VdfEZMfEdBfEhJfElbQURMTl18S1tTWV18TEF8TVtBREVJTk9TVF18TltDREVISk1WWV18T1tIS1JdfFBBfFJJfFNbQ0RdfFRbTlhdfFVUfFZbQVRdfFdbQUlWWV0pJFwiO1xuXHR9IGVsc2UgaWYgKCBpbmNsdWRlVGVycml0b3JpZXMgJiYgaW5jbHVkZU1pbGl0YXJ5ICkge1xuXHRcdHJlZ2V4ID0gXCJeKEFbQUVLTFBSU1pdfENbQU9UXXxEW0NFXXxGTHxHW0FVXXxISXxJW0FETE5dfEtbU1ldfExBfE1bQURFSU5PUFNUXXxOW0NERUhKTVZZXXxPW0hLUl18UFtBUl18Ukl8U1tDRF18VFtOWF18VVR8VltBSVRdfFdbQUlWWV0pJFwiO1xuXHR9IGVsc2UgaWYgKCBpbmNsdWRlVGVycml0b3JpZXMgKSB7XG5cdFx0cmVnZXggPSBcIl4oQVtLTFJTWl18Q1tBT1RdfERbQ0VdfEZMfEdbQVVdfEhJfElbQURMTl18S1tTWV18TEF8TVtBREVJTk9QU1RdfE5bQ0RFSEpNVlldfE9bSEtSXXxQW0FSXXxSSXxTW0NEXXxUW05YXXxVVHxWW0FJVF18V1tBSVZZXSkkXCI7XG5cdH0gZWxzZSB7XG5cdFx0cmVnZXggPSBcIl4oQVtBRUtMUFJaXXxDW0FPVF18RFtDRV18Rkx8R0F8SEl8SVtBRExOXXxLW1NZXXxMQXxNW0FERUlOT1NUXXxOW0NERUhKTVZZXXxPW0hLUl18UEF8Ukl8U1tDRF18VFtOWF18VVR8VltBVF18V1tBSVZZXSkkXCI7XG5cdH1cblxuXHRyZWdleCA9IGNhc2VTZW5zaXRpdmUgPyBuZXcgUmVnRXhwKCByZWdleCApIDogbmV3IFJlZ0V4cCggcmVnZXgsIFwiaVwiICk7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgcmVnZXgudGVzdCggdmFsdWUgKTtcbn0sIFwiUGxlYXNlIHNwZWNpZnkgYSB2YWxpZCBzdGF0ZVwiICk7XG5cbi8vIFRPRE8gY2hlY2sgaWYgdmFsdWUgc3RhcnRzIHdpdGggPCwgb3RoZXJ3aXNlIGRvbid0IHRyeSBzdHJpcHBpbmcgYW55dGhpbmdcbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJzdHJpcHBlZG1pbmxlbmd0aFwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRyZXR1cm4gJCggdmFsdWUgKS50ZXh0KCkubGVuZ3RoID49IHBhcmFtO1xufSwgJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhdCBsZWFzdCB7MH0gY2hhcmFjdGVyc1wiICkgKTtcblxuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcInRpbWVcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eKFswMV1cXGR8MlswLTNdfFswLTldKSg6WzAtNV1cXGQpezEsMn0kLy50ZXN0KCB2YWx1ZSApO1xufSwgXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCB0aW1lLCBiZXR3ZWVuIDAwOjAwIGFuZCAyMzo1OVwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJ0aW1lMTJoXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXigoMD9bMS05XXwxWzAxMl0pKDpbMC01XVxcZCl7MSwyfShcXCA/W0FQXU0pKSQvaS50ZXN0KCB2YWx1ZSApO1xufSwgXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCB0aW1lIGluIDEyLWhvdXIgYW0vcG0gZm9ybWF0XCIgKTtcblxuLy8gU2FtZSBhcyB1cmwsIGJ1dCBUTEQgaXMgb3B0aW9uYWxcbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJ1cmwyXCIsIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXihodHRwcz98ZnRwKTpcXC9cXC8oKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OikqQCk/KCgoXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pKXwoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSooKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4/KSg6XFxkKik/KShcXC8oKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKyhcXC8oKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkqKSopPyk/KFxcPygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8W1xcdUUwMDAtXFx1RjhGRl18XFwvfFxcPykqKT8oIygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8XFwvfFxcPykqKT8kL2kudGVzdCggdmFsdWUgKTtcbn0sICQudmFsaWRhdG9yLm1lc3NhZ2VzLnVybCApO1xuXG4vKipcbiAqIFJldHVybiB0cnVlLCBpZiB0aGUgdmFsdWUgaXMgYSB2YWxpZCB2ZWhpY2xlIGlkZW50aWZpY2F0aW9uIG51bWJlciAoVklOKS5cbiAqXG4gKiBXb3JrcyB3aXRoIGFsbCBraW5kIG9mIHRleHQgaW5wdXRzLlxuICpcbiAqIEBleGFtcGxlIDxpbnB1dCB0eXBlPVwidGV4dFwiIHNpemU9XCIyMFwiIG5hbWU9XCJWZWhpY2xlSURcIiBjbGFzcz1cIntyZXF1aXJlZDp0cnVlLHZpblVTOnRydWV9XCIgLz5cbiAqIEBkZXNjIERlY2xhcmVzIGEgcmVxdWlyZWQgaW5wdXQgZWxlbWVudCB3aG9zZSB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgdmVoaWNsZSBpZGVudGlmaWNhdGlvbiBudW1iZXIuXG4gKlxuICogQG5hbWUgJC52YWxpZGF0b3IubWV0aG9kcy52aW5VU1xuICogQHR5cGUgQm9vbGVhblxuICogQGNhdCBQbHVnaW5zL1ZhbGlkYXRlL01ldGhvZHNcbiAqL1xuJC52YWxpZGF0b3IuYWRkTWV0aG9kKCBcInZpblVTXCIsIGZ1bmN0aW9uKCB2ICkge1xuXHRpZiAoIHYubGVuZ3RoICE9PSAxNyApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHR2YXIgTEwgPSBbIFwiQVwiLCBcIkJcIiwgXCJDXCIsIFwiRFwiLCBcIkVcIiwgXCJGXCIsIFwiR1wiLCBcIkhcIiwgXCJKXCIsIFwiS1wiLCBcIkxcIiwgXCJNXCIsIFwiTlwiLCBcIlBcIiwgXCJSXCIsIFwiU1wiLCBcIlRcIiwgXCJVXCIsIFwiVlwiLCBcIldcIiwgXCJYXCIsIFwiWVwiLCBcIlpcIiBdLFxuXHRcdFZMID0gWyAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCAxLCAyLCAzLCA0LCA1LCA3LCA5LCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5IF0sXG5cdFx0RkwgPSBbIDgsIDcsIDYsIDUsIDQsIDMsIDIsIDEwLCAwLCA5LCA4LCA3LCA2LCA1LCA0LCAzLCAyIF0sXG5cdFx0cnMgPSAwLFxuXHRcdGksIG4sIGQsIGYsIGNkLCBjZHY7XG5cblx0Zm9yICggaSA9IDA7IGkgPCAxNzsgaSsrICkge1xuXHRcdGYgPSBGTFsgaSBdO1xuXHRcdGQgPSB2LnNsaWNlKCBpLCBpICsgMSApO1xuXHRcdGlmICggaSA9PT0gOCApIHtcblx0XHRcdGNkdiA9IGQ7XG5cdFx0fVxuXHRcdGlmICggIWlzTmFOKCBkICkgKSB7XG5cdFx0XHRkICo9IGY7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIG4gPSAwOyBuIDwgTEwubGVuZ3RoOyBuKysgKSB7XG5cdFx0XHRcdGlmICggZC50b1VwcGVyQ2FzZSgpID09PSBMTFsgbiBdICkge1xuXHRcdFx0XHRcdGQgPSBWTFsgbiBdO1xuXHRcdFx0XHRcdGQgKj0gZjtcblx0XHRcdFx0XHRpZiAoIGlzTmFOKCBjZHYgKSAmJiBuID09PSA4ICkge1xuXHRcdFx0XHRcdFx0Y2R2ID0gTExbIG4gXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cnMgKz0gZDtcblx0fVxuXHRjZCA9IHJzICUgMTE7XG5cdGlmICggY2QgPT09IDEwICkge1xuXHRcdGNkID0gXCJYXCI7XG5cdH1cblx0aWYgKCBjZCA9PT0gY2R2ICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cdHJldHVybiBmYWxzZTtcbn0sIFwiVGhlIHNwZWNpZmllZCB2ZWhpY2xlIGlkZW50aWZpY2F0aW9uIG51bWJlciAoVklOKSBpcyBpbnZhbGlkLlwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJ6aXBjb2RlVVNcIiwgZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkezV9KC1cXGR7NH0pPyQvLnRlc3QoIHZhbHVlICk7XG59LCBcIlRoZSBzcGVjaWZpZWQgVVMgWklQIENvZGUgaXMgaW52YWxpZFwiICk7XG5cbiQudmFsaWRhdG9yLmFkZE1ldGhvZCggXCJ6aXByYW5nZVwiLCBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL145MFsyLTVdXFxkXFx7MlxcfS1cXGR7NH0kLy50ZXN0KCB2YWx1ZSApO1xufSwgXCJZb3VyIFpJUC1jb2RlIG11c3QgYmUgaW4gdGhlIHJhbmdlIDkwMnh4LXh4eHggdG8gOTA1eHgteHh4eFwiICk7XG5yZXR1cm4gJDtcbn0pKTsiLCIvKiFcbiAqIGpRdWVyeSBWYWxpZGF0aW9uIFBsdWdpbiB2MS4xOS4xXG4gKlxuICogaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTkgSsO2cm4gWmFlZmZlcmVyXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqL1xuKGZ1bmN0aW9uKCBmYWN0b3J5ICkge1xuXHRpZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRcdGRlZmluZSggW1wianF1ZXJ5XCJdLCBmYWN0b3J5ICk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSggcmVxdWlyZSggXCJqcXVlcnlcIiApICk7XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggalF1ZXJ5ICk7XG5cdH1cbn0oZnVuY3Rpb24oICQgKSB7XG5cbiQuZXh0ZW5kKCAkLmZuLCB7XG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy92YWxpZGF0ZS9cblx0dmFsaWRhdGU6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgbm90aGluZyBpcyBzZWxlY3RlZCwgcmV0dXJuIG5vdGhpbmc7IGNhbid0IGNoYWluIGFueXdheVxuXHRcdGlmICggIXRoaXMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBvcHRpb25zICYmIG9wdGlvbnMuZGVidWcgJiYgd2luZG93LmNvbnNvbGUgKSB7XG5cdFx0XHRcdGNvbnNvbGUud2FybiggXCJOb3RoaW5nIHNlbGVjdGVkLCBjYW4ndCB2YWxpZGF0ZSwgcmV0dXJuaW5nIG5vdGhpbmcuXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBhIHZhbGlkYXRvciBmb3IgdGhpcyBmb3JtIHdhcyBhbHJlYWR5IGNyZWF0ZWRcblx0XHR2YXIgdmFsaWRhdG9yID0gJC5kYXRhKCB0aGlzWyAwIF0sIFwidmFsaWRhdG9yXCIgKTtcblx0XHRpZiAoIHZhbGlkYXRvciApIHtcblx0XHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIG5vdmFsaWRhdGUgdGFnIGlmIEhUTUw1LlxuXHRcdHRoaXMuYXR0ciggXCJub3ZhbGlkYXRlXCIsIFwibm92YWxpZGF0ZVwiICk7XG5cblx0XHR2YWxpZGF0b3IgPSBuZXcgJC52YWxpZGF0b3IoIG9wdGlvbnMsIHRoaXNbIDAgXSApO1xuXHRcdCQuZGF0YSggdGhpc1sgMCBdLCBcInZhbGlkYXRvclwiLCB2YWxpZGF0b3IgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLm9uc3VibWl0ICkge1xuXG5cdFx0XHR0aGlzLm9uKCBcImNsaWNrLnZhbGlkYXRlXCIsIFwiOnN1Ym1pdFwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gVHJhY2sgdGhlIHVzZWQgc3VibWl0IGJ1dHRvbiB0byBwcm9wZXJseSBoYW5kbGUgc2NyaXB0ZWRcblx0XHRcdFx0Ly8gc3VibWl0cyBsYXRlci5cblx0XHRcdFx0dmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XG5cblx0XHRcdFx0Ly8gQWxsb3cgc3VwcHJlc3NpbmcgdmFsaWRhdGlvbiBieSBhZGRpbmcgYSBjYW5jZWwgY2xhc3MgdG8gdGhlIHN1Ym1pdCBidXR0b25cblx0XHRcdFx0aWYgKCAkKCB0aGlzICkuaGFzQ2xhc3MoIFwiY2FuY2VsXCIgKSApIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuY2FuY2VsU3VibWl0ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFsbG93IHN1cHByZXNzaW5nIHZhbGlkYXRpb24gYnkgYWRkaW5nIHRoZSBodG1sNSBmb3Jtbm92YWxpZGF0ZSBhdHRyaWJ1dGUgdG8gdGhlIHN1Ym1pdCBidXR0b25cblx0XHRcdFx0aWYgKCAkKCB0aGlzICkuYXR0ciggXCJmb3Jtbm92YWxpZGF0ZVwiICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR2YWxpZGF0b3IuY2FuY2VsU3VibWl0ID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXG5cdFx0XHQvLyBWYWxpZGF0ZSB0aGUgZm9ybSBvbiBzdWJtaXRcblx0XHRcdHRoaXMub24oIFwic3VibWl0LnZhbGlkYXRlXCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0aWYgKCB2YWxpZGF0b3Iuc2V0dGluZ3MuZGVidWcgKSB7XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IGZvcm0gc3VibWl0IHRvIGJlIGFibGUgdG8gc2VlIGNvbnNvbGUgb3V0cHV0XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZ1bmN0aW9uIGhhbmRsZSgpIHtcblx0XHRcdFx0XHR2YXIgaGlkZGVuLCByZXN1bHQ7XG5cblx0XHRcdFx0XHQvLyBJbnNlcnQgYSBoaWRkZW4gaW5wdXQgYXMgYSByZXBsYWNlbWVudCBmb3IgdGhlIG1pc3Npbmcgc3VibWl0IGJ1dHRvblxuXHRcdFx0XHRcdC8vIFRoZSBoaWRkZW4gaW5wdXQgaXMgaW5zZXJ0ZWQgaW4gdHdvIGNhc2VzOlxuXHRcdFx0XHRcdC8vICAgLSBBIHVzZXIgZGVmaW5lZCBhIGBzdWJtaXRIYW5kbGVyYFxuXHRcdFx0XHRcdC8vICAgLSBUaGVyZSB3YXMgYSBwZW5kaW5nIHJlcXVlc3QgZHVlIHRvIGByZW1vdGVgIG1ldGhvZCBhbmQgYHN0b3BSZXF1ZXN0KClgXG5cdFx0XHRcdFx0Ly8gICAgIHdhcyBjYWxsZWQgdG8gc3VibWl0IHRoZSBmb3JtIGluIGNhc2UgaXQncyB2YWxpZFxuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiAmJiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyIHx8IHZhbGlkYXRvci5mb3JtU3VibWl0dGVkICkgKSB7XG5cdFx0XHRcdFx0XHRoaWRkZW4gPSAkKCBcIjxpbnB1dCB0eXBlPSdoaWRkZW4nLz5cIiApXG5cdFx0XHRcdFx0XHRcdC5hdHRyKCBcIm5hbWVcIiwgdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbi5uYW1lIClcblx0XHRcdFx0XHRcdFx0LnZhbCggJCggdmFsaWRhdG9yLnN1Ym1pdEJ1dHRvbiApLnZhbCgpIClcblx0XHRcdFx0XHRcdFx0LmFwcGVuZFRvKCB2YWxpZGF0b3IuY3VycmVudEZvcm0gKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoIHZhbGlkYXRvci5zZXR0aW5ncy5zdWJtaXRIYW5kbGVyICYmICF2YWxpZGF0b3Iuc2V0dGluZ3MuZGVidWcgKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB2YWxpZGF0b3Iuc2V0dGluZ3Muc3VibWl0SGFuZGxlci5jYWxsKCB2YWxpZGF0b3IsIHZhbGlkYXRvci5jdXJyZW50Rm9ybSwgZXZlbnQgKTtcblx0XHRcdFx0XHRcdGlmICggaGlkZGVuICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFuZCBjbGVhbiB1cCBhZnRlcndhcmRzOyB0aGFua3MgdG8gbm8tYmxvY2stc2NvcGUsIGhpZGRlbiBjYW4gYmUgcmVmZXJlbmNlZFxuXHRcdFx0XHRcdFx0XHRoaWRkZW4ucmVtb3ZlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIHJlc3VsdCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByZXZlbnQgc3VibWl0IGZvciBpbnZhbGlkIGZvcm1zIG9yIGN1c3RvbSBzdWJtaXQgaGFuZGxlcnNcblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuY2FuY2VsU3VibWl0ICkge1xuXHRcdFx0XHRcdHZhbGlkYXRvci5jYW5jZWxTdWJtaXQgPSBmYWxzZTtcblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB2YWxpZGF0b3IuZm9ybSgpICkge1xuXHRcdFx0XHRcdGlmICggdmFsaWRhdG9yLnBlbmRpbmdSZXF1ZXN0ICkge1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLmZvcm1TdWJtaXR0ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gaGFuZGxlKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFsaWRhdG9yLmZvY3VzSW52YWxpZCgpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWxpZGF0b3I7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy92YWxpZC9cblx0dmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2YWxpZCwgdmFsaWRhdG9yLCBlcnJvckxpc3Q7XG5cblx0XHRpZiAoICQoIHRoaXNbIDAgXSApLmlzKCBcImZvcm1cIiApICkge1xuXHRcdFx0dmFsaWQgPSB0aGlzLnZhbGlkYXRlKCkuZm9ybSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlcnJvckxpc3QgPSBbXTtcblx0XHRcdHZhbGlkID0gdHJ1ZTtcblx0XHRcdHZhbGlkYXRvciA9ICQoIHRoaXNbIDAgXS5mb3JtICkudmFsaWRhdGUoKTtcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhbGlkID0gdmFsaWRhdG9yLmVsZW1lbnQoIHRoaXMgKSAmJiB2YWxpZDtcblx0XHRcdFx0aWYgKCAhdmFsaWQgKSB7XG5cdFx0XHRcdFx0ZXJyb3JMaXN0ID0gZXJyb3JMaXN0LmNvbmNhdCggdmFsaWRhdG9yLmVycm9yTGlzdCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0XHR2YWxpZGF0b3IuZXJyb3JMaXN0ID0gZXJyb3JMaXN0O1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsaWQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9ydWxlcy9cblx0cnVsZXM6IGZ1bmN0aW9uKCBjb21tYW5kLCBhcmd1bWVudCApIHtcblx0XHR2YXIgZWxlbWVudCA9IHRoaXNbIDAgXSxcblx0XHRcdGlzQ29udGVudEVkaXRhYmxlID0gdHlwZW9mIHRoaXMuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcImZhbHNlXCIsXG5cdFx0XHRzZXR0aW5ncywgc3RhdGljUnVsZXMsIGV4aXN0aW5nUnVsZXMsIGRhdGEsIHBhcmFtLCBmaWx0ZXJlZDtcblxuXHRcdC8vIElmIG5vdGhpbmcgaXMgc2VsZWN0ZWQsIHJldHVybiBlbXB0eSBvYmplY3Q7IGNhbid0IGNoYWluIGFueXdheVxuXHRcdGlmICggZWxlbWVudCA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggIWVsZW1lbnQuZm9ybSAmJiBpc0NvbnRlbnRFZGl0YWJsZSApIHtcblx0XHRcdGVsZW1lbnQuZm9ybSA9IHRoaXMuY2xvc2VzdCggXCJmb3JtXCIgKVsgMCBdO1xuXHRcdFx0ZWxlbWVudC5uYW1lID0gdGhpcy5hdHRyKCBcIm5hbWVcIiApO1xuXHRcdH1cblxuXHRcdGlmICggZWxlbWVudC5mb3JtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBjb21tYW5kICkge1xuXHRcdFx0c2V0dGluZ3MgPSAkLmRhdGEoIGVsZW1lbnQuZm9ybSwgXCJ2YWxpZGF0b3JcIiApLnNldHRpbmdzO1xuXHRcdFx0c3RhdGljUnVsZXMgPSBzZXR0aW5ncy5ydWxlcztcblx0XHRcdGV4aXN0aW5nUnVsZXMgPSAkLnZhbGlkYXRvci5zdGF0aWNSdWxlcyggZWxlbWVudCApO1xuXHRcdFx0c3dpdGNoICggY29tbWFuZCApIHtcblx0XHRcdGNhc2UgXCJhZGRcIjpcblx0XHRcdFx0JC5leHRlbmQoIGV4aXN0aW5nUnVsZXMsICQudmFsaWRhdG9yLm5vcm1hbGl6ZVJ1bGUoIGFyZ3VtZW50ICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgbWVzc2FnZXMgZnJvbSBydWxlcywgYnV0IGFsbG93IHRoZW0gdG8gYmUgc2V0IHNlcGFyYXRlbHlcblx0XHRcdFx0ZGVsZXRlIGV4aXN0aW5nUnVsZXMubWVzc2FnZXM7XG5cdFx0XHRcdHN0YXRpY1J1bGVzWyBlbGVtZW50Lm5hbWUgXSA9IGV4aXN0aW5nUnVsZXM7XG5cdFx0XHRcdGlmICggYXJndW1lbnQubWVzc2FnZXMgKSB7XG5cdFx0XHRcdFx0c2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdID0gJC5leHRlbmQoIHNldHRpbmdzLm1lc3NhZ2VzWyBlbGVtZW50Lm5hbWUgXSwgYXJndW1lbnQubWVzc2FnZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgXCJyZW1vdmVcIjpcblx0XHRcdFx0aWYgKCAhYXJndW1lbnQgKSB7XG5cdFx0XHRcdFx0ZGVsZXRlIHN0YXRpY1J1bGVzWyBlbGVtZW50Lm5hbWUgXTtcblx0XHRcdFx0XHRyZXR1cm4gZXhpc3RpbmdSdWxlcztcblx0XHRcdFx0fVxuXHRcdFx0XHRmaWx0ZXJlZCA9IHt9O1xuXHRcdFx0XHQkLmVhY2goIGFyZ3VtZW50LnNwbGl0KCAvXFxzLyApLCBmdW5jdGlvbiggaW5kZXgsIG1ldGhvZCApIHtcblx0XHRcdFx0XHRmaWx0ZXJlZFsgbWV0aG9kIF0gPSBleGlzdGluZ1J1bGVzWyBtZXRob2QgXTtcblx0XHRcdFx0XHRkZWxldGUgZXhpc3RpbmdSdWxlc1sgbWV0aG9kIF07XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIGZpbHRlcmVkO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGRhdGEgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlcyhcblx0XHQkLmV4dGVuZChcblx0XHRcdHt9LFxuXHRcdFx0JC52YWxpZGF0b3IuY2xhc3NSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3IuYXR0cmlidXRlUnVsZXMoIGVsZW1lbnQgKSxcblx0XHRcdCQudmFsaWRhdG9yLmRhdGFSdWxlcyggZWxlbWVudCApLFxuXHRcdFx0JC52YWxpZGF0b3Iuc3RhdGljUnVsZXMoIGVsZW1lbnQgKVxuXHRcdCksIGVsZW1lbnQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSByZXF1aXJlZCBpcyBhdCBmcm9udFxuXHRcdGlmICggZGF0YS5yZXF1aXJlZCApIHtcblx0XHRcdHBhcmFtID0gZGF0YS5yZXF1aXJlZDtcblx0XHRcdGRlbGV0ZSBkYXRhLnJlcXVpcmVkO1xuXHRcdFx0ZGF0YSA9ICQuZXh0ZW5kKCB7IHJlcXVpcmVkOiBwYXJhbSB9LCBkYXRhICk7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHJlbW90ZSBpcyBhdCBiYWNrXG5cdFx0aWYgKCBkYXRhLnJlbW90ZSApIHtcblx0XHRcdHBhcmFtID0gZGF0YS5yZW1vdGU7XG5cdFx0XHRkZWxldGUgZGF0YS5yZW1vdGU7XG5cdFx0XHRkYXRhID0gJC5leHRlbmQoIGRhdGEsIHsgcmVtb3RlOiBwYXJhbSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cbn0gKTtcblxuLy8gQ3VzdG9tIHNlbGVjdG9yc1xuJC5leHRlbmQoICQuZXhwci5wc2V1ZG9zIHx8ICQuZXhwclsgXCI6XCIgXSwge1x0XHQvLyAnfHwgJC5leHByWyBcIjpcIiBdJyBoZXJlIGVuYWJsZXMgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgdG8galF1ZXJ5IDEuNy4gQ2FuIGJlIHJlbW92ZWQgd2hlbiBkcm9wcGluZyBqUSAxLjcueCBzdXBwb3J0XG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9ibGFuay1zZWxlY3Rvci9cblx0Ymxhbms6IGZ1bmN0aW9uKCBhICkge1xuXHRcdHJldHVybiAhJC50cmltKCBcIlwiICsgJCggYSApLnZhbCgpICk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9maWxsZWQtc2VsZWN0b3IvXG5cdGZpbGxlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0dmFyIHZhbCA9ICQoIGEgKS52YWwoKTtcblx0XHRyZXR1cm4gdmFsICE9PSBudWxsICYmICEhJC50cmltKCBcIlwiICsgdmFsICk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy91bmNoZWNrZWQtc2VsZWN0b3IvXG5cdHVuY2hlY2tlZDogZnVuY3Rpb24oIGEgKSB7XG5cdFx0cmV0dXJuICEkKCBhICkucHJvcCggXCJjaGVja2VkXCIgKTtcblx0fVxufSApO1xuXG4vLyBDb25zdHJ1Y3RvciBmb3IgdmFsaWRhdG9yXG4kLnZhbGlkYXRvciA9IGZ1bmN0aW9uKCBvcHRpb25zLCBmb3JtICkge1xuXHR0aGlzLnNldHRpbmdzID0gJC5leHRlbmQoIHRydWUsIHt9LCAkLnZhbGlkYXRvci5kZWZhdWx0cywgb3B0aW9ucyApO1xuXHR0aGlzLmN1cnJlbnRGb3JtID0gZm9ybTtcblx0dGhpcy5pbml0KCk7XG59O1xuXG4vLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuZm9ybWF0L1xuJC52YWxpZGF0b3IuZm9ybWF0ID0gZnVuY3Rpb24oIHNvdXJjZSwgcGFyYW1zICkge1xuXHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGFyZ3MgPSAkLm1ha2VBcnJheSggYXJndW1lbnRzICk7XG5cdFx0XHRhcmdzLnVuc2hpZnQoIHNvdXJjZSApO1xuXHRcdFx0cmV0dXJuICQudmFsaWRhdG9yLmZvcm1hdC5hcHBseSggdGhpcywgYXJncyApO1xuXHRcdH07XG5cdH1cblx0aWYgKCBwYXJhbXMgPT09IHVuZGVmaW5lZCApIHtcblx0XHRyZXR1cm4gc291cmNlO1xuXHR9XG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgcGFyYW1zLmNvbnN0cnVjdG9yICE9PSBBcnJheSAgKSB7XG5cdFx0cGFyYW1zID0gJC5tYWtlQXJyYXkoIGFyZ3VtZW50cyApLnNsaWNlKCAxICk7XG5cdH1cblx0aWYgKCBwYXJhbXMuY29uc3RydWN0b3IgIT09IEFycmF5ICkge1xuXHRcdHBhcmFtcyA9IFsgcGFyYW1zIF07XG5cdH1cblx0JC5lYWNoKCBwYXJhbXMsIGZ1bmN0aW9uKCBpLCBuICkge1xuXHRcdHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKCBuZXcgUmVnRXhwKCBcIlxcXFx7XCIgKyBpICsgXCJcXFxcfVwiLCBcImdcIiApLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBuO1xuXHRcdH0gKTtcblx0fSApO1xuXHRyZXR1cm4gc291cmNlO1xufTtcblxuJC5leHRlbmQoICQudmFsaWRhdG9yLCB7XG5cblx0ZGVmYXVsdHM6IHtcblx0XHRtZXNzYWdlczoge30sXG5cdFx0Z3JvdXBzOiB7fSxcblx0XHRydWxlczoge30sXG5cdFx0ZXJyb3JDbGFzczogXCJlcnJvclwiLFxuXHRcdHBlbmRpbmdDbGFzczogXCJwZW5kaW5nXCIsXG5cdFx0dmFsaWRDbGFzczogXCJ2YWxpZFwiLFxuXHRcdGVycm9yRWxlbWVudDogXCJsYWJlbFwiLFxuXHRcdGZvY3VzQ2xlYW51cDogZmFsc2UsXG5cdFx0Zm9jdXNJbnZhbGlkOiB0cnVlLFxuXHRcdGVycm9yQ29udGFpbmVyOiAkKCBbXSApLFxuXHRcdGVycm9yTGFiZWxDb250YWluZXI6ICQoIFtdICksXG5cdFx0b25zdWJtaXQ6IHRydWUsXG5cdFx0aWdub3JlOiBcIjpoaWRkZW5cIixcblx0XHRpZ25vcmVUaXRsZTogZmFsc2UsXG5cdFx0b25mb2N1c2luOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMubGFzdEFjdGl2ZSA9IGVsZW1lbnQ7XG5cblx0XHRcdC8vIEhpZGUgZXJyb3IgbGFiZWwgYW5kIHJlbW92ZSBlcnJvciBjbGFzcyBvbiBmb2N1cyBpZiBlbmFibGVkXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuZm9jdXNDbGVhbnVwICkge1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlbGVtZW50LCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MsIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuaGlkZVRoZXNlKCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvbmZvY3Vzb3V0OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdGlmICggIXRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgJiYgKCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgfHwgIXRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSApICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9ua2V5dXA6IGZ1bmN0aW9uKCBlbGVtZW50LCBldmVudCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgcmV2YWxpZGF0ZSB0aGUgZmllbGQgd2hlbiBwcmVzc2luZyBvbmUgb2YgdGhlIGZvbGxvd2luZyBrZXlzXG5cdFx0XHQvLyBTaGlmdCAgICAgICA9PiAxNlxuXHRcdFx0Ly8gQ3RybCAgICAgICAgPT4gMTdcblx0XHRcdC8vIEFsdCAgICAgICAgID0+IDE4XG5cdFx0XHQvLyBDYXBzIGxvY2sgICA9PiAyMFxuXHRcdFx0Ly8gRW5kICAgICAgICAgPT4gMzVcblx0XHRcdC8vIEhvbWUgICAgICAgID0+IDM2XG5cdFx0XHQvLyBMZWZ0IGFycm93ICA9PiAzN1xuXHRcdFx0Ly8gVXAgYXJyb3cgICAgPT4gMzhcblx0XHRcdC8vIFJpZ2h0IGFycm93ID0+IDM5XG5cdFx0XHQvLyBEb3duIGFycm93ICA9PiA0MFxuXHRcdFx0Ly8gSW5zZXJ0ICAgICAgPT4gNDVcblx0XHRcdC8vIE51bSBsb2NrICAgID0+IDE0NFxuXHRcdFx0Ly8gQWx0R3Iga2V5ICAgPT4gMjI1XG5cdFx0XHR2YXIgZXhjbHVkZWRLZXlzID0gW1xuXHRcdFx0XHQxNiwgMTcsIDE4LCAyMCwgMzUsIDM2LCAzNyxcblx0XHRcdFx0MzgsIDM5LCA0MCwgNDUsIDE0NCwgMjI1XG5cdFx0XHRdO1xuXG5cdFx0XHRpZiAoIGV2ZW50LndoaWNoID09PSA5ICYmIHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICkgPT09IFwiXCIgfHwgJC5pbkFycmF5KCBldmVudC5rZXlDb2RlLCBleGNsdWRlZEtleXMgKSAhPT0gLTEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW1lbnQubmFtZSBpbiB0aGlzLnN1Ym1pdHRlZCB8fCBlbGVtZW50Lm5hbWUgaW4gdGhpcy5pbnZhbGlkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdG9uY2xpY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBDbGljayBvbiBzZWxlY3RzLCByYWRpb2J1dHRvbnMgYW5kIGNoZWNrYm94ZXNcblx0XHRcdGlmICggZWxlbWVudC5uYW1lIGluIHRoaXMuc3VibWl0dGVkICkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQoIGVsZW1lbnQgKTtcblxuXHRcdFx0Ly8gT3Igb3B0aW9uIGVsZW1lbnRzLCBjaGVjayBwYXJlbnQgc2VsZWN0IGluIHRoYXQgY2FzZVxuXHRcdFx0fSBlbHNlIGlmICggZWxlbWVudC5wYXJlbnROb2RlLm5hbWUgaW4gdGhpcy5zdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdHRoaXMuZWxlbWVudCggZWxlbWVudC5wYXJlbnROb2RlICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRoaWdobGlnaHQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzICkge1xuXHRcdFx0aWYgKCBlbGVtZW50LnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5hZGRDbGFzcyggZXJyb3JDbGFzcyApLnJlbW92ZUNsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYWRkQ2xhc3MoIGVycm9yQ2xhc3MgKS5yZW1vdmVDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dW5oaWdobGlnaHQ6IGZ1bmN0aW9uKCBlbGVtZW50LCBlcnJvckNsYXNzLCB2YWxpZENsYXNzICkge1xuXHRcdFx0aWYgKCBlbGVtZW50LnR5cGUgPT09IFwicmFkaW9cIiApIHtcblx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5yZW1vdmVDbGFzcyggZXJyb3JDbGFzcyApLmFkZENsYXNzKCB2YWxpZENsYXNzICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIGVycm9yQ2xhc3MgKS5hZGRDbGFzcyggdmFsaWRDbGFzcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3Iuc2V0RGVmYXVsdHMvXG5cdHNldERlZmF1bHRzOiBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0JC5leHRlbmQoICQudmFsaWRhdG9yLmRlZmF1bHRzLCBzZXR0aW5ncyApO1xuXHR9LFxuXG5cdG1lc3NhZ2VzOiB7XG5cdFx0cmVxdWlyZWQ6IFwiVGhpcyBmaWVsZCBpcyByZXF1aXJlZC5cIixcblx0XHRyZW1vdGU6IFwiUGxlYXNlIGZpeCB0aGlzIGZpZWxkLlwiLFxuXHRcdGVtYWlsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsIGFkZHJlc3MuXCIsXG5cdFx0dXJsOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIFVSTC5cIixcblx0XHRkYXRlOiBcIlBsZWFzZSBlbnRlciBhIHZhbGlkIGRhdGUuXCIsXG5cdFx0ZGF0ZUlTTzogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBkYXRlIChJU08pLlwiLFxuXHRcdG51bWJlcjogXCJQbGVhc2UgZW50ZXIgYSB2YWxpZCBudW1iZXIuXCIsXG5cdFx0ZGlnaXRzOiBcIlBsZWFzZSBlbnRlciBvbmx5IGRpZ2l0cy5cIixcblx0XHRlcXVhbFRvOiBcIlBsZWFzZSBlbnRlciB0aGUgc2FtZSB2YWx1ZSBhZ2Fpbi5cIixcblx0XHRtYXhsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgbm8gbW9yZSB0aGFuIHswfSBjaGFyYWN0ZXJzLlwiICksXG5cdFx0bWlubGVuZ3RoOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGF0IGxlYXN0IHswfSBjaGFyYWN0ZXJzLlwiICksXG5cdFx0cmFuZ2VsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBiZXR3ZWVuIHswfSBhbmQgezF9IGNoYXJhY3RlcnMgbG9uZy5cIiApLFxuXHRcdHJhbmdlOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwiUGxlYXNlIGVudGVyIGEgdmFsdWUgYmV0d2VlbiB7MH0gYW5kIHsxfS5cIiApLFxuXHRcdG1heDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIHZhbHVlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB7MH0uXCIgKSxcblx0XHRtaW46ICQudmFsaWRhdG9yLmZvcm1hdCggXCJQbGVhc2UgZW50ZXIgYSB2YWx1ZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gezB9LlwiICksXG5cdFx0c3RlcDogJC52YWxpZGF0b3IuZm9ybWF0KCBcIlBsZWFzZSBlbnRlciBhIG11bHRpcGxlIG9mIHswfS5cIiApXG5cdH0sXG5cblx0YXV0b0NyZWF0ZVJhbmdlczogZmFsc2UsXG5cblx0cHJvdG90eXBlOiB7XG5cblx0XHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubGFiZWxDb250YWluZXIgPSAkKCB0aGlzLnNldHRpbmdzLmVycm9yTGFiZWxDb250YWluZXIgKTtcblx0XHRcdHRoaXMuZXJyb3JDb250ZXh0ID0gdGhpcy5sYWJlbENvbnRhaW5lci5sZW5ndGggJiYgdGhpcy5sYWJlbENvbnRhaW5lciB8fCAkKCB0aGlzLmN1cnJlbnRGb3JtICk7XG5cdFx0XHR0aGlzLmNvbnRhaW5lcnMgPSAkKCB0aGlzLnNldHRpbmdzLmVycm9yQ29udGFpbmVyICkuYWRkKCB0aGlzLnNldHRpbmdzLmVycm9yTGFiZWxDb250YWluZXIgKTtcblx0XHRcdHRoaXMuc3VibWl0dGVkID0ge307XG5cdFx0XHR0aGlzLnZhbHVlQ2FjaGUgPSB7fTtcblx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0dGhpcy5wZW5kaW5nID0ge307XG5cdFx0XHR0aGlzLmludmFsaWQgPSB7fTtcblx0XHRcdHRoaXMucmVzZXQoKTtcblxuXHRcdFx0dmFyIGN1cnJlbnRGb3JtID0gdGhpcy5jdXJyZW50Rm9ybSxcblx0XHRcdFx0Z3JvdXBzID0gKCB0aGlzLmdyb3VwcyA9IHt9ICksXG5cdFx0XHRcdHJ1bGVzO1xuXHRcdFx0JC5lYWNoKCB0aGlzLnNldHRpbmdzLmdyb3VwcywgZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHZhbHVlID0gdmFsdWUuc3BsaXQoIC9cXHMvICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JC5lYWNoKCB2YWx1ZSwgZnVuY3Rpb24oIGluZGV4LCBuYW1lICkge1xuXHRcdFx0XHRcdGdyb3Vwc1sgbmFtZSBdID0ga2V5O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9ICk7XG5cdFx0XHRydWxlcyA9IHRoaXMuc2V0dGluZ3MucnVsZXM7XG5cdFx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0cnVsZXNbIGtleSBdID0gJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggdmFsdWUgKTtcblx0XHRcdH0gKTtcblxuXHRcdFx0ZnVuY3Rpb24gZGVsZWdhdGUoIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgaXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgJCggdGhpcyApLmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJ1bmRlZmluZWRcIiAmJiAkKCB0aGlzICkuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcImZhbHNlXCI7XG5cblx0XHRcdFx0Ly8gU2V0IGZvcm0gZXhwYW5kbyBvbiBjb250ZW50ZWRpdGFibGVcblx0XHRcdFx0aWYgKCAhdGhpcy5mb3JtICYmIGlzQ29udGVudEVkaXRhYmxlICkge1xuXHRcdFx0XHRcdHRoaXMuZm9ybSA9ICQoIHRoaXMgKS5jbG9zZXN0KCBcImZvcm1cIiApWyAwIF07XG5cdFx0XHRcdFx0dGhpcy5uYW1lID0gJCggdGhpcyApLmF0dHIoIFwibmFtZVwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZ25vcmUgdGhlIGVsZW1lbnQgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIGZvcm0uIFRoaXMgd2lsbCBoYXBwZW4gbWFpbmx5XG5cdFx0XHRcdC8vIHdoZW4gc2V0dGluZyB0aGUgYGZvcm1gIGF0dHJpYnV0ZSBvZiBhbiBpbnB1dCB0byB0aGUgaWQgb2YgYW5vdGhlciBmb3JtLlxuXHRcdFx0XHRpZiAoIGN1cnJlbnRGb3JtICE9PSB0aGlzLmZvcm0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHZhbGlkYXRvciA9ICQuZGF0YSggdGhpcy5mb3JtLCBcInZhbGlkYXRvclwiICksXG5cdFx0XHRcdFx0ZXZlbnRUeXBlID0gXCJvblwiICsgZXZlbnQudHlwZS5yZXBsYWNlKCAvXnZhbGlkYXRlLywgXCJcIiApLFxuXHRcdFx0XHRcdHNldHRpbmdzID0gdmFsaWRhdG9yLnNldHRpbmdzO1xuXHRcdFx0XHRpZiAoIHNldHRpbmdzWyBldmVudFR5cGUgXSAmJiAhJCggdGhpcyApLmlzKCBzZXR0aW5ncy5pZ25vcmUgKSApIHtcblx0XHRcdFx0XHRzZXR0aW5nc1sgZXZlbnRUeXBlIF0uY2FsbCggdmFsaWRhdG9yLCB0aGlzLCBldmVudCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0XHQub24oIFwiZm9jdXNpbi52YWxpZGF0ZSBmb2N1c291dC52YWxpZGF0ZSBrZXl1cC52YWxpZGF0ZVwiLFxuXHRcdFx0XHRcdFwiOnRleHQsIFt0eXBlPSdwYXNzd29yZCddLCBbdHlwZT0nZmlsZSddLCBzZWxlY3QsIHRleHRhcmVhLCBbdHlwZT0nbnVtYmVyJ10sIFt0eXBlPSdzZWFyY2gnXSwgXCIgK1xuXHRcdFx0XHRcdFwiW3R5cGU9J3RlbCddLCBbdHlwZT0ndXJsJ10sIFt0eXBlPSdlbWFpbCddLCBbdHlwZT0nZGF0ZXRpbWUnXSwgW3R5cGU9J2RhdGUnXSwgW3R5cGU9J21vbnRoJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSd3ZWVrJ10sIFt0eXBlPSd0aW1lJ10sIFt0eXBlPSdkYXRldGltZS1sb2NhbCddLCBbdHlwZT0ncmFuZ2UnXSwgW3R5cGU9J2NvbG9yJ10sIFwiICtcblx0XHRcdFx0XHRcIlt0eXBlPSdyYWRpbyddLCBbdHlwZT0nY2hlY2tib3gnXSwgW2NvbnRlbnRlZGl0YWJsZV0sIFt0eXBlPSdidXR0b24nXVwiLCBkZWxlZ2F0ZSApXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lLCBvbGRJRVxuXHRcdFx0XHQvLyBcInNlbGVjdFwiIGlzIHByb3ZpZGVkIGFzIGV2ZW50LnRhcmdldCB3aGVuIGNsaWNraW5nIGEgb3B0aW9uXG5cdFx0XHRcdC5vbiggXCJjbGljay52YWxpZGF0ZVwiLCBcInNlbGVjdCwgb3B0aW9uLCBbdHlwZT0ncmFkaW8nXSwgW3R5cGU9J2NoZWNrYm94J11cIiwgZGVsZWdhdGUgKTtcblxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmludmFsaWRIYW5kbGVyICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkub24oIFwiaW52YWxpZC1mb3JtLnZhbGlkYXRlXCIsIHRoaXMuc2V0dGluZ3MuaW52YWxpZEhhbmRsZXIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IuZm9ybS9cblx0XHRmb3JtOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuY2hlY2tGb3JtKCk7XG5cdFx0XHQkLmV4dGVuZCggdGhpcy5zdWJtaXR0ZWQsIHRoaXMuZXJyb3JNYXAgKTtcblx0XHRcdHRoaXMuaW52YWxpZCA9ICQuZXh0ZW5kKCB7fSwgdGhpcy5lcnJvck1hcCApO1xuXHRcdFx0aWYgKCAhdGhpcy52YWxpZCgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkudHJpZ2dlckhhbmRsZXIoIFwiaW52YWxpZC1mb3JtXCIsIFsgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnNob3dFcnJvcnMoKTtcblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdGNoZWNrRm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnByZXBhcmVGb3JtKCk7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDAsIGVsZW1lbnRzID0gKCB0aGlzLmN1cnJlbnRFbGVtZW50cyA9IHRoaXMuZWxlbWVudHMoKSApOyBlbGVtZW50c1sgaSBdOyBpKysgKSB7XG5cdFx0XHRcdHRoaXMuY2hlY2soIGVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLnZhbGlkKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLmVsZW1lbnQvXG5cdFx0ZWxlbWVudDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgY2xlYW5FbGVtZW50ID0gdGhpcy5jbGVhbiggZWxlbWVudCApLFxuXHRcdFx0XHRjaGVja0VsZW1lbnQgPSB0aGlzLnZhbGlkYXRpb25UYXJnZXRGb3IoIGNsZWFuRWxlbWVudCApLFxuXHRcdFx0XHR2ID0gdGhpcyxcblx0XHRcdFx0cmVzdWx0ID0gdHJ1ZSxcblx0XHRcdFx0cnMsIGdyb3VwO1xuXG5cdFx0XHRpZiAoIGNoZWNrRWxlbWVudCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5pbnZhbGlkWyBjbGVhbkVsZW1lbnQubmFtZSBdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5wcmVwYXJlRWxlbWVudCggY2hlY2tFbGVtZW50ICk7XG5cdFx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggY2hlY2tFbGVtZW50ICk7XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBlbGVtZW50IGlzIGdyb3VwZWQsIHRoZW4gdmFsaWRhdGUgYWxsIGdyb3VwIGVsZW1lbnRzIGFscmVhZHlcblx0XHRcdFx0Ly8gY29udGFpbmluZyBhIHZhbHVlXG5cdFx0XHRcdGdyb3VwID0gdGhpcy5ncm91cHNbIGNoZWNrRWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdGlmICggZ3JvdXAgKSB7XG5cdFx0XHRcdFx0JC5lYWNoKCB0aGlzLmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdGlmICggdGVzdGdyb3VwID09PSBncm91cCAmJiBuYW1lICE9PSBjaGVja0VsZW1lbnQubmFtZSApIHtcblx0XHRcdFx0XHRcdFx0Y2xlYW5FbGVtZW50ID0gdi52YWxpZGF0aW9uVGFyZ2V0Rm9yKCB2LmNsZWFuKCB2LmZpbmRCeU5hbWUoIG5hbWUgKSApICk7XG5cdFx0XHRcdFx0XHRcdGlmICggY2xlYW5FbGVtZW50ICYmIGNsZWFuRWxlbWVudC5uYW1lIGluIHYuaW52YWxpZCApIHtcblx0XHRcdFx0XHRcdFx0XHR2LmN1cnJlbnRFbGVtZW50cy5wdXNoKCBjbGVhbkVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHQgPSB2LmNoZWNrKCBjbGVhbkVsZW1lbnQgKSAmJiByZXN1bHQ7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRycyA9IHRoaXMuY2hlY2soIGNoZWNrRWxlbWVudCApICE9PSBmYWxzZTtcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0ICYmIHJzO1xuXHRcdFx0XHRpZiAoIHJzICkge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuaW52YWxpZFsgY2hlY2tFbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoICF0aGlzLm51bWJlck9mSW52YWxpZHMoKSApIHtcblxuXHRcdFx0XHRcdC8vIEhpZGUgZXJyb3IgY29udGFpbmVycyBvbiBsYXN0IGVycm9yXG5cdFx0XHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5hZGQoIHRoaXMuY29udGFpbmVycyApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc2hvd0Vycm9ycygpO1xuXG5cdFx0XHRcdC8vIEFkZCBhcmlhLWludmFsaWQgc3RhdHVzIGZvciBzY3JlZW4gcmVhZGVyc1xuXHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWludmFsaWRcIiwgIXJzICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvVmFsaWRhdG9yLnNob3dFcnJvcnMvXG5cdFx0c2hvd0Vycm9yczogZnVuY3Rpb24oIGVycm9ycyApIHtcblx0XHRcdGlmICggZXJyb3JzICkge1xuXHRcdFx0XHR2YXIgdmFsaWRhdG9yID0gdGhpcztcblxuXHRcdFx0XHQvLyBBZGQgaXRlbXMgdG8gZXJyb3IgbGlzdCBhbmQgbWFwXG5cdFx0XHRcdCQuZXh0ZW5kKCB0aGlzLmVycm9yTWFwLCBlcnJvcnMgKTtcblx0XHRcdFx0dGhpcy5lcnJvckxpc3QgPSAkLm1hcCggdGhpcy5lcnJvck1hcCwgZnVuY3Rpb24oIG1lc3NhZ2UsIG5hbWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdG1lc3NhZ2U6IG1lc3NhZ2UsXG5cdFx0XHRcdFx0XHRlbGVtZW50OiB2YWxpZGF0b3IuZmluZEJ5TmFtZSggbmFtZSApWyAwIF1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIGl0ZW1zIGZyb20gc3VjY2VzcyBsaXN0XG5cdFx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSAkLmdyZXAoIHRoaXMuc3VjY2Vzc0xpc3QsIGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0XHRcdHJldHVybiAhKCBlbGVtZW50Lm5hbWUgaW4gZXJyb3JzICk7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5zaG93RXJyb3JzICkge1xuXHRcdFx0XHR0aGlzLnNldHRpbmdzLnNob3dFcnJvcnMuY2FsbCggdGhpcywgdGhpcy5lcnJvck1hcCwgdGhpcy5lcnJvckxpc3QgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZGVmYXVsdFNob3dFcnJvcnMoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9WYWxpZGF0b3IucmVzZXRGb3JtL1xuXHRcdHJlc2V0Rm9ybTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICQuZm4ucmVzZXRGb3JtICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkucmVzZXRGb3JtKCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmludmFsaWQgPSB7fTtcblx0XHRcdHRoaXMuc3VibWl0dGVkID0ge307XG5cdFx0XHR0aGlzLnByZXBhcmVGb3JtKCk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHMoKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJwcmV2aW91c1ZhbHVlXCIgKVxuXHRcdFx0XHQucmVtb3ZlQXR0ciggXCJhcmlhLWludmFsaWRcIiApO1xuXG5cdFx0XHR0aGlzLnJlc2V0RWxlbWVudHMoIGVsZW1lbnRzICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0RWxlbWVudHM6IGZ1bmN0aW9uKCBlbGVtZW50cyApIHtcblx0XHRcdHZhciBpO1xuXG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBlbGVtZW50c1sgaSBdOyBpKysgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy51bmhpZ2hsaWdodC5jYWxsKCB0aGlzLCBlbGVtZW50c1sgaSBdLFxuXHRcdFx0XHRcdFx0dGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCBcIlwiICk7XG5cdFx0XHRcdFx0dGhpcy5maW5kQnlOYW1lKCBlbGVtZW50c1sgaSBdLm5hbWUgKS5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRzXG5cdFx0XHRcdFx0LnJlbW92ZUNsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdG51bWJlck9mSW52YWxpZHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMub2JqZWN0TGVuZ3RoKCB0aGlzLmludmFsaWQgKTtcblx0XHR9LFxuXG5cdFx0b2JqZWN0TGVuZ3RoOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0LyoganNoaW50IHVudXNlZDogZmFsc2UgKi9cblx0XHRcdHZhciBjb3VudCA9IDAsXG5cdFx0XHRcdGk7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblxuXHRcdFx0XHQvLyBUaGlzIGNoZWNrIGFsbG93cyBjb3VudGluZyBlbGVtZW50cyB3aXRoIGVtcHR5IGVycm9yXG5cdFx0XHRcdC8vIG1lc3NhZ2UgYXMgaW52YWxpZCBlbGVtZW50c1xuXHRcdFx0XHRpZiAoIG9ialsgaSBdICE9PSB1bmRlZmluZWQgJiYgb2JqWyBpIF0gIT09IG51bGwgJiYgb2JqWyBpIF0gIT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBjb3VudDtcblx0XHR9LFxuXG5cdFx0aGlkZUVycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmhpZGVUaGVzZSggdGhpcy50b0hpZGUgKTtcblx0XHR9LFxuXG5cdFx0aGlkZVRoZXNlOiBmdW5jdGlvbiggZXJyb3JzICkge1xuXHRcdFx0ZXJyb3JzLm5vdCggdGhpcy5jb250YWluZXJzICkudGV4dCggXCJcIiApO1xuXHRcdFx0dGhpcy5hZGRXcmFwcGVyKCBlcnJvcnMgKS5oaWRlKCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLnNpemUoKSA9PT0gMDtcblx0XHR9LFxuXG5cdFx0c2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lcnJvckxpc3QubGVuZ3RoO1xuXHRcdH0sXG5cblx0XHRmb2N1c0ludmFsaWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmZvY3VzSW52YWxpZCApIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQkKCB0aGlzLmZpbmRMYXN0QWN0aXZlKCkgfHwgdGhpcy5lcnJvckxpc3QubGVuZ3RoICYmIHRoaXMuZXJyb3JMaXN0WyAwIF0uZWxlbWVudCB8fCBbXSApXG5cdFx0XHRcdFx0LmZpbHRlciggXCI6dmlzaWJsZVwiIClcblx0XHRcdFx0XHQudHJpZ2dlciggXCJmb2N1c1wiIClcblxuXHRcdFx0XHRcdC8vIE1hbnVhbGx5IHRyaWdnZXIgZm9jdXNpbiBldmVudDsgd2l0aG91dCBpdCwgZm9jdXNpbiBoYW5kbGVyIGlzbid0IGNhbGxlZCwgZmluZExhc3RBY3RpdmUgd29uJ3QgaGF2ZSBhbnl0aGluZyB0byBmaW5kXG5cdFx0XHRcdFx0LnRyaWdnZXIoIFwiZm9jdXNpblwiICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gSWdub3JlIElFIHRocm93aW5nIGVycm9ycyB3aGVuIGZvY3VzaW5nIGhpZGRlbiBlbGVtZW50c1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGZpbmRMYXN0QWN0aXZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBsYXN0QWN0aXZlID0gdGhpcy5sYXN0QWN0aXZlO1xuXHRcdFx0cmV0dXJuIGxhc3RBY3RpdmUgJiYgJC5ncmVwKCB0aGlzLmVycm9yTGlzdCwgZnVuY3Rpb24oIG4gKSB7XG5cdFx0XHRcdHJldHVybiBuLmVsZW1lbnQubmFtZSA9PT0gbGFzdEFjdGl2ZS5uYW1lO1xuXHRcdFx0fSApLmxlbmd0aCA9PT0gMSAmJiBsYXN0QWN0aXZlO1xuXHRcdH0sXG5cblx0XHRlbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdmFsaWRhdG9yID0gdGhpcyxcblx0XHRcdFx0cnVsZXNDYWNoZSA9IHt9O1xuXG5cdFx0XHQvLyBTZWxlY3QgYWxsIHZhbGlkIGlucHV0cyBpbnNpZGUgdGhlIGZvcm0gKG5vIHN1Ym1pdCBvciByZXNldCBidXR0b25zKVxuXHRcdFx0cmV0dXJuICQoIHRoaXMuY3VycmVudEZvcm0gKVxuXHRcdFx0LmZpbmQoIFwiaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIFtjb250ZW50ZWRpdGFibGVdXCIgKVxuXHRcdFx0Lm5vdCggXCI6c3VibWl0LCA6cmVzZXQsIDppbWFnZSwgOmRpc2FibGVkXCIgKVxuXHRcdFx0Lm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVxuXHRcdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuYW1lID0gdGhpcy5uYW1lIHx8ICQoIHRoaXMgKS5hdHRyKCBcIm5hbWVcIiApOyAvLyBGb3IgY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdHZhciBpc0NvbnRlbnRFZGl0YWJsZSA9IHR5cGVvZiAkKCB0aGlzICkuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmICQoIHRoaXMgKS5hdHRyKCBcImNvbnRlbnRlZGl0YWJsZVwiICkgIT09IFwiZmFsc2VcIjtcblxuXHRcdFx0XHRpZiAoICFuYW1lICYmIHZhbGlkYXRvci5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCBcIiVvIGhhcyBubyBuYW1lIGFzc2lnbmVkXCIsIHRoaXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBmb3JtIGV4cGFuZG8gb24gY29udGVudGVkaXRhYmxlXG5cdFx0XHRcdGlmICggaXNDb250ZW50RWRpdGFibGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb3JtID0gJCggdGhpcyApLmNsb3Nlc3QoIFwiZm9ybVwiIClbIDAgXTtcblx0XHRcdFx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWdub3JlIGVsZW1lbnRzIHRoYXQgYmVsb25nIHRvIG90aGVyL25lc3RlZCBmb3Jtc1xuXHRcdFx0XHRpZiAoIHRoaXMuZm9ybSAhPT0gdmFsaWRhdG9yLmN1cnJlbnRGb3JtICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNlbGVjdCBvbmx5IHRoZSBmaXJzdCBlbGVtZW50IGZvciBlYWNoIG5hbWUsIGFuZCBvbmx5IHRob3NlIHdpdGggcnVsZXMgc3BlY2lmaWVkXG5cdFx0XHRcdGlmICggbmFtZSBpbiBydWxlc0NhY2hlIHx8ICF2YWxpZGF0b3Iub2JqZWN0TGVuZ3RoKCAkKCB0aGlzICkucnVsZXMoKSApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJ1bGVzQ2FjaGVbIG5hbWUgXSA9IHRydWU7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdH0sXG5cblx0XHRjbGVhbjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuICQoIHNlbGVjdG9yIClbIDAgXTtcblx0XHR9LFxuXG5cdFx0ZXJyb3JzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBlcnJvckNsYXNzID0gdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLnNwbGl0KCBcIiBcIiApLmpvaW4oIFwiLlwiICk7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIi5cIiArIGVycm9yQ2xhc3MsIHRoaXMuZXJyb3JDb250ZXh0ICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0SW50ZXJuYWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuc3VjY2Vzc0xpc3QgPSBbXTtcblx0XHRcdHRoaXMuZXJyb3JMaXN0ID0gW107XG5cdFx0XHR0aGlzLmVycm9yTWFwID0ge307XG5cdFx0XHR0aGlzLnRvU2hvdyA9ICQoIFtdICk7XG5cdFx0XHR0aGlzLnRvSGlkZSA9ICQoIFtdICk7XG5cdFx0fSxcblxuXHRcdHJlc2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMucmVzZXRJbnRlcm5hbHMoKTtcblx0XHRcdHRoaXMuY3VycmVudEVsZW1lbnRzID0gJCggW10gKTtcblx0XHR9LFxuXG5cdFx0cHJlcGFyZUZvcm06IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldCgpO1xuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLmVycm9ycygpLmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0fSxcblxuXHRcdHByZXBhcmVFbGVtZW50OiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHRoaXMucmVzZXQoKTtcblx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHR9LFxuXG5cdFx0ZWxlbWVudFZhbHVlOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHZhciAkZWxlbWVudCA9ICQoIGVsZW1lbnQgKSxcblx0XHRcdFx0dHlwZSA9IGVsZW1lbnQudHlwZSxcblx0XHRcdFx0aXNDb250ZW50RWRpdGFibGUgPSB0eXBlb2YgJGVsZW1lbnQuYXR0ciggXCJjb250ZW50ZWRpdGFibGVcIiApICE9PSBcInVuZGVmaW5lZFwiICYmICRlbGVtZW50LmF0dHIoIFwiY29udGVudGVkaXRhYmxlXCIgKSAhPT0gXCJmYWxzZVwiLFxuXHRcdFx0XHR2YWwsIGlkeDtcblxuXHRcdFx0aWYgKCB0eXBlID09PSBcInJhZGlvXCIgfHwgdHlwZSA9PT0gXCJjaGVja2JveFwiICkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLnZhbCgpO1xuXHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZWxlbWVudC52YWxpZGl0eSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1lbnQudmFsaWRpdHkuYmFkSW5wdXQgPyBcIk5hTlwiIDogJGVsZW1lbnQudmFsKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaXNDb250ZW50RWRpdGFibGUgKSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnRleHQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9ICRlbGVtZW50LnZhbCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZmlsZVwiICkge1xuXG5cdFx0XHRcdC8vIE1vZGVybiBicm93c2VyIChjaHJvbWUgJiBzYWZhcmkpXG5cdFx0XHRcdGlmICggdmFsLnN1YnN0ciggMCwgMTIgKSA9PT0gXCJDOlxcXFxmYWtlcGF0aFxcXFxcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsLnN1YnN0ciggMTIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExlZ2FjeSBicm93c2Vyc1xuXHRcdFx0XHQvLyBVbml4LWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIi9cIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXaW5kb3dzLWJhc2VkIHBhdGhcblx0XHRcdFx0aWR4ID0gdmFsLmxhc3RJbmRleE9mKCBcIlxcXFxcIiApO1xuXHRcdFx0XHRpZiAoIGlkeCA+PSAwICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWwuc3Vic3RyKCBpZHggKyAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBKdXN0IHRoZSBmaWxlIG5hbWVcblx0XHRcdFx0cmV0dXJuIHZhbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRyZXR1cm4gdmFsLnJlcGxhY2UoIC9cXHIvZywgXCJcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9LFxuXG5cdFx0Y2hlY2s6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0ZWxlbWVudCA9IHRoaXMudmFsaWRhdGlvblRhcmdldEZvciggdGhpcy5jbGVhbiggZWxlbWVudCApICk7XG5cblx0XHRcdHZhciBydWxlcyA9ICQoIGVsZW1lbnQgKS5ydWxlcygpLFxuXHRcdFx0XHRydWxlc0NvdW50ID0gJC5tYXAoIHJ1bGVzLCBmdW5jdGlvbiggbiwgaSApIHtcblx0XHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdFx0fSApLmxlbmd0aCxcblx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gZmFsc2UsXG5cdFx0XHRcdHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICksXG5cdFx0XHRcdHJlc3VsdCwgbWV0aG9kLCBydWxlLCBub3JtYWxpemVyO1xuXG5cdFx0XHQvLyBQcmlvcml0aXplIHRoZSBsb2NhbCBub3JtYWxpemVyIGRlZmluZWQgZm9yIHRoaXMgZWxlbWVudCBvdmVyIHRoZSBnbG9iYWwgb25lXG5cdFx0XHQvLyBpZiB0aGUgZm9ybWVyIGV4aXN0cywgb3RoZXJ3aXNlIHVzZXIgdGhlIGdsb2JhbCBvbmUgaW4gY2FzZSBpdCBleGlzdHMuXG5cdFx0XHRpZiAoIHR5cGVvZiBydWxlcy5ub3JtYWxpemVyID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG5vcm1hbGl6ZXIgPSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fSBlbHNlIGlmIChcdHR5cGVvZiB0aGlzLnNldHRpbmdzLm5vcm1hbGl6ZXIgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0bm9ybWFsaXplciA9IHRoaXMuc2V0dGluZ3Mubm9ybWFsaXplcjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgbm9ybWFsaXplciBpcyBkZWZpbmVkLCB0aGVuIGNhbGwgaXQgdG8gcmV0cmVpdmUgdGhlIGNoYW5nZWQgdmFsdWUgaW5zdGVhZFxuXHRcdFx0Ly8gb2YgdXNpbmcgdGhlIHJlYWwgb25lLlxuXHRcdFx0Ly8gTm90ZSB0aGF0IGB0aGlzYCBpbiB0aGUgbm9ybWFsaXplciBpcyBgZWxlbWVudGAuXG5cdFx0XHRpZiAoIG5vcm1hbGl6ZXIgKSB7XG5cdFx0XHRcdHZhbCA9IG5vcm1hbGl6ZXIuY2FsbCggZWxlbWVudCwgdmFsICk7XG5cblx0XHRcdFx0Ly8gRGVsZXRlIHRoZSBub3JtYWxpemVyIGZyb20gcnVsZXMgdG8gYXZvaWQgdHJlYXRpbmcgaXQgYXMgYSBwcmUtZGVmaW5lZCBtZXRob2QuXG5cdFx0XHRcdGRlbGV0ZSBydWxlcy5ub3JtYWxpemVyO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBtZXRob2QgaW4gcnVsZXMgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiBydWxlc1sgbWV0aG9kIF0gfTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRyZXN1bHQgPSAkLnZhbGlkYXRvci5tZXRob2RzWyBtZXRob2QgXS5jYWxsKCB0aGlzLCB2YWwsIGVsZW1lbnQsIHJ1bGUucGFyYW1ldGVycyApO1xuXG5cdFx0XHRcdFx0Ly8gSWYgYSBtZXRob2QgaW5kaWNhdGVzIHRoYXQgdGhlIGZpZWxkIGlzIG9wdGlvbmFsIGFuZCB0aGVyZWZvcmUgdmFsaWQsXG5cdFx0XHRcdFx0Ly8gZG9uJ3QgbWFyayBpdCBhcyB2YWxpZCB3aGVuIHRoZXJlIGFyZSBubyBvdGhlciBydWxlc1xuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcImRlcGVuZGVuY3ktbWlzbWF0Y2hcIiAmJiBydWxlc0NvdW50ID09PSAxICkge1xuXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeU1pc21hdGNoID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkZXBlbmRlbmN5TWlzbWF0Y2ggPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcmVzdWx0ID09PSBcInBlbmRpbmdcIiApIHtcblx0XHRcdFx0XHRcdHRoaXMudG9IaWRlID0gdGhpcy50b0hpZGUubm90KCB0aGlzLmVycm9yc0ZvciggZWxlbWVudCApICk7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKCAhcmVzdWx0ICkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb3JtYXRBbmRBZGQoIGVsZW1lbnQsIHJ1bGUgKTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy5kZWJ1ZyAmJiB3aW5kb3cuY29uc29sZSApIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCBcIkV4Y2VwdGlvbiBvY2N1cnJlZCB3aGVuIGNoZWNraW5nIGVsZW1lbnQgXCIgKyBlbGVtZW50LmlkICsgXCIsIGNoZWNrIHRoZSAnXCIgKyBydWxlLm1ldGhvZCArIFwiJyBtZXRob2QuXCIsIGUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBlIGluc3RhbmNlb2YgVHlwZUVycm9yICkge1xuXHRcdFx0XHRcdFx0ZS5tZXNzYWdlICs9IFwiLiAgRXhjZXB0aW9uIG9jY3VycmVkIHdoZW4gY2hlY2tpbmcgZWxlbWVudCBcIiArIGVsZW1lbnQuaWQgKyBcIiwgY2hlY2sgdGhlICdcIiArIHJ1bGUubWV0aG9kICsgXCInIG1ldGhvZC5cIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGRlcGVuZGVuY3lNaXNtYXRjaCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLm9iamVjdExlbmd0aCggcnVsZXMgKSApIHtcblx0XHRcdFx0dGhpcy5zdWNjZXNzTGlzdC5wdXNoKCBlbGVtZW50ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIHZhbGlkYXRpb24gbWV0aG9kXG5cdFx0Ly8gc3BlY2lmaWVkIGluIHRoZSBlbGVtZW50J3MgSFRNTDUgZGF0YSBhdHRyaWJ1dGVcblx0XHQvLyByZXR1cm4gdGhlIGdlbmVyaWMgbWVzc2FnZSBpZiBwcmVzZW50IGFuZCBubyBtZXRob2Qgc3BlY2lmaWMgbWVzc2FnZSBpcyBwcmVzZW50XG5cdFx0Y3VzdG9tRGF0YU1lc3NhZ2U6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKyBtZXRob2QuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdG1ldGhvZC5zdWJzdHJpbmcoIDEgKS50b0xvd2VyQ2FzZSgpICkgfHwgJCggZWxlbWVudCApLmRhdGEoIFwibXNnXCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjdXN0b20gbWVzc2FnZSBmb3IgdGhlIGdpdmVuIGVsZW1lbnQgbmFtZSBhbmQgdmFsaWRhdGlvbiBtZXRob2Rcblx0XHRjdXN0b21NZXNzYWdlOiBmdW5jdGlvbiggbmFtZSwgbWV0aG9kICkge1xuXHRcdFx0dmFyIG0gPSB0aGlzLnNldHRpbmdzLm1lc3NhZ2VzWyBuYW1lIF07XG5cdFx0XHRyZXR1cm4gbSAmJiAoIG0uY29uc3RydWN0b3IgPT09IFN0cmluZyA/IG0gOiBtWyBtZXRob2QgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBSZXR1cm4gdGhlIGZpcnN0IGRlZmluZWQgYXJndW1lbnQsIGFsbG93aW5nIGVtcHR5IHN0cmluZ3Ncblx0XHRmaW5kRGVmaW5lZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYXJndW1lbnRzWyBpIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gYXJndW1lbnRzWyBpIF07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdFx0fSxcblxuXHRcdC8vIFRoZSBzZWNvbmQgcGFyYW1ldGVyICdydWxlJyB1c2VkIHRvIGJlIGEgc3RyaW5nLCBhbmQgZXh0ZW5kZWQgdG8gYW4gb2JqZWN0IGxpdGVyYWxcblx0XHQvLyBvZiB0aGUgZm9sbG93aW5nIGZvcm06XG5cdFx0Ly8gcnVsZSA9IHtcblx0XHQvLyAgICAgbWV0aG9kOiBcIm1ldGhvZCBuYW1lXCIsXG5cdFx0Ly8gICAgIHBhcmFtZXRlcnM6IFwidGhlIGdpdmVuIG1ldGhvZCBwYXJhbWV0ZXJzXCJcblx0XHQvLyB9XG5cdFx0Ly9cblx0XHQvLyBUaGUgb2xkIGJlaGF2aW9yIHN0aWxsIHN1cHBvcnRlZCwga2VwdCB0byBtYWludGFpbiBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGhcblx0XHQvLyBvbGQgY29kZSwgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHRcdGRlZmF1bHRNZXNzYWdlOiBmdW5jdGlvbiggZWxlbWVudCwgcnVsZSApIHtcblx0XHRcdGlmICggdHlwZW9mIHJ1bGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdHJ1bGUgPSB7IG1ldGhvZDogcnVsZSB9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZmluZERlZmluZWQoXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21NZXNzYWdlKCBlbGVtZW50Lm5hbWUsIHJ1bGUubWV0aG9kICksXG5cdFx0XHRcdFx0dGhpcy5jdXN0b21EYXRhTWVzc2FnZSggZWxlbWVudCwgcnVsZS5tZXRob2QgKSxcblxuXHRcdFx0XHRcdC8vICd0aXRsZScgaXMgbmV2ZXIgdW5kZWZpbmVkLCBzbyBoYW5kbGUgZW1wdHkgc3RyaW5nIGFzIHVuZGVmaW5lZFxuXHRcdFx0XHRcdCF0aGlzLnNldHRpbmdzLmlnbm9yZVRpdGxlICYmIGVsZW1lbnQudGl0bGUgfHwgdW5kZWZpbmVkLFxuXHRcdFx0XHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBydWxlLm1ldGhvZCBdLFxuXHRcdFx0XHRcdFwiPHN0cm9uZz5XYXJuaW5nOiBObyBtZXNzYWdlIGRlZmluZWQgZm9yIFwiICsgZWxlbWVudC5uYW1lICsgXCI8L3N0cm9uZz5cIlxuXHRcdFx0XHQpLFxuXHRcdFx0XHR0aGVyZWdleCA9IC9cXCQ/XFx7KFxcZCspXFx9L2c7XG5cdFx0XHRpZiAoIHR5cGVvZiBtZXNzYWdlID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdFx0XHRcdG1lc3NhZ2UgPSBtZXNzYWdlLmNhbGwoIHRoaXMsIHJ1bGUucGFyYW1ldGVycywgZWxlbWVudCApO1xuXHRcdFx0fSBlbHNlIGlmICggdGhlcmVnZXgudGVzdCggbWVzc2FnZSApICkge1xuXHRcdFx0XHRtZXNzYWdlID0gJC52YWxpZGF0b3IuZm9ybWF0KCBtZXNzYWdlLnJlcGxhY2UoIHRoZXJlZ2V4LCBcInskMX1cIiApLCBydWxlLnBhcmFtZXRlcnMgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGZvcm1hdEFuZEFkZDogZnVuY3Rpb24oIGVsZW1lbnQsIHJ1bGUgKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHRoaXMuZGVmYXVsdE1lc3NhZ2UoIGVsZW1lbnQsIHJ1bGUgKTtcblxuXHRcdFx0dGhpcy5lcnJvckxpc3QucHVzaCgge1xuXHRcdFx0XHRtZXNzYWdlOiBtZXNzYWdlLFxuXHRcdFx0XHRlbGVtZW50OiBlbGVtZW50LFxuXHRcdFx0XHRtZXRob2Q6IHJ1bGUubWV0aG9kXG5cdFx0XHR9ICk7XG5cblx0XHRcdHRoaXMuZXJyb3JNYXBbIGVsZW1lbnQubmFtZSBdID0gbWVzc2FnZTtcblx0XHRcdHRoaXMuc3VibWl0dGVkWyBlbGVtZW50Lm5hbWUgXSA9IG1lc3NhZ2U7XG5cdFx0fSxcblxuXHRcdGFkZFdyYXBwZXI6IGZ1bmN0aW9uKCB0b1RvZ2dsZSApIHtcblx0XHRcdGlmICggdGhpcy5zZXR0aW5ncy53cmFwcGVyICkge1xuXHRcdFx0XHR0b1RvZ2dsZSA9IHRvVG9nZ2xlLmFkZCggdG9Ub2dnbGUucGFyZW50KCB0aGlzLnNldHRpbmdzLndyYXBwZXIgKSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRvVG9nZ2xlO1xuXHRcdH0sXG5cblx0XHRkZWZhdWx0U2hvd0Vycm9yczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSwgZWxlbWVudHMsIGVycm9yO1xuXHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuZXJyb3JMaXN0WyBpIF07IGkrKyApIHtcblx0XHRcdFx0ZXJyb3IgPSB0aGlzLmVycm9yTGlzdFsgaSBdO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MuaGlnaGxpZ2h0LmNhbGwoIHRoaXMsIGVycm9yLmVsZW1lbnQsIHRoaXMuc2V0dGluZ3MuZXJyb3JDbGFzcywgdGhpcy5zZXR0aW5ncy52YWxpZENsYXNzICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5zaG93TGFiZWwoIGVycm9yLmVsZW1lbnQsIGVycm9yLm1lc3NhZ2UgKTtcblx0XHRcdH1cblx0XHRcdGlmICggdGhpcy5lcnJvckxpc3QubGVuZ3RoICkge1xuXHRcdFx0XHR0aGlzLnRvU2hvdyA9IHRoaXMudG9TaG93LmFkZCggdGhpcy5jb250YWluZXJzICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IHRoaXMuc3VjY2Vzc0xpc3RbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2hvd0xhYmVsKCB0aGlzLnN1Y2Nlc3NMaXN0WyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLnVuaGlnaGxpZ2h0ICkge1xuXHRcdFx0XHRmb3IgKCBpID0gMCwgZWxlbWVudHMgPSB0aGlzLnZhbGlkRWxlbWVudHMoKTsgZWxlbWVudHNbIGkgXTsgaSsrICkge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3MudW5oaWdobGlnaHQuY2FsbCggdGhpcywgZWxlbWVudHNbIGkgXSwgdGhpcy5zZXR0aW5ncy5lcnJvckNsYXNzLCB0aGlzLnNldHRpbmdzLnZhbGlkQ2xhc3MgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b0hpZGUgPSB0aGlzLnRvSGlkZS5ub3QoIHRoaXMudG9TaG93ICk7XG5cdFx0XHR0aGlzLmhpZGVFcnJvcnMoKTtcblx0XHRcdHRoaXMuYWRkV3JhcHBlciggdGhpcy50b1Nob3cgKS5zaG93KCk7XG5cdFx0fSxcblxuXHRcdHZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY3VycmVudEVsZW1lbnRzLm5vdCggdGhpcy5pbnZhbGlkRWxlbWVudHMoKSApO1xuXHRcdH0sXG5cblx0XHRpbnZhbGlkRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuICQoIHRoaXMuZXJyb3JMaXN0ICkubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZWxlbWVudDtcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0c2hvd0xhYmVsOiBmdW5jdGlvbiggZWxlbWVudCwgbWVzc2FnZSApIHtcblx0XHRcdHZhciBwbGFjZSwgZ3JvdXAsIGVycm9ySUQsIHYsXG5cdFx0XHRcdGVycm9yID0gdGhpcy5lcnJvcnNGb3IoIGVsZW1lbnQgKSxcblx0XHRcdFx0ZWxlbWVudElEID0gdGhpcy5pZE9yTmFtZSggZWxlbWVudCApLFxuXHRcdFx0XHRkZXNjcmliZWRCeSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApO1xuXG5cdFx0XHRpZiAoIGVycm9yLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyBSZWZyZXNoIGVycm9yL3N1Y2Nlc3MgY2xhc3Ncblx0XHRcdFx0ZXJyb3IucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MudmFsaWRDbGFzcyApLmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKTtcblxuXHRcdFx0XHQvLyBSZXBsYWNlIG1lc3NhZ2Ugb24gZXhpc3RpbmcgbGFiZWxcblx0XHRcdFx0ZXJyb3IuaHRtbCggbWVzc2FnZSApO1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBDcmVhdGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0XHRlcnJvciA9ICQoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy5lcnJvckVsZW1lbnQgKyBcIj5cIiApXG5cdFx0XHRcdFx0LmF0dHIoIFwiaWRcIiwgZWxlbWVudElEICsgXCItZXJyb3JcIiApXG5cdFx0XHRcdFx0LmFkZENsYXNzKCB0aGlzLnNldHRpbmdzLmVycm9yQ2xhc3MgKVxuXHRcdFx0XHRcdC5odG1sKCBtZXNzYWdlIHx8IFwiXCIgKTtcblxuXHRcdFx0XHQvLyBNYWludGFpbiByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgdG8gYmUgcGxhY2VkIGludG8gdGhlIERPTVxuXHRcdFx0XHRwbGFjZSA9IGVycm9yO1xuXHRcdFx0XHRpZiAoIHRoaXMuc2V0dGluZ3Mud3JhcHBlciApIHtcblxuXHRcdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBpcyB2aXNpYmxlLCBldmVuIGluIElFXG5cdFx0XHRcdFx0Ly8gYWN0dWFsbHkgc2hvd2luZyB0aGUgd3JhcHBlZCBlbGVtZW50IGlzIGhhbmRsZWQgZWxzZXdoZXJlXG5cdFx0XHRcdFx0cGxhY2UgPSBlcnJvci5oaWRlKCkuc2hvdygpLndyYXAoIFwiPFwiICsgdGhpcy5zZXR0aW5ncy53cmFwcGVyICsgXCIvPlwiICkucGFyZW50KCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCB0aGlzLmxhYmVsQ29udGFpbmVyLmxlbmd0aCApIHtcblx0XHRcdFx0XHR0aGlzLmxhYmVsQ29udGFpbmVyLmFwcGVuZCggcGxhY2UgKTtcblx0XHRcdFx0fSBlbHNlIGlmICggdGhpcy5zZXR0aW5ncy5lcnJvclBsYWNlbWVudCApIHtcblx0XHRcdFx0XHR0aGlzLnNldHRpbmdzLmVycm9yUGxhY2VtZW50LmNhbGwoIHRoaXMsIHBsYWNlLCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRwbGFjZS5pbnNlcnRBZnRlciggZWxlbWVudCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTGluayBlcnJvciBiYWNrIHRvIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggZXJyb3IuaXMoIFwibGFiZWxcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlIGVycm9yIGlzIGEgbGFiZWwsIHRoZW4gYXNzb2NpYXRlIHVzaW5nICdmb3InXG5cdFx0XHRcdFx0ZXJyb3IuYXR0ciggXCJmb3JcIiwgZWxlbWVudElEICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYSBjaGlsZCBvZiBhbiBhc3NvY2lhdGVkIGxhYmVsLCB0aGVuIGl0J3MgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0Ly8gdG8gZXhwbGljaXRseSBhcHBseSBhcmlhLWRlc2NyaWJlZGJ5XG5cdFx0XHRcdH0gZWxzZSBpZiAoIGVycm9yLnBhcmVudHMoIFwibGFiZWxbZm9yPSdcIiArIHRoaXMuZXNjYXBlQ3NzTWV0YSggZWxlbWVudElEICkgKyBcIiddXCIgKS5sZW5ndGggPT09IDAgKSB7XG5cdFx0XHRcdFx0ZXJyb3JJRCA9IGVycm9yLmF0dHIoIFwiaWRcIiApO1xuXG5cdFx0XHRcdFx0Ly8gUmVzcGVjdCBleGlzdGluZyBub24tZXJyb3IgYXJpYS1kZXNjcmliZWRieVxuXHRcdFx0XHRcdGlmICggIWRlc2NyaWJlZEJ5ICkge1xuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgPSBlcnJvcklEO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFkZXNjcmliZWRCeS5tYXRjaCggbmV3IFJlZ0V4cCggXCJcXFxcYlwiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBlcnJvcklEICkgKyBcIlxcXFxiXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gZW5kIG9mIGxpc3QgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuXHRcdFx0XHRcdFx0ZGVzY3JpYmVkQnkgKz0gXCIgXCIgKyBlcnJvcklEO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQkKCBlbGVtZW50ICkuYXR0ciggXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRlc2NyaWJlZEJ5ICk7XG5cblx0XHRcdFx0XHQvLyBJZiB0aGlzIGVsZW1lbnQgaXMgZ3JvdXBlZCwgdGhlbiBhc3NpZ24gdG8gYWxsIGVsZW1lbnRzIGluIHRoZSBzYW1lIGdyb3VwXG5cdFx0XHRcdFx0Z3JvdXAgPSB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHRcdFx0aWYgKCBncm91cCApIHtcblx0XHRcdFx0XHRcdHYgPSB0aGlzO1xuXHRcdFx0XHRcdFx0JC5lYWNoKCB2Lmdyb3VwcywgZnVuY3Rpb24oIG5hbWUsIHRlc3Rncm91cCApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCB0ZXN0Z3JvdXAgPT09IGdyb3VwICkge1xuXHRcdFx0XHRcdFx0XHRcdCQoIFwiW25hbWU9J1wiICsgdi5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIsIHYuY3VycmVudEZvcm0gKVxuXHRcdFx0XHRcdFx0XHRcdFx0LmF0dHIoIFwiYXJpYS1kZXNjcmliZWRieVwiLCBlcnJvci5hdHRyKCBcImlkXCIgKSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFtZXNzYWdlICYmIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApIHtcblx0XHRcdFx0ZXJyb3IudGV4dCggXCJcIiApO1xuXHRcdFx0XHRpZiAoIHR5cGVvZiB0aGlzLnNldHRpbmdzLnN1Y2Nlc3MgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0ZXJyb3IuYWRkQ2xhc3MoIHRoaXMuc2V0dGluZ3Muc3VjY2VzcyApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuc2V0dGluZ3Muc3VjY2VzcyggZXJyb3IsIGVsZW1lbnQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy50b1Nob3cgPSB0aGlzLnRvU2hvdy5hZGQoIGVycm9yICk7XG5cdFx0fSxcblxuXHRcdGVycm9yc0ZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHRoaXMuZXNjYXBlQ3NzTWV0YSggdGhpcy5pZE9yTmFtZSggZWxlbWVudCApICksXG5cdFx0XHRcdGRlc2NyaWJlciA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcImFyaWEtZGVzY3JpYmVkYnlcIiApLFxuXHRcdFx0XHRzZWxlY3RvciA9IFwibGFiZWxbZm9yPSdcIiArIG5hbWUgKyBcIiddLCBsYWJlbFtmb3I9J1wiICsgbmFtZSArIFwiJ10gKlwiO1xuXG5cdFx0XHQvLyAnYXJpYS1kZXNjcmliZWRieScgc2hvdWxkIGRpcmVjdGx5IHJlZmVyZW5jZSB0aGUgZXJyb3IgZWxlbWVudFxuXHRcdFx0aWYgKCBkZXNjcmliZXIgKSB7XG5cdFx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3IgKyBcIiwgI1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBkZXNjcmliZXIgKVxuXHRcdFx0XHRcdC5yZXBsYWNlKCAvXFxzKy9nLCBcIiwgI1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzXG5cdFx0XHRcdC5lcnJvcnMoKVxuXHRcdFx0XHQuZmlsdGVyKCBzZWxlY3RvciApO1xuXHRcdH0sXG5cblx0XHQvLyBTZWUgaHR0cHM6Ly9hcGkuanF1ZXJ5LmNvbS9jYXRlZ29yeS9zZWxlY3RvcnMvLCBmb3IgQ1NTXG5cdFx0Ly8gbWV0YS1jaGFyYWN0ZXJzIHRoYXQgc2hvdWxkIGJlIGVzY2FwZWQgaW4gb3JkZXIgdG8gYmUgdXNlZCB3aXRoIEpRdWVyeVxuXHRcdC8vIGFzIGEgbGl0ZXJhbCBwYXJ0IG9mIGEgbmFtZS9pZCBvciBhbnkgc2VsZWN0b3IuXG5cdFx0ZXNjYXBlQ3NzTWV0YTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRcdHJldHVybiBzdHJpbmcucmVwbGFjZSggLyhbXFxcXCFcIiMkJSYnKCkqKywuLzo7PD0+P0BcXFtcXF1eYHt8fX5dKS9nLCBcIlxcXFwkMVwiICk7XG5cdFx0fSxcblxuXHRcdGlkT3JOYW1lOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHRcdHJldHVybiB0aGlzLmdyb3Vwc1sgZWxlbWVudC5uYW1lIF0gfHwgKCB0aGlzLmNoZWNrYWJsZSggZWxlbWVudCApID8gZWxlbWVudC5uYW1lIDogZWxlbWVudC5pZCB8fCBlbGVtZW50Lm5hbWUgKTtcblx0XHR9LFxuXG5cdFx0dmFsaWRhdGlvblRhcmdldEZvcjogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cblx0XHRcdC8vIElmIHJhZGlvL2NoZWNrYm94LCB2YWxpZGF0ZSBmaXJzdCBlbGVtZW50IGluIGdyb3VwIGluc3RlYWRcblx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0ZWxlbWVudCA9IHRoaXMuZmluZEJ5TmFtZSggZWxlbWVudC5uYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFsd2F5cyBhcHBseSBpZ25vcmUgZmlsdGVyXG5cdFx0XHRyZXR1cm4gJCggZWxlbWVudCApLm5vdCggdGhpcy5zZXR0aW5ncy5pZ25vcmUgKVsgMCBdO1xuXHRcdH0sXG5cblx0XHRjaGVja2FibGU6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuICggL3JhZGlvfGNoZWNrYm94L2kgKS50ZXN0KCBlbGVtZW50LnR5cGUgKTtcblx0XHR9LFxuXG5cdFx0ZmluZEJ5TmFtZTogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0XHRyZXR1cm4gJCggdGhpcy5jdXJyZW50Rm9ybSApLmZpbmQoIFwiW25hbWU9J1wiICsgdGhpcy5lc2NhcGVDc3NNZXRhKCBuYW1lICkgKyBcIiddXCIgKTtcblx0XHR9LFxuXG5cdFx0Z2V0TGVuZ3RoOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRzd2l0Y2ggKCBlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRjYXNlIFwic2VsZWN0XCI6XG5cdFx0XHRcdHJldHVybiAkKCBcIm9wdGlvbjpzZWxlY3RlZFwiLCBlbGVtZW50ICkubGVuZ3RoO1xuXHRcdFx0Y2FzZSBcImlucHV0XCI6XG5cdFx0XHRcdGlmICggdGhpcy5jaGVja2FibGUoIGVsZW1lbnQgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5maW5kQnlOYW1lKCBlbGVtZW50Lm5hbWUgKS5maWx0ZXIoIFwiOmNoZWNrZWRcIiApLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlLmxlbmd0aDtcblx0XHR9LFxuXG5cdFx0ZGVwZW5kOiBmdW5jdGlvbiggcGFyYW0sIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5kZXBlbmRUeXBlc1sgdHlwZW9mIHBhcmFtIF0gPyB0aGlzLmRlcGVuZFR5cGVzWyB0eXBlb2YgcGFyYW0gXSggcGFyYW0sIGVsZW1lbnQgKSA6IHRydWU7XG5cdFx0fSxcblxuXHRcdGRlcGVuZFR5cGVzOiB7XG5cdFx0XHRcImJvb2xlYW5cIjogZnVuY3Rpb24oIHBhcmFtICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW07XG5cdFx0XHR9LFxuXHRcdFx0XCJzdHJpbmdcIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gISEkKCBwYXJhbSwgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0fSxcblx0XHRcdFwiZnVuY3Rpb25cIjogZnVuY3Rpb24oIHBhcmFtLCBlbGVtZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gcGFyYW0oIGVsZW1lbnQgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b3B0aW9uYWw6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdFx0dmFyIHZhbCA9IHRoaXMuZWxlbWVudFZhbHVlKCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gISQudmFsaWRhdG9yLm1ldGhvZHMucmVxdWlyZWQuY2FsbCggdGhpcywgdmFsLCBlbGVtZW50ICkgJiYgXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0fSxcblxuXHRcdHN0YXJ0UmVxdWVzdDogZnVuY3Rpb24oIGVsZW1lbnQgKSB7XG5cdFx0XHRpZiAoICF0aGlzLnBlbmRpbmdbIGVsZW1lbnQubmFtZSBdICkge1xuXHRcdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0Kys7XG5cdFx0XHRcdCQoIGVsZW1lbnQgKS5hZGRDbGFzcyggdGhpcy5zZXR0aW5ncy5wZW5kaW5nQ2xhc3MgKTtcblx0XHRcdFx0dGhpcy5wZW5kaW5nWyBlbGVtZW50Lm5hbWUgXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHN0b3BSZXF1ZXN0OiBmdW5jdGlvbiggZWxlbWVudCwgdmFsaWQgKSB7XG5cdFx0XHR0aGlzLnBlbmRpbmdSZXF1ZXN0LS07XG5cblx0XHRcdC8vIFNvbWV0aW1lcyBzeW5jaHJvbml6YXRpb24gZmFpbHMsIG1ha2Ugc3VyZSBwZW5kaW5nUmVxdWVzdCBpcyBuZXZlciA8IDBcblx0XHRcdGlmICggdGhpcy5wZW5kaW5nUmVxdWVzdCA8IDAgKSB7XG5cdFx0XHRcdHRoaXMucGVuZGluZ1JlcXVlc3QgPSAwO1xuXHRcdFx0fVxuXHRcdFx0ZGVsZXRlIHRoaXMucGVuZGluZ1sgZWxlbWVudC5uYW1lIF07XG5cdFx0XHQkKCBlbGVtZW50ICkucmVtb3ZlQ2xhc3MoIHRoaXMuc2V0dGluZ3MucGVuZGluZ0NsYXNzICk7XG5cdFx0XHRpZiAoIHZhbGlkICYmIHRoaXMucGVuZGluZ1JlcXVlc3QgPT09IDAgJiYgdGhpcy5mb3JtU3VibWl0dGVkICYmIHRoaXMuZm9ybSgpICkge1xuXHRcdFx0XHQkKCB0aGlzLmN1cnJlbnRGb3JtICkuc3VibWl0KCk7XG5cblx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBoaWRkZW4gaW5wdXQgdGhhdCB3YXMgdXNlZCBhcyBhIHJlcGxhY2VtZW50IGZvciB0aGVcblx0XHRcdFx0Ly8gbWlzc2luZyBzdWJtaXQgYnV0dG9uLiBUaGUgaGlkZGVuIGlucHV0IGlzIGFkZGVkIGJ5IGBoYW5kbGUoKWBcblx0XHRcdFx0Ly8gdG8gZW5zdXJlIHRoYXQgdGhlIHZhbHVlIG9mIHRoZSB1c2VkIHN1Ym1pdCBidXR0b24gaXMgcGFzc2VkIG9uXG5cdFx0XHRcdC8vIGZvciBzY3JpcHRlZCBzdWJtaXRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZFxuXHRcdFx0XHRpZiAoIHRoaXMuc3VibWl0QnV0dG9uICkge1xuXHRcdFx0XHRcdCQoIFwiaW5wdXQ6aGlkZGVuW25hbWU9J1wiICsgdGhpcy5zdWJtaXRCdXR0b24ubmFtZSArIFwiJ11cIiwgdGhpcy5jdXJyZW50Rm9ybSApLnJlbW92ZSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCAhdmFsaWQgJiYgdGhpcy5wZW5kaW5nUmVxdWVzdCA9PT0gMCAmJiB0aGlzLmZvcm1TdWJtaXR0ZWQgKSB7XG5cdFx0XHRcdCQoIHRoaXMuY3VycmVudEZvcm0gKS50cmlnZ2VySGFuZGxlciggXCJpbnZhbGlkLWZvcm1cIiwgWyB0aGlzIF0gKTtcblx0XHRcdFx0dGhpcy5mb3JtU3VibWl0dGVkID0gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHByZXZpb3VzVmFsdWU6IGZ1bmN0aW9uKCBlbGVtZW50LCBtZXRob2QgKSB7XG5cdFx0XHRtZXRob2QgPSB0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiICYmIG1ldGhvZCB8fCBcInJlbW90ZVwiO1xuXG5cdFx0XHRyZXR1cm4gJC5kYXRhKCBlbGVtZW50LCBcInByZXZpb3VzVmFsdWVcIiApIHx8ICQuZGF0YSggZWxlbWVudCwgXCJwcmV2aW91c1ZhbHVlXCIsIHtcblx0XHRcdFx0b2xkOiBudWxsLFxuXHRcdFx0XHR2YWxpZDogdHJ1ZSxcblx0XHRcdFx0bWVzc2FnZTogdGhpcy5kZWZhdWx0TWVzc2FnZSggZWxlbWVudCwgeyBtZXRob2Q6IG1ldGhvZCB9IClcblx0XHRcdH0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gQ2xlYW5zIHVwIGFsbCBmb3JtcyBhbmQgZWxlbWVudHMsIHJlbW92ZXMgdmFsaWRhdG9yLXNwZWNpZmljIGV2ZW50c1xuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5yZXNldEZvcm0oKTtcblxuXHRcdFx0JCggdGhpcy5jdXJyZW50Rm9ybSApXG5cdFx0XHRcdC5vZmYoIFwiLnZhbGlkYXRlXCIgKVxuXHRcdFx0XHQucmVtb3ZlRGF0YSggXCJ2YWxpZGF0b3JcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZXF1YWxUb1wiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1sZXNzVGhhblwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtbGVzc1RoYW4tYmx1clwiIClcblx0XHRcdFx0LmZpbmQoIFwiLnZhbGlkYXRlLWxlc3NUaGFuRXF1YWwtYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1sZXNzVGhhbkVxdWFsXCIgKVxuXHRcdFx0XHRcdC5yZW1vdmVDbGFzcyggXCJ2YWxpZGF0ZS1sZXNzVGhhbkVxdWFsLWJsdXJcIiApXG5cdFx0XHRcdC5maW5kKCBcIi52YWxpZGF0ZS1ncmVhdGVyVGhhbkVxdWFsLWJsdXJcIiApXG5cdFx0XHRcdFx0Lm9mZiggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbFwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZ3JlYXRlclRoYW5FcXVhbC1ibHVyXCIgKVxuXHRcdFx0XHQuZmluZCggXCIudmFsaWRhdGUtZ3JlYXRlclRoYW4tYmx1clwiIClcblx0XHRcdFx0XHQub2ZmKCBcIi52YWxpZGF0ZS1ncmVhdGVyVGhhblwiIClcblx0XHRcdFx0XHQucmVtb3ZlQ2xhc3MoIFwidmFsaWRhdGUtZ3JlYXRlclRoYW4tYmx1clwiICk7XG5cdFx0fVxuXG5cdH0sXG5cblx0Y2xhc3NSdWxlU2V0dGluZ3M6IHtcblx0XHRyZXF1aXJlZDogeyByZXF1aXJlZDogdHJ1ZSB9LFxuXHRcdGVtYWlsOiB7IGVtYWlsOiB0cnVlIH0sXG5cdFx0dXJsOiB7IHVybDogdHJ1ZSB9LFxuXHRcdGRhdGU6IHsgZGF0ZTogdHJ1ZSB9LFxuXHRcdGRhdGVJU086IHsgZGF0ZUlTTzogdHJ1ZSB9LFxuXHRcdG51bWJlcjogeyBudW1iZXI6IHRydWUgfSxcblx0XHRkaWdpdHM6IHsgZGlnaXRzOiB0cnVlIH0sXG5cdFx0Y3JlZGl0Y2FyZDogeyBjcmVkaXRjYXJkOiB0cnVlIH1cblx0fSxcblxuXHRhZGRDbGFzc1J1bGVzOiBmdW5jdGlvbiggY2xhc3NOYW1lLCBydWxlcyApIHtcblx0XHRpZiAoIGNsYXNzTmFtZS5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nICkge1xuXHRcdFx0dGhpcy5jbGFzc1J1bGVTZXR0aW5nc1sgY2xhc3NOYW1lIF0gPSBydWxlcztcblx0XHR9IGVsc2Uge1xuXHRcdFx0JC5leHRlbmQoIHRoaXMuY2xhc3NSdWxlU2V0dGluZ3MsIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fSxcblxuXHRjbGFzc1J1bGVzOiBmdW5jdGlvbiggZWxlbWVudCApIHtcblx0XHR2YXIgcnVsZXMgPSB7fSxcblx0XHRcdGNsYXNzZXMgPSAkKCBlbGVtZW50ICkuYXR0ciggXCJjbGFzc1wiICk7XG5cblx0XHRpZiAoIGNsYXNzZXMgKSB7XG5cdFx0XHQkLmVhY2goIGNsYXNzZXMuc3BsaXQoIFwiIFwiICksIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgaW4gJC52YWxpZGF0b3IuY2xhc3NSdWxlU2V0dGluZ3MgKSB7XG5cdFx0XHRcdFx0JC5leHRlbmQoIHJ1bGVzLCAkLnZhbGlkYXRvci5jbGFzc1J1bGVTZXR0aW5nc1sgdGhpcyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJ1bGVzO1xuXHR9LFxuXG5cdG5vcm1hbGl6ZUF0dHJpYnV0ZVJ1bGU6IGZ1bmN0aW9uKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApIHtcblxuXHRcdC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIGEgbnVtYmVyIGZvciBudW1iZXIgaW5wdXRzLCBhbmQgZm9yIHRleHQgZm9yIGJhY2t3YXJkcyBjb21wYWJpbGl0eVxuXHRcdC8vIGFsbG93cyB0eXBlPVwiZGF0ZVwiIGFuZCBvdGhlcnMgdG8gYmUgY29tcGFyZWQgYXMgc3RyaW5nc1xuXHRcdGlmICggL21pbnxtYXh8c3RlcC8udGVzdCggbWV0aG9kICkgJiYgKCB0eXBlID09PSBudWxsIHx8IC9udW1iZXJ8cmFuZ2V8dGV4dC8udGVzdCggdHlwZSApICkgKSB7XG5cdFx0XHR2YWx1ZSA9IE51bWJlciggdmFsdWUgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydCBPcGVyYSBNaW5pLCB3aGljaCByZXR1cm5zIE5hTiBmb3IgdW5kZWZpbmVkIG1pbmxlbmd0aFxuXHRcdFx0aWYgKCBpc05hTiggdmFsdWUgKSApIHtcblx0XHRcdFx0dmFsdWUgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSB8fCB2YWx1ZSA9PT0gMCApIHtcblx0XHRcdHJ1bGVzWyBtZXRob2QgXSA9IHZhbHVlO1xuXHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IG1ldGhvZCAmJiB0eXBlICE9PSBcInJhbmdlXCIgKSB7XG5cblx0XHRcdC8vIEV4Y2VwdGlvbjogdGhlIGpxdWVyeSB2YWxpZGF0ZSAncmFuZ2UnIG1ldGhvZFxuXHRcdFx0Ly8gZG9lcyBub3QgdGVzdCBmb3IgdGhlIGh0bWw1ICdyYW5nZScgdHlwZVxuXHRcdFx0cnVsZXNbIG1ldGhvZCBdID0gdHJ1ZTtcblx0XHR9XG5cdH0sXG5cblx0YXR0cmlidXRlUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgZm9yIDxpbnB1dCByZXF1aXJlZD4gaW4gYm90aCBodG1sNSBhbmQgb2xkZXIgYnJvd3NlcnNcblx0XHRcdGlmICggbWV0aG9kID09PSBcInJlcXVpcmVkXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIG1ldGhvZCApO1xuXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgcmV0dXJuIGFuIGVtcHR5IHN0cmluZyBmb3IgdGhlIHJlcXVpcmVkIGF0dHJpYnV0ZVxuXHRcdFx0XHQvLyBhbmQgbm9uLUhUTUw1IGJyb3dzZXJzIG1pZ2h0IGhhdmUgcmVxdWlyZWQ9XCJcIiBtYXJrdXBcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBub24tSFRNTDUgYnJvd3NlcnMgdG8gcmV0dXJuIGJvb2xcblx0XHRcdFx0dmFsdWUgPSAhIXZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSAkZWxlbWVudC5hdHRyKCBtZXRob2QgKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vICdtYXhsZW5ndGgnIG1heSBiZSByZXR1cm5lZCBhcyAtMSwgMjE0NzQ4MzY0NyAoIElFICkgYW5kIDUyNDI4OCAoIHNhZmFyaSApIGZvciB0ZXh0IGlucHV0c1xuXHRcdGlmICggcnVsZXMubWF4bGVuZ3RoICYmIC8tMXwyMTQ3NDgzNjQ3fDUyNDI4OC8udGVzdCggcnVsZXMubWF4bGVuZ3RoICkgKSB7XG5cdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRkYXRhUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0JGVsZW1lbnQgPSAkKCBlbGVtZW50ICksXG5cdFx0XHR0eXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICksXG5cdFx0XHRtZXRob2QsIHZhbHVlO1xuXG5cdFx0Zm9yICggbWV0aG9kIGluICQudmFsaWRhdG9yLm1ldGhvZHMgKSB7XG5cdFx0XHR2YWx1ZSA9ICRlbGVtZW50LmRhdGEoIFwicnVsZVwiICsgbWV0aG9kLmNoYXJBdCggMCApLnRvVXBwZXJDYXNlKCkgKyBtZXRob2Quc3Vic3RyaW5nKCAxICkudG9Mb3dlckNhc2UoKSApO1xuXG5cdFx0XHQvLyBDYXN0IGVtcHR5IGF0dHJpYnV0ZXMgbGlrZSBgZGF0YS1ydWxlLXJlcXVpcmVkYCB0byBgdHJ1ZWBcblx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XG5cdFx0XHRcdHZhbHVlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5ub3JtYWxpemVBdHRyaWJ1dGVSdWxlKCBydWxlcywgdHlwZSwgbWV0aG9kLCB2YWx1ZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcnVsZXM7XG5cdH0sXG5cblx0c3RhdGljUnVsZXM6IGZ1bmN0aW9uKCBlbGVtZW50ICkge1xuXHRcdHZhciBydWxlcyA9IHt9LFxuXHRcdFx0dmFsaWRhdG9yID0gJC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKTtcblxuXHRcdGlmICggdmFsaWRhdG9yLnNldHRpbmdzLnJ1bGVzICkge1xuXHRcdFx0cnVsZXMgPSAkLnZhbGlkYXRvci5ub3JtYWxpemVSdWxlKCB2YWxpZGF0b3Iuc2V0dGluZ3MucnVsZXNbIGVsZW1lbnQubmFtZSBdICkgfHwge307XG5cdFx0fVxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHRub3JtYWxpemVSdWxlczogZnVuY3Rpb24oIHJ1bGVzLCBlbGVtZW50ICkge1xuXG5cdFx0Ly8gSGFuZGxlIGRlcGVuZGVuY3kgY2hlY2tcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcHJvcCwgdmFsICkge1xuXG5cdFx0XHQvLyBJZ25vcmUgcnVsZSB3aGVuIHBhcmFtIGlzIGV4cGxpY2l0bHkgZmFsc2UsIGVnLiByZXF1aXJlZDpmYWxzZVxuXHRcdFx0aWYgKCB2YWwgPT09IGZhbHNlICkge1xuXHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCB2YWwucGFyYW0gfHwgdmFsLmRlcGVuZHMgKSB7XG5cdFx0XHRcdHZhciBrZWVwUnVsZSA9IHRydWU7XG5cdFx0XHRcdHN3aXRjaCAoIHR5cGVvZiB2YWwuZGVwZW5kcyApIHtcblx0XHRcdFx0Y2FzZSBcInN0cmluZ1wiOlxuXHRcdFx0XHRcdGtlZXBSdWxlID0gISEkKCB2YWwuZGVwZW5kcywgZWxlbWVudC5mb3JtICkubGVuZ3RoO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZnVuY3Rpb25cIjpcblx0XHRcdFx0XHRrZWVwUnVsZSA9IHZhbC5kZXBlbmRzLmNhbGwoIGVsZW1lbnQsIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGtlZXBSdWxlICkge1xuXHRcdFx0XHRcdHJ1bGVzWyBwcm9wIF0gPSB2YWwucGFyYW0gIT09IHVuZGVmaW5lZCA/IHZhbC5wYXJhbSA6IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JC5kYXRhKCBlbGVtZW50LmZvcm0sIFwidmFsaWRhdG9yXCIgKS5yZXNldEVsZW1lbnRzKCAkKCBlbGVtZW50ICkgKTtcblx0XHRcdFx0XHRkZWxldGUgcnVsZXNbIHByb3AgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdC8vIEV2YWx1YXRlIHBhcmFtZXRlcnNcblx0XHQkLmVhY2goIHJ1bGVzLCBmdW5jdGlvbiggcnVsZSwgcGFyYW1ldGVyICkge1xuXHRcdFx0cnVsZXNbIHJ1bGUgXSA9ICQuaXNGdW5jdGlvbiggcGFyYW1ldGVyICkgJiYgcnVsZSAhPT0gXCJub3JtYWxpemVyXCIgPyBwYXJhbWV0ZXIoIGVsZW1lbnQgKSA6IHBhcmFtZXRlcjtcblx0XHR9ICk7XG5cblx0XHQvLyBDbGVhbiBudW1iZXIgcGFyYW1ldGVyc1xuXHRcdCQuZWFjaCggWyBcIm1pbmxlbmd0aFwiLCBcIm1heGxlbmd0aFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBydWxlc1sgdGhpcyBdICkge1xuXHRcdFx0XHRydWxlc1sgdGhpcyBdID0gTnVtYmVyKCBydWxlc1sgdGhpcyBdICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdCQuZWFjaCggWyBcInJhbmdlbGVuZ3RoXCIsIFwicmFuZ2VcIiBdLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYXJ0cztcblx0XHRcdGlmICggcnVsZXNbIHRoaXMgXSApIHtcblx0XHRcdFx0aWYgKCAkLmlzQXJyYXkoIHJ1bGVzWyB0aGlzIF0gKSApIHtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDAgXSApLCBOdW1iZXIoIHJ1bGVzWyB0aGlzIF1bIDEgXSApIF07XG5cdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiBydWxlc1sgdGhpcyBdID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHBhcnRzID0gcnVsZXNbIHRoaXMgXS5yZXBsYWNlKCAvW1xcW1xcXV0vZywgXCJcIiApLnNwbGl0KCAvW1xccyxdKy8gKTtcblx0XHRcdFx0XHRydWxlc1sgdGhpcyBdID0gWyBOdW1iZXIoIHBhcnRzWyAwIF0gKSwgTnVtYmVyKCBwYXJ0c1sgMSBdICkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHRcdGlmICggJC52YWxpZGF0b3IuYXV0b0NyZWF0ZVJhbmdlcyApIHtcblxuXHRcdFx0Ly8gQXV0by1jcmVhdGUgcmFuZ2VzXG5cdFx0XHRpZiAoIHJ1bGVzLm1pbiAhPSBudWxsICYmIHJ1bGVzLm1heCAhPSBudWxsICkge1xuXHRcdFx0XHRydWxlcy5yYW5nZSA9IFsgcnVsZXMubWluLCBydWxlcy5tYXggXTtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1pbjtcblx0XHRcdFx0ZGVsZXRlIHJ1bGVzLm1heDtcblx0XHRcdH1cblx0XHRcdGlmICggcnVsZXMubWlubGVuZ3RoICE9IG51bGwgJiYgcnVsZXMubWF4bGVuZ3RoICE9IG51bGwgKSB7XG5cdFx0XHRcdHJ1bGVzLnJhbmdlbGVuZ3RoID0gWyBydWxlcy5taW5sZW5ndGgsIHJ1bGVzLm1heGxlbmd0aCBdO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWlubGVuZ3RoO1xuXHRcdFx0XHRkZWxldGUgcnVsZXMubWF4bGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBydWxlcztcblx0fSxcblxuXHQvLyBDb252ZXJ0cyBhIHNpbXBsZSBzdHJpbmcgdG8gYSB7c3RyaW5nOiB0cnVlfSBydWxlLCBlLmcuLCBcInJlcXVpcmVkXCIgdG8ge3JlcXVpcmVkOnRydWV9XG5cdG5vcm1hbGl6ZVJ1bGU6IGZ1bmN0aW9uKCBkYXRhICkge1xuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR2YXIgdHJhbnNmb3JtZWQgPSB7fTtcblx0XHRcdCQuZWFjaCggZGF0YS5zcGxpdCggL1xccy8gKSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRyYW5zZm9ybWVkWyB0aGlzIF0gPSB0cnVlO1xuXHRcdFx0fSApO1xuXHRcdFx0ZGF0YSA9IHRyYW5zZm9ybWVkO1xuXHRcdH1cblx0XHRyZXR1cm4gZGF0YTtcblx0fSxcblxuXHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2pRdWVyeS52YWxpZGF0b3IuYWRkTWV0aG9kL1xuXHRhZGRNZXRob2Q6IGZ1bmN0aW9uKCBuYW1lLCBtZXRob2QsIG1lc3NhZ2UgKSB7XG5cdFx0JC52YWxpZGF0b3IubWV0aG9kc1sgbmFtZSBdID0gbWV0aG9kO1xuXHRcdCQudmFsaWRhdG9yLm1lc3NhZ2VzWyBuYW1lIF0gPSBtZXNzYWdlICE9PSB1bmRlZmluZWQgPyBtZXNzYWdlIDogJC52YWxpZGF0b3IubWVzc2FnZXNbIG5hbWUgXTtcblx0XHRpZiAoIG1ldGhvZC5sZW5ndGggPCAzICkge1xuXHRcdFx0JC52YWxpZGF0b3IuYWRkQ2xhc3NSdWxlcyggbmFtZSwgJC52YWxpZGF0b3Iubm9ybWFsaXplUnVsZSggbmFtZSApICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvalF1ZXJ5LnZhbGlkYXRvci5tZXRob2RzL1xuXHRtZXRob2RzOiB7XG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JlcXVpcmVkLW1ldGhvZC9cblx0XHRyZXF1aXJlZDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgZGVwZW5kZW5jeSBpcyBtZXRcblx0XHRcdGlmICggIXRoaXMuZGVwZW5kKCBwYXJhbSwgZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzZWxlY3RcIiApIHtcblxuXHRcdFx0XHQvLyBDb3VsZCBiZSBhbiBhcnJheSBmb3Igc2VsZWN0LW11bHRpcGxlIG9yIGEgc3RyaW5nLCBib3RoIGFyZSBmaW5lIHRoaXMgd2F5XG5cdFx0XHRcdHZhciB2YWwgPSAkKCBlbGVtZW50ICkudmFsKCk7XG5cdFx0XHRcdHJldHVybiB2YWwgJiYgdmFsLmxlbmd0aCA+IDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIHRoaXMuY2hlY2thYmxlKCBlbGVtZW50ICkgKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKSA+IDA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS5sZW5ndGggPiAwO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2VtYWlsLW1ldGhvZC9cblx0XHRlbWFpbDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXG5cdFx0XHQvLyBGcm9tIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjdmFsaWQtZS1tYWlsLWFkZHJlc3Ncblx0XHRcdC8vIFJldHJpZXZlZCAyMDE0LTAxLTE0XG5cdFx0XHQvLyBJZiB5b3UgaGF2ZSBhIHByb2JsZW0gd2l0aCB0aGlzIGltcGxlbWVudGF0aW9uLCByZXBvcnQgYSBidWcgYWdhaW5zdCB0aGUgYWJvdmUgc3BlY1xuXHRcdFx0Ly8gT3IgdXNlIGN1c3RvbSBtZXRob2RzIHRvIGltcGxlbWVudCB5b3VyIG93biBlbWFpbCB2YWxpZGF0aW9uXG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eW2EtekEtWjAtOS4hIyQlJicqK1xcLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvdXJsLW1ldGhvZC9cblx0XHR1cmw6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblxuXHRcdFx0Ly8gQ29weXJpZ2h0IChjKSAyMDEwLTIwMTMgRGllZ28gUGVyaW5pLCBNSVQgbGljZW5zZWRcblx0XHRcdC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2RwZXJpbmkvNzI5Mjk0XG5cdFx0XHQvLyBzZWUgYWxzbyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvZGVtby91cmwtcmVnZXhcblx0XHRcdC8vIG1vZGlmaWVkIHRvIGFsbG93IHByb3RvY29sLXJlbGF0aXZlIFVSTHNcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgL14oPzooPzooPzpodHRwcz98ZnRwKTopP1xcL1xcLykoPzpcXFMrKD86OlxcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcXC5cXGR7MSwzfSl7M30pKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKSg/OlxcLlxcZHsxLDN9KXsyfSkoPzpbMS05XVxcZD98MVxcZFxcZHwyWzAxXVxcZHwyMlswLTNdKSg/OlxcLig/OjE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKXsyfSg/OlxcLig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMC00XVxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0tKikqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSg/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldLSopKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykqKD86XFwuKD86W2EtelxcdTAwYTEtXFx1ZmZmZl17Mix9KSkuPykoPzo6XFxkezIsNX0pPyg/OlsvPyNdXFxTKik/JC9pLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvZGF0ZS1tZXRob2QvXG5cdFx0ZGF0ZTogKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjYWxsZWQgPSBmYWxzZTtcblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCApIHtcblx0XHRcdFx0aWYgKCAhY2FsbGVkICkge1xuXHRcdFx0XHRcdGNhbGxlZCA9IHRydWU7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLmRlYnVnICYmIHdpbmRvdy5jb25zb2xlICkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKFxuXHRcdFx0XHRcdFx0XHRcIlRoZSBgZGF0ZWAgbWV0aG9kIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uICcyLjAuMCcuXFxuXCIgK1xuXHRcdFx0XHRcdFx0XHRcIlBsZWFzZSBkb24ndCB1c2UgaXQsIHNpbmNlIGl0IHJlbGllcyBvbiB0aGUgRGF0ZSBjb25zdHJ1Y3Rvciwgd2hpY2hcXG5cIiArXG5cdFx0XHRcdFx0XHRcdFwiYmVoYXZlcyB2ZXJ5IGRpZmZlcmVudGx5IGFjcm9zcyBicm93c2VycyBhbmQgbG9jYWxlcy4gVXNlIGBkYXRlSVNPYFxcblwiICtcblx0XHRcdFx0XHRcdFx0XCJpbnN0ZWFkIG9yIG9uZSBvZiB0aGUgbG9jYWxlIHNwZWNpZmljIG1ldGhvZHMgaW4gYGxvY2FsaXphdGlvbnMvYFxcblwiICtcblx0XHRcdFx0XHRcdFx0XCJhbmQgYGFkZGl0aW9uYWwtbWV0aG9kcy5qc2AuXCJcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAhL0ludmFsaWR8TmFOLy50ZXN0KCBuZXcgRGF0ZSggdmFsdWUgKS50b1N0cmluZygpICk7XG5cdFx0XHR9O1xuXHRcdH0oKSApLFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9kYXRlSVNPLW1ldGhvZC9cblx0XHRkYXRlSVNPOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkezR9W1xcL1xcLV0oMD9bMS05XXwxWzAxMl0pW1xcL1xcLV0oMD9bMS05XXxbMTJdWzAtOV18M1swMV0pJC8udGVzdCggdmFsdWUgKTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9udW1iZXItbWV0aG9kL1xuXHRcdG51bWJlcjogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50ICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAvXig/Oi0/XFxkK3wtP1xcZHsxLDN9KD86LFxcZHszfSkrKT8oPzpcXC5cXGQrKT8kLy50ZXN0KCB2YWx1ZSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL2RpZ2l0cy1tZXRob2QvXG5cdFx0ZGlnaXRzOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IC9eXFxkKyQvLnRlc3QoIHZhbHVlICk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvbWlubGVuZ3RoLW1ldGhvZC9cblx0XHRtaW5sZW5ndGg6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgbGVuZ3RoID0gJC5pc0FycmF5KCB2YWx1ZSApID8gdmFsdWUubGVuZ3RoIDogdGhpcy5nZXRMZW5ndGgoIHZhbHVlLCBlbGVtZW50ICk7XG5cdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25hbCggZWxlbWVudCApIHx8IGxlbmd0aCA+PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXhsZW5ndGgtbWV0aG9kL1xuXHRcdG1heGxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgbGVuZ3RoIDw9IHBhcmFtO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3JhbmdlbGVuZ3RoLW1ldGhvZC9cblx0XHRyYW5nZWxlbmd0aDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHZhciBsZW5ndGggPSAkLmlzQXJyYXkoIHZhbHVlICkgPyB2YWx1ZS5sZW5ndGggOiB0aGlzLmdldExlbmd0aCggdmFsdWUsIGVsZW1lbnQgKTtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgKCBsZW5ndGggPj0gcGFyYW1bIDAgXSAmJiBsZW5ndGggPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL21pbi1tZXRob2QvXG5cdFx0bWluOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWx1ZSA+PSBwYXJhbTtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9tYXgtbWV0aG9kL1xuXHRcdG1heDogZnVuY3Rpb24oIHZhbHVlLCBlbGVtZW50LCBwYXJhbSApIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbmFsKCBlbGVtZW50ICkgfHwgdmFsdWUgPD0gcGFyYW07XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmFuZ2UtbWV0aG9kL1xuXHRcdHJhbmdlOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCAoIHZhbHVlID49IHBhcmFtWyAwIF0gJiYgdmFsdWUgPD0gcGFyYW1bIDEgXSApO1xuXHRcdH0sXG5cblx0XHQvLyBodHRwczovL2pxdWVyeXZhbGlkYXRpb24ub3JnL3N0ZXAtbWV0aG9kL1xuXHRcdHN0ZXA6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0gKSB7XG5cdFx0XHR2YXIgdHlwZSA9ICQoIGVsZW1lbnQgKS5hdHRyKCBcInR5cGVcIiApLFxuXHRcdFx0XHRlcnJvck1lc3NhZ2UgPSBcIlN0ZXAgYXR0cmlidXRlIG9uIGlucHV0IHR5cGUgXCIgKyB0eXBlICsgXCIgaXMgbm90IHN1cHBvcnRlZC5cIixcblx0XHRcdFx0c3VwcG9ydGVkVHlwZXMgPSBbIFwidGV4dFwiLCBcIm51bWJlclwiLCBcInJhbmdlXCIgXSxcblx0XHRcdFx0cmUgPSBuZXcgUmVnRXhwKCBcIlxcXFxiXCIgKyB0eXBlICsgXCJcXFxcYlwiICksXG5cdFx0XHRcdG5vdFN1cHBvcnRlZCA9IHR5cGUgJiYgIXJlLnRlc3QoIHN1cHBvcnRlZFR5cGVzLmpvaW4oKSApLFxuXHRcdFx0XHRkZWNpbWFsUGxhY2VzID0gZnVuY3Rpb24oIG51bSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2ggPSAoIFwiXCIgKyBudW0gKS5tYXRjaCggLyg/OlxcLihcXGQrKSk/JC8gKTtcblx0XHRcdFx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE51bWJlciBvZiBkaWdpdHMgcmlnaHQgb2YgZGVjaW1hbCBwb2ludC5cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2hbIDEgXSA/IG1hdGNoWyAxIF0ubGVuZ3RoIDogMDtcblx0XHRcdFx0fSxcblx0XHRcdFx0dG9JbnQgPSBmdW5jdGlvbiggbnVtICkge1xuXHRcdFx0XHRcdHJldHVybiBNYXRoLnJvdW5kKCBudW0gKiBNYXRoLnBvdyggMTAsIGRlY2ltYWxzICkgKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dmFsaWQgPSB0cnVlLFxuXHRcdFx0XHRkZWNpbWFscztcblxuXHRcdFx0Ly8gV29ya3Mgb25seSBmb3IgdGV4dCwgbnVtYmVyIGFuZCByYW5nZSBpbnB1dCB0eXBlc1xuXHRcdFx0Ly8gVE9ETyBmaW5kIGEgd2F5IHRvIHN1cHBvcnQgaW5wdXQgdHlwZXMgZGF0ZSwgZGF0ZXRpbWUsIGRhdGV0aW1lLWxvY2FsLCBtb250aCwgdGltZSBhbmQgd2Vla1xuXHRcdFx0aWYgKCBub3RTdXBwb3J0ZWQgKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvciggZXJyb3JNZXNzYWdlICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlY2ltYWxzID0gZGVjaW1hbFBsYWNlcyggcGFyYW0gKTtcblxuXHRcdFx0Ly8gVmFsdWUgY2FuJ3QgaGF2ZSB0b28gbWFueSBkZWNpbWFsc1xuXHRcdFx0aWYgKCBkZWNpbWFsUGxhY2VzKCB2YWx1ZSApID4gZGVjaW1hbHMgfHwgdG9JbnQoIHZhbHVlICkgJSB0b0ludCggcGFyYW0gKSAhPT0gMCApIHtcblx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9uYWwoIGVsZW1lbnQgKSB8fCB2YWxpZDtcblx0XHR9LFxuXG5cdFx0Ly8gaHR0cHM6Ly9qcXVlcnl2YWxpZGF0aW9uLm9yZy9lcXVhbFRvLW1ldGhvZC9cblx0XHRlcXVhbFRvOiBmdW5jdGlvbiggdmFsdWUsIGVsZW1lbnQsIHBhcmFtICkge1xuXG5cdFx0XHQvLyBCaW5kIHRvIHRoZSBibHVyIGV2ZW50IG9mIHRoZSB0YXJnZXQgaW4gb3JkZXIgdG8gcmV2YWxpZGF0ZSB3aGVuZXZlciB0aGUgdGFyZ2V0IGZpZWxkIGlzIHVwZGF0ZWRcblx0XHRcdHZhciB0YXJnZXQgPSAkKCBwYXJhbSApO1xuXHRcdFx0aWYgKCB0aGlzLnNldHRpbmdzLm9uZm9jdXNvdXQgJiYgdGFyZ2V0Lm5vdCggXCIudmFsaWRhdGUtZXF1YWxUby1ibHVyXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHRhcmdldC5hZGRDbGFzcyggXCJ2YWxpZGF0ZS1lcXVhbFRvLWJsdXJcIiApLm9uKCBcImJsdXIudmFsaWRhdGUtZXF1YWxUb1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQkKCBlbGVtZW50ICkudmFsaWQoKTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB0YXJnZXQudmFsKCk7XG5cdFx0fSxcblxuXHRcdC8vIGh0dHBzOi8vanF1ZXJ5dmFsaWRhdGlvbi5vcmcvcmVtb3RlLW1ldGhvZC9cblx0XHRyZW1vdGU6IGZ1bmN0aW9uKCB2YWx1ZSwgZWxlbWVudCwgcGFyYW0sIG1ldGhvZCApIHtcblx0XHRcdGlmICggdGhpcy5vcHRpb25hbCggZWxlbWVudCApICkge1xuXHRcdFx0XHRyZXR1cm4gXCJkZXBlbmRlbmN5LW1pc21hdGNoXCI7XG5cdFx0XHR9XG5cblx0XHRcdG1ldGhvZCA9IHR5cGVvZiBtZXRob2QgPT09IFwic3RyaW5nXCIgJiYgbWV0aG9kIHx8IFwicmVtb3RlXCI7XG5cblx0XHRcdHZhciBwcmV2aW91cyA9IHRoaXMucHJldmlvdXNWYWx1ZSggZWxlbWVudCwgbWV0aG9kICksXG5cdFx0XHRcdHZhbGlkYXRvciwgZGF0YSwgb3B0aW9uRGF0YVN0cmluZztcblxuXHRcdFx0aWYgKCAhdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF0gKSB7XG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MubWVzc2FnZXNbIGVsZW1lbnQubmFtZSBdID0ge307XG5cdFx0XHR9XG5cdFx0XHRwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2UgPSBwcmV2aW91cy5vcmlnaW5hbE1lc3NhZ2UgfHwgdGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdO1xuXHRcdFx0dGhpcy5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdID0gcHJldmlvdXMubWVzc2FnZTtcblxuXHRcdFx0cGFyYW0gPSB0eXBlb2YgcGFyYW0gPT09IFwic3RyaW5nXCIgJiYgeyB1cmw6IHBhcmFtIH0gfHwgcGFyYW07XG5cdFx0XHRvcHRpb25EYXRhU3RyaW5nID0gJC5wYXJhbSggJC5leHRlbmQoIHsgZGF0YTogdmFsdWUgfSwgcGFyYW0uZGF0YSApICk7XG5cdFx0XHRpZiAoIHByZXZpb3VzLm9sZCA9PT0gb3B0aW9uRGF0YVN0cmluZyApIHtcblx0XHRcdFx0cmV0dXJuIHByZXZpb3VzLnZhbGlkO1xuXHRcdFx0fVxuXG5cdFx0XHRwcmV2aW91cy5vbGQgPSBvcHRpb25EYXRhU3RyaW5nO1xuXHRcdFx0dmFsaWRhdG9yID0gdGhpcztcblx0XHRcdHRoaXMuc3RhcnRSZXF1ZXN0KCBlbGVtZW50ICk7XG5cdFx0XHRkYXRhID0ge307XG5cdFx0XHRkYXRhWyBlbGVtZW50Lm5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0JC5hamF4KCAkLmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRtb2RlOiBcImFib3J0XCIsXG5cdFx0XHRcdHBvcnQ6IFwidmFsaWRhdGVcIiArIGVsZW1lbnQubmFtZSxcblx0XHRcdFx0ZGF0YVR5cGU6IFwianNvblwiLFxuXHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRjb250ZXh0OiB2YWxpZGF0b3IuY3VycmVudEZvcm0sXG5cdFx0XHRcdHN1Y2Nlc3M6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdFx0XHR2YXIgdmFsaWQgPSByZXNwb25zZSA9PT0gdHJ1ZSB8fCByZXNwb25zZSA9PT0gXCJ0cnVlXCIsXG5cdFx0XHRcdFx0XHRlcnJvcnMsIG1lc3NhZ2UsIHN1Ym1pdHRlZDtcblxuXHRcdFx0XHRcdHZhbGlkYXRvci5zZXR0aW5ncy5tZXNzYWdlc1sgZWxlbWVudC5uYW1lIF1bIG1ldGhvZCBdID0gcHJldmlvdXMub3JpZ2luYWxNZXNzYWdlO1xuXHRcdFx0XHRcdGlmICggdmFsaWQgKSB7XG5cdFx0XHRcdFx0XHRzdWJtaXR0ZWQgPSB2YWxpZGF0b3IuZm9ybVN1Ym1pdHRlZDtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5yZXNldEludGVybmFscygpO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnRvSGlkZSA9IHZhbGlkYXRvci5lcnJvcnNGb3IoIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5mb3JtU3VibWl0dGVkID0gc3VibWl0dGVkO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnN1Y2Nlc3NMaXN0LnB1c2goIGVsZW1lbnQgKTtcblx0XHRcdFx0XHRcdHZhbGlkYXRvci5pbnZhbGlkWyBlbGVtZW50Lm5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZXJyb3JzID0ge307XG5cdFx0XHRcdFx0XHRtZXNzYWdlID0gcmVzcG9uc2UgfHwgdmFsaWRhdG9yLmRlZmF1bHRNZXNzYWdlKCBlbGVtZW50LCB7IG1ldGhvZDogbWV0aG9kLCBwYXJhbWV0ZXJzOiB2YWx1ZSB9ICk7XG5cdFx0XHRcdFx0XHRlcnJvcnNbIGVsZW1lbnQubmFtZSBdID0gcHJldmlvdXMubWVzc2FnZSA9IG1lc3NhZ2U7XG5cdFx0XHRcdFx0XHR2YWxpZGF0b3IuaW52YWxpZFsgZWxlbWVudC5uYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0dmFsaWRhdG9yLnNob3dFcnJvcnMoIGVycm9ycyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwcmV2aW91cy52YWxpZCA9IHZhbGlkO1xuXHRcdFx0XHRcdHZhbGlkYXRvci5zdG9wUmVxdWVzdCggZWxlbWVudCwgdmFsaWQgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgcGFyYW0gKSApO1xuXHRcdFx0cmV0dXJuIFwicGVuZGluZ1wiO1xuXHRcdH1cblx0fVxuXG59ICk7XG5cbi8vIEFqYXggbW9kZTogYWJvcnRcbi8vIHVzYWdlOiAkLmFqYXgoeyBtb2RlOiBcImFib3J0XCJbLCBwb3J0OiBcInVuaXF1ZXBvcnRcIl19KTtcbi8vIGlmIG1vZGU6XCJhYm9ydFwiIGlzIHVzZWQsIHRoZSBwcmV2aW91cyByZXF1ZXN0IG9uIHRoYXQgcG9ydCAocG9ydCBjYW4gYmUgdW5kZWZpbmVkKSBpcyBhYm9ydGVkIHZpYSBYTUxIdHRwUmVxdWVzdC5hYm9ydCgpXG5cbnZhciBwZW5kaW5nUmVxdWVzdHMgPSB7fSxcblx0YWpheDtcblxuLy8gVXNlIGEgcHJlZmlsdGVyIGlmIGF2YWlsYWJsZSAoMS41KylcbmlmICggJC5hamF4UHJlZmlsdGVyICkge1xuXHQkLmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzZXR0aW5ncywgXywgeGhyICkge1xuXHRcdHZhciBwb3J0ID0gc2V0dGluZ3MucG9ydDtcblx0XHRpZiAoIHNldHRpbmdzLm1vZGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdGlmICggcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0gKSB7XG5cdFx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdLmFib3J0KCk7XG5cdFx0XHR9XG5cdFx0XHRwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSA9IHhocjtcblx0XHR9XG5cdH0gKTtcbn0gZWxzZSB7XG5cblx0Ly8gUHJveHkgYWpheFxuXHRhamF4ID0gJC5hamF4O1xuXHQkLmFqYXggPSBmdW5jdGlvbiggc2V0dGluZ3MgKSB7XG5cdFx0dmFyIG1vZGUgPSAoIFwibW9kZVwiIGluIHNldHRpbmdzID8gc2V0dGluZ3MgOiAkLmFqYXhTZXR0aW5ncyApLm1vZGUsXG5cdFx0XHRwb3J0ID0gKCBcInBvcnRcIiBpbiBzZXR0aW5ncyA/IHNldHRpbmdzIDogJC5hamF4U2V0dGluZ3MgKS5wb3J0O1xuXHRcdGlmICggbW9kZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0aWYgKCBwZW5kaW5nUmVxdWVzdHNbIHBvcnQgXSApIHtcblx0XHRcdFx0cGVuZGluZ1JlcXVlc3RzWyBwb3J0IF0uYWJvcnQoKTtcblx0XHRcdH1cblx0XHRcdHBlbmRpbmdSZXF1ZXN0c1sgcG9ydCBdID0gYWpheC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRyZXR1cm4gcGVuZGluZ1JlcXVlc3RzWyBwb3J0IF07XG5cdFx0fVxuXHRcdHJldHVybiBhamF4LmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fTtcbn1cbnJldHVybiAkO1xufSkpOyIsIihmdW5jdGlvbiggZmFjdG9yeSApIHtcblx0aWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0XHRkZWZpbmUoIFtcImpxdWVyeVwiLCBcIi4uL2pxdWVyeS52YWxpZGF0ZVwiXSwgZmFjdG9yeSApO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgbW9kdWxlLmV4cG9ydHMpIHtcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoIHJlcXVpcmUoIFwianF1ZXJ5XCIgKSApO1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGpRdWVyeSApO1xuXHR9XG59KGZ1bmN0aW9uKCAkICkge1xuXG4vKlxuICogVHJhbnNsYXRlZCBkZWZhdWx0IG1lc3NhZ2VzIGZvciB0aGUgalF1ZXJ5IHZhbGlkYXRpb24gcGx1Z2luLlxuICogTG9jYWxlOiBSVSAoUnVzc2lhbjsg0YDRg9GB0YHQutC40Lkg0Y/Qt9GL0LopXG4gKi9cbiQuZXh0ZW5kKCAkLnZhbGlkYXRvci5tZXNzYWdlcywge1xuXHRyZXF1aXJlZDogXCLQrdGC0L4g0L/QvtC70LUg0L3QtdC+0LHRhdC+0LTQuNC80L4g0LfQsNC/0L7Qu9C90LjRgtGMLlwiLFxuXHRyZW1vdGU6IFwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC/0YDQsNCy0LjQu9GM0L3QvtC1INC30L3QsNGH0LXQvdC40LUuXCIsXG5cdGVtYWlsOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQutC+0YDRgNC10LrRgtC90YvQuSDQsNC00YDQtdGBINGN0LvQtdC60YLRgNC+0L3QvdC+0Lkg0L/QvtGH0YLRiy5cIixcblx0dXJsOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQutC+0YDRgNC10LrRgtC90YvQuSBVUkwuXCIsXG5cdGRhdGU6IFwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INC60L7RgNGA0LXQutGC0L3Rg9GOINC00LDRgtGDLlwiLFxuXHRkYXRlSVNPOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQutC+0YDRgNC10LrRgtC90YPRjiDQtNCw0YLRgyDQsiDRhNC+0YDQvNCw0YLQtSBJU08uXCIsXG5cdG51bWJlcjogXCLQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0YfQuNGB0LvQvi5cIixcblx0ZGlnaXRzOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0L7QtNC40YLQtSDRgtC+0LvRjNC60L4g0YbQuNGE0YDRiy5cIixcblx0Y3JlZGl0Y2FyZDogXCLQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0L/RgNCw0LLQuNC70YzQvdGL0Lkg0L3QvtC80LXRgCDQutGA0LXQtNC40YLQvdC+0Lkg0LrQsNGA0YLRiy5cIixcblx0ZXF1YWxUbzogXCLQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0YLQsNC60L7QtSDQttC1INC30L3QsNGH0LXQvdC40LUg0LXRidGRINGA0LDQty5cIixcblx0ZXh0ZW5zaW9uOiBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstGL0LHQtdGA0LjRgtC1INGE0LDQudC7INGBINC/0YDQsNCy0LjQu9GM0L3Ri9C8INGA0LDRgdGI0LjRgNC10L3QuNC10LwuXCIsXG5cdG1heGxlbmd0aDogJC52YWxpZGF0b3IuZm9ybWF0KCBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDQvdC1INCx0L7Qu9GM0YjQtSB7MH0g0YHQuNC80LLQvtC70L7Qsi5cIiApLFxuXHRtaW5sZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCLQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0L3QtSDQvNC10L3RjNGI0LUgezB9INGB0LjQvNCy0L7Qu9C+0LIuXCIgKSxcblx0cmFuZ2VsZW5ndGg6ICQudmFsaWRhdG9yLmZvcm1hdCggXCLQn9C+0LbQsNC70YPQudGB0YLQsCwg0LLQstC10LTQuNGC0LUg0LfQvdCw0YfQtdC90LjQtSDQtNC70LjQvdC+0Lkg0L7RgiB7MH0g0LTQviB7MX0g0YHQuNC80LLQvtC70L7Qsi5cIiApLFxuXHRyYW5nZTogJC52YWxpZGF0b3IuZm9ybWF0KCBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDRh9C40YHQu9C+INC+0YIgezB9INC00L4gezF9LlwiICksXG5cdG1heDogJC52YWxpZGF0b3IuZm9ybWF0KCBcItCf0L7QttCw0LvRg9C50YHRgtCwLCDQstCy0LXQtNC40YLQtSDRh9C40YHQu9C+LCDQvNC10L3RjNGI0LXQtSDQuNC70Lgg0YDQsNCy0L3QvtC1wqB7MH0uXCIgKSxcblx0bWluOiAkLnZhbGlkYXRvci5mb3JtYXQoIFwi0J/QvtC20LDQu9GD0LnRgdGC0LAsINCy0LLQtdC00LjRgtC1INGH0LjRgdC70L4sINCx0L7Qu9GM0YjQtdC1INC40LvQuCDRgNCw0LLQvdC+0LUgezB9LlwiIClcbn0gKTtcbnJldHVybiAkO1xufSkpOyIsIi8qXG4gICAgalF1ZXJ5IE1hc2tlZCBJbnB1dCBQbHVnaW5cbiAgICBDb3B5cmlnaHQgKGMpIDIwMDcgLSAyMDE1IEpvc2ggQnVzaCAoZGlnaXRhbGJ1c2guY29tKVxuICAgIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL2RpZ2l0YWxidXNoLmNvbS9wcm9qZWN0cy9tYXNrZWQtaW5wdXQtcGx1Z2luLyNsaWNlbnNlKVxuICAgIFZlcnNpb246IDEuNC4xXG4qL1xuIWZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsgXCJqcXVlcnlcIiBdLCBmYWN0b3J5KSA6IGZhY3RvcnkoXCJvYmplY3RcIiA9PSB0eXBlb2YgZXhwb3J0cyA/IHJlcXVpcmUoXCJqcXVlcnlcIikgOiBqUXVlcnkpO1xufShmdW5jdGlvbigkKSB7XG4gICAgdmFyIGNhcmV0VGltZW91dElkLCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsIGlQaG9uZSA9IC9pcGhvbmUvaS50ZXN0KHVhKSwgY2hyb21lID0gL2Nocm9tZS9pLnRlc3QodWEpLCBhbmRyb2lkID0gL2FuZHJvaWQvaS50ZXN0KHVhKTtcbiAgICAkLm1hc2sgPSB7XG4gICAgICAgIGRlZmluaXRpb25zOiB7XG4gICAgICAgICAgICBcIjlcIjogXCJbMC05XVwiLFxuICAgICAgICAgICAgYTogXCJbQS1aYS16XVwiLFxuICAgICAgICAgICAgXCIqXCI6IFwiW0EtWmEtejAtOV1cIlxuICAgICAgICB9LFxuICAgICAgICBhdXRvY2xlYXI6ICEwLFxuICAgICAgICBkYXRhTmFtZTogXCJyYXdNYXNrRm5cIixcbiAgICAgICAgcGxhY2Vob2xkZXI6IFwiX1wiXG4gICAgfSwgJC5mbi5leHRlbmQoe1xuICAgICAgICBjYXJldDogZnVuY3Rpb24oYmVnaW4sIGVuZCkge1xuICAgICAgICAgICAgdmFyIHJhbmdlO1xuICAgICAgICAgICAgaWYgKDAgIT09IHRoaXMubGVuZ3RoICYmICF0aGlzLmlzKFwiOmhpZGRlblwiKSkgcmV0dXJuIFwibnVtYmVyXCIgPT0gdHlwZW9mIGJlZ2luID8gKGVuZCA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGVuZCA/IGVuZCA6IGJlZ2luLCBcbiAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvblJhbmdlID8gdGhpcy5zZXRTZWxlY3Rpb25SYW5nZShiZWdpbiwgZW5kKSA6IHRoaXMuY3JlYXRlVGV4dFJhbmdlICYmIChyYW5nZSA9IHRoaXMuY3JlYXRlVGV4dFJhbmdlKCksIFxuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKCEwKSwgcmFuZ2UubW92ZUVuZChcImNoYXJhY3RlclwiLCBlbmQpLCByYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgYmVnaW4pLCBcbiAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKSk7XG4gICAgICAgICAgICB9KSkgOiAodGhpc1swXS5zZXRTZWxlY3Rpb25SYW5nZSA/IChiZWdpbiA9IHRoaXNbMF0uc2VsZWN0aW9uU3RhcnQsIGVuZCA9IHRoaXNbMF0uc2VsZWN0aW9uRW5kKSA6IGRvY3VtZW50LnNlbGVjdGlvbiAmJiBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UgJiYgKHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCksIFxuICAgICAgICAgICAgYmVnaW4gPSAwIC0gcmFuZ2UuZHVwbGljYXRlKCkubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIC0xZTUpLCBlbmQgPSBiZWdpbiArIHJhbmdlLnRleHQubGVuZ3RoKSwgXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYmVnaW46IGJlZ2luLFxuICAgICAgICAgICAgICAgIGVuZDogZW5kXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgdW5tYXNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRyaWdnZXIoXCJ1bm1hc2tcIik7XG4gICAgICAgIH0sXG4gICAgICAgIG1hc2s6IGZ1bmN0aW9uKG1hc2ssIHNldHRpbmdzKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQsIGRlZnMsIHRlc3RzLCBwYXJ0aWFsUG9zaXRpb24sIGZpcnN0Tm9uTWFza1BvcywgbGFzdFJlcXVpcmVkTm9uTWFza1BvcywgbGVuLCBvbGRWYWw7XG4gICAgICAgICAgICBpZiAoIW1hc2sgJiYgdGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAkKHRoaXNbMF0pO1xuICAgICAgICAgICAgICAgIHZhciBmbiA9IGlucHV0LmRhdGEoJC5tYXNrLmRhdGFOYW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm4gPyBmbigpIDogdm9pZCAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNldHRpbmdzID0gJC5leHRlbmQoe1xuICAgICAgICAgICAgICAgIGF1dG9jbGVhcjogJC5tYXNrLmF1dG9jbGVhcixcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJC5tYXNrLnBsYWNlaG9sZGVyLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlZDogbnVsbFxuICAgICAgICAgICAgfSwgc2V0dGluZ3MpLCBkZWZzID0gJC5tYXNrLmRlZmluaXRpb25zLCB0ZXN0cyA9IFtdLCBwYXJ0aWFsUG9zaXRpb24gPSBsZW4gPSBtYXNrLmxlbmd0aCwgXG4gICAgICAgICAgICBmaXJzdE5vbk1hc2tQb3MgPSBudWxsLCAkLmVhY2gobWFzay5zcGxpdChcIlwiKSwgZnVuY3Rpb24oaSwgYykge1xuICAgICAgICAgICAgICAgIFwiP1wiID09IGMgPyAobGVuLS0sIHBhcnRpYWxQb3NpdGlvbiA9IGkpIDogZGVmc1tjXSA/ICh0ZXN0cy5wdXNoKG5ldyBSZWdFeHAoZGVmc1tjXSkpLCBcbiAgICAgICAgICAgICAgICBudWxsID09PSBmaXJzdE5vbk1hc2tQb3MgJiYgKGZpcnN0Tm9uTWFza1BvcyA9IHRlc3RzLmxlbmd0aCAtIDEpLCBwYXJ0aWFsUG9zaXRpb24gPiBpICYmIChsYXN0UmVxdWlyZWROb25NYXNrUG9zID0gdGVzdHMubGVuZ3RoIC0gMSkpIDogdGVzdHMucHVzaChudWxsKTtcbiAgICAgICAgICAgIH0pLCB0aGlzLnRyaWdnZXIoXCJ1bm1hc2tcIikuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB0cnlGaXJlQ29tcGxldGVkKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MuY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gZmlyc3ROb25NYXNrUG9zOyBsYXN0UmVxdWlyZWROb25NYXNrUG9zID49IGk7IGkrKykgaWYgKHRlc3RzW2ldICYmIGJ1ZmZlcltpXSA9PT0gZ2V0UGxhY2Vob2xkZXIoaSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmNvbXBsZXRlZC5jYWxsKGlucHV0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZXR0aW5ncy5wbGFjZWhvbGRlci5jaGFyQXQoaSA8IHNldHRpbmdzLnBsYWNlaG9sZGVyLmxlbmd0aCA/IGkgOiAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2Vla05leHQocG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOysrcG9zIDwgbGVuICYmICF0ZXN0c1twb3NdOyApIDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc2Vla1ByZXYocG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOy0tcG9zID49IDAgJiYgIXRlc3RzW3Bvc107ICkgO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaGlmdEwoYmVnaW4sIGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaSwgajtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoMCA+IGJlZ2luKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gYmVnaW4sIGogPSBzZWVrTmV4dChlbmQpOyBsZW4gPiBpOyBpKyspIGlmICh0ZXN0c1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKGxlbiA+IGogJiYgdGVzdHNbaV0udGVzdChidWZmZXJbal0pKSkgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyW2ldID0gYnVmZmVyW2pdLCBidWZmZXJbal0gPSBnZXRQbGFjZWhvbGRlcihqKSwgaiA9IHNlZWtOZXh0KGopO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoKSwgaW5wdXQuY2FyZXQoTWF0aC5tYXgoZmlyc3ROb25NYXNrUG9zLCBiZWdpbikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHNoaWZ0Uihwb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGMsIGosIHQ7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IHBvcywgYyA9IGdldFBsYWNlaG9sZGVyKHBvcyk7IGxlbiA+IGk7IGkrKykgaWYgKHRlc3RzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9IHNlZWtOZXh0KGkpLCB0ID0gYnVmZmVyW2ldLCBidWZmZXJbaV0gPSBjLCAhKGxlbiA+IGogJiYgdGVzdHNbal0udGVzdCh0KSkpIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYW5kcm9pZElucHV0RXZlbnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJWYWwgPSBpbnB1dC52YWwoKSwgcG9zID0gaW5wdXQuY2FyZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFZhbCAmJiBvbGRWYWwubGVuZ3RoICYmIG9sZFZhbC5sZW5ndGggPiBjdXJWYWwubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNoZWNrVmFsKCEwKTsgcG9zLmJlZ2luID4gMCAmJiAhdGVzdHNbcG9zLmJlZ2luIC0gMV07ICkgcG9zLmJlZ2luLS07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gcG9zLmJlZ2luKSBmb3IgKDtwb3MuYmVnaW4gPCBmaXJzdE5vbk1hc2tQb3MgJiYgIXRlc3RzW3Bvcy5iZWdpbl07ICkgcG9zLmJlZ2luKys7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jYXJldChwb3MuYmVnaW4sIHBvcy5iZWdpbik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNoZWNrVmFsKCEwKTsgcG9zLmJlZ2luIDwgbGVuICYmICF0ZXN0c1twb3MuYmVnaW5dOyApIHBvcy5iZWdpbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2FyZXQocG9zLmJlZ2luLCBwb3MuYmVnaW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRyeUZpcmVDb21wbGV0ZWQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYmx1ckV2ZW50KCkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja1ZhbCgpLCBpbnB1dC52YWwoKSAhPSBmb2N1c1RleHQgJiYgaW5wdXQuY2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGtleWRvd25FdmVudChlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQucHJvcChcInJlYWRvbmx5XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zLCBiZWdpbiwgZW5kLCBrID0gZS53aGljaCB8fCBlLmtleUNvZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRWYWwgPSBpbnB1dC52YWwoKSwgOCA9PT0gayB8fCA0NiA9PT0gayB8fCBpUGhvbmUgJiYgMTI3ID09PSBrID8gKHBvcyA9IGlucHV0LmNhcmV0KCksIFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBwb3MuYmVnaW4sIGVuZCA9IHBvcy5lbmQsIGVuZCAtIGJlZ2luID09PSAwICYmIChiZWdpbiA9IDQ2ICE9PSBrID8gc2Vla1ByZXYoYmVnaW4pIDogZW5kID0gc2Vla05leHQoYmVnaW4gLSAxKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSA0NiA9PT0gayA/IHNlZWtOZXh0KGVuZCkgOiBlbmQpLCBjbGVhckJ1ZmZlcihiZWdpbiwgZW5kKSwgc2hpZnRMKGJlZ2luLCBlbmQgLSAxKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCkpIDogMTMgPT09IGsgPyBibHVyRXZlbnQuY2FsbCh0aGlzLCBlKSA6IDI3ID09PSBrICYmIChpbnB1dC52YWwoZm9jdXNUZXh0KSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5jYXJldCgwLCBjaGVja1ZhbCgpKSwgZS5wcmV2ZW50RGVmYXVsdCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBrZXlwcmVzc0V2ZW50KGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnB1dC5wcm9wKFwicmVhZG9ubHlcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwLCBjLCBuZXh0LCBrID0gZS53aGljaCB8fCBlLmtleUNvZGUsIHBvcyA9IGlucHV0LmNhcmV0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShlLmN0cmxLZXkgfHwgZS5hbHRLZXkgfHwgZS5tZXRhS2V5IHx8IDMyID4gaykgJiYgayAmJiAxMyAhPT0gaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MuZW5kIC0gcG9zLmJlZ2luICE9PSAwICYmIChjbGVhckJ1ZmZlcihwb3MuYmVnaW4sIHBvcy5lbmQpLCBzaGlmdEwocG9zLmJlZ2luLCBwb3MuZW5kIC0gMSkpLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gc2Vla05leHQocG9zLmJlZ2luIC0gMSksIGxlbiA+IHAgJiYgKGMgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGspLCB0ZXN0c1twXS50ZXN0KGMpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hpZnRSKHApLCBidWZmZXJbcF0gPSBjLCB3cml0ZUJ1ZmZlcigpLCBuZXh0ID0gc2Vla05leHQocCksIGFuZHJvaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQucHJveHkoJC5mbi5jYXJldCwgaW5wdXQsIG5leHQpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChwcm94eSwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpbnB1dC5jYXJldChuZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zLmJlZ2luIDw9IGxhc3RSZXF1aXJlZE5vbk1hc2tQb3MgJiYgdHJ5RmlyZUNvbXBsZXRlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGVuZCA+IGkgJiYgbGVuID4gaTsgaSsrKSB0ZXN0c1tpXSAmJiAoYnVmZmVyW2ldID0gZ2V0UGxhY2Vob2xkZXIoaSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB3cml0ZUJ1ZmZlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQudmFsKGJ1ZmZlci5qb2luKFwiXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tWYWwoYWxsb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGMsIHBvcywgdGVzdCA9IGlucHV0LnZhbCgpLCBsYXN0TWF0Y2ggPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgcG9zID0gMDsgbGVuID4gaTsgaSsrKSBpZiAodGVzdHNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoYnVmZmVyW2ldID0gZ2V0UGxhY2Vob2xkZXIoaSk7IHBvcysrIDwgdGVzdC5sZW5ndGg7ICkgaWYgKGMgPSB0ZXN0LmNoYXJBdChwb3MgLSAxKSwgXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0c1tpXS50ZXN0KGMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyW2ldID0gYywgbGFzdE1hdGNoID0gaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3MgPiB0ZXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyQnVmZmVyKGkgKyAxLCBsZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgYnVmZmVyW2ldID09PSB0ZXN0LmNoYXJBdChwb3MpICYmIHBvcysrLCBwYXJ0aWFsUG9zaXRpb24gPiBpICYmIChsYXN0TWF0Y2ggPSBpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbG93ID8gd3JpdGVCdWZmZXIoKSA6IHBhcnRpYWxQb3NpdGlvbiA+IGxhc3RNYXRjaCArIDEgPyBzZXR0aW5ncy5hdXRvY2xlYXIgfHwgYnVmZmVyLmpvaW4oXCJcIikgPT09IGRlZmF1bHRCdWZmZXIgPyAoaW5wdXQudmFsKCkgJiYgaW5wdXQudmFsKFwiXCIpLCBcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJCdWZmZXIoMCwgbGVuKSkgOiB3cml0ZUJ1ZmZlcigpIDogKHdyaXRlQnVmZmVyKCksIGlucHV0LnZhbChpbnB1dC52YWwoKS5zdWJzdHJpbmcoMCwgbGFzdE1hdGNoICsgMSkpKSwgXG4gICAgICAgICAgICAgICAgICAgIHBhcnRpYWxQb3NpdGlvbiA/IGkgOiBmaXJzdE5vbk1hc2tQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9ICQodGhpcyksIGJ1ZmZlciA9ICQubWFwKG1hc2suc3BsaXQoXCJcIiksIGZ1bmN0aW9uKGMsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiP1wiICE9IGMgPyBkZWZzW2NdID8gZ2V0UGxhY2Vob2xkZXIoaSkgOiBjIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIH0pLCBkZWZhdWx0QnVmZmVyID0gYnVmZmVyLmpvaW4oXCJcIiksIGZvY3VzVGV4dCA9IGlucHV0LnZhbCgpO1xuICAgICAgICAgICAgICAgIGlucHV0LmRhdGEoJC5tYXNrLmRhdGFOYW1lLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQubWFwKGJ1ZmZlciwgZnVuY3Rpb24oYywgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlc3RzW2ldICYmIGMgIT0gZ2V0UGxhY2Vob2xkZXIoaSkgPyBjIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfSkuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9KSwgaW5wdXQub25lKFwidW5tYXNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dC5vZmYoXCIubWFza1wiKS5yZW1vdmVEYXRhKCQubWFzay5kYXRhTmFtZSk7XG4gICAgICAgICAgICAgICAgfSkub24oXCJmb2N1cy5tYXNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0LnByb3AoXCJyZWFkb25seVwiKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNhcmV0VGltZW91dElkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb2N1c1RleHQgPSBpbnB1dC52YWwoKSwgcG9zID0gY2hlY2tWYWwoKSwgY2FyZXRUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmdldCgwKSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAod3JpdGVCdWZmZXIoKSwgcG9zID09IG1hc2sucmVwbGFjZShcIj9cIiwgXCJcIikubGVuZ3RoID8gaW5wdXQuY2FyZXQoMCwgcG9zKSA6IGlucHV0LmNhcmV0KHBvcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkub24oXCJibHVyLm1hc2tcIiwgYmx1ckV2ZW50KS5vbihcImtleWRvd24ubWFza1wiLCBrZXlkb3duRXZlbnQpLm9uKFwia2V5cHJlc3MubWFza1wiLCBrZXlwcmVzc0V2ZW50KS5vbihcImlucHV0Lm1hc2sgcGFzdGUubWFza1wiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQucHJvcChcInJlYWRvbmx5XCIpIHx8IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gY2hlY2tWYWwoITApO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuY2FyZXQocG9zKSwgdHJ5RmlyZUNvbXBsZXRlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICAgICAgICB9KSwgY2hyb21lICYmIGFuZHJvaWQgJiYgaW5wdXQub2ZmKFwiaW5wdXQubWFza1wiKS5vbihcImlucHV0Lm1hc2tcIiwgYW5kcm9pZElucHV0RXZlbnQpLCBcbiAgICAgICAgICAgICAgICBjaGVja1ZhbCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyIsIi8qISBNYWduaWZpYyBQb3B1cCAtIHYxLjEuMCAtIDIwMTYtMDItMjBcbiogaHR0cDovL2RpbXNlbWVub3YuY29tL3BsdWdpbnMvbWFnbmlmaWMtcG9wdXAvXG4qIENvcHlyaWdodCAoYykgMjAxNiBEbWl0cnkgU2VtZW5vdjsgKi9cbjsoZnVuY3Rpb24gKGZhY3RvcnkpIHsgXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7IFxuIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS4gXG4gZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpOyBcbiB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykgeyBcbiAvLyBOb2RlL0NvbW1vbkpTIFxuIGZhY3RvcnkocmVxdWlyZSgnanF1ZXJ5JykpOyBcbiB9IGVsc2UgeyBcbiAvLyBCcm93c2VyIGdsb2JhbHMgXG4gZmFjdG9yeSh3aW5kb3cualF1ZXJ5IHx8IHdpbmRvdy5aZXB0byk7IFxuIH0gXG4gfShmdW5jdGlvbigkKSB7IFxuXG4vKj4+Y29yZSovXG4vKipcbiAqIFxuICogTWFnbmlmaWMgUG9wdXAgQ29yZSBKUyBmaWxlXG4gKiBcbiAqL1xuXG5cbi8qKlxuICogUHJpdmF0ZSBzdGF0aWMgY29uc3RhbnRzXG4gKi9cbnZhciBDTE9TRV9FVkVOVCA9ICdDbG9zZScsXG5cdEJFRk9SRV9DTE9TRV9FVkVOVCA9ICdCZWZvcmVDbG9zZScsXG5cdEFGVEVSX0NMT1NFX0VWRU5UID0gJ0FmdGVyQ2xvc2UnLFxuXHRCRUZPUkVfQVBQRU5EX0VWRU5UID0gJ0JlZm9yZUFwcGVuZCcsXG5cdE1BUktVUF9QQVJTRV9FVkVOVCA9ICdNYXJrdXBQYXJzZScsXG5cdE9QRU5fRVZFTlQgPSAnT3BlbicsXG5cdENIQU5HRV9FVkVOVCA9ICdDaGFuZ2UnLFxuXHROUyA9ICdtZnAnLFxuXHRFVkVOVF9OUyA9ICcuJyArIE5TLFxuXHRSRUFEWV9DTEFTUyA9ICdtZnAtcmVhZHknLFxuXHRSRU1PVklOR19DTEFTUyA9ICdtZnAtcmVtb3ZpbmcnLFxuXHRQUkVWRU5UX0NMT1NFX0NMQVNTID0gJ21mcC1wcmV2ZW50LWNsb3NlJztcblxuXG4vKipcbiAqIFByaXZhdGUgdmFycyBcbiAqL1xuLypqc2hpbnQgLVcwNzkgKi9cbnZhciBtZnAsIC8vIEFzIHdlIGhhdmUgb25seSBvbmUgaW5zdGFuY2Ugb2YgTWFnbmlmaWNQb3B1cCBvYmplY3QsIHdlIGRlZmluZSBpdCBsb2NhbGx5IHRvIG5vdCB0byB1c2UgJ3RoaXMnXG5cdE1hZ25pZmljUG9wdXAgPSBmdW5jdGlvbigpe30sXG5cdF9pc0pRID0gISEod2luZG93LmpRdWVyeSksXG5cdF9wcmV2U3RhdHVzLFxuXHRfd2luZG93ID0gJCh3aW5kb3cpLFxuXHRfZG9jdW1lbnQsXG5cdF9wcmV2Q29udGVudFR5cGUsXG5cdF93cmFwQ2xhc3Nlcyxcblx0X2N1cnJQb3B1cFR5cGU7XG5cblxuLyoqXG4gKiBQcml2YXRlIGZ1bmN0aW9uc1xuICovXG52YXIgX21mcE9uID0gZnVuY3Rpb24obmFtZSwgZikge1xuXHRcdG1mcC5ldi5vbihOUyArIG5hbWUgKyBFVkVOVF9OUywgZik7XG5cdH0sXG5cdF9nZXRFbCA9IGZ1bmN0aW9uKGNsYXNzTmFtZSwgYXBwZW5kVG8sIGh0bWwsIHJhdykge1xuXHRcdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGVsLmNsYXNzTmFtZSA9ICdtZnAtJytjbGFzc05hbWU7XG5cdFx0aWYoaHRtbCkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gaHRtbDtcblx0XHR9XG5cdFx0aWYoIXJhdykge1xuXHRcdFx0ZWwgPSAkKGVsKTtcblx0XHRcdGlmKGFwcGVuZFRvKSB7XG5cdFx0XHRcdGVsLmFwcGVuZFRvKGFwcGVuZFRvKTtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYoYXBwZW5kVG8pIHtcblx0XHRcdGFwcGVuZFRvLmFwcGVuZENoaWxkKGVsKTtcblx0XHR9XG5cdFx0cmV0dXJuIGVsO1xuXHR9LFxuXHRfbWZwVHJpZ2dlciA9IGZ1bmN0aW9uKGUsIGRhdGEpIHtcblx0XHRtZnAuZXYudHJpZ2dlckhhbmRsZXIoTlMgKyBlLCBkYXRhKTtcblxuXHRcdGlmKG1mcC5zdC5jYWxsYmFja3MpIHtcblx0XHRcdC8vIGNvbnZlcnRzIFwibWZwRXZlbnROYW1lXCIgdG8gXCJldmVudE5hbWVcIiBjYWxsYmFjayBhbmQgdHJpZ2dlcnMgaXQgaWYgaXQncyBwcmVzZW50XG5cdFx0XHRlID0gZS5jaGFyQXQoMCkudG9Mb3dlckNhc2UoKSArIGUuc2xpY2UoMSk7XG5cdFx0XHRpZihtZnAuc3QuY2FsbGJhY2tzW2VdKSB7XG5cdFx0XHRcdG1mcC5zdC5jYWxsYmFja3NbZV0uYXBwbHkobWZwLCAkLmlzQXJyYXkoZGF0YSkgPyBkYXRhIDogW2RhdGFdKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdF9nZXRDbG9zZUJ0biA9IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRpZih0eXBlICE9PSBfY3VyclBvcHVwVHlwZSB8fCAhbWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bikge1xuXHRcdFx0bWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0biA9ICQoIG1mcC5zdC5jbG9zZU1hcmt1cC5yZXBsYWNlKCcldGl0bGUlJywgbWZwLnN0LnRDbG9zZSApICk7XG5cdFx0XHRfY3VyclBvcHVwVHlwZSA9IHR5cGU7XG5cdFx0fVxuXHRcdHJldHVybiBtZnAuY3VyclRlbXBsYXRlLmNsb3NlQnRuO1xuXHR9LFxuXHQvLyBJbml0aWFsaXplIE1hZ25pZmljIFBvcHVwIG9ubHkgd2hlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRfY2hlY2tJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmKCEkLm1hZ25pZmljUG9wdXAuaW5zdGFuY2UpIHtcblx0XHRcdC8qanNoaW50IC1XMDIwICovXG5cdFx0XHRtZnAgPSBuZXcgTWFnbmlmaWNQb3B1cCgpO1xuXHRcdFx0bWZwLmluaXQoKTtcblx0XHRcdCQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZSA9IG1mcDtcblx0XHR9XG5cdH0sXG5cdC8vIENTUyB0cmFuc2l0aW9uIGRldGVjdGlvbiwgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MjY0ODk5L2RldGVjdC1jc3MtdHJhbnNpdGlvbnMtdXNpbmctamF2YXNjcmlwdC1hbmQtd2l0aG91dC1tb2Rlcm5penJcblx0c3VwcG9ydHNUcmFuc2l0aW9ucyA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLnN0eWxlLCAvLyAncycgZm9yIHN0eWxlLiBiZXR0ZXIgdG8gY3JlYXRlIGFuIGVsZW1lbnQgaWYgYm9keSB5ZXQgdG8gZXhpc3Rcblx0XHRcdHYgPSBbJ21zJywnTycsJ01veicsJ1dlYmtpdCddOyAvLyAndicgZm9yIHZlbmRvclxuXG5cdFx0aWYoIHNbJ3RyYW5zaXRpb24nXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIHRydWU7IFxuXHRcdH1cblx0XHRcdFxuXHRcdHdoaWxlKCB2Lmxlbmd0aCApIHtcblx0XHRcdGlmKCB2LnBvcCgpICsgJ1RyYW5zaXRpb24nIGluIHMgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcdFx0XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xuXG5cblxuLyoqXG4gKiBQdWJsaWMgZnVuY3Rpb25zXG4gKi9cbk1hZ25pZmljUG9wdXAucHJvdG90eXBlID0ge1xuXG5cdGNvbnN0cnVjdG9yOiBNYWduaWZpY1BvcHVwLFxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyBNYWduaWZpYyBQb3B1cCBwbHVnaW4uIFxuXHQgKiBUaGlzIGZ1bmN0aW9uIGlzIHRyaWdnZXJlZCBvbmx5IG9uY2Ugd2hlbiAkLmZuLm1hZ25pZmljUG9wdXAgb3IgJC5tYWduaWZpY1BvcHVwIGlzIGV4ZWN1dGVkXG5cdCAqL1xuXHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXBwVmVyc2lvbiA9IG5hdmlnYXRvci5hcHBWZXJzaW9uO1xuXHRcdG1mcC5pc0xvd0lFID0gbWZwLmlzSUU4ID0gZG9jdW1lbnQuYWxsICYmICFkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyO1xuXHRcdG1mcC5pc0FuZHJvaWQgPSAoL2FuZHJvaWQvZ2kpLnRlc3QoYXBwVmVyc2lvbik7XG5cdFx0bWZwLmlzSU9TID0gKC9pcGhvbmV8aXBhZHxpcG9kL2dpKS50ZXN0KGFwcFZlcnNpb24pO1xuXHRcdG1mcC5zdXBwb3J0c1RyYW5zaXRpb24gPSBzdXBwb3J0c1RyYW5zaXRpb25zKCk7XG5cblx0XHQvLyBXZSBkaXNhYmxlIGZpeGVkIHBvc2l0aW9uZWQgbGlnaHRib3ggb24gZGV2aWNlcyB0aGF0IGRvbid0IGhhbmRsZSBpdCBuaWNlbHkuXG5cdFx0Ly8gSWYgeW91IGtub3cgYSBiZXR0ZXIgd2F5IG9mIGRldGVjdGluZyB0aGlzIC0gbGV0IG1lIGtub3cuXG5cdFx0bWZwLnByb2JhYmx5TW9iaWxlID0gKG1mcC5pc0FuZHJvaWQgfHwgbWZwLmlzSU9TIHx8IC8oT3BlcmEgTWluaSl8S2luZGxlfHdlYk9TfEJsYWNrQmVycnl8KE9wZXJhIE1vYmkpfChXaW5kb3dzIFBob25lKXxJRU1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgKTtcblx0XHRfZG9jdW1lbnQgPSAkKGRvY3VtZW50KTtcblxuXHRcdG1mcC5wb3B1cHNDYWNoZSA9IHt9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBPcGVucyBwb3B1cFxuXHQgKiBAcGFyYW0gIGRhdGEgW2Rlc2NyaXB0aW9uXVxuXHQgKi9cblx0b3BlbjogZnVuY3Rpb24oZGF0YSkge1xuXG5cdFx0dmFyIGk7XG5cblx0XHRpZihkYXRhLmlzT2JqID09PSBmYWxzZSkgeyBcblx0XHRcdC8vIGNvbnZlcnQgalF1ZXJ5IGNvbGxlY3Rpb24gdG8gYXJyYXkgdG8gYXZvaWQgY29uZmxpY3RzIGxhdGVyXG5cdFx0XHRtZnAuaXRlbXMgPSBkYXRhLml0ZW1zLnRvQXJyYXkoKTtcblxuXHRcdFx0bWZwLmluZGV4ID0gMDtcblx0XHRcdHZhciBpdGVtcyA9IGRhdGEuaXRlbXMsXG5cdFx0XHRcdGl0ZW07XG5cdFx0XHRmb3IoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpdGVtID0gaXRlbXNbaV07XG5cdFx0XHRcdGlmKGl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRcdFx0aXRlbSA9IGl0ZW0uZWxbMF07XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYoaXRlbSA9PT0gZGF0YS5lbFswXSkge1xuXHRcdFx0XHRcdG1mcC5pbmRleCA9IGk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLml0ZW1zID0gJC5pc0FycmF5KGRhdGEuaXRlbXMpID8gZGF0YS5pdGVtcyA6IFtkYXRhLml0ZW1zXTtcblx0XHRcdG1mcC5pbmRleCA9IGRhdGEuaW5kZXggfHwgMDtcblx0XHR9XG5cblx0XHQvLyBpZiBwb3B1cCBpcyBhbHJlYWR5IG9wZW5lZCAtIHdlIGp1c3QgdXBkYXRlIHRoZSBjb250ZW50XG5cdFx0aWYobWZwLmlzT3Blbikge1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdG1mcC50eXBlcyA9IFtdOyBcblx0XHRfd3JhcENsYXNzZXMgPSAnJztcblx0XHRpZihkYXRhLm1haW5FbCAmJiBkYXRhLm1haW5FbC5sZW5ndGgpIHtcblx0XHRcdG1mcC5ldiA9IGRhdGEubWFpbkVsLmVxKDApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuZXYgPSBfZG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0aWYoZGF0YS5rZXkpIHtcblx0XHRcdGlmKCFtZnAucG9wdXBzQ2FjaGVbZGF0YS5rZXldKSB7XG5cdFx0XHRcdG1mcC5wb3B1cHNDYWNoZVtkYXRhLmtleV0gPSB7fTtcblx0XHRcdH1cblx0XHRcdG1mcC5jdXJyVGVtcGxhdGUgPSBtZnAucG9wdXBzQ2FjaGVbZGF0YS5rZXldO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZnAuY3VyclRlbXBsYXRlID0ge307XG5cdFx0fVxuXG5cblxuXHRcdG1mcC5zdCA9ICQuZXh0ZW5kKHRydWUsIHt9LCAkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMsIGRhdGEgKTsgXG5cdFx0bWZwLmZpeGVkQ29udGVudFBvcyA9IG1mcC5zdC5maXhlZENvbnRlbnRQb3MgPT09ICdhdXRvJyA/ICFtZnAucHJvYmFibHlNb2JpbGUgOiBtZnAuc3QuZml4ZWRDb250ZW50UG9zO1xuXG5cdFx0aWYobWZwLnN0Lm1vZGFsKSB7XG5cdFx0XHRtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljayA9IGZhbHNlO1xuXHRcdFx0bWZwLnN0LmNsb3NlT25CZ0NsaWNrID0gZmFsc2U7XG5cdFx0XHRtZnAuc3Quc2hvd0Nsb3NlQnRuID0gZmFsc2U7XG5cdFx0XHRtZnAuc3QuZW5hYmxlRXNjYXBlS2V5ID0gZmFsc2U7XG5cdFx0fVxuXHRcdFxuXG5cdFx0Ly8gQnVpbGRpbmcgbWFya3VwXG5cdFx0Ly8gbWFpbiBjb250YWluZXJzIGFyZSBjcmVhdGVkIG9ubHkgb25jZVxuXHRcdGlmKCFtZnAuYmdPdmVybGF5KSB7XG5cblx0XHRcdC8vIERhcmsgb3ZlcmxheVxuXHRcdFx0bWZwLmJnT3ZlcmxheSA9IF9nZXRFbCgnYmcnKS5vbignY2xpY2snK0VWRU5UX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0bWZwLmNsb3NlKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLndyYXAgPSBfZ2V0RWwoJ3dyYXAnKS5hdHRyKCd0YWJpbmRleCcsIC0xKS5vbignY2xpY2snK0VWRU5UX05TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmKG1mcC5fY2hlY2tJZkNsb3NlKGUudGFyZ2V0KSkge1xuXHRcdFx0XHRcdG1mcC5jbG9zZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLmNvbnRhaW5lciA9IF9nZXRFbCgnY29udGFpbmVyJywgbWZwLndyYXApO1xuXHRcdH1cblxuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyID0gX2dldEVsKCdjb250ZW50Jyk7XG5cdFx0aWYobWZwLnN0LnByZWxvYWRlcikge1xuXHRcdFx0bWZwLnByZWxvYWRlciA9IF9nZXRFbCgncHJlbG9hZGVyJywgbWZwLmNvbnRhaW5lciwgbWZwLnN0LnRMb2FkaW5nKTtcblx0XHR9XG5cblxuXHRcdC8vIEluaXRpYWxpemluZyBtb2R1bGVzXG5cdFx0dmFyIG1vZHVsZXMgPSAkLm1hZ25pZmljUG9wdXAubW9kdWxlcztcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgbiA9IG1vZHVsZXNbaV07XG5cdFx0XHRuID0gbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG4uc2xpY2UoMSk7XG5cdFx0XHRtZnBbJ2luaXQnK25dLmNhbGwobWZwKTtcblx0XHR9XG5cdFx0X21mcFRyaWdnZXIoJ0JlZm9yZU9wZW4nKTtcblxuXG5cdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0bikge1xuXHRcdFx0Ly8gQ2xvc2UgYnV0dG9uXG5cdFx0XHRpZighbWZwLnN0LmNsb3NlQnRuSW5zaWRlKSB7XG5cdFx0XHRcdG1mcC53cmFwLmFwcGVuZCggX2dldENsb3NlQnRuKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdF9tZnBPbihNQVJLVVBfUEFSU0VfRVZFTlQsIGZ1bmN0aW9uKGUsIHRlbXBsYXRlLCB2YWx1ZXMsIGl0ZW0pIHtcblx0XHRcdFx0XHR2YWx1ZXMuY2xvc2VfcmVwbGFjZVdpdGggPSBfZ2V0Q2xvc2VCdG4oaXRlbS50eXBlKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdF93cmFwQ2xhc3NlcyArPSAnIG1mcC1jbG9zZS1idG4taW4nO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKG1mcC5zdC5hbGlnblRvcCkge1xuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWFsaWduLXRvcCc7XG5cdFx0fVxuXG5cdFxuXG5cdFx0aWYobWZwLmZpeGVkQ29udGVudFBvcykge1xuXHRcdFx0bWZwLndyYXAuY3NzKHtcblx0XHRcdFx0b3ZlcmZsb3c6IG1mcC5zdC5vdmVyZmxvd1ksXG5cdFx0XHRcdG92ZXJmbG93WDogJ2hpZGRlbicsXG5cdFx0XHRcdG92ZXJmbG93WTogbWZwLnN0Lm92ZXJmbG93WVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC53cmFwLmNzcyh7IFxuXHRcdFx0XHR0b3A6IF93aW5kb3cuc2Nyb2xsVG9wKCksXG5cdFx0XHRcdHBvc2l0aW9uOiAnYWJzb2x1dGUnXG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYoIG1mcC5zdC5maXhlZEJnUG9zID09PSBmYWxzZSB8fCAobWZwLnN0LmZpeGVkQmdQb3MgPT09ICdhdXRvJyAmJiAhbWZwLmZpeGVkQ29udGVudFBvcykgKSB7XG5cdFx0XHRtZnAuYmdPdmVybGF5LmNzcyh7XG5cdFx0XHRcdGhlaWdodDogX2RvY3VtZW50LmhlaWdodCgpLFxuXHRcdFx0XHRwb3NpdGlvbjogJ2Fic29sdXRlJ1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0XG5cblx0XHRpZihtZnAuc3QuZW5hYmxlRXNjYXBlS2V5KSB7XG5cdFx0XHQvLyBDbG9zZSBvbiBFU0Mga2V5XG5cdFx0XHRfZG9jdW1lbnQub24oJ2tleXVwJyArIEVWRU5UX05TLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGlmKGUua2V5Q29kZSA9PT0gMjcpIHtcblx0XHRcdFx0XHRtZnAuY2xvc2UoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0X3dpbmRvdy5vbigncmVzaXplJyArIEVWRU5UX05TLCBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC51cGRhdGVTaXplKCk7XG5cdFx0fSk7XG5cblxuXHRcdGlmKCFtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljaykge1xuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWF1dG8tY3Vyc29yJztcblx0XHR9XG5cdFx0XG5cdFx0aWYoX3dyYXBDbGFzc2VzKVxuXHRcdFx0bWZwLndyYXAuYWRkQ2xhc3MoX3dyYXBDbGFzc2VzKTtcblxuXG5cdFx0Ly8gdGhpcyB0cmlnZ2VycyByZWNhbGN1bGF0aW9uIG9mIGxheW91dCwgc28gd2UgZ2V0IGl0IG9uY2UgdG8gbm90IHRvIHRyaWdnZXIgdHdpY2Vcblx0XHR2YXIgd2luZG93SGVpZ2h0ID0gbWZwLndIID0gX3dpbmRvdy5oZWlnaHQoKTtcblxuXHRcdFxuXHRcdHZhciB3aW5kb3dTdHlsZXMgPSB7fTtcblxuXHRcdGlmKCBtZnAuZml4ZWRDb250ZW50UG9zICkge1xuICAgICAgICAgICAgaWYobWZwLl9oYXNTY3JvbGxCYXIod2luZG93SGVpZ2h0KSl7XG4gICAgICAgICAgICAgICAgdmFyIHMgPSBtZnAuX2dldFNjcm9sbGJhclNpemUoKTtcbiAgICAgICAgICAgICAgICBpZihzKSB7XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd1N0eWxlcy5tYXJnaW5SaWdodCA9IHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblx0XHRpZihtZnAuZml4ZWRDb250ZW50UG9zKSB7XG5cdFx0XHRpZighbWZwLmlzSUU3KSB7XG5cdFx0XHRcdHdpbmRvd1N0eWxlcy5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWU3IGRvdWJsZS1zY3JvbGwgYnVnXG5cdFx0XHRcdCQoJ2JvZHksIGh0bWwnKS5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdFxuXHRcdFxuXHRcdHZhciBjbGFzc2VzVG9hZGQgPSBtZnAuc3QubWFpbkNsYXNzO1xuXHRcdGlmKG1mcC5pc0lFNykge1xuXHRcdFx0Y2xhc3Nlc1RvYWRkICs9ICcgbWZwLWllNyc7XG5cdFx0fVxuXHRcdGlmKGNsYXNzZXNUb2FkZCkge1xuXHRcdFx0bWZwLl9hZGRDbGFzc1RvTUZQKCBjbGFzc2VzVG9hZGQgKTtcblx0XHR9XG5cblx0XHQvLyBhZGQgY29udGVudFxuXHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXG5cdFx0X21mcFRyaWdnZXIoJ0J1aWxkQ29udHJvbHMnKTtcblxuXHRcdC8vIHJlbW92ZSBzY3JvbGxiYXIsIGFkZCBtYXJnaW4gZS50LmNcblx0XHQkKCdodG1sJykuY3NzKHdpbmRvd1N0eWxlcyk7XG5cdFx0XG5cdFx0Ly8gYWRkIGV2ZXJ5dGhpbmcgdG8gRE9NXG5cdFx0bWZwLmJnT3ZlcmxheS5hZGQobWZwLndyYXApLnByZXBlbmRUbyggbWZwLnN0LnByZXBlbmRUbyB8fCAkKGRvY3VtZW50LmJvZHkpICk7XG5cblx0XHQvLyBTYXZlIGxhc3QgZm9jdXNlZCBlbGVtZW50XG5cdFx0bWZwLl9sYXN0Rm9jdXNlZEVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0XHRcblx0XHQvLyBXYWl0IGZvciBuZXh0IGN5Y2xlIHRvIGFsbG93IENTUyB0cmFuc2l0aW9uXG5cdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFxuXHRcdFx0aWYobWZwLmNvbnRlbnQpIHtcblx0XHRcdFx0bWZwLl9hZGRDbGFzc1RvTUZQKFJFQURZX0NMQVNTKTtcblx0XHRcdFx0bWZwLl9zZXRGb2N1cygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWYgY29udGVudCBpcyBub3QgZGVmaW5lZCAobm90IGxvYWRlZCBlLnQuYykgd2UgYWRkIGNsYXNzIG9ubHkgZm9yIEJHXG5cdFx0XHRcdG1mcC5iZ092ZXJsYXkuYWRkQ2xhc3MoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBUcmFwIHRoZSBmb2N1cyBpbiBwb3B1cFxuXHRcdFx0X2RvY3VtZW50Lm9uKCdmb2N1c2luJyArIEVWRU5UX05TLCBtZnAuX29uRm9jdXNJbik7XG5cblx0XHR9LCAxNik7XG5cblx0XHRtZnAuaXNPcGVuID0gdHJ1ZTtcblx0XHRtZnAudXBkYXRlU2l6ZSh3aW5kb3dIZWlnaHQpO1xuXHRcdF9tZnBUcmlnZ2VyKE9QRU5fRVZFTlQpO1xuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENsb3NlcyB0aGUgcG9wdXBcblx0ICovXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRpZighbWZwLmlzT3BlbikgcmV0dXJuO1xuXHRcdF9tZnBUcmlnZ2VyKEJFRk9SRV9DTE9TRV9FVkVOVCk7XG5cblx0XHRtZnAuaXNPcGVuID0gZmFsc2U7XG5cdFx0Ly8gZm9yIENTUzMgYW5pbWF0aW9uXG5cdFx0aWYobWZwLnN0LnJlbW92YWxEZWxheSAmJiAhbWZwLmlzTG93SUUgJiYgbWZwLnN1cHBvcnRzVHJhbnNpdGlvbiApICB7XG5cdFx0XHRtZnAuX2FkZENsYXNzVG9NRlAoUkVNT1ZJTkdfQ0xBU1MpO1xuXHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0bWZwLl9jbG9zZSgpO1xuXHRcdFx0fSwgbWZwLnN0LnJlbW92YWxEZWxheSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC5fY2xvc2UoKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEhlbHBlciBmb3IgY2xvc2UoKSBmdW5jdGlvblxuXHQgKi9cblx0X2Nsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRfbWZwVHJpZ2dlcihDTE9TRV9FVkVOVCk7XG5cblx0XHR2YXIgY2xhc3Nlc1RvUmVtb3ZlID0gUkVNT1ZJTkdfQ0xBU1MgKyAnICcgKyBSRUFEWV9DTEFTUyArICcgJztcblxuXHRcdG1mcC5iZ092ZXJsYXkuZGV0YWNoKCk7XG5cdFx0bWZwLndyYXAuZGV0YWNoKCk7XG5cdFx0bWZwLmNvbnRhaW5lci5lbXB0eSgpO1xuXG5cdFx0aWYobWZwLnN0Lm1haW5DbGFzcykge1xuXHRcdFx0Y2xhc3Nlc1RvUmVtb3ZlICs9IG1mcC5zdC5tYWluQ2xhc3MgKyAnICc7XG5cdFx0fVxuXG5cdFx0bWZwLl9yZW1vdmVDbGFzc0Zyb21NRlAoY2xhc3Nlc1RvUmVtb3ZlKTtcblxuXHRcdGlmKG1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdHZhciB3aW5kb3dTdHlsZXMgPSB7bWFyZ2luUmlnaHQ6ICcnfTtcblx0XHRcdGlmKG1mcC5pc0lFNykge1xuXHRcdFx0XHQkKCdib2R5LCBodG1sJykuY3NzKCdvdmVyZmxvdycsICcnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdpbmRvd1N0eWxlcy5vdmVyZmxvdyA9ICcnO1xuXHRcdFx0fVxuXHRcdFx0JCgnaHRtbCcpLmNzcyh3aW5kb3dTdHlsZXMpO1xuXHRcdH1cblx0XHRcblx0XHRfZG9jdW1lbnQub2ZmKCdrZXl1cCcgKyBFVkVOVF9OUyArICcgZm9jdXNpbicgKyBFVkVOVF9OUyk7XG5cdFx0bWZwLmV2Lm9mZihFVkVOVF9OUyk7XG5cblx0XHQvLyBjbGVhbiB1cCBET00gZWxlbWVudHMgdGhhdCBhcmVuJ3QgcmVtb3ZlZFxuXHRcdG1mcC53cmFwLmF0dHIoJ2NsYXNzJywgJ21mcC13cmFwJykucmVtb3ZlQXR0cignc3R5bGUnKTtcblx0XHRtZnAuYmdPdmVybGF5LmF0dHIoJ2NsYXNzJywgJ21mcC1iZycpO1xuXHRcdG1mcC5jb250YWluZXIuYXR0cignY2xhc3MnLCAnbWZwLWNvbnRhaW5lcicpO1xuXG5cdFx0Ly8gcmVtb3ZlIGNsb3NlIGJ1dHRvbiBmcm9tIHRhcmdldCBlbGVtZW50XG5cdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0biAmJlxuXHRcdCghbWZwLnN0LmNsb3NlQnRuSW5zaWRlIHx8IG1mcC5jdXJyVGVtcGxhdGVbbWZwLmN1cnJJdGVtLnR5cGVdID09PSB0cnVlKSkge1xuXHRcdFx0aWYobWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bilcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZS5jbG9zZUJ0bi5kZXRhY2goKTtcblx0XHR9XG5cblxuXHRcdGlmKG1mcC5zdC5hdXRvRm9jdXNMYXN0ICYmIG1mcC5fbGFzdEZvY3VzZWRFbCkge1xuXHRcdFx0JChtZnAuX2xhc3RGb2N1c2VkRWwpLmZvY3VzKCk7IC8vIHB1dCB0YWIgZm9jdXMgYmFja1xuXHRcdH1cblx0XHRtZnAuY3Vyckl0ZW0gPSBudWxsO1x0XG5cdFx0bWZwLmNvbnRlbnQgPSBudWxsO1xuXHRcdG1mcC5jdXJyVGVtcGxhdGUgPSBudWxsO1xuXHRcdG1mcC5wcmV2SGVpZ2h0ID0gMDtcblxuXHRcdF9tZnBUcmlnZ2VyKEFGVEVSX0NMT1NFX0VWRU5UKTtcblx0fSxcblx0XG5cdHVwZGF0ZVNpemU6IGZ1bmN0aW9uKHdpbkhlaWdodCkge1xuXG5cdFx0aWYobWZwLmlzSU9TKSB7XG5cdFx0XHQvLyBmaXhlcyBpT1MgbmF2IGJhcnMgaHR0cHM6Ly9naXRodWIuY29tL2RpbXNlbWVub3YvTWFnbmlmaWMtUG9wdXAvaXNzdWVzLzJcblx0XHRcdHZhciB6b29tTGV2ZWwgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggLyB3aW5kb3cuaW5uZXJXaWR0aDtcblx0XHRcdHZhciBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiB6b29tTGV2ZWw7XG5cdFx0XHRtZnAud3JhcC5jc3MoJ2hlaWdodCcsIGhlaWdodCk7XG5cdFx0XHRtZnAud0ggPSBoZWlnaHQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1mcC53SCA9IHdpbkhlaWdodCB8fCBfd2luZG93LmhlaWdodCgpO1xuXHRcdH1cblx0XHQvLyBGaXhlcyAjODQ6IHBvcHVwIGluY29ycmVjdGx5IHBvc2l0aW9uZWQgd2l0aCBwb3NpdGlvbjpyZWxhdGl2ZSBvbiBib2R5XG5cdFx0aWYoIW1mcC5maXhlZENvbnRlbnRQb3MpIHtcblx0XHRcdG1mcC53cmFwLmNzcygnaGVpZ2h0JywgbWZwLndIKTtcblx0XHR9XG5cblx0XHRfbWZwVHJpZ2dlcignUmVzaXplJyk7XG5cblx0fSxcblxuXHQvKipcblx0ICogU2V0IGNvbnRlbnQgb2YgcG9wdXAgYmFzZWQgb24gY3VycmVudCBpbmRleFxuXHQgKi9cblx0dXBkYXRlSXRlbUhUTUw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpdGVtID0gbWZwLml0ZW1zW21mcC5pbmRleF07XG5cblx0XHQvLyBEZXRhY2ggYW5kIHBlcmZvcm0gbW9kaWZpY2F0aW9uc1xuXHRcdG1mcC5jb250ZW50Q29udGFpbmVyLmRldGFjaCgpO1xuXG5cdFx0aWYobWZwLmNvbnRlbnQpXG5cdFx0XHRtZnAuY29udGVudC5kZXRhY2goKTtcblxuXHRcdGlmKCFpdGVtLnBhcnNlZCkge1xuXHRcdFx0aXRlbSA9IG1mcC5wYXJzZUVsKCBtZnAuaW5kZXggKTtcblx0XHR9XG5cblx0XHR2YXIgdHlwZSA9IGl0ZW0udHlwZTtcblxuXHRcdF9tZnBUcmlnZ2VyKCdCZWZvcmVDaGFuZ2UnLCBbbWZwLmN1cnJJdGVtID8gbWZwLmN1cnJJdGVtLnR5cGUgOiAnJywgdHlwZV0pO1xuXHRcdC8vIEJlZm9yZUNoYW5nZSBldmVudCB3b3JrcyBsaWtlIHNvOlxuXHRcdC8vIF9tZnBPbignQmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oZSwgcHJldlR5cGUsIG5ld1R5cGUpIHsgfSk7XG5cblx0XHRtZnAuY3Vyckl0ZW0gPSBpdGVtO1xuXG5cdFx0aWYoIW1mcC5jdXJyVGVtcGxhdGVbdHlwZV0pIHtcblx0XHRcdHZhciBtYXJrdXAgPSBtZnAuc3RbdHlwZV0gPyBtZnAuc3RbdHlwZV0ubWFya3VwIDogZmFsc2U7XG5cblx0XHRcdC8vIGFsbG93cyB0byBtb2RpZnkgbWFya3VwXG5cdFx0XHRfbWZwVHJpZ2dlcignRmlyc3RNYXJrdXBQYXJzZScsIG1hcmt1cCk7XG5cblx0XHRcdGlmKG1hcmt1cCkge1xuXHRcdFx0XHRtZnAuY3VyclRlbXBsYXRlW3R5cGVdID0gJChtYXJrdXApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gbWFya3VwIGZvdW5kIHdlIGp1c3QgZGVmaW5lIHRoYXQgdGVtcGxhdGUgaXMgcGFyc2VkXG5cdFx0XHRcdG1mcC5jdXJyVGVtcGxhdGVbdHlwZV0gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmKF9wcmV2Q29udGVudFR5cGUgJiYgX3ByZXZDb250ZW50VHlwZSAhPT0gaXRlbS50eXBlKSB7XG5cdFx0XHRtZnAuY29udGFpbmVyLnJlbW92ZUNsYXNzKCdtZnAtJytfcHJldkNvbnRlbnRUeXBlKyctaG9sZGVyJyk7XG5cdFx0fVxuXG5cdFx0dmFyIG5ld0NvbnRlbnQgPSBtZnBbJ2dldCcgKyB0eXBlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHlwZS5zbGljZSgxKV0oaXRlbSwgbWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSk7XG5cdFx0bWZwLmFwcGVuZENvbnRlbnQobmV3Q29udGVudCwgdHlwZSk7XG5cblx0XHRpdGVtLnByZWxvYWRlZCA9IHRydWU7XG5cblx0XHRfbWZwVHJpZ2dlcihDSEFOR0VfRVZFTlQsIGl0ZW0pO1xuXHRcdF9wcmV2Q29udGVudFR5cGUgPSBpdGVtLnR5cGU7XG5cblx0XHQvLyBBcHBlbmQgY29udGFpbmVyIGJhY2sgYWZ0ZXIgaXRzIGNvbnRlbnQgY2hhbmdlZFxuXHRcdG1mcC5jb250YWluZXIucHJlcGVuZChtZnAuY29udGVudENvbnRhaW5lcik7XG5cblx0XHRfbWZwVHJpZ2dlcignQWZ0ZXJDaGFuZ2UnKTtcblx0fSxcblxuXG5cdC8qKlxuXHQgKiBTZXQgSFRNTCBjb250ZW50IG9mIHBvcHVwXG5cdCAqL1xuXHRhcHBlbmRDb250ZW50OiBmdW5jdGlvbihuZXdDb250ZW50LCB0eXBlKSB7XG5cdFx0bWZwLmNvbnRlbnQgPSBuZXdDb250ZW50O1xuXG5cdFx0aWYobmV3Q29udGVudCkge1xuXHRcdFx0aWYobWZwLnN0LnNob3dDbG9zZUJ0biAmJiBtZnAuc3QuY2xvc2VCdG5JbnNpZGUgJiZcblx0XHRcdFx0bWZwLmN1cnJUZW1wbGF0ZVt0eXBlXSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHQvLyBpZiB0aGVyZSBpcyBubyBtYXJrdXAsIHdlIGp1c3QgYXBwZW5kIGNsb3NlIGJ1dHRvbiBlbGVtZW50IGluc2lkZVxuXHRcdFx0XHRpZighbWZwLmNvbnRlbnQuZmluZCgnLm1mcC1jbG9zZScpLmxlbmd0aCkge1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmFwcGVuZChfZ2V0Q2xvc2VCdG4oKSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1mcC5jb250ZW50ID0gbmV3Q29udGVudDtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0bWZwLmNvbnRlbnQgPSAnJztcblx0XHR9XG5cblx0XHRfbWZwVHJpZ2dlcihCRUZPUkVfQVBQRU5EX0VWRU5UKTtcblx0XHRtZnAuY29udGFpbmVyLmFkZENsYXNzKCdtZnAtJyt0eXBlKyctaG9sZGVyJyk7XG5cblx0XHRtZnAuY29udGVudENvbnRhaW5lci5hcHBlbmQobWZwLmNvbnRlbnQpO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgTWFnbmlmaWMgUG9wdXAgZGF0YSBvYmplY3QgYmFzZWQgb24gZ2l2ZW4gZGF0YVxuXHQgKiBAcGFyYW0gIHtpbnR9IGluZGV4IEluZGV4IG9mIGl0ZW0gdG8gcGFyc2Vcblx0ICovXG5cdHBhcnNlRWw6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbaW5kZXhdLFxuXHRcdFx0dHlwZTtcblxuXHRcdGlmKGl0ZW0udGFnTmFtZSkge1xuXHRcdFx0aXRlbSA9IHsgZWw6ICQoaXRlbSkgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dHlwZSA9IGl0ZW0udHlwZTtcblx0XHRcdGl0ZW0gPSB7IGRhdGE6IGl0ZW0sIHNyYzogaXRlbS5zcmMgfTtcblx0XHR9XG5cblx0XHRpZihpdGVtLmVsKSB7XG5cdFx0XHR2YXIgdHlwZXMgPSBtZnAudHlwZXM7XG5cblx0XHRcdC8vIGNoZWNrIGZvciAnbWZwLVRZUEUnIGNsYXNzXG5cdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdHlwZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYoIGl0ZW0uZWwuaGFzQ2xhc3MoJ21mcC0nK3R5cGVzW2ldKSApIHtcblx0XHRcdFx0XHR0eXBlID0gdHlwZXNbaV07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aXRlbS5zcmMgPSBpdGVtLmVsLmF0dHIoJ2RhdGEtbWZwLXNyYycpO1xuXHRcdFx0aWYoIWl0ZW0uc3JjKSB7XG5cdFx0XHRcdGl0ZW0uc3JjID0gaXRlbS5lbC5hdHRyKCdocmVmJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aXRlbS50eXBlID0gdHlwZSB8fCBtZnAuc3QudHlwZSB8fCAnaW5saW5lJztcblx0XHRpdGVtLmluZGV4ID0gaW5kZXg7XG5cdFx0aXRlbS5wYXJzZWQgPSB0cnVlO1xuXHRcdG1mcC5pdGVtc1tpbmRleF0gPSBpdGVtO1xuXHRcdF9tZnBUcmlnZ2VyKCdFbGVtZW50UGFyc2UnLCBpdGVtKTtcblxuXHRcdHJldHVybiBtZnAuaXRlbXNbaW5kZXhdO1xuXHR9LFxuXG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHNpbmdsZSBwb3B1cCBvciBhIGdyb3VwIG9mIHBvcHVwc1xuXHQgKi9cblx0YWRkR3JvdXA6IGZ1bmN0aW9uKGVsLCBvcHRpb25zKSB7XG5cdFx0dmFyIGVIYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0ZS5tZnBFbCA9IHRoaXM7XG5cdFx0XHRtZnAuX29wZW5DbGljayhlLCBlbCwgb3B0aW9ucyk7XG5cdFx0fTtcblxuXHRcdGlmKCFvcHRpb25zKSB7XG5cdFx0XHRvcHRpb25zID0ge307XG5cdFx0fVxuXG5cdFx0dmFyIGVOYW1lID0gJ2NsaWNrLm1hZ25pZmljUG9wdXAnO1xuXHRcdG9wdGlvbnMubWFpbkVsID0gZWw7XG5cblx0XHRpZihvcHRpb25zLml0ZW1zKSB7XG5cdFx0XHRvcHRpb25zLmlzT2JqID0gdHJ1ZTtcblx0XHRcdGVsLm9mZihlTmFtZSkub24oZU5hbWUsIGVIYW5kbGVyKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3B0aW9ucy5pc09iaiA9IGZhbHNlO1xuXHRcdFx0aWYob3B0aW9ucy5kZWxlZ2F0ZSkge1xuXHRcdFx0XHRlbC5vZmYoZU5hbWUpLm9uKGVOYW1lLCBvcHRpb25zLmRlbGVnYXRlICwgZUhhbmRsZXIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0aW9ucy5pdGVtcyA9IGVsO1xuXHRcdFx0XHRlbC5vZmYoZU5hbWUpLm9uKGVOYW1lLCBlSGFuZGxlcik7XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRfb3BlbkNsaWNrOiBmdW5jdGlvbihlLCBlbCwgb3B0aW9ucykge1xuXHRcdHZhciBtaWRDbGljayA9IG9wdGlvbnMubWlkQ2xpY2sgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWlkQ2xpY2sgOiAkLm1hZ25pZmljUG9wdXAuZGVmYXVsdHMubWlkQ2xpY2s7XG5cblxuXHRcdGlmKCFtaWRDbGljayAmJiAoIGUud2hpY2ggPT09IDIgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBlLmFsdEtleSB8fCBlLnNoaWZ0S2V5ICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGRpc2FibGVPbiA9IG9wdGlvbnMuZGlzYWJsZU9uICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRpc2FibGVPbiA6ICQubWFnbmlmaWNQb3B1cC5kZWZhdWx0cy5kaXNhYmxlT247XG5cblx0XHRpZihkaXNhYmxlT24pIHtcblx0XHRcdGlmKCQuaXNGdW5jdGlvbihkaXNhYmxlT24pKSB7XG5cdFx0XHRcdGlmKCAhZGlzYWJsZU9uLmNhbGwobWZwKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHsgLy8gZWxzZSBpdCdzIG51bWJlclxuXHRcdFx0XHRpZiggX3dpbmRvdy53aWR0aCgpIDwgZGlzYWJsZU9uICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYoZS50eXBlKSB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdC8vIFRoaXMgd2lsbCBwcmV2ZW50IHBvcHVwIGZyb20gY2xvc2luZyBpZiBlbGVtZW50IGlzIGluc2lkZSBhbmQgcG9wdXAgaXMgYWxyZWFkeSBvcGVuZWRcblx0XHRcdGlmKG1mcC5pc09wZW4pIHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRvcHRpb25zLmVsID0gJChlLm1mcEVsKTtcblx0XHRpZihvcHRpb25zLmRlbGVnYXRlKSB7XG5cdFx0XHRvcHRpb25zLml0ZW1zID0gZWwuZmluZChvcHRpb25zLmRlbGVnYXRlKTtcblx0XHR9XG5cdFx0bWZwLm9wZW4ob3B0aW9ucyk7XG5cdH0sXG5cblxuXHQvKipcblx0ICogVXBkYXRlcyB0ZXh0IG9uIHByZWxvYWRlclxuXHQgKi9cblx0dXBkYXRlU3RhdHVzOiBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcblxuXHRcdGlmKG1mcC5wcmVsb2FkZXIpIHtcblx0XHRcdGlmKF9wcmV2U3RhdHVzICE9PSBzdGF0dXMpIHtcblx0XHRcdFx0bWZwLmNvbnRhaW5lci5yZW1vdmVDbGFzcygnbWZwLXMtJytfcHJldlN0YXR1cyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCF0ZXh0ICYmIHN0YXR1cyA9PT0gJ2xvYWRpbmcnKSB7XG5cdFx0XHRcdHRleHQgPSBtZnAuc3QudExvYWRpbmc7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBkYXRhID0ge1xuXHRcdFx0XHRzdGF0dXM6IHN0YXR1cyxcblx0XHRcdFx0dGV4dDogdGV4dFxuXHRcdFx0fTtcblx0XHRcdC8vIGFsbG93cyB0byBtb2RpZnkgc3RhdHVzXG5cdFx0XHRfbWZwVHJpZ2dlcignVXBkYXRlU3RhdHVzJywgZGF0YSk7XG5cblx0XHRcdHN0YXR1cyA9IGRhdGEuc3RhdHVzO1xuXHRcdFx0dGV4dCA9IGRhdGEudGV4dDtcblxuXHRcdFx0bWZwLnByZWxvYWRlci5odG1sKHRleHQpO1xuXG5cdFx0XHRtZnAucHJlbG9hZGVyLmZpbmQoJ2EnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0bWZwLmNvbnRhaW5lci5hZGRDbGFzcygnbWZwLXMtJytzdGF0dXMpO1xuXHRcdFx0X3ByZXZTdGF0dXMgPSBzdGF0dXM7XG5cdFx0fVxuXHR9LFxuXG5cblx0Lypcblx0XHRcIlByaXZhdGVcIiBoZWxwZXJzIHRoYXQgYXJlbid0IHByaXZhdGUgYXQgYWxsXG5cdCAqL1xuXHQvLyBDaGVjayB0byBjbG9zZSBwb3B1cCBvciBub3Rcblx0Ly8gXCJ0YXJnZXRcIiBpcyBhbiBlbGVtZW50IHRoYXQgd2FzIGNsaWNrZWRcblx0X2NoZWNrSWZDbG9zZTogZnVuY3Rpb24odGFyZ2V0KSB7XG5cblx0XHRpZigkKHRhcmdldCkuaGFzQ2xhc3MoUFJFVkVOVF9DTE9TRV9DTEFTUykpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgY2xvc2VPbkNvbnRlbnQgPSBtZnAuc3QuY2xvc2VPbkNvbnRlbnRDbGljaztcblx0XHR2YXIgY2xvc2VPbkJnID0gbWZwLnN0LmNsb3NlT25CZ0NsaWNrO1xuXG5cdFx0aWYoY2xvc2VPbkNvbnRlbnQgJiYgY2xvc2VPbkJnKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBXZSBjbG9zZSB0aGUgcG9wdXAgaWYgY2xpY2sgaXMgb24gY2xvc2UgYnV0dG9uIG9yIG9uIHByZWxvYWRlci4gT3IgaWYgdGhlcmUgaXMgbm8gY29udGVudC5cblx0XHRcdGlmKCFtZnAuY29udGVudCB8fCAkKHRhcmdldCkuaGFzQ2xhc3MoJ21mcC1jbG9zZScpIHx8IChtZnAucHJlbG9hZGVyICYmIHRhcmdldCA9PT0gbWZwLnByZWxvYWRlclswXSkgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpZiBjbGljayBpcyBvdXRzaWRlIHRoZSBjb250ZW50XG5cdFx0XHRpZiggICh0YXJnZXQgIT09IG1mcC5jb250ZW50WzBdICYmICEkLmNvbnRhaW5zKG1mcC5jb250ZW50WzBdLCB0YXJnZXQpKSAgKSB7XG5cdFx0XHRcdGlmKGNsb3NlT25CZykge1xuXHRcdFx0XHRcdC8vIGxhc3QgY2hlY2ssIGlmIHRoZSBjbGlja2VkIGVsZW1lbnQgaXMgaW4gRE9NLCAoaW4gY2FzZSBpdCdzIHJlbW92ZWQgb25jbGljaylcblx0XHRcdFx0XHRpZiggJC5jb250YWlucyhkb2N1bWVudCwgdGFyZ2V0KSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmKGNsb3NlT25Db250ZW50KSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblx0X2FkZENsYXNzVG9NRlA6IGZ1bmN0aW9uKGNOYW1lKSB7XG5cdFx0bWZwLmJnT3ZlcmxheS5hZGRDbGFzcyhjTmFtZSk7XG5cdFx0bWZwLndyYXAuYWRkQ2xhc3MoY05hbWUpO1xuXHR9LFxuXHRfcmVtb3ZlQ2xhc3NGcm9tTUZQOiBmdW5jdGlvbihjTmFtZSkge1xuXHRcdHRoaXMuYmdPdmVybGF5LnJlbW92ZUNsYXNzKGNOYW1lKTtcblx0XHRtZnAud3JhcC5yZW1vdmVDbGFzcyhjTmFtZSk7XG5cdH0sXG5cdF9oYXNTY3JvbGxCYXI6IGZ1bmN0aW9uKHdpbkhlaWdodCkge1xuXHRcdHJldHVybiAoICAobWZwLmlzSUU3ID8gX2RvY3VtZW50LmhlaWdodCgpIDogZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQpID4gKHdpbkhlaWdodCB8fCBfd2luZG93LmhlaWdodCgpKSApO1xuXHR9LFxuXHRfc2V0Rm9jdXM6IGZ1bmN0aW9uKCkge1xuXHRcdChtZnAuc3QuZm9jdXMgPyBtZnAuY29udGVudC5maW5kKG1mcC5zdC5mb2N1cykuZXEoMCkgOiBtZnAud3JhcCkuZm9jdXMoKTtcblx0fSxcblx0X29uRm9jdXNJbjogZnVuY3Rpb24oZSkge1xuXHRcdGlmKCBlLnRhcmdldCAhPT0gbWZwLndyYXBbMF0gJiYgISQuY29udGFpbnMobWZwLndyYXBbMF0sIGUudGFyZ2V0KSApIHtcblx0XHRcdG1mcC5fc2V0Rm9jdXMoKTtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH0sXG5cdF9wYXJzZU1hcmt1cDogZnVuY3Rpb24odGVtcGxhdGUsIHZhbHVlcywgaXRlbSkge1xuXHRcdHZhciBhcnI7XG5cdFx0aWYoaXRlbS5kYXRhKSB7XG5cdFx0XHR2YWx1ZXMgPSAkLmV4dGVuZChpdGVtLmRhdGEsIHZhbHVlcyk7XG5cdFx0fVxuXHRcdF9tZnBUcmlnZ2VyKE1BUktVUF9QQVJTRV9FVkVOVCwgW3RlbXBsYXRlLCB2YWx1ZXMsIGl0ZW1dICk7XG5cblx0XHQkLmVhY2godmFsdWVzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHRpZih2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHRcdGFyciA9IGtleS5zcGxpdCgnXycpO1xuXHRcdFx0aWYoYXJyLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0dmFyIGVsID0gdGVtcGxhdGUuZmluZChFVkVOVF9OUyArICctJythcnJbMF0pO1xuXG5cdFx0XHRcdGlmKGVsLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHR2YXIgYXR0ciA9IGFyclsxXTtcblx0XHRcdFx0XHRpZihhdHRyID09PSAncmVwbGFjZVdpdGgnKSB7XG5cdFx0XHRcdFx0XHRpZihlbFswXSAhPT0gdmFsdWVbMF0pIHtcblx0XHRcdFx0XHRcdFx0ZWwucmVwbGFjZVdpdGgodmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSBpZihhdHRyID09PSAnaW1nJykge1xuXHRcdFx0XHRcdFx0aWYoZWwuaXMoJ2ltZycpKSB7XG5cdFx0XHRcdFx0XHRcdGVsLmF0dHIoJ3NyYycsIHZhbHVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVsLnJlcGxhY2VXaXRoKCAkKCc8aW1nPicpLmF0dHIoJ3NyYycsIHZhbHVlKS5hdHRyKCdjbGFzcycsIGVsLmF0dHIoJ2NsYXNzJykpICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsLmF0dHIoYXJyWzFdLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRlbXBsYXRlLmZpbmQoRVZFTlRfTlMgKyAnLScra2V5KS5odG1sKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRfZ2V0U2Nyb2xsYmFyU2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0Ly8gdGh4IERhdmlkXG5cdFx0aWYobWZwLnNjcm9sbGJhclNpemUgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0dmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cdFx0XHRzY3JvbGxEaXYuc3R5bGUuY3NzVGV4dCA9ICd3aWR0aDogOTlweDsgaGVpZ2h0OiA5OXB4OyBvdmVyZmxvdzogc2Nyb2xsOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogLTk5OTlweDsnO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JvbGxEaXYpO1xuXHRcdFx0bWZwLnNjcm9sbGJhclNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG5cdFx0XHRkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHNjcm9sbERpdik7XG5cdFx0fVxuXHRcdHJldHVybiBtZnAuc2Nyb2xsYmFyU2l6ZTtcblx0fVxuXG59OyAvKiBNYWduaWZpY1BvcHVwIGNvcmUgcHJvdG90eXBlIGVuZCAqL1xuXG5cblxuXG4vKipcbiAqIFB1YmxpYyBzdGF0aWMgZnVuY3Rpb25zXG4gKi9cbiQubWFnbmlmaWNQb3B1cCA9IHtcblx0aW5zdGFuY2U6IG51bGwsXG5cdHByb3RvOiBNYWduaWZpY1BvcHVwLnByb3RvdHlwZSxcblx0bW9kdWxlczogW10sXG5cblx0b3BlbjogZnVuY3Rpb24ob3B0aW9ucywgaW5kZXgpIHtcblx0XHRfY2hlY2tJbnN0YW5jZSgpO1xuXG5cdFx0aWYoIW9wdGlvbnMpIHtcblx0XHRcdG9wdGlvbnMgPSB7fTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0b3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRvcHRpb25zLmlzT2JqID0gdHJ1ZTtcblx0XHRvcHRpb25zLmluZGV4ID0gaW5kZXggfHwgMDtcblx0XHRyZXR1cm4gdGhpcy5pbnN0YW5jZS5vcGVuKG9wdGlvbnMpO1xuXHR9LFxuXG5cdGNsb3NlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gJC5tYWduaWZpY1BvcHVwLmluc3RhbmNlICYmICQubWFnbmlmaWNQb3B1cC5pbnN0YW5jZS5jbG9zZSgpO1xuXHR9LFxuXG5cdHJlZ2lzdGVyTW9kdWxlOiBmdW5jdGlvbihuYW1lLCBtb2R1bGUpIHtcblx0XHRpZihtb2R1bGUub3B0aW9ucykge1xuXHRcdFx0JC5tYWduaWZpY1BvcHVwLmRlZmF1bHRzW25hbWVdID0gbW9kdWxlLm9wdGlvbnM7XG5cdFx0fVxuXHRcdCQuZXh0ZW5kKHRoaXMucHJvdG8sIG1vZHVsZS5wcm90byk7XG5cdFx0dGhpcy5tb2R1bGVzLnB1c2gobmFtZSk7XG5cdH0sXG5cblx0ZGVmYXVsdHM6IHtcblxuXHRcdC8vIEluZm8gYWJvdXQgb3B0aW9ucyBpcyBpbiBkb2NzOlxuXHRcdC8vIGh0dHA6Ly9kaW1zZW1lbm92LmNvbS9wbHVnaW5zL21hZ25pZmljLXBvcHVwL2RvY3VtZW50YXRpb24uaHRtbCNvcHRpb25zXG5cblx0XHRkaXNhYmxlT246IDAsXG5cblx0XHRrZXk6IG51bGwsXG5cblx0XHRtaWRDbGljazogZmFsc2UsXG5cblx0XHRtYWluQ2xhc3M6ICcnLFxuXG5cdFx0cHJlbG9hZGVyOiB0cnVlLFxuXG5cdFx0Zm9jdXM6ICcnLCAvLyBDU1Mgc2VsZWN0b3Igb2YgaW5wdXQgdG8gZm9jdXMgYWZ0ZXIgcG9wdXAgaXMgb3BlbmVkXG5cblx0XHRjbG9zZU9uQ29udGVudENsaWNrOiBmYWxzZSxcblxuXHRcdGNsb3NlT25CZ0NsaWNrOiB0cnVlLFxuXG5cdFx0Y2xvc2VCdG5JbnNpZGU6IHRydWUsXG5cblx0XHRzaG93Q2xvc2VCdG46IHRydWUsXG5cblx0XHRlbmFibGVFc2NhcGVLZXk6IHRydWUsXG5cblx0XHRtb2RhbDogZmFsc2UsXG5cblx0XHRhbGlnblRvcDogZmFsc2UsXG5cblx0XHRyZW1vdmFsRGVsYXk6IDAsXG5cblx0XHRwcmVwZW5kVG86IG51bGwsXG5cblx0XHRmaXhlZENvbnRlbnRQb3M6ICdhdXRvJyxcblxuXHRcdGZpeGVkQmdQb3M6ICdhdXRvJyxcblxuXHRcdG92ZXJmbG93WTogJ2F1dG8nLFxuXG5cdFx0Y2xvc2VNYXJrdXA6ICc8YnV0dG9uIHRpdGxlPVwiJXRpdGxlJVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm1mcC1jbG9zZVwiPiYjMjE1OzwvYnV0dG9uPicsXG5cblx0XHR0Q2xvc2U6ICdDbG9zZSAoRXNjKScsXG5cblx0XHR0TG9hZGluZzogJ0xvYWRpbmcuLi4nLFxuXG5cdFx0YXV0b0ZvY3VzTGFzdDogdHJ1ZVxuXG5cdH1cbn07XG5cblxuXG4kLmZuLm1hZ25pZmljUG9wdXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdF9jaGVja0luc3RhbmNlKCk7XG5cblx0dmFyIGpxRWwgPSAkKHRoaXMpO1xuXG5cdC8vIFdlIGNhbGwgc29tZSBBUEkgbWV0aG9kIG9mIGZpcnN0IHBhcmFtIGlzIGEgc3RyaW5nXG5cdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdGlmKG9wdGlvbnMgPT09ICdvcGVuJykge1xuXHRcdFx0dmFyIGl0ZW1zLFxuXHRcdFx0XHRpdGVtT3B0cyA9IF9pc0pRID8ganFFbC5kYXRhKCdtYWduaWZpY1BvcHVwJykgOiBqcUVsWzBdLm1hZ25pZmljUG9wdXAsXG5cdFx0XHRcdGluZGV4ID0gcGFyc2VJbnQoYXJndW1lbnRzWzFdLCAxMCkgfHwgMDtcblxuXHRcdFx0aWYoaXRlbU9wdHMuaXRlbXMpIHtcblx0XHRcdFx0aXRlbXMgPSBpdGVtT3B0cy5pdGVtc1tpbmRleF07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpdGVtcyA9IGpxRWw7XG5cdFx0XHRcdGlmKGl0ZW1PcHRzLmRlbGVnYXRlKSB7XG5cdFx0XHRcdFx0aXRlbXMgPSBpdGVtcy5maW5kKGl0ZW1PcHRzLmRlbGVnYXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpdGVtcyA9IGl0ZW1zLmVxKCBpbmRleCApO1xuXHRcdFx0fVxuXHRcdFx0bWZwLl9vcGVuQ2xpY2soe21mcEVsOml0ZW1zfSwganFFbCwgaXRlbU9wdHMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZihtZnAuaXNPcGVuKVxuXHRcdFx0XHRtZnBbb3B0aW9uc10uYXBwbHkobWZwLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblx0XHQvLyBjbG9uZSBvcHRpb25zIG9ialxuXHRcdG9wdGlvbnMgPSAkLmV4dGVuZCh0cnVlLCB7fSwgb3B0aW9ucyk7XG5cblx0XHQvKlxuXHRcdCAqIEFzIFplcHRvIGRvZXNuJ3Qgc3VwcG9ydCAuZGF0YSgpIG1ldGhvZCBmb3Igb2JqZWN0c1xuXHRcdCAqIGFuZCBpdCB3b3JrcyBvbmx5IGluIG5vcm1hbCBicm93c2Vyc1xuXHRcdCAqIHdlIGFzc2lnbiBcIm9wdGlvbnNcIiBvYmplY3QgZGlyZWN0bHkgdG8gdGhlIERPTSBlbGVtZW50LiBGVFchXG5cdFx0ICovXG5cdFx0aWYoX2lzSlEpIHtcblx0XHRcdGpxRWwuZGF0YSgnbWFnbmlmaWNQb3B1cCcsIG9wdGlvbnMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcUVsWzBdLm1hZ25pZmljUG9wdXAgPSBvcHRpb25zO1xuXHRcdH1cblxuXHRcdG1mcC5hZGRHcm91cChqcUVsLCBvcHRpb25zKTtcblxuXHR9XG5cdHJldHVybiBqcUVsO1xufTtcblxuLyo+PmNvcmUqL1xuXG4vKj4+aW5saW5lKi9cblxudmFyIElOTElORV9OUyA9ICdpbmxpbmUnLFxuXHRfaGlkZGVuQ2xhc3MsXG5cdF9pbmxpbmVQbGFjZWhvbGRlcixcblx0X2xhc3RJbmxpbmVFbGVtZW50LFxuXHRfcHV0SW5saW5lRWxlbWVudHNCYWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2xhc3RJbmxpbmVFbGVtZW50KSB7XG5cdFx0XHRfaW5saW5lUGxhY2Vob2xkZXIuYWZ0ZXIoIF9sYXN0SW5saW5lRWxlbWVudC5hZGRDbGFzcyhfaGlkZGVuQ2xhc3MpICkuZGV0YWNoKCk7XG5cdFx0XHRfbGFzdElubGluZUVsZW1lbnQgPSBudWxsO1xuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKElOTElORV9OUywge1xuXHRvcHRpb25zOiB7XG5cdFx0aGlkZGVuQ2xhc3M6ICdoaWRlJywgLy8gd2lsbCBiZSBhcHBlbmRlZCB3aXRoIGBtZnAtYCBwcmVmaXhcblx0XHRtYXJrdXA6ICcnLFxuXHRcdHROb3RGb3VuZDogJ0NvbnRlbnQgbm90IGZvdW5kJ1xuXHR9LFxuXHRwcm90bzoge1xuXG5cdFx0aW5pdElubGluZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudHlwZXMucHVzaChJTkxJTkVfTlMpO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrJy4nK0lOTElORV9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9wdXRJbmxpbmVFbGVtZW50c0JhY2soKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRnZXRJbmxpbmU6IGZ1bmN0aW9uKGl0ZW0sIHRlbXBsYXRlKSB7XG5cblx0XHRcdF9wdXRJbmxpbmVFbGVtZW50c0JhY2soKTtcblxuXHRcdFx0aWYoaXRlbS5zcmMpIHtcblx0XHRcdFx0dmFyIGlubGluZVN0ID0gbWZwLnN0LmlubGluZSxcblx0XHRcdFx0XHRlbCA9ICQoaXRlbS5zcmMpO1xuXG5cdFx0XHRcdGlmKGVsLmxlbmd0aCkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGFyZ2V0IGVsZW1lbnQgaGFzIHBhcmVudCAtIHdlIHJlcGxhY2UgaXQgd2l0aCBwbGFjZWhvbGRlciBhbmQgcHV0IGl0IGJhY2sgYWZ0ZXIgcG9wdXAgaXMgY2xvc2VkXG5cdFx0XHRcdFx0dmFyIHBhcmVudCA9IGVsWzBdLnBhcmVudE5vZGU7XG5cdFx0XHRcdFx0aWYocGFyZW50ICYmIHBhcmVudC50YWdOYW1lKSB7XG5cdFx0XHRcdFx0XHRpZighX2lubGluZVBsYWNlaG9sZGVyKSB7XG5cdFx0XHRcdFx0XHRcdF9oaWRkZW5DbGFzcyA9IGlubGluZVN0LmhpZGRlbkNsYXNzO1xuXHRcdFx0XHRcdFx0XHRfaW5saW5lUGxhY2Vob2xkZXIgPSBfZ2V0RWwoX2hpZGRlbkNsYXNzKTtcblx0XHRcdFx0XHRcdFx0X2hpZGRlbkNsYXNzID0gJ21mcC0nK19oaWRkZW5DbGFzcztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdC8vIHJlcGxhY2UgdGFyZ2V0IGlubGluZSBlbGVtZW50IHdpdGggcGxhY2Vob2xkZXJcblx0XHRcdFx0XHRcdF9sYXN0SW5saW5lRWxlbWVudCA9IGVsLmFmdGVyKF9pbmxpbmVQbGFjZWhvbGRlcikuZGV0YWNoKCkucmVtb3ZlQ2xhc3MoX2hpZGRlbkNsYXNzKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgaW5saW5lU3QudE5vdEZvdW5kKTtcblx0XHRcdFx0XHRlbCA9ICQoJzxkaXY+Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpdGVtLmlubGluZUVsZW1lbnQgPSBlbDtcblx0XHRcdFx0cmV0dXJuIGVsO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwge30sIGl0ZW0pO1xuXHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5pbmxpbmUqL1xuXG4vKj4+YWpheCovXG52YXIgQUpBWF9OUyA9ICdhamF4Jyxcblx0X2FqYXhDdXIsXG5cdF9yZW1vdmVBamF4Q3Vyc29yID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoX2FqYXhDdXIpIHtcblx0XHRcdCQoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoX2FqYXhDdXIpO1xuXHRcdH1cblx0fSxcblx0X2Rlc3Ryb3lBamF4UmVxdWVzdCA9IGZ1bmN0aW9uKCkge1xuXHRcdF9yZW1vdmVBamF4Q3Vyc29yKCk7XG5cdFx0aWYobWZwLnJlcSkge1xuXHRcdFx0bWZwLnJlcS5hYm9ydCgpO1xuXHRcdH1cblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKEFKQVhfTlMsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0c2V0dGluZ3M6IG51bGwsXG5cdFx0Y3Vyc29yOiAnbWZwLWFqYXgtY3VyJyxcblx0XHR0RXJyb3I6ICc8YSBocmVmPVwiJXVybCVcIj5UaGUgY29udGVudDwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nXG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0QWpheDogZnVuY3Rpb24oKSB7XG5cdFx0XHRtZnAudHlwZXMucHVzaChBSkFYX05TKTtcblx0XHRcdF9hamF4Q3VyID0gbWZwLnN0LmFqYXguY3Vyc29yO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrJy4nK0FKQVhfTlMsIF9kZXN0cm95QWpheFJlcXVlc3QpO1xuXHRcdFx0X21mcE9uKCdCZWZvcmVDaGFuZ2UuJyArIEFKQVhfTlMsIF9kZXN0cm95QWpheFJlcXVlc3QpO1xuXHRcdH0sXG5cdFx0Z2V0QWpheDogZnVuY3Rpb24oaXRlbSkge1xuXG5cdFx0XHRpZihfYWpheEN1cikge1xuXHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKF9hamF4Q3VyKTtcblx0XHRcdH1cblxuXHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnbG9hZGluZycpO1xuXG5cdFx0XHR2YXIgb3B0cyA9ICQuZXh0ZW5kKHtcblx0XHRcdFx0dXJsOiBpdGVtLnNyYyxcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHtcblx0XHRcdFx0XHR2YXIgdGVtcCA9IHtcblx0XHRcdFx0XHRcdGRhdGE6ZGF0YSxcblx0XHRcdFx0XHRcdHhocjpqcVhIUlxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignUGFyc2VBamF4JywgdGVtcCk7XG5cblx0XHRcdFx0XHRtZnAuYXBwZW5kQ29udGVudCggJCh0ZW1wLmRhdGEpLCBBSkFYX05TICk7XG5cblx0XHRcdFx0XHRpdGVtLmZpbmlzaGVkID0gdHJ1ZTtcblxuXHRcdFx0XHRcdF9yZW1vdmVBamF4Q3Vyc29yKCk7XG5cblx0XHRcdFx0XHRtZnAuX3NldEZvY3VzKCk7XG5cblx0XHRcdFx0XHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0bWZwLndyYXAuYWRkQ2xhc3MoUkVBRFlfQ0xBU1MpO1xuXHRcdFx0XHRcdH0sIDE2KTtcblxuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cblx0XHRcdFx0XHRfbWZwVHJpZ2dlcignQWpheENvbnRlbnRBZGRlZCcpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRlcnJvcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0X3JlbW92ZUFqYXhDdXJzb3IoKTtcblx0XHRcdFx0XHRpdGVtLmZpbmlzaGVkID0gaXRlbS5sb2FkRXJyb3IgPSB0cnVlO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ2Vycm9yJywgbWZwLnN0LmFqYXgudEVycm9yLnJlcGxhY2UoJyV1cmwlJywgaXRlbS5zcmMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgbWZwLnN0LmFqYXguc2V0dGluZ3MpO1xuXG5cdFx0XHRtZnAucmVxID0gJC5hamF4KG9wdHMpO1xuXG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmFqYXgqL1xuXG4vKj4+aW1hZ2UqL1xudmFyIF9pbWdJbnRlcnZhbCxcblx0X2dldFRpdGxlID0gZnVuY3Rpb24oaXRlbSkge1xuXHRcdGlmKGl0ZW0uZGF0YSAmJiBpdGVtLmRhdGEudGl0bGUgIT09IHVuZGVmaW5lZClcblx0XHRcdHJldHVybiBpdGVtLmRhdGEudGl0bGU7XG5cblx0XHR2YXIgc3JjID0gbWZwLnN0LmltYWdlLnRpdGxlU3JjO1xuXG5cdFx0aWYoc3JjKSB7XG5cdFx0XHRpZigkLmlzRnVuY3Rpb24oc3JjKSkge1xuXHRcdFx0XHRyZXR1cm4gc3JjLmNhbGwobWZwLCBpdGVtKTtcblx0XHRcdH0gZWxzZSBpZihpdGVtLmVsKSB7XG5cdFx0XHRcdHJldHVybiBpdGVtLmVsLmF0dHIoc3JjKSB8fCAnJztcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuICcnO1xuXHR9O1xuXG4kLm1hZ25pZmljUG9wdXAucmVnaXN0ZXJNb2R1bGUoJ2ltYWdlJywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRtYXJrdXA6ICc8ZGl2IGNsYXNzPVwibWZwLWZpZ3VyZVwiPicrXG5cdFx0XHRcdFx0JzxkaXYgY2xhc3M9XCJtZnAtY2xvc2VcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdCc8ZmlndXJlPicrXG5cdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1pbWdcIj48L2Rpdj4nK1xuXHRcdFx0XHRcdFx0JzxmaWdjYXB0aW9uPicrXG5cdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLWJvdHRvbS1iYXJcIj4nK1xuXHRcdFx0XHRcdFx0XHRcdCc8ZGl2IGNsYXNzPVwibWZwLXRpdGxlXCI+PC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jb3VudGVyXCI+PC9kaXY+Jytcblx0XHRcdFx0XHRcdFx0JzwvZGl2PicrXG5cdFx0XHRcdFx0XHQnPC9maWdjYXB0aW9uPicrXG5cdFx0XHRcdFx0JzwvZmlndXJlPicrXG5cdFx0XHRcdCc8L2Rpdj4nLFxuXHRcdGN1cnNvcjogJ21mcC16b29tLW91dC1jdXInLFxuXHRcdHRpdGxlU3JjOiAndGl0bGUnLFxuXHRcdHZlcnRpY2FsRml0OiB0cnVlLFxuXHRcdHRFcnJvcjogJzxhIGhyZWY9XCIldXJsJVwiPlRoZSBpbWFnZTwvYT4gY291bGQgbm90IGJlIGxvYWRlZC4nXG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0SW1hZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGltZ1N0ID0gbWZwLnN0LmltYWdlLFxuXHRcdFx0XHRucyA9ICcuaW1hZ2UnO1xuXG5cdFx0XHRtZnAudHlwZXMucHVzaCgnaW1hZ2UnKTtcblxuXHRcdFx0X21mcE9uKE9QRU5fRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuY3Vyckl0ZW0udHlwZSA9PT0gJ2ltYWdlJyAmJiBpbWdTdC5jdXJzb3IpIHtcblx0XHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKGltZ1N0LmN1cnNvcik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihpbWdTdC5jdXJzb3IpIHtcblx0XHRcdFx0XHQkKGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKGltZ1N0LmN1cnNvcik7XG5cdFx0XHRcdH1cblx0XHRcdFx0X3dpbmRvdy5vZmYoJ3Jlc2l6ZScgKyBFVkVOVF9OUyk7XG5cdFx0XHR9KTtcblxuXHRcdFx0X21mcE9uKCdSZXNpemUnK25zLCBtZnAucmVzaXplSW1hZ2UpO1xuXHRcdFx0aWYobWZwLmlzTG93SUUpIHtcblx0XHRcdFx0X21mcE9uKCdBZnRlckNoYW5nZScsIG1mcC5yZXNpemVJbWFnZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZXNpemVJbWFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1mcC5jdXJySXRlbTtcblx0XHRcdGlmKCFpdGVtIHx8ICFpdGVtLmltZykgcmV0dXJuO1xuXG5cdFx0XHRpZihtZnAuc3QuaW1hZ2UudmVydGljYWxGaXQpIHtcblx0XHRcdFx0dmFyIGRlY3IgPSAwO1xuXHRcdFx0XHQvLyBmaXggYm94LXNpemluZyBpbiBpZTcvOFxuXHRcdFx0XHRpZihtZnAuaXNMb3dJRSkge1xuXHRcdFx0XHRcdGRlY3IgPSBwYXJzZUludChpdGVtLmltZy5jc3MoJ3BhZGRpbmctdG9wJyksIDEwKSArIHBhcnNlSW50KGl0ZW0uaW1nLmNzcygncGFkZGluZy1ib3R0b20nKSwxMCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbS5pbWcuY3NzKCdtYXgtaGVpZ2h0JywgbWZwLndILWRlY3IpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X29uSW1hZ2VIYXNTaXplOiBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRpZihpdGVtLmltZykge1xuXG5cdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IHRydWU7XG5cblx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSB7XG5cdFx0XHRcdFx0Y2xlYXJJbnRlcnZhbChfaW1nSW50ZXJ2YWwpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aXRlbS5pc0NoZWNraW5nSW1nU2l6ZSA9IGZhbHNlO1xuXG5cdFx0XHRcdF9tZnBUcmlnZ2VyKCdJbWFnZUhhc1NpemUnLCBpdGVtKTtcblxuXHRcdFx0XHRpZihpdGVtLmltZ0hpZGRlbikge1xuXHRcdFx0XHRcdGlmKG1mcC5jb250ZW50KVxuXHRcdFx0XHRcdFx0bWZwLmNvbnRlbnQucmVtb3ZlQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cblx0XHRcdFx0XHRpdGVtLmltZ0hpZGRlbiA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRnVuY3Rpb24gdGhhdCBsb29wcyB1bnRpbCB0aGUgaW1hZ2UgaGFzIHNpemUgdG8gZGlzcGxheSBlbGVtZW50cyB0aGF0IHJlbHkgb24gaXQgYXNhcFxuXHRcdCAqL1xuXHRcdGZpbmRJbWFnZVNpemU6IGZ1bmN0aW9uKGl0ZW0pIHtcblxuXHRcdFx0dmFyIGNvdW50ZXIgPSAwLFxuXHRcdFx0XHRpbWcgPSBpdGVtLmltZ1swXSxcblx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwgPSBmdW5jdGlvbihkZWxheSkge1xuXG5cdFx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSB7XG5cdFx0XHRcdFx0XHRjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdC8vIGRlY2VsZXJhdGluZyBpbnRlcnZhbCB0aGF0IGNoZWNrcyBmb3Igc2l6ZSBvZiBhbiBpbWFnZVxuXHRcdFx0XHRcdF9pbWdJbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYoaW1nLm5hdHVyYWxXaWR0aCA+IDApIHtcblx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRpZihjb3VudGVyID4gMjAwKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoX2ltZ0ludGVydmFsKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y291bnRlcisrO1xuXHRcdFx0XHRcdFx0aWYoY291bnRlciA9PT0gMykge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCgxMCk7XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYoY291bnRlciA9PT0gNDApIHtcblx0XHRcdFx0XHRcdFx0bWZwU2V0SW50ZXJ2YWwoNTApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmKGNvdW50ZXIgPT09IDEwMCkge1xuXHRcdFx0XHRcdFx0XHRtZnBTZXRJbnRlcnZhbCg1MDApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0sIGRlbGF5KTtcblx0XHRcdFx0fTtcblxuXHRcdFx0bWZwU2V0SW50ZXJ2YWwoMSk7XG5cdFx0fSxcblxuXHRcdGdldEltYWdlOiBmdW5jdGlvbihpdGVtLCB0ZW1wbGF0ZSkge1xuXG5cdFx0XHR2YXIgZ3VhcmQgPSAwLFxuXG5cdFx0XHRcdC8vIGltYWdlIGxvYWQgY29tcGxldGUgaGFuZGxlclxuXHRcdFx0XHRvbkxvYWRDb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGl0ZW0pIHtcblx0XHRcdFx0XHRcdGlmIChpdGVtLmltZ1swXS5jb21wbGV0ZSkge1xuXHRcdFx0XHRcdFx0XHRpdGVtLmltZy5vZmYoJy5tZnBsb2FkZXInKTtcblxuXHRcdFx0XHRcdFx0XHRpZihpdGVtID09PSBtZnAuY3Vyckl0ZW0pe1xuXHRcdFx0XHRcdFx0XHRcdG1mcC5fb25JbWFnZUhhc1NpemUoaXRlbSk7XG5cblx0XHRcdFx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdyZWFkeScpO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0aXRlbS5sb2FkZWQgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdF9tZnBUcmlnZ2VyKCdJbWFnZUxvYWRDb21wbGV0ZScpO1xuXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gaWYgaW1hZ2UgY29tcGxldGUgY2hlY2sgZmFpbHMgMjAwIHRpbWVzICgyMCBzZWMpLCB3ZSBhc3N1bWUgdGhhdCB0aGVyZSB3YXMgYW4gZXJyb3IuXG5cdFx0XHRcdFx0XHRcdGd1YXJkKys7XG5cdFx0XHRcdFx0XHRcdGlmKGd1YXJkIDwgMjAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChvbkxvYWRDb21wbGV0ZSwxMDApO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdG9uTG9hZEVycm9yKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gaW1hZ2UgZXJyb3IgaGFuZGxlclxuXHRcdFx0XHRvbkxvYWRFcnJvciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmKGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uaW1nLm9mZignLm1mcGxvYWRlcicpO1xuXHRcdFx0XHRcdFx0aWYoaXRlbSA9PT0gbWZwLmN1cnJJdGVtKXtcblx0XHRcdFx0XHRcdFx0bWZwLl9vbkltYWdlSGFzU2l6ZShpdGVtKTtcblx0XHRcdFx0XHRcdFx0bWZwLnVwZGF0ZVN0YXR1cygnZXJyb3InLCBpbWdTdC50RXJyb3IucmVwbGFjZSgnJXVybCUnLCBpdGVtLnNyYykgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGl0ZW0ubG9hZGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGl0ZW0ubG9hZEVycm9yID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGltZ1N0ID0gbWZwLnN0LmltYWdlO1xuXG5cblx0XHRcdHZhciBlbCA9IHRlbXBsYXRlLmZpbmQoJy5tZnAtaW1nJyk7XG5cdFx0XHRpZihlbC5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdFx0XHRpbWcuY2xhc3NOYW1lID0gJ21mcC1pbWcnO1xuXHRcdFx0XHRpZihpdGVtLmVsICYmIGl0ZW0uZWwuZmluZCgnaW1nJykubGVuZ3RoKSB7XG5cdFx0XHRcdFx0aW1nLmFsdCA9IGl0ZW0uZWwuZmluZCgnaW1nJykuYXR0cignYWx0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aXRlbS5pbWcgPSAkKGltZykub24oJ2xvYWQubWZwbG9hZGVyJywgb25Mb2FkQ29tcGxldGUpLm9uKCdlcnJvci5tZnBsb2FkZXInLCBvbkxvYWRFcnJvcik7XG5cdFx0XHRcdGltZy5zcmMgPSBpdGVtLnNyYztcblxuXHRcdFx0XHQvLyB3aXRob3V0IGNsb25lKCkgXCJlcnJvclwiIGV2ZW50IGlzIG5vdCBmaXJpbmcgd2hlbiBJTUcgaXMgcmVwbGFjZWQgYnkgbmV3IElNR1xuXHRcdFx0XHQvLyBUT0RPOiBmaW5kIGEgd2F5IHRvIGF2b2lkIHN1Y2ggY2xvbmluZ1xuXHRcdFx0XHRpZihlbC5pcygnaW1nJykpIHtcblx0XHRcdFx0XHRpdGVtLmltZyA9IGl0ZW0uaW1nLmNsb25lKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbWcgPSBpdGVtLmltZ1swXTtcblx0XHRcdFx0aWYoaW1nLm5hdHVyYWxXaWR0aCA+IDApIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2UgaWYoIWltZy53aWR0aCkge1xuXHRcdFx0XHRcdGl0ZW0uaGFzU2l6ZSA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdG1mcC5fcGFyc2VNYXJrdXAodGVtcGxhdGUsIHtcblx0XHRcdFx0dGl0bGU6IF9nZXRUaXRsZShpdGVtKSxcblx0XHRcdFx0aW1nX3JlcGxhY2VXaXRoOiBpdGVtLmltZ1xuXHRcdFx0fSwgaXRlbSk7XG5cblx0XHRcdG1mcC5yZXNpemVJbWFnZSgpO1xuXG5cdFx0XHRpZihpdGVtLmhhc1NpemUpIHtcblx0XHRcdFx0aWYoX2ltZ0ludGVydmFsKSBjbGVhckludGVydmFsKF9pbWdJbnRlcnZhbCk7XG5cblx0XHRcdFx0aWYoaXRlbS5sb2FkRXJyb3IpIHtcblx0XHRcdFx0XHR0ZW1wbGF0ZS5hZGRDbGFzcygnbWZwLWxvYWRpbmcnKTtcblx0XHRcdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdlcnJvcicsIGltZ1N0LnRFcnJvci5yZXBsYWNlKCcldXJsJScsIGl0ZW0uc3JjKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRlbXBsYXRlLnJlbW92ZUNsYXNzKCdtZnAtbG9hZGluZycpO1xuXHRcdFx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRlbXBsYXRlO1xuXHRcdFx0fVxuXG5cdFx0XHRtZnAudXBkYXRlU3RhdHVzKCdsb2FkaW5nJyk7XG5cdFx0XHRpdGVtLmxvYWRpbmcgPSB0cnVlO1xuXG5cdFx0XHRpZighaXRlbS5oYXNTaXplKSB7XG5cdFx0XHRcdGl0ZW0uaW1nSGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0dGVtcGxhdGUuYWRkQ2xhc3MoJ21mcC1sb2FkaW5nJyk7XG5cdFx0XHRcdG1mcC5maW5kSW1hZ2VTaXplKGl0ZW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGVtcGxhdGU7XG5cdFx0fVxuXHR9XG59KTtcblxuLyo+PmltYWdlKi9cblxuLyo+Pnpvb20qL1xudmFyIGhhc01velRyYW5zZm9ybSxcblx0Z2V0SGFzTW96VHJhbnNmb3JtID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYoaGFzTW96VHJhbnNmb3JtID09PSB1bmRlZmluZWQpIHtcblx0XHRcdGhhc01velRyYW5zZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKS5zdHlsZS5Nb3pUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0cmV0dXJuIGhhc01velRyYW5zZm9ybTtcblx0fTtcblxuJC5tYWduaWZpY1BvcHVwLnJlZ2lzdGVyTW9kdWxlKCd6b29tJywge1xuXG5cdG9wdGlvbnM6IHtcblx0XHRlbmFibGVkOiBmYWxzZSxcblx0XHRlYXNpbmc6ICdlYXNlLWluLW91dCcsXG5cdFx0ZHVyYXRpb246IDMwMCxcblx0XHRvcGVuZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBlbGVtZW50LmlzKCdpbWcnKSA/IGVsZW1lbnQgOiBlbGVtZW50LmZpbmQoJ2ltZycpO1xuXHRcdH1cblx0fSxcblxuXHRwcm90bzoge1xuXG5cdFx0aW5pdFpvb206IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHpvb21TdCA9IG1mcC5zdC56b29tLFxuXHRcdFx0XHRucyA9ICcuem9vbScsXG5cdFx0XHRcdGltYWdlO1xuXG5cdFx0XHRpZighem9vbVN0LmVuYWJsZWQgfHwgIW1mcC5zdXBwb3J0c1RyYW5zaXRpb24pIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZHVyYXRpb24gPSB6b29tU3QuZHVyYXRpb24sXG5cdFx0XHRcdGdldEVsVG9BbmltYXRlID0gZnVuY3Rpb24oaW1hZ2UpIHtcblx0XHRcdFx0XHR2YXIgbmV3SW1nID0gaW1hZ2UuY2xvbmUoKS5yZW1vdmVBdHRyKCdzdHlsZScpLnJlbW92ZUF0dHIoJ2NsYXNzJykuYWRkQ2xhc3MoJ21mcC1hbmltYXRlZC1pbWFnZScpLFxuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbiA9ICdhbGwgJysoem9vbVN0LmR1cmF0aW9uLzEwMDApKydzICcgKyB6b29tU3QuZWFzaW5nLFxuXHRcdFx0XHRcdFx0Y3NzT2JqID0ge1xuXHRcdFx0XHRcdFx0XHRwb3NpdGlvbjogJ2ZpeGVkJyxcblx0XHRcdFx0XHRcdFx0ekluZGV4OiA5OTk5LFxuXHRcdFx0XHRcdFx0XHRsZWZ0OiAwLFxuXHRcdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRcdCctd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHknOiAnaGlkZGVuJ1xuXHRcdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRcdHQgPSAndHJhbnNpdGlvbic7XG5cblx0XHRcdFx0XHRjc3NPYmpbJy13ZWJraXQtJyt0XSA9IGNzc09ialsnLW1vei0nK3RdID0gY3NzT2JqWyctby0nK3RdID0gY3NzT2JqW3RdID0gdHJhbnNpdGlvbjtcblxuXHRcdFx0XHRcdG5ld0ltZy5jc3MoY3NzT2JqKTtcblx0XHRcdFx0XHRyZXR1cm4gbmV3SW1nO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzaG93TWFpbkNvbnRlbnQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZnAuY29udGVudC5jc3MoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRvcGVuVGltZW91dCxcblx0XHRcdFx0YW5pbWF0ZWRJbWc7XG5cblx0XHRcdF9tZnBPbignQnVpbGRDb250cm9scycrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX2FsbG93Wm9vbSgpKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQob3BlblRpbWVvdXQpO1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuXHRcdFx0XHRcdC8vIEJhc2ljYWxseSwgYWxsIGNvZGUgYmVsb3cgZG9lcyBpcyBjbG9uZXMgZXhpc3RpbmcgaW1hZ2UsIHB1dHMgaW4gb24gdG9wIG9mIHRoZSBjdXJyZW50IG9uZSBhbmQgYW5pbWF0ZWQgaXRcblxuXHRcdFx0XHRcdGltYWdlID0gbWZwLl9nZXRJdGVtVG9ab29tKCk7XG5cblx0XHRcdFx0XHRpZighaW1hZ2UpIHtcblx0XHRcdFx0XHRcdHNob3dNYWluQ29udGVudCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFuaW1hdGVkSW1nID0gZ2V0RWxUb0FuaW1hdGUoaW1hZ2UpO1xuXG5cdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCgpICk7XG5cblx0XHRcdFx0XHRtZnAud3JhcC5hcHBlbmQoYW5pbWF0ZWRJbWcpO1xuXG5cdFx0XHRcdFx0b3BlblRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcuY3NzKCBtZnAuX2dldE9mZnNldCggdHJ1ZSApICk7XG5cdFx0XHRcdFx0XHRvcGVuVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdFx0c2hvd01haW5Db250ZW50KCk7XG5cblx0XHRcdFx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRhbmltYXRlZEltZy5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdFx0XHRpbWFnZSA9IGFuaW1hdGVkSW1nID0gbnVsbDtcblx0XHRcdFx0XHRcdFx0XHRfbWZwVHJpZ2dlcignWm9vbUFuaW1hdGlvbkVuZGVkJyk7XG5cdFx0XHRcdFx0XHRcdH0sIDE2KTsgLy8gYXZvaWQgYmxpbmsgd2hlbiBzd2l0Y2hpbmcgaW1hZ2VzXG5cblx0XHRcdFx0XHRcdH0sIGR1cmF0aW9uKTsgLy8gdGhpcyB0aW1lb3V0IGVxdWFscyBhbmltYXRpb24gZHVyYXRpb25cblxuXHRcdFx0XHRcdH0sIDE2KTsgLy8gYnkgYWRkaW5nIHRoaXMgdGltZW91dCB3ZSBhdm9pZCBzaG9ydCBnbGl0Y2ggYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb25cblxuXG5cdFx0XHRcdFx0Ly8gTG90cyBvZiB0aW1lb3V0cy4uLlxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdF9tZnBPbihCRUZPUkVfQ0xPU0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX2FsbG93Wm9vbSgpKSB7XG5cblx0XHRcdFx0XHRjbGVhclRpbWVvdXQob3BlblRpbWVvdXQpO1xuXG5cdFx0XHRcdFx0bWZwLnN0LnJlbW92YWxEZWxheSA9IGR1cmF0aW9uO1xuXG5cdFx0XHRcdFx0aWYoIWltYWdlKSB7XG5cdFx0XHRcdFx0XHRpbWFnZSA9IG1mcC5fZ2V0SXRlbVRvWm9vbSgpO1xuXHRcdFx0XHRcdFx0aWYoIWltYWdlKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGFuaW1hdGVkSW1nID0gZ2V0RWxUb0FuaW1hdGUoaW1hZ2UpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGFuaW1hdGVkSW1nLmNzcyggbWZwLl9nZXRPZmZzZXQodHJ1ZSkgKTtcblx0XHRcdFx0XHRtZnAud3JhcC5hcHBlbmQoYW5pbWF0ZWRJbWcpO1xuXHRcdFx0XHRcdG1mcC5jb250ZW50LmNzcygndmlzaWJpbGl0eScsICdoaWRkZW4nKTtcblxuXHRcdFx0XHRcdHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRhbmltYXRlZEltZy5jc3MoIG1mcC5fZ2V0T2Zmc2V0KCkgKTtcblx0XHRcdFx0XHR9LCAxNik7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5fYWxsb3dab29tKCkpIHtcblx0XHRcdFx0XHRzaG93TWFpbkNvbnRlbnQoKTtcblx0XHRcdFx0XHRpZihhbmltYXRlZEltZykge1xuXHRcdFx0XHRcdFx0YW5pbWF0ZWRJbWcucmVtb3ZlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGltYWdlID0gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdF9hbGxvd1pvb206IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIG1mcC5jdXJySXRlbS50eXBlID09PSAnaW1hZ2UnO1xuXHRcdH0sXG5cblx0XHRfZ2V0SXRlbVRvWm9vbTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZihtZnAuY3Vyckl0ZW0uaGFzU2l6ZSkge1xuXHRcdFx0XHRyZXR1cm4gbWZwLmN1cnJJdGVtLmltZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gR2V0IGVsZW1lbnQgcG9zdGlvbiByZWxhdGl2ZSB0byB2aWV3cG9ydFxuXHRcdF9nZXRPZmZzZXQ6IGZ1bmN0aW9uKGlzTGFyZ2UpIHtcblx0XHRcdHZhciBlbDtcblx0XHRcdGlmKGlzTGFyZ2UpIHtcblx0XHRcdFx0ZWwgPSBtZnAuY3Vyckl0ZW0uaW1nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWwgPSBtZnAuc3Quem9vbS5vcGVuZXIobWZwLmN1cnJJdGVtLmVsIHx8IG1mcC5jdXJySXRlbSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBvZmZzZXQgPSBlbC5vZmZzZXQoKTtcblx0XHRcdHZhciBwYWRkaW5nVG9wID0gcGFyc2VJbnQoZWwuY3NzKCdwYWRkaW5nLXRvcCcpLDEwKTtcblx0XHRcdHZhciBwYWRkaW5nQm90dG9tID0gcGFyc2VJbnQoZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLDEwKTtcblx0XHRcdG9mZnNldC50b3AgLT0gKCAkKHdpbmRvdykuc2Nyb2xsVG9wKCkgLSBwYWRkaW5nVG9wICk7XG5cblxuXHRcdFx0LypcblxuXHRcdFx0QW5pbWF0aW5nIGxlZnQgKyB0b3AgKyB3aWR0aC9oZWlnaHQgbG9va3MgZ2xpdGNoeSBpbiBGaXJlZm94LCBidXQgcGVyZmVjdCBpbiBDaHJvbWUuIEFuZCB2aWNlLXZlcnNhLlxuXG5cdFx0XHQgKi9cblx0XHRcdHZhciBvYmogPSB7XG5cdFx0XHRcdHdpZHRoOiBlbC53aWR0aCgpLFxuXHRcdFx0XHQvLyBmaXggWmVwdG8gaGVpZ2h0K3BhZGRpbmcgaXNzdWVcblx0XHRcdFx0aGVpZ2h0OiAoX2lzSlEgPyBlbC5pbm5lckhlaWdodCgpIDogZWxbMF0ub2Zmc2V0SGVpZ2h0KSAtIHBhZGRpbmdCb3R0b20gLSBwYWRkaW5nVG9wXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBJIGhhdGUgdG8gZG8gdGhpcywgYnV0IHRoZXJlIGlzIG5vIGFub3RoZXIgb3B0aW9uXG5cdFx0XHRpZiggZ2V0SGFzTW96VHJhbnNmb3JtKCkgKSB7XG5cdFx0XHRcdG9ialsnLW1vei10cmFuc2Zvcm0nXSA9IG9ialsndHJhbnNmb3JtJ10gPSAndHJhbnNsYXRlKCcgKyBvZmZzZXQubGVmdCArICdweCwnICsgb2Zmc2V0LnRvcCArICdweCknO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b2JqLmxlZnQgPSBvZmZzZXQubGVmdDtcblx0XHRcdFx0b2JqLnRvcCA9IG9mZnNldC50b3A7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gb2JqO1xuXHRcdH1cblxuXHR9XG59KTtcblxuXG5cbi8qPj56b29tKi9cblxuLyo+PmlmcmFtZSovXG5cbnZhciBJRlJBTUVfTlMgPSAnaWZyYW1lJyxcblx0X2VtcHR5UGFnZSA9ICcvL2Fib3V0OmJsYW5rJyxcblxuXHRfZml4SWZyYW1lQnVncyA9IGZ1bmN0aW9uKGlzU2hvd2luZykge1xuXHRcdGlmKG1mcC5jdXJyVGVtcGxhdGVbSUZSQU1FX05TXSkge1xuXHRcdFx0dmFyIGVsID0gbWZwLmN1cnJUZW1wbGF0ZVtJRlJBTUVfTlNdLmZpbmQoJ2lmcmFtZScpO1xuXHRcdFx0aWYoZWwubGVuZ3RoKSB7XG5cdFx0XHRcdC8vIHJlc2V0IHNyYyBhZnRlciB0aGUgcG9wdXAgaXMgY2xvc2VkIHRvIGF2b2lkIFwidmlkZW8ga2VlcHMgcGxheWluZyBhZnRlciBwb3B1cCBpcyBjbG9zZWRcIiBidWdcblx0XHRcdFx0aWYoIWlzU2hvd2luZykge1xuXHRcdFx0XHRcdGVsWzBdLnNyYyA9IF9lbXB0eVBhZ2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJRTggYmxhY2sgc2NyZWVuIGJ1ZyBmaXhcblx0XHRcdFx0aWYobWZwLmlzSUU4KSB7XG5cdFx0XHRcdFx0ZWwuY3NzKCdkaXNwbGF5JywgaXNTaG93aW5nID8gJ2Jsb2NrJyA6ICdub25lJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShJRlJBTUVfTlMsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0bWFya3VwOiAnPGRpdiBjbGFzcz1cIm1mcC1pZnJhbWUtc2NhbGVyXCI+Jytcblx0XHRcdFx0XHQnPGRpdiBjbGFzcz1cIm1mcC1jbG9zZVwiPjwvZGl2PicrXG5cdFx0XHRcdFx0JzxpZnJhbWUgY2xhc3M9XCJtZnAtaWZyYW1lXCIgc3JjPVwiLy9hYm91dDpibGFua1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbj48L2lmcmFtZT4nK1xuXHRcdFx0XHQnPC9kaXY+JyxcblxuXHRcdHNyY0FjdGlvbjogJ2lmcmFtZV9zcmMnLFxuXG5cdFx0Ly8gd2UgZG9uJ3QgY2FyZSBhbmQgc3VwcG9ydCBvbmx5IG9uZSBkZWZhdWx0IHR5cGUgb2YgVVJMIGJ5IGRlZmF1bHRcblx0XHRwYXR0ZXJuczoge1xuXHRcdFx0eW91dHViZToge1xuXHRcdFx0XHRpbmRleDogJ3lvdXR1YmUuY29tJyxcblx0XHRcdFx0aWQ6ICd2PScsXG5cdFx0XHRcdHNyYzogJy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLyVpZCU/YXV0b3BsYXk9MSdcblx0XHRcdH0sXG5cdFx0XHR2aW1lbzoge1xuXHRcdFx0XHRpbmRleDogJ3ZpbWVvLmNvbS8nLFxuXHRcdFx0XHRpZDogJy8nLFxuXHRcdFx0XHRzcmM6ICcvL3BsYXllci52aW1lby5jb20vdmlkZW8vJWlkJT9hdXRvcGxheT0xJ1xuXHRcdFx0fSxcblx0XHRcdGdtYXBzOiB7XG5cdFx0XHRcdGluZGV4OiAnLy9tYXBzLmdvb2dsZS4nLFxuXHRcdFx0XHRzcmM6ICclaWQlJm91dHB1dD1lbWJlZCdcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvdG86IHtcblx0XHRpbml0SWZyYW1lOiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC50eXBlcy5wdXNoKElGUkFNRV9OUyk7XG5cblx0XHRcdF9tZnBPbignQmVmb3JlQ2hhbmdlJywgZnVuY3Rpb24oZSwgcHJldlR5cGUsIG5ld1R5cGUpIHtcblx0XHRcdFx0aWYocHJldlR5cGUgIT09IG5ld1R5cGUpIHtcblx0XHRcdFx0XHRpZihwcmV2VHlwZSA9PT0gSUZSQU1FX05TKSB7XG5cdFx0XHRcdFx0XHRfZml4SWZyYW1lQnVncygpOyAvLyBpZnJhbWUgaWYgcmVtb3ZlZFxuXHRcdFx0XHRcdH0gZWxzZSBpZihuZXdUeXBlID09PSBJRlJBTUVfTlMpIHtcblx0XHRcdFx0XHRcdF9maXhJZnJhbWVCdWdzKHRydWUpOyAvLyBpZnJhbWUgaXMgc2hvd2luZ1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fS8vIGVsc2Uge1xuXHRcdFx0XHRcdC8vIGlmcmFtZSBzb3VyY2UgaXMgc3dpdGNoZWQsIGRvbid0IGRvIGFueXRoaW5nXG5cdFx0XHRcdC8vfVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDTE9TRV9FVkVOVCArICcuJyArIElGUkFNRV9OUywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdF9maXhJZnJhbWVCdWdzKCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0Z2V0SWZyYW1lOiBmdW5jdGlvbihpdGVtLCB0ZW1wbGF0ZSkge1xuXHRcdFx0dmFyIGVtYmVkU3JjID0gaXRlbS5zcmM7XG5cdFx0XHR2YXIgaWZyYW1lU3QgPSBtZnAuc3QuaWZyYW1lO1xuXG5cdFx0XHQkLmVhY2goaWZyYW1lU3QucGF0dGVybnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbWJlZFNyYy5pbmRleE9mKCB0aGlzLmluZGV4ICkgPiAtMSkge1xuXHRcdFx0XHRcdGlmKHRoaXMuaWQpIHtcblx0XHRcdFx0XHRcdGlmKHR5cGVvZiB0aGlzLmlkID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdFx0XHRlbWJlZFNyYyA9IGVtYmVkU3JjLnN1YnN0cihlbWJlZFNyYy5sYXN0SW5kZXhPZih0aGlzLmlkKSt0aGlzLmlkLmxlbmd0aCwgZW1iZWRTcmMubGVuZ3RoKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGVtYmVkU3JjID0gdGhpcy5pZC5jYWxsKCB0aGlzLCBlbWJlZFNyYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbWJlZFNyYyA9IHRoaXMuc3JjLnJlcGxhY2UoJyVpZCUnLCBlbWJlZFNyYyApO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTsgLy8gYnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR2YXIgZGF0YU9iaiA9IHt9O1xuXHRcdFx0aWYoaWZyYW1lU3Quc3JjQWN0aW9uKSB7XG5cdFx0XHRcdGRhdGFPYmpbaWZyYW1lU3Quc3JjQWN0aW9uXSA9IGVtYmVkU3JjO1xuXHRcdFx0fVxuXHRcdFx0bWZwLl9wYXJzZU1hcmt1cCh0ZW1wbGF0ZSwgZGF0YU9iaiwgaXRlbSk7XG5cblx0XHRcdG1mcC51cGRhdGVTdGF0dXMoJ3JlYWR5Jyk7XG5cblx0XHRcdHJldHVybiB0ZW1wbGF0ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG5cblxuLyo+PmlmcmFtZSovXG5cbi8qPj5nYWxsZXJ5Ki9cbi8qKlxuICogR2V0IGxvb3BlZCBpbmRleCBkZXBlbmRpbmcgb24gbnVtYmVyIG9mIHNsaWRlc1xuICovXG52YXIgX2dldExvb3BlZElkID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbnVtU2xpZGVzID0gbWZwLml0ZW1zLmxlbmd0aDtcblx0XHRpZihpbmRleCA+IG51bVNsaWRlcyAtIDEpIHtcblx0XHRcdHJldHVybiBpbmRleCAtIG51bVNsaWRlcztcblx0XHR9IGVsc2UgIGlmKGluZGV4IDwgMCkge1xuXHRcdFx0cmV0dXJuIG51bVNsaWRlcyArIGluZGV4O1xuXHRcdH1cblx0XHRyZXR1cm4gaW5kZXg7XG5cdH0sXG5cdF9yZXBsYWNlQ3VyclRvdGFsID0gZnVuY3Rpb24odGV4dCwgY3VyciwgdG90YWwpIHtcblx0XHRyZXR1cm4gdGV4dC5yZXBsYWNlKC8lY3VyciUvZ2ksIGN1cnIgKyAxKS5yZXBsYWNlKC8ldG90YWwlL2dpLCB0b3RhbCk7XG5cdH07XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZSgnZ2FsbGVyeScsIHtcblxuXHRvcHRpb25zOiB7XG5cdFx0ZW5hYmxlZDogZmFsc2UsXG5cdFx0YXJyb3dNYXJrdXA6ICc8YnV0dG9uIHRpdGxlPVwiJXRpdGxlJVwiIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cIm1mcC1hcnJvdyBtZnAtYXJyb3ctJWRpciVcIj48L2J1dHRvbj4nLFxuXHRcdHByZWxvYWQ6IFswLDJdLFxuXHRcdG5hdmlnYXRlQnlJbWdDbGljazogdHJ1ZSxcblx0XHRhcnJvd3M6IHRydWUsXG5cblx0XHR0UHJldjogJ1ByZXZpb3VzIChMZWZ0IGFycm93IGtleSknLFxuXHRcdHROZXh0OiAnTmV4dCAoUmlnaHQgYXJyb3cga2V5KScsXG5cdFx0dENvdW50ZXI6ICclY3VyciUgb2YgJXRvdGFsJSdcblx0fSxcblxuXHRwcm90bzoge1xuXHRcdGluaXRHYWxsZXJ5OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0dmFyIGdTdCA9IG1mcC5zdC5nYWxsZXJ5LFxuXHRcdFx0XHRucyA9ICcubWZwLWdhbGxlcnknO1xuXG5cdFx0XHRtZnAuZGlyZWN0aW9uID0gdHJ1ZTsgLy8gdHJ1ZSAtIG5leHQsIGZhbHNlIC0gcHJldlxuXG5cdFx0XHRpZighZ1N0IHx8ICFnU3QuZW5hYmxlZCApIHJldHVybiBmYWxzZTtcblxuXHRcdFx0X3dyYXBDbGFzc2VzICs9ICcgbWZwLWdhbGxlcnknO1xuXG5cdFx0XHRfbWZwT24oT1BFTl9FVkVOVCtucywgZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0aWYoZ1N0Lm5hdmlnYXRlQnlJbWdDbGljaykge1xuXHRcdFx0XHRcdG1mcC53cmFwLm9uKCdjbGljaycrbnMsICcubWZwLWltZycsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0aWYobWZwLml0ZW1zLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2RvY3VtZW50Lm9uKCdrZXlkb3duJytucywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdGlmIChlLmtleUNvZGUgPT09IDM3KSB7XG5cdFx0XHRcdFx0XHRtZnAucHJldigpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAzOSkge1xuXHRcdFx0XHRcdFx0bWZwLm5leHQoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbignVXBkYXRlU3RhdHVzJytucywgZnVuY3Rpb24oZSwgZGF0YSkge1xuXHRcdFx0XHRpZihkYXRhLnRleHQpIHtcblx0XHRcdFx0XHRkYXRhLnRleHQgPSBfcmVwbGFjZUN1cnJUb3RhbChkYXRhLnRleHQsIG1mcC5jdXJySXRlbS5pbmRleCwgbWZwLml0ZW1zLmxlbmd0aCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRfbWZwT24oTUFSS1VQX1BBUlNFX0VWRU5UK25zLCBmdW5jdGlvbihlLCBlbGVtZW50LCB2YWx1ZXMsIGl0ZW0pIHtcblx0XHRcdFx0dmFyIGwgPSBtZnAuaXRlbXMubGVuZ3RoO1xuXHRcdFx0XHR2YWx1ZXMuY291bnRlciA9IGwgPiAxID8gX3JlcGxhY2VDdXJyVG90YWwoZ1N0LnRDb3VudGVyLCBpdGVtLmluZGV4LCBsKSA6ICcnO1xuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbignQnVpbGRDb250cm9scycgKyBucywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKG1mcC5pdGVtcy5sZW5ndGggPiAxICYmIGdTdC5hcnJvd3MgJiYgIW1mcC5hcnJvd0xlZnQpIHtcblx0XHRcdFx0XHR2YXIgbWFya3VwID0gZ1N0LmFycm93TWFya3VwLFxuXHRcdFx0XHRcdFx0YXJyb3dMZWZ0ID0gbWZwLmFycm93TGVmdCA9ICQoIG1hcmt1cC5yZXBsYWNlKC8ldGl0bGUlL2dpLCBnU3QudFByZXYpLnJlcGxhY2UoLyVkaXIlL2dpLCAnbGVmdCcpICkuYWRkQ2xhc3MoUFJFVkVOVF9DTE9TRV9DTEFTUyksXG5cdFx0XHRcdFx0XHRhcnJvd1JpZ2h0ID0gbWZwLmFycm93UmlnaHQgPSAkKCBtYXJrdXAucmVwbGFjZSgvJXRpdGxlJS9naSwgZ1N0LnROZXh0KS5yZXBsYWNlKC8lZGlyJS9naSwgJ3JpZ2h0JykgKS5hZGRDbGFzcyhQUkVWRU5UX0NMT1NFX0NMQVNTKTtcblxuXHRcdFx0XHRcdGFycm93TGVmdC5jbGljayhmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG1mcC5wcmV2KCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YXJyb3dSaWdodC5jbGljayhmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdG1mcC5uZXh0KCk7XG5cdFx0XHRcdFx0fSk7XG5cblx0XHRcdFx0XHRtZnAuY29udGFpbmVyLmFwcGVuZChhcnJvd0xlZnQuYWRkKGFycm93UmlnaHQpKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdF9tZnBPbihDSEFOR0VfRVZFTlQrbnMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihtZnAuX3ByZWxvYWRUaW1lb3V0KSBjbGVhclRpbWVvdXQobWZwLl9wcmVsb2FkVGltZW91dCk7XG5cblx0XHRcdFx0bWZwLl9wcmVsb2FkVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bWZwLnByZWxvYWROZWFyYnlJbWFnZXMoKTtcblx0XHRcdFx0XHRtZnAuX3ByZWxvYWRUaW1lb3V0ID0gbnVsbDtcblx0XHRcdFx0fSwgMTYpO1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0X21mcE9uKENMT1NFX0VWRU5UK25zLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0X2RvY3VtZW50Lm9mZihucyk7XG5cdFx0XHRcdG1mcC53cmFwLm9mZignY2xpY2snK25zKTtcblx0XHRcdFx0bWZwLmFycm93UmlnaHQgPSBtZnAuYXJyb3dMZWZ0ID0gbnVsbDtcblx0XHRcdH0pO1xuXG5cdFx0fSxcblx0XHRuZXh0OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSB0cnVlO1xuXHRcdFx0bWZwLmluZGV4ID0gX2dldExvb3BlZElkKG1mcC5pbmRleCArIDEpO1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRwcmV2OiBmdW5jdGlvbigpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSBmYWxzZTtcblx0XHRcdG1mcC5pbmRleCA9IF9nZXRMb29wZWRJZChtZnAuaW5kZXggLSAxKTtcblx0XHRcdG1mcC51cGRhdGVJdGVtSFRNTCgpO1xuXHRcdH0sXG5cdFx0Z29UbzogZnVuY3Rpb24obmV3SW5kZXgpIHtcblx0XHRcdG1mcC5kaXJlY3Rpb24gPSAobmV3SW5kZXggPj0gbWZwLmluZGV4KTtcblx0XHRcdG1mcC5pbmRleCA9IG5ld0luZGV4O1xuXHRcdFx0bWZwLnVwZGF0ZUl0ZW1IVE1MKCk7XG5cdFx0fSxcblx0XHRwcmVsb2FkTmVhcmJ5SW1hZ2VzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwID0gbWZwLnN0LmdhbGxlcnkucHJlbG9hZCxcblx0XHRcdFx0cHJlbG9hZEJlZm9yZSA9IE1hdGgubWluKHBbMF0sIG1mcC5pdGVtcy5sZW5ndGgpLFxuXHRcdFx0XHRwcmVsb2FkQWZ0ZXIgPSBNYXRoLm1pbihwWzFdLCBtZnAuaXRlbXMubGVuZ3RoKSxcblx0XHRcdFx0aTtcblxuXHRcdFx0Zm9yKGkgPSAxOyBpIDw9IChtZnAuZGlyZWN0aW9uID8gcHJlbG9hZEFmdGVyIDogcHJlbG9hZEJlZm9yZSk7IGkrKykge1xuXHRcdFx0XHRtZnAuX3ByZWxvYWRJdGVtKG1mcC5pbmRleCtpKTtcblx0XHRcdH1cblx0XHRcdGZvcihpID0gMTsgaSA8PSAobWZwLmRpcmVjdGlvbiA/IHByZWxvYWRCZWZvcmUgOiBwcmVsb2FkQWZ0ZXIpOyBpKyspIHtcblx0XHRcdFx0bWZwLl9wcmVsb2FkSXRlbShtZnAuaW5kZXgtaSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfcHJlbG9hZEl0ZW06IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHRpbmRleCA9IF9nZXRMb29wZWRJZChpbmRleCk7XG5cblx0XHRcdGlmKG1mcC5pdGVtc1tpbmRleF0ucHJlbG9hZGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGl0ZW0gPSBtZnAuaXRlbXNbaW5kZXhdO1xuXHRcdFx0aWYoIWl0ZW0ucGFyc2VkKSB7XG5cdFx0XHRcdGl0ZW0gPSBtZnAucGFyc2VFbCggaW5kZXggKTtcblx0XHRcdH1cblxuXHRcdFx0X21mcFRyaWdnZXIoJ0xhenlMb2FkJywgaXRlbSk7XG5cblx0XHRcdGlmKGl0ZW0udHlwZSA9PT0gJ2ltYWdlJykge1xuXHRcdFx0XHRpdGVtLmltZyA9ICQoJzxpbWcgY2xhc3M9XCJtZnAtaW1nXCIgLz4nKS5vbignbG9hZC5tZnBsb2FkZXInLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpdGVtLmhhc1NpemUgPSB0cnVlO1xuXHRcdFx0XHR9KS5vbignZXJyb3IubWZwbG9hZGVyJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aXRlbS5oYXNTaXplID0gdHJ1ZTtcblx0XHRcdFx0XHRpdGVtLmxvYWRFcnJvciA9IHRydWU7XG5cdFx0XHRcdFx0X21mcFRyaWdnZXIoJ0xhenlMb2FkRXJyb3InLCBpdGVtKTtcblx0XHRcdFx0fSkuYXR0cignc3JjJywgaXRlbS5zcmMpO1xuXHRcdFx0fVxuXG5cblx0XHRcdGl0ZW0ucHJlbG9hZGVkID0gdHJ1ZTtcblx0XHR9XG5cdH1cbn0pO1xuXG4vKj4+Z2FsbGVyeSovXG5cbi8qPj5yZXRpbmEqL1xuXG52YXIgUkVUSU5BX05TID0gJ3JldGluYSc7XG5cbiQubWFnbmlmaWNQb3B1cC5yZWdpc3Rlck1vZHVsZShSRVRJTkFfTlMsIHtcblx0b3B0aW9uczoge1xuXHRcdHJlcGxhY2VTcmM6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRcdHJldHVybiBpdGVtLnNyYy5yZXBsYWNlKC9cXC5cXHcrJC8sIGZ1bmN0aW9uKG0pIHsgcmV0dXJuICdAMngnICsgbTsgfSk7XG5cdFx0fSxcblx0XHRyYXRpbzogMSAvLyBGdW5jdGlvbiBvciBudW1iZXIuICBTZXQgdG8gMSB0byBkaXNhYmxlLlxuXHR9LFxuXHRwcm90bzoge1xuXHRcdGluaXRSZXRpbmE6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYod2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxKSB7XG5cblx0XHRcdFx0dmFyIHN0ID0gbWZwLnN0LnJldGluYSxcblx0XHRcdFx0XHRyYXRpbyA9IHN0LnJhdGlvO1xuXG5cdFx0XHRcdHJhdGlvID0gIWlzTmFOKHJhdGlvKSA/IHJhdGlvIDogcmF0aW8oKTtcblxuXHRcdFx0XHRpZihyYXRpbyA+IDEpIHtcblx0XHRcdFx0XHRfbWZwT24oJ0ltYWdlSGFzU2l6ZScgKyAnLicgKyBSRVRJTkFfTlMsIGZ1bmN0aW9uKGUsIGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uaW1nLmNzcyh7XG5cdFx0XHRcdFx0XHRcdCdtYXgtd2lkdGgnOiBpdGVtLmltZ1swXS5uYXR1cmFsV2lkdGggLyByYXRpbyxcblx0XHRcdFx0XHRcdFx0J3dpZHRoJzogJzEwMCUnXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRfbWZwT24oJ0VsZW1lbnRQYXJzZScgKyAnLicgKyBSRVRJTkFfTlMsIGZ1bmN0aW9uKGUsIGl0ZW0pIHtcblx0XHRcdFx0XHRcdGl0ZW0uc3JjID0gc3QucmVwbGFjZVNyYyhpdGVtLCByYXRpbyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH1cblx0fVxufSk7XG5cbi8qPj5yZXRpbmEqL1xuIF9jaGVja0luc3RhbmNlKCk7IH0pKTsiLCIvKlxuICAgICBfIF8gICAgICBfICAgICAgIF9cbiBfX198IChfKSBfX198IHwgX18gIChfKV9fX1xuLyBfX3wgfCB8LyBfX3wgfC8gLyAgfCAvIF9ffFxuXFxfXyBcXCB8IHwgKF9ffCAgIDwgXyB8IFxcX18gXFxcbnxfX18vX3xffFxcX19ffF98XFxfKF8pLyB8X19fL1xuICAgICAgICAgICAgICAgICAgIHxfXy9cblxuIFZlcnNpb246IDEuOC4wXG4gIEF1dGhvcjogS2VuIFdoZWVsZXJcbiBXZWJzaXRlOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW9cbiAgICBEb2NzOiBodHRwOi8va2Vud2hlZWxlci5naXRodWIuaW8vc2xpY2tcbiAgICBSZXBvOiBodHRwOi8vZ2l0aHViLmNvbS9rZW53aGVlbGVyL3NsaWNrXG4gIElzc3VlczogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGljay9pc3N1ZXNcblxuICovXG4vKiBnbG9iYWwgd2luZG93LCBkb2N1bWVudCwgZGVmaW5lLCBqUXVlcnksIHNldEludGVydmFsLCBjbGVhckludGVydmFsICovXG47KGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxuXG59KGZ1bmN0aW9uKCQpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFNsaWNrID0gd2luZG93LlNsaWNrIHx8IHt9O1xuXG4gICAgU2xpY2sgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIGluc3RhbmNlVWlkID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBTbGljayhlbGVtZW50LCBzZXR0aW5ncykge1xuXG4gICAgICAgICAgICB2YXIgXyA9IHRoaXMsIGRhdGFTZXR0aW5ncztcblxuICAgICAgICAgICAgXy5kZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBhY2Nlc3NpYmlsaXR5OiB0cnVlLFxuICAgICAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhcHBlbmRBcnJvd3M6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXBwZW5kRG90czogJChlbGVtZW50KSxcbiAgICAgICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICAgICAgYXNOYXZGb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgcHJldkFycm93OiAnPGJ1dHRvbiBjbGFzcz1cInNsaWNrLXByZXZcIiBhcmlhLWxhYmVsPVwiUHJldmlvdXNcIiB0eXBlPVwiYnV0dG9uXCI+UHJldmlvdXM8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIG5leHRBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1uZXh0XCIgYXJpYS1sYWJlbD1cIk5leHRcIiB0eXBlPVwiYnV0dG9uXCI+TmV4dDwvYnV0dG9uPicsXG4gICAgICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICAgICAgY2VudGVyTW9kZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgY2VudGVyUGFkZGluZzogJzUwcHgnLFxuICAgICAgICAgICAgICAgIGNzc0Vhc2U6ICdlYXNlJyxcbiAgICAgICAgICAgICAgICBjdXN0b21QYWdpbmc6IGZ1bmN0aW9uKHNsaWRlciwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgnPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgLz4nKS50ZXh0KGkgKyAxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRvdHNDbGFzczogJ3NsaWNrLWRvdHMnLFxuICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlYXNpbmc6ICdsaW5lYXInLFxuICAgICAgICAgICAgICAgIGVkZ2VGcmljdGlvbjogMC4zNSxcbiAgICAgICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uU2VsZWN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBmb2N1c09uQ2hhbmdlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBpbml0aWFsU2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgbGF6eUxvYWQ6ICdvbmRlbWFuZCcsXG4gICAgICAgICAgICAgICAgbW9iaWxlRmlyc3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Ib3ZlcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkRvdHNIb3ZlcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgcmVzcG9uZFRvOiAnd2luZG93JyxcbiAgICAgICAgICAgICAgICByZXNwb25zaXZlOiBudWxsLFxuICAgICAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICAgICAgcnRsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZTogJycsXG4gICAgICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxLFxuICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgICAgICBzcGVlZDogNTAwLFxuICAgICAgICAgICAgICAgIHN3aXBlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHN3aXBlVG9TbGlkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgdG91Y2hNb3ZlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRvdWNoVGhyZXNob2xkOiA1LFxuICAgICAgICAgICAgICAgIHVzZUNTUzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsU3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FpdEZvckFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgekluZGV4OiAxMDAwXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBfLmluaXRpYWxzID0ge1xuICAgICAgICAgICAgICAgIGFuaW1hdGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgZHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGF1dG9QbGF5VGltZXI6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudERpcmVjdGlvbjogMCxcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVmdDogbnVsbCxcbiAgICAgICAgICAgICAgICBjdXJyZW50U2xpZGU6IDAsXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiAxLFxuICAgICAgICAgICAgICAgICRkb3RzOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpc3RXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0SGVpZ2h0OiBudWxsLFxuICAgICAgICAgICAgICAgIGxvYWRJbmRleDogMCxcbiAgICAgICAgICAgICAgICAkbmV4dEFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgICRwcmV2QXJyb3c6IG51bGwsXG4gICAgICAgICAgICAgICAgc2Nyb2xsaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZUNvdW50OiBudWxsLFxuICAgICAgICAgICAgICAgIHNsaWRlV2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlVHJhY2s6IG51bGwsXG4gICAgICAgICAgICAgICAgJHNsaWRlczogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldDogMCxcbiAgICAgICAgICAgICAgICBzd2lwZUxlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgc3dpcGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgJGxpc3Q6IG51bGwsXG4gICAgICAgICAgICAgICAgdG91Y2hPYmplY3Q6IHt9LFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybXNFbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB1bnNsaWNrZWQ6IGZhbHNlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLmV4dGVuZChfLCBfLmluaXRpYWxzKTtcblxuICAgICAgICAgICAgXy5hY3RpdmVCcmVha3BvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy5hbmltUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRzID0gW107XG4gICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5ncyA9IFtdO1xuICAgICAgICAgICAgXy5jc3NUcmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgXy5mb2N1c3NlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgXy5oaWRkZW4gPSAnaGlkZGVuJztcbiAgICAgICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIF8ucG9zaXRpb25Qcm9wID0gbnVsbDtcbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gbnVsbDtcbiAgICAgICAgICAgIF8ucm93Q291bnQgPSAxO1xuICAgICAgICAgICAgXy5zaG91bGRDbGljayA9IHRydWU7XG4gICAgICAgICAgICBfLiRzbGlkZXIgPSAkKGVsZW1lbnQpO1xuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBudWxsO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSBudWxsO1xuICAgICAgICAgICAgXy52aXNpYmlsaXR5Q2hhbmdlID0gJ3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgXy53aW5kb3dXaWR0aCA9IDA7XG4gICAgICAgICAgICBfLndpbmRvd1RpbWVyID0gbnVsbDtcblxuICAgICAgICAgICAgZGF0YVNldHRpbmdzID0gJChlbGVtZW50KS5kYXRhKCdzbGljaycpIHx8IHt9O1xuXG4gICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5kZWZhdWx0cywgc2V0dGluZ3MsIGRhdGFTZXR0aW5ncyk7XG5cbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcblxuICAgICAgICAgICAgXy5vcmlnaW5hbFNldHRpbmdzID0gXy5vcHRpb25zO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGRvY3VtZW50Lm1vekhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICdtb3pIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50LndlYmtpdEhpZGRlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBfLmhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5hdXRvUGxheSA9ICQucHJveHkoXy5hdXRvUGxheSwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5Q2xlYXIgPSAkLnByb3h5KF8uYXV0b1BsYXlDbGVhciwgXyk7XG4gICAgICAgICAgICBfLmF1dG9QbGF5SXRlcmF0b3IgPSAkLnByb3h5KF8uYXV0b1BsYXlJdGVyYXRvciwgXyk7XG4gICAgICAgICAgICBfLmNoYW5nZVNsaWRlID0gJC5wcm94eShfLmNoYW5nZVNsaWRlLCBfKTtcbiAgICAgICAgICAgIF8uY2xpY2tIYW5kbGVyID0gJC5wcm94eShfLmNsaWNrSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNlbGVjdEhhbmRsZXIgPSAkLnByb3h5KF8uc2VsZWN0SGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLnNldFBvc2l0aW9uID0gJC5wcm94eShfLnNldFBvc2l0aW9uLCBfKTtcbiAgICAgICAgICAgIF8uc3dpcGVIYW5kbGVyID0gJC5wcm94eShfLnN3aXBlSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmRyYWdIYW5kbGVyID0gJC5wcm94eShfLmRyYWdIYW5kbGVyLCBfKTtcbiAgICAgICAgICAgIF8ua2V5SGFuZGxlciA9ICQucHJveHkoXy5rZXlIYW5kbGVyLCBfKTtcblxuICAgICAgICAgICAgXy5pbnN0YW5jZVVpZCA9IGluc3RhbmNlVWlkKys7XG5cbiAgICAgICAgICAgIC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG4gICAgICAgICAgICAvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAobXVzdCBzdGFydCB3aXRoIDwpXG4gICAgICAgICAgICAvLyBFeHRyYWN0ZWQgZnJvbSBqUXVlcnkgdjEuMTEgc291cmNlXG4gICAgICAgICAgICBfLmh0bWxFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qKSQvO1xuXG5cbiAgICAgICAgICAgIF8ucmVnaXN0ZXJCcmVha3BvaW50cygpO1xuICAgICAgICAgICAgXy5pbml0KHRydWUpO1xuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gU2xpY2s7XG5cbiAgICB9KCkpO1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFjdGl2YXRlQURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1hY3RpdmUnKS5hdHRyKHtcbiAgICAgICAgICAgICdhcmlhLWhpZGRlbic6ICdmYWxzZSdcbiAgICAgICAgfSkuZmluZCgnYSwgaW5wdXQsIGJ1dHRvbiwgc2VsZWN0JykuYXR0cih7XG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFkZFNsaWRlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQWRkID0gZnVuY3Rpb24obWFya3VwLCBpbmRleCwgYWRkQmVmb3JlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICh0eXBlb2YoaW5kZXgpID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgICAgIGFkZEJlZm9yZSA9IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCB8fCAoaW5kZXggPj0gXy5zbGlkZUNvdW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgXy51bmxvYWQoKTtcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCAmJiBfLiRzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhZGRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QmVmb3JlKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKG1hcmt1cCkuaW5zZXJ0QWZ0ZXIoXy4kc2xpZGVzLmVxKGluZGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWRkQmVmb3JlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVzID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmFwcGVuZChfLiRzbGlkZXMpO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFuaW1hdGVIZWlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIGhlaWdodDogdGFyZ2V0SGVpZ2h0XG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlU2xpZGUgPSBmdW5jdGlvbih0YXJnZXRMZWZ0LCBjYWxsYmFjaykge1xuXG4gICAgICAgIHZhciBhbmltUHJvcHMgPSB7fSxcbiAgICAgICAgICAgIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRhcmdldExlZnQgPSAtdGFyZ2V0TGVmdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy50cmFuc2Zvcm1zRW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFyZ2V0TGVmdFxuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCwgXy5vcHRpb25zLmVhc2luZywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gLShfLmN1cnJlbnRMZWZ0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgJCh7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1TdGFydDogXy5jdXJyZW50TGVmdFxuICAgICAgICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiBfLm9wdGlvbnMuc3BlZWQsXG4gICAgICAgICAgICAgICAgICAgIGVhc2luZzogXy5vcHRpb25zLmVhc2luZyxcbiAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24obm93KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3cgPSBNYXRoLmNlaWwobm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4LCAwcHgpJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlKDBweCwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm93ICsgJ3B4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSBNYXRoLmNlaWwodGFyZ2V0TGVmdCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBhbmltUHJvcHNbXy5hbmltVHlwZV0gPSAndHJhbnNsYXRlM2QoJyArIHRhcmdldExlZnQgKyAncHgsIDBweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKDBweCwnICsgdGFyZ2V0TGVmdCArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXNhYmxlVHJhbnNpdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZUYXJnZXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8ub3B0aW9ucy5hc05hdkZvcjtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICYmIGFzTmF2Rm9yICE9PSBudWxsICkge1xuICAgICAgICAgICAgYXNOYXZGb3IgPSAkKGFzTmF2Rm9yKS5ub3QoXy4kc2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhc05hdkZvcjtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXNOYXZGb3IgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gXy5nZXROYXZUYXJnZXQoKTtcblxuICAgICAgICBpZiAoIGFzTmF2Rm9yICE9PSBudWxsICYmIHR5cGVvZiBhc05hdkZvciA9PT0gJ29iamVjdCcgKSB7XG4gICAgICAgICAgICBhc05hdkZvci5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAkKHRoaXMpLnNsaWNrKCdnZXRTbGljaycpO1xuICAgICAgICAgICAgICAgIGlmKCF0YXJnZXQudW5zbGlja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5zbGlkZUhhbmRsZXIoaW5kZXgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFwcGx5VHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSBfLnRyYW5zZm9ybVR5cGUgKyAnICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICdvcGFjaXR5ICcgKyBfLm9wdGlvbnMuc3BlZWQgKyAnbXMgJyArIF8ub3B0aW9ucy5jc3NFYXNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGUpLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBpZiAoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG4gICAgICAgICAgICBfLmF1dG9QbGF5VGltZXIgPSBzZXRJbnRlcnZhbCggXy5hdXRvUGxheUl0ZXJhdG9yLCBfLm9wdGlvbnMuYXV0b3BsYXlTcGVlZCApO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5Q2xlYXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uYXV0b1BsYXlUaW1lcikge1xuICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChfLmF1dG9QbGF5VGltZXIpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmF1dG9QbGF5SXRlcmF0b3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgaWYgKCAhXy5wYXVzZWQgJiYgIV8uaW50ZXJydXB0ZWQgJiYgIV8uZm9jdXNzZWQgKSB7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSApIHtcblxuICAgICAgICAgICAgICAgIGlmICggXy5kaXJlY3Rpb24gPT09IDEgJiYgKCBfLmN1cnJlbnRTbGlkZSArIDEgKSA9PT0gKCBfLnNsaWRlQ291bnQgLSAxICkpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBfLmRpcmVjdGlvbiA9PT0gMCApIHtcblxuICAgICAgICAgICAgICAgICAgICBzbGlkZVRvID0gXy5jdXJyZW50U2xpZGUgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBfLmN1cnJlbnRTbGlkZSAtIDEgPT09IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmRpcmVjdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnNsaWRlSGFuZGxlciggc2xpZGVUbyApO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRBcnJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgKSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyA9ICQoXy5vcHRpb25zLnByZXZBcnJvdykuYWRkQ2xhc3MoJ3NsaWNrLWFycm93Jyk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgPSAkKF8ub3B0aW9ucy5uZXh0QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuXG4gICAgICAgICAgICBpZiggXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2staGlkZGVuJykucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gdGFiaW5kZXgnKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5wcmV2QXJyb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5wcmVwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMubmV4dEFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZEFycm93cyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5hZGQoIF8uJG5leHRBcnJvdyApXG5cbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICAgICAnYXJpYS1kaXNhYmxlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkRG90cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIGRvdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgICAgICBkb3QgPSAkKCc8dWwgLz4nKS5hZGRDbGFzcyhfLm9wdGlvbnMuZG90c0NsYXNzKTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8PSBfLmdldERvdENvdW50KCk7IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGRvdC5hcHBlbmQoJCgnPGxpIC8+JykuYXBwZW5kKF8ub3B0aW9ucy5jdXN0b21QYWdpbmcuY2FsbCh0aGlzLCBfLCBpKSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLiRkb3RzID0gZG90LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmREb3RzKTtcblxuICAgICAgICAgICAgXy4kZG90cy5maW5kKCdsaScpLmZpcnN0KCkuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRPdXQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVzID1cbiAgICAgICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbiggXy5vcHRpb25zLnNsaWRlICsgJzpub3QoLnNsaWNrLWNsb25lZCknKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stc2xpZGUnKTtcblxuICAgICAgICBfLnNsaWRlQ291bnQgPSBfLiRzbGlkZXMubGVuZ3RoO1xuXG4gICAgICAgIF8uJHNsaWRlcy5lYWNoKGZ1bmN0aW9uKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICAkKGVsZW1lbnQpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBpbmRleClcbiAgICAgICAgICAgICAgICAuZGF0YSgnb3JpZ2luYWxTdHlsaW5nJywgJChlbGVtZW50KS5hdHRyKCdzdHlsZScpIHx8ICcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay1zbGlkZXInKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrID0gKF8uc2xpZGVDb3VudCA9PT0gMCkgP1xuICAgICAgICAgICAgJCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLmFwcGVuZFRvKF8uJHNsaWRlcikgOlxuICAgICAgICAgICAgXy4kc2xpZGVzLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJzbGljay10cmFja1wiLz4nKS5wYXJlbnQoKTtcblxuICAgICAgICBfLiRsaXN0ID0gXy4kc2xpZGVUcmFjay53cmFwKFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzbGljay1saXN0XCIvPicpLnBhcmVudCgpO1xuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcygnb3BhY2l0eScsIDApO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMuc3dpcGVUb1NsaWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBfLiRzbGlkZXIpLm5vdCgnW3NyY10nKS5hZGRDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uc2V0dXBJbmZpbml0ZSgpO1xuXG4gICAgICAgIF8uYnVpbGRBcnJvd3MoKTtcblxuICAgICAgICBfLmJ1aWxkRG90cygpO1xuXG4gICAgICAgIF8udXBkYXRlRG90cygpO1xuXG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXModHlwZW9mIF8uY3VycmVudFNsaWRlID09PSAnbnVtYmVyJyA/IF8uY3VycmVudFNsaWRlIDogMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kcmFnZ2FibGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3QuYWRkQ2xhc3MoJ2RyYWdnYWJsZScpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkUm93cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgYSwgYiwgYywgbmV3U2xpZGVzLCBudW1PZlNsaWRlcywgb3JpZ2luYWxTbGlkZXMsc2xpZGVzUGVyU2VjdGlvbjtcblxuICAgICAgICBuZXdTbGlkZXMgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVyLmNoaWxkcmVuKCk7XG5cbiAgICAgICAgaWYoXy5vcHRpb25zLnJvd3MgPiAwKSB7XG5cbiAgICAgICAgICAgIHNsaWRlc1BlclNlY3Rpb24gPSBfLm9wdGlvbnMuc2xpZGVzUGVyUm93ICogXy5vcHRpb25zLnJvd3M7XG4gICAgICAgICAgICBudW1PZlNsaWRlcyA9IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFNsaWRlcy5sZW5ndGggLyBzbGlkZXNQZXJTZWN0aW9uXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IoYSA9IDA7IGEgPCBudW1PZlNsaWRlczsgYSsrKXtcbiAgICAgICAgICAgICAgICB2YXIgc2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBmb3IoYiA9IDA7IGIgPCBfLm9wdGlvbnMucm93czsgYisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yKGMgPSAwOyBjIDwgXy5vcHRpb25zLnNsaWRlc1BlclJvdzsgYysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gKGEgKiBzbGlkZXNQZXJTZWN0aW9uICsgKChiICogXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyBjKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQob3JpZ2luYWxTbGlkZXMuZ2V0KHRhcmdldCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlLmFwcGVuZENoaWxkKHJvdyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld1NsaWRlcy5hcHBlbmRDaGlsZChzbGlkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChuZXdTbGlkZXMpO1xuICAgICAgICAgICAgXy4kc2xpZGVyLmNoaWxkcmVuKCkuY2hpbGRyZW4oKS5jaGlsZHJlbigpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICd3aWR0aCc6KDEwMCAvIF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cpICsgJyUnLFxuICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICdpbmxpbmUtYmxvY2snXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGVja1Jlc3BvbnNpdmUgPSBmdW5jdGlvbihpbml0aWFsLCBmb3JjZVVwZGF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGJyZWFrcG9pbnQsIHRhcmdldEJyZWFrcG9pbnQsIHJlc3BvbmRUb1dpZHRoLCB0cmlnZ2VyQnJlYWtwb2ludCA9IGZhbHNlO1xuICAgICAgICB2YXIgc2xpZGVyV2lkdGggPSBfLiRzbGlkZXIud2lkdGgoKTtcbiAgICAgICAgdmFyIHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggfHwgJCh3aW5kb3cpLndpZHRoKCk7XG5cbiAgICAgICAgaWYgKF8ucmVzcG9uZFRvID09PSAnd2luZG93Jykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSB3aW5kb3dXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ3NsaWRlcicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gc2xpZGVyV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5yZXNwb25kVG8gPT09ICdtaW4nKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IE1hdGgubWluKHdpbmRvd1dpZHRoLCBzbGlkZXJXaWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5yZXNwb25zaXZlICYmXG4gICAgICAgICAgICBfLm9wdGlvbnMucmVzcG9uc2l2ZS5sZW5ndGggJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBmb3IgKGJyZWFrcG9pbnQgaW4gXy5icmVha3BvaW50cykge1xuICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRzLmhhc093blByb3BlcnR5KGJyZWFrcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9yaWdpbmFsU2V0dGluZ3MubW9iaWxlRmlyc3QgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPCBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uZFRvV2lkdGggPiBfLmJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0QnJlYWtwb2ludCAhPT0gXy5hY3RpdmVCcmVha3BvaW50IHx8IGZvcmNlVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8udW5zbGljayh0YXJnZXRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLm9wdGlvbnMuaW5pdGlhbFNsaWRlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgICAgICBpZiAoXy5icmVha3BvaW50U2V0dGluZ3NbdGFyZ2V0QnJlYWtwb2ludF0gPT09ICd1bnNsaWNrJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8ub3JpZ2luYWxTZXR0aW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckJyZWFrcG9pbnQgPSB0YXJnZXRCcmVha3BvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYWN0aXZlQnJlYWtwb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfLmFjdGl2ZUJyZWFrcG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSBfLm9yaWdpbmFsU2V0dGluZ3M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbml0aWFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXy5yZWZyZXNoKGluaXRpYWwpO1xuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBvbmx5IHRyaWdnZXIgYnJlYWtwb2ludHMgZHVyaW5nIGFuIGFjdHVhbCBicmVhay4gbm90IG9uIGluaXRpYWxpemUuXG4gICAgICAgICAgICBpZiggIWluaXRpYWwgJiYgdHJpZ2dlckJyZWFrcG9pbnQgIT09IGZhbHNlICkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdicmVha3BvaW50JywgW18sIHRyaWdnZXJCcmVha3BvaW50XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hhbmdlU2xpZGUgPSBmdW5jdGlvbihldmVudCwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICAkdGFyZ2V0ID0gJChldmVudC5jdXJyZW50VGFyZ2V0KSxcbiAgICAgICAgICAgIGluZGV4T2Zmc2V0LCBzbGlkZU9mZnNldCwgdW5ldmVuT2Zmc2V0O1xuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBhIGxpbmssIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgIGlmKCR0YXJnZXQuaXMoJ2EnKSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRhcmdldCBpcyBub3QgdGhlIDxsaT4gZWxlbWVudCAoaWU6IGEgY2hpbGQpLCBmaW5kIHRoZSA8bGk+LlxuICAgICAgICBpZighJHRhcmdldC5pcygnbGknKSkge1xuICAgICAgICAgICAgJHRhcmdldCA9ICR0YXJnZXQuY2xvc2VzdCgnbGknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHVuZXZlbk9mZnNldCA9IChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApO1xuICAgICAgICBpbmRleE9mZnNldCA9IHVuZXZlbk9mZnNldCA/IDAgOiAoXy5zbGlkZUNvdW50IC0gXy5jdXJyZW50U2xpZGUpICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnQuZGF0YS5tZXNzYWdlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3ByZXZpb3VzJzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAtIGluZGV4T2Zmc2V0O1xuICAgICAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKF8uY3VycmVudFNsaWRlIC0gc2xpZGVPZmZzZXQsIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBzbGlkZU9mZnNldCA9IGluZGV4T2Zmc2V0ID09PSAwID8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDogaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgKyBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2luZGV4JzpcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBldmVudC5kYXRhLmluZGV4ID09PSAwID8gMCA6XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXggfHwgJHRhcmdldC5pbmRleCgpICogXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jaGVja05hdmlnYWJsZShpbmRleCksIGZhbHNlLCBkb250QW5pbWF0ZSk7XG4gICAgICAgICAgICAgICAgJHRhcmdldC5jaGlsZHJlbigpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrTmF2aWdhYmxlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBuYXZpZ2FibGVzLCBwcmV2TmF2aWdhYmxlO1xuXG4gICAgICAgIG5hdmlnYWJsZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKTtcbiAgICAgICAgcHJldk5hdmlnYWJsZSA9IDA7XG4gICAgICAgIGlmIChpbmRleCA+IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgaW5kZXggPSBuYXZpZ2FibGVzW25hdmlnYWJsZXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuIGluIG5hdmlnYWJsZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBuYXZpZ2FibGVzW25dKSB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gcHJldk5hdmlnYWJsZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZOYXZpZ2FibGUgPSBuYXZpZ2FibGVzW25dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgJiYgXy4kZG90cyAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICAkKCdsaScsIF8uJGRvdHMpXG4gICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kZG90cy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jbGlja0hhbmRsZXIpO1xuXG4gICAgICAgICQoZG9jdW1lbnQpLm9mZihfLnZpc2liaWxpdHlDaGFuZ2UsIF8udmlzaWJpbGl0eSk7XG5cbiAgICAgICAgXy5jbGVhblVwU2xpZGVFdmVudHMoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJGxpc3Qub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9mZignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZignb3JpZW50YXRpb25jaGFuZ2Uuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8ub3JpZW50YXRpb25DaGFuZ2UpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5yZXNpemUpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub2ZmKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdsb2FkLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnNldFBvc2l0aW9uKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICBfLiRsaXN0Lm9mZignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsZWFuVXBSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBvcmlnaW5hbFNsaWRlcztcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDApIHtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzID0gXy4kc2xpZGVzLmNoaWxkcmVuKCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLnJlbW92ZUF0dHIoJ3N0eWxlJyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuZW1wdHkoKS5hcHBlbmQob3JpZ2luYWxTbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNsaWNrSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLnNob3VsZENsaWNrID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKHJlZnJlc2gpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdCA9IHt9O1xuXG4gICAgICAgIF8uY2xlYW5VcEV2ZW50cygpO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLmRldGFjaCgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLiRwcmV2QXJyb3cgJiYgXy4kcHJldkFycm93Lmxlbmd0aCApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCBzbGljay1hcnJvdyBzbGljay1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiBhcmlhLWRpc2FibGVkIHRhYmluZGV4JylcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywnJyk7XG5cbiAgICAgICAgICAgIGlmICggXy5odG1sRXhwci50ZXN0KCBfLm9wdGlvbnMucHJldkFycm93ICkpIHtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5uZXh0QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKF8uJHNsaWRlcykge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLXNsaWRlIHNsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stdmlzaWJsZSBzbGljay1jdXJyZW50JylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4nKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXNsaWNrLWluZGV4JylcbiAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ3N0eWxlJywgJCh0aGlzKS5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kbGlzdC5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLmFwcGVuZChfLiRzbGlkZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5jbGVhblVwUm93cygpO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGVyJyk7XG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1kb3R0ZWQnKTtcblxuICAgICAgICBfLnVuc2xpY2tlZCA9IHRydWU7XG5cbiAgICAgICAgaWYoIXJlZnJlc2gpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdkZXN0cm95JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kaXNhYmxlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uKHNsaWRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHt9O1xuXG4gICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnJztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh0cmFuc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZSkuY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZhZGVTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgsIGNhbGxiYWNrKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBfLmRpc2FibGVUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlT3V0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmFuaW1hdGUoe1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAsXG4gICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMlxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0ZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlcikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoZmlsdGVyICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gXy4kc2xpZGVzO1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmZpbHRlcihmaWx0ZXIpLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZm9jdXNIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uJHNsaWRlclxuICAgICAgICAgICAgLm9mZignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycpXG4gICAgICAgICAgICAub24oJ2ZvY3VzLnNsaWNrIGJsdXIuc2xpY2snLCAnKicsIGZ1bmN0aW9uKGV2ZW50KSB7XG5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgdmFyICRzZiA9ICQodGhpcyk7XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnBhdXNlT25Gb2N1cyApIHtcbiAgICAgICAgICAgICAgICAgICAgXy5mb2N1c3NlZCA9ICRzZi5pcygnOmZvY3VzJyk7XG4gICAgICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0sIDApO1xuXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0Q3VycmVudCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0N1cnJlbnRTbGlkZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgcmV0dXJuIF8uY3VycmVudFNsaWRlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXREb3RDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICB2YXIgYnJlYWtQb2ludCA9IDA7XG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHBhZ2VyUXR5ID0gMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgKytwYWdlclF0eTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFnZXJRdHkgPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSBpZighXy5vcHRpb25zLmFzTmF2Rm9yKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IDEgKyBNYXRoLmNlaWwoKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIC8gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhZ2VyUXR5IC0gMTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TGVmdCA9IGZ1bmN0aW9uKHNsaWRlSW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgdmVydGljYWxIZWlnaHQsXG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDAsXG4gICAgICAgICAgICB0YXJnZXRTbGlkZSxcbiAgICAgICAgICAgIGNvZWY7XG5cbiAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gXy4kc2xpZGVzLmZpcnN0KCkub3V0ZXJIZWlnaHQodHJ1ZSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKF8uc2xpZGVXaWR0aCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogLTE7XG4gICAgICAgICAgICAgICAgY29lZiA9IC0xXG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlICYmIF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTEuNTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2VmID0gLTJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9ICh2ZXJ0aWNhbEhlaWdodCAqIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpICogY29lZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA+IF8uc2xpZGVDb3VudCAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ID4gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gKHNsaWRlSW5kZXggLSBfLnNsaWRlQ291bnQpKSAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9ICgoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKSAqIF8uc2xpZGVXaWR0aCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogXy5zbGlkZVdpZHRoO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLSBfLnNsaWRlQ291bnQpICogdmVydGljYWxIZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSAvIDIpIC0gKChfLnNsaWRlV2lkdGggKiBfLnNsaWRlQ291bnQpIC8gMik7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ICs9IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIC0gXy5zbGlkZVdpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIF8uc2xpZGVXaWR0aCkgKiAtMSkgKyBfLnNsaWRlT2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICgoc2xpZGVJbmRleCAqIHZlcnRpY2FsSGVpZ2h0KSAqIC0xKSArIHZlcnRpY2FsT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52YXJpYWJsZVdpZHRoID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyB8fCBfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5lcShzbGlkZUluZGV4KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaWRlWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKF8uJHNsaWRlVHJhY2sud2lkdGgoKSAtIHRhcmdldFNsaWRlWzBdLm9mZnNldExlZnQgLSB0YXJnZXRTbGlkZS53aWR0aCgpKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9ICAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IHRhcmdldFNsaWRlWzBdID8gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAqIC0xIDogMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ICs9IChfLiRsaXN0LndpZHRoKCkgLSB0YXJnZXRTbGlkZS5vdXRlcldpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YXJnZXRMZWZ0O1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRPcHRpb24gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHZXRPcHRpb24gPSBmdW5jdGlvbihvcHRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgcmV0dXJuIF8ub3B0aW9uc1tvcHRpb25dO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXROYXZpZ2FibGVJbmRleGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtQb2ludCA9IDAsXG4gICAgICAgICAgICBjb3VudGVyID0gMCxcbiAgICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICAgIG1heDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWtQb2ludCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgY291bnRlciA9IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAqIC0xO1xuICAgICAgICAgICAgbWF4ID0gXy5zbGlkZUNvdW50ICogMjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChicmVha1BvaW50IDwgbWF4KSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goYnJlYWtQb2ludCk7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgIGNvdW50ZXIgKz0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsIDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4ZXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWNrID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldFNsaWRlQ291bnQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBzbGlkZXNUcmF2ZXJzZWQsIHN3aXBlZFNsaWRlLCBjZW50ZXJPZmZzZXQ7XG5cbiAgICAgICAgY2VudGVyT2Zmc2V0ID0gXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgPyBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKSA6IDA7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLXNsaWRlJykuZWFjaChmdW5jdGlvbihpbmRleCwgc2xpZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xpZGUub2Zmc2V0TGVmdCAtIGNlbnRlck9mZnNldCArICgkKHNsaWRlKS5vdXRlcldpZHRoKCkgLyAyKSA+IChfLnN3aXBlTGVmdCAqIC0xKSkge1xuICAgICAgICAgICAgICAgICAgICBzd2lwZWRTbGlkZSA9IHNsaWRlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCA9IE1hdGguYWJzKCQoc3dpcGVkU2xpZGUpLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKSAtIF8uY3VycmVudFNsaWRlKSB8fCAxO1xuXG4gICAgICAgICAgICByZXR1cm4gc2xpZGVzVHJhdmVyc2VkO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdvVG8gPSBTbGljay5wcm90b3R5cGUuc2xpY2tHb1RvID0gZnVuY3Rpb24oc2xpZGUsIGRvbnRBbmltYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCcsXG4gICAgICAgICAgICAgICAgaW5kZXg6IHBhcnNlSW50KHNsaWRlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkb250QW5pbWF0ZSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbihjcmVhdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoISQoXy4kc2xpZGVyKS5oYXNDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKSkge1xuXG4gICAgICAgICAgICAkKF8uJHNsaWRlcikuYWRkQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJyk7XG5cbiAgICAgICAgICAgIF8uYnVpbGRSb3dzKCk7XG4gICAgICAgICAgICBfLmJ1aWxkT3V0KCk7XG4gICAgICAgICAgICBfLnNldFByb3BzKCk7XG4gICAgICAgICAgICBfLnN0YXJ0TG9hZCgpO1xuICAgICAgICAgICAgXy5sb2FkU2xpZGVyKCk7XG4gICAgICAgICAgICBfLmluaXRpYWxpemVFdmVudHMoKTtcbiAgICAgICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG4gICAgICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKHRydWUpO1xuICAgICAgICAgICAgXy5mb2N1c0hhbmRsZXIoKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNyZWF0aW9uKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignaW5pdCcsIFtfXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uaW5pdEFEQSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG5cbiAgICAgICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QURBID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICAgICBudW1Eb3RHcm91cHMgPSBNYXRoLmNlaWwoXy5zbGlkZUNvdW50IC8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyksXG4gICAgICAgICAgICAgICAgdGFiQ29udHJvbEluZGV4ZXMgPSBfLmdldE5hdmlnYWJsZUluZGV4ZXMoKS5maWx0ZXIoZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAodmFsID49IDApICYmICh2YWwgPCBfLnNsaWRlQ291bnQpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlcy5hZGQoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmF0dHIoe1xuICAgICAgICAgICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnLFxuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KS5maW5kKCdhLCBpbnB1dCwgYnV0dG9uLCBzZWxlY3QnKS5hdHRyKHtcbiAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5ub3QoXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stY2xvbmVkJykpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZUNvbnRyb2xJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzLmluZGV4T2YoaSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWJwYW5lbCcsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmluZGV4JzogLTFcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChzbGlkZUNvbnRyb2xJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICB2YXIgYXJpYUJ1dHRvbkNvbnRyb2wgPSAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgc2xpZGVDb250cm9sSW5kZXhcbiAgICAgICAgICAgICAgICAgICBpZiAoJCgnIycgKyBhcmlhQnV0dG9uQ29udHJvbCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICdhcmlhLWRlc2NyaWJlZGJ5JzogYXJpYUJ1dHRvbkNvbnRyb2xcbiAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kZG90cy5hdHRyKCdyb2xlJywgJ3RhYmxpc3QnKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24oaSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXBwZWRTbGlkZUluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXNbaV07XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICdwcmVzZW50YXRpb24nXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2J1dHRvbicpLmZpcnN0KCkuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYicsXG4gICAgICAgICAgICAgICAgICAgICdpZCc6ICdzbGljay1zbGlkZS1jb250cm9sJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1jb250cm9scyc6ICdzbGljay1zbGlkZScgKyBfLmluc3RhbmNlVWlkICsgbWFwcGVkU2xpZGVJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtbGFiZWwnOiAoaSArIDEpICsgJyBvZiAnICsgbnVtRG90R3JvdXBzLFxuICAgICAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICctMSdcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSkuZXEoXy5jdXJyZW50U2xpZGUpLmZpbmQoJ2J1dHRvbicpLmF0dHIoe1xuICAgICAgICAgICAgICAgICdhcmlhLXNlbGVjdGVkJzogJ3RydWUnLFxuICAgICAgICAgICAgICAgICd0YWJpbmRleCc6ICcwJ1xuICAgICAgICAgICAgfSkuZW5kKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpPV8uY3VycmVudFNsaWRlLCBtYXg9aStfLm9wdGlvbnMuc2xpZGVzVG9TaG93OyBpIDwgbWF4OyBpKyspIHtcbiAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShpKS5hdHRyKHsndGFiaW5kZXgnOiAnMCd9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKGkpLnJlbW92ZUF0dHIoJ3RhYmluZGV4Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgXy5hY3RpdmF0ZUFEQSgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0QXJyb3dFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycpXG4gICAgICAgICAgICAgICAub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAncHJldmlvdXMnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICAgICB9LCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICBfLiRuZXh0QXJyb3cub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXREb3RFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cykub24oJ2NsaWNrLnNsaWNrJywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdpbmRleCdcbiAgICAgICAgICAgIH0sIF8uY2hhbmdlU2xpZGUpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdFNsaWRlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnBhdXNlT25Ib3ZlciApIHtcblxuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKTtcbiAgICAgICAgICAgIF8uJGxpc3Qub24oJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdGlhbGl6ZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuXG4gICAgICAgIF8uaW5pdERvdEV2ZW50cygpO1xuICAgICAgICBfLmluaXRTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoc3RhcnQuc2xpY2sgbW91c2Vkb3duLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnc3RhcnQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2htb3ZlLnNsaWNrIG1vdXNlbW92ZS5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ21vdmUnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hlbmQuc2xpY2sgbW91c2V1cC5zbGljaycsIHtcbiAgICAgICAgICAgIGFjdGlvbjogJ2VuZCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGNhbmNlbC5zbGljayBtb3VzZWxlYXZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG5cbiAgICAgICAgXy4kbGlzdC5vbignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub24oXy52aXNpYmlsaXR5Q2hhbmdlLCAkLnByb3h5KF8udmlzaWJpbGl0eSwgXykpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25TZWxlY3QgPT09IHRydWUpIHtcbiAgICAgICAgICAgICQoXy4kc2xpZGVUcmFjaykuY2hpbGRyZW4oKS5vbignY2xpY2suc2xpY2snLCBfLnNlbGVjdEhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLm9yaWVudGF0aW9uQ2hhbmdlLCBfKSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsICQucHJveHkoXy5yZXNpemUsIF8pKTtcblxuICAgICAgICAkKCdbZHJhZ2dhYmxlIT10cnVlXScsIF8uJHNsaWRlVHJhY2spLm9uKCdkcmFnc3RhcnQnLCBfLnByZXZlbnREZWZhdWx0KTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuICAgICAgICAkKF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0VUkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cuc2hvdygpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93LnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kZG90cy5zaG93KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5rZXlIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG4gICAgICAgICAvL0RvbnQgc2xpZGUgaWYgdGhlIGN1cnNvciBpcyBpbnNpZGUgdGhlIGZvcm0gZmllbGRzIGFuZCBhcnJvdyBrZXlzIGFyZSBwcmVzc2VkXG4gICAgICAgIGlmKCFldmVudC50YXJnZXQudGFnTmFtZS5tYXRjaCgnVEVYVEFSRUF8SU5QVVR8U0VMRUNUJykpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAzNyAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ25leHQnIDogICdwcmV2aW91cydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09PSAzOSAmJiBfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBfLm9wdGlvbnMucnRsID09PSB0cnVlID8gJ3ByZXZpb3VzJyA6ICduZXh0J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubGF6eUxvYWQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBsb2FkUmFuZ2UsIGNsb25lUmFuZ2UsIHJhbmdlU3RhcnQsIHJhbmdlRW5kO1xuXG4gICAgICAgIGZ1bmN0aW9uIGxvYWRJbWFnZXMoaW1hZ2VzU2NvcGUpIHtcblxuICAgICAgICAgICAgJCgnaW1nW2RhdGEtbGF6eV0nLCBpbWFnZXNTY29wZSkuZWFjaChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU291cmNlID0gJCh0aGlzKS5hdHRyKCdkYXRhLWxhenknKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTcmNTZXQgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc3Jjc2V0JyksXG4gICAgICAgICAgICAgICAgICAgIGltYWdlU2l6ZXMgID0gJCh0aGlzKS5hdHRyKCdkYXRhLXNpemVzJykgfHwgXy4kc2xpZGVyLmF0dHIoJ2RhdGEtc2l6ZXMnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDAgfSwgMTAwLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNyY1NldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyY3NldCcsIGltYWdlU3JjU2V0ICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU2l6ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NpemVzJywgaW1hZ2VTaXplcyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGltYWdlU291cmNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYW5pbWF0ZSh7IG9wYWNpdHk6IDEgfSwgMjAwLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtbGF6eSBkYXRhLXNyY3NldCBkYXRhLXNpemVzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbXywgaW1hZ2UsIGltYWdlU291cmNlXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZC5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCAnZGF0YS1sYXp5JyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICdzbGljay1sb2FkaW5nJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoICdzbGljay1sYXp5bG9hZC1lcnJvcicgKTtcblxuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRFcnJvcicsIFsgXywgaW1hZ2UsIGltYWdlU291cmNlIF0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLnNyYyA9IGltYWdlU291cmNlO1xuXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8uY3VycmVudFNsaWRlICsgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSk7XG4gICAgICAgICAgICAgICAgcmFuZ2VFbmQgPSByYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhbmdlU3RhcnQgPSBNYXRoLm1heCgwLCBfLmN1cnJlbnRTbGlkZSAtIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IDIgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKSArIF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFuZ2VTdGFydCA9IF8ub3B0aW9ucy5pbmZpbml0ZSA/IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyBfLmN1cnJlbnRTbGlkZSA6IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgcmFuZ2VFbmQgPSBNYXRoLmNlaWwocmFuZ2VTdGFydCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpO1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlU3RhcnQgPiAwKSByYW5nZVN0YXJ0LS07XG4gICAgICAgICAgICAgICAgaWYgKHJhbmdlRW5kIDw9IF8uc2xpZGVDb3VudCkgcmFuZ2VFbmQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxvYWRSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKS5zbGljZShyYW5nZVN0YXJ0LCByYW5nZUVuZCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ2FudGljaXBhdGVkJykge1xuICAgICAgICAgICAgdmFyIHByZXZTbGlkZSA9IHJhbmdlU3RhcnQgLSAxLFxuICAgICAgICAgICAgICAgIG5leHRTbGlkZSA9IHJhbmdlRW5kLFxuICAgICAgICAgICAgICAgICRzbGlkZXMgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJldlNsaWRlIDwgMCkgcHJldlNsaWRlID0gXy5zbGlkZUNvdW50IC0gMTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEocHJldlNsaWRlKSk7XG4gICAgICAgICAgICAgICAgbG9hZFJhbmdlID0gbG9hZFJhbmdlLmFkZCgkc2xpZGVzLmVxKG5leHRTbGlkZSkpO1xuICAgICAgICAgICAgICAgIHByZXZTbGlkZS0tO1xuICAgICAgICAgICAgICAgIG5leHRTbGlkZSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZEltYWdlcyhsb2FkUmFuZ2UpO1xuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgY2xvbmVSYW5nZSA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stY2xvbmVkJykuc2xpY2UoMCwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID09PSAwKSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZShfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICogLTEpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sb2FkU2xpZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIF8uJHNsaWRlci5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuXG4gICAgICAgIF8uaW5pdFVJKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ3Byb2dyZXNzaXZlJykge1xuICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUubmV4dCA9IFNsaWNrLnByb3RvdHlwZS5zbGlja05leHQgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ25leHQnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5vcmllbnRhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoZWNrUmVzcG9uc2l2ZSgpO1xuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnBhdXNlID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGF1c2UgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG4gICAgICAgIF8ucGF1c2VkID0gdHJ1ZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGxheSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICBfLm9wdGlvbnMuYXV0b3BsYXkgPSB0cnVlO1xuICAgICAgICBfLnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICBfLmZvY3Vzc2VkID0gZmFsc2U7XG4gICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucG9zdFNsaWRlID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYoICFfLnVuc2xpY2tlZCApIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FmdGVyQ2hhbmdlJywgW18sIGluZGV4XSk7XG5cbiAgICAgICAgICAgIF8uYW5pbWF0aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuICAgICAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5pbml0QURBKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRjdXJyZW50U2xpZGUgPSAkKF8uJHNsaWRlcy5nZXQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hdHRyKCd0YWJpbmRleCcsIDApLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VTcmNTZXQsXG4gICAgICAgICAgICBpbWFnZVNpemVzLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICBpbWFnZVNpemVzICA9IGltYWdlLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcbiAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0cnlDb3VudCA8IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRyeSB0byBsb2FkIHRoZSBpbWFnZSAzIHRpbWVzLFxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmVycyBibG9ja2luZyB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCB0cnlDb3VudCArIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFsgXyBdKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoICFfLm9wdGlvbnMuaW5maW5pdGUgJiYgKCBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXggKSkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbGVzcyBzbGlkZXMgdGhhbiB0byBzaG93LCBnbyB0byBzdGFydC5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcblxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZVNldHRpbmdzID0gXy5vcHRpb25zLnJlc3BvbnNpdmUgfHwgbnVsbDtcblxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSAnYXJyYXknICYmIHJlc3BvbnNpdmVTZXR0aW5ncy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yICggYnJlYWtwb2ludCBpbiByZXNwb25zaXZlU2V0dGluZ3MgKSB7XG5cbiAgICAgICAgICAgICAgICBsID0gXy5icmVha3BvaW50cy5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHZhciBldmVuQ29lZiA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJSAyID09PSAwID8gMSA6IDA7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCAtIGNlbnRlck9mZnNldCArIGV2ZW5Db2VmLCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSArIGV2ZW5Db2VmLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXggOiBpbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCwgaW5kZXhPZmZzZXQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJyB8fCBfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIHNsaWRlSW5kZXgsIGluZmluaXRlQ291bnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuY2VudGVyTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IF8uc2xpZGVDb3VudDsgaSA+IChfLnNsaWRlQ291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICArIF8uc2xpZGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiggdG9nZ2xlICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIXRvZ2dsZSApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmlzKCcuc2xpY2stc2xpZGUnKSA/XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbihpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgdGFyZ2V0U2xpZGUsIGFuaW1TbGlkZSwgb2xkU2xpZGUsIHNsaWRlTGVmdCwgdGFyZ2V0TGVmdCA9IG51bGwsXG4gICAgICAgICAgICBfID0gdGhpcywgbmF2VGFyZ2V0O1xuXG4gICAgICAgIHN5bmMgPSBzeW5jIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMud2FpdEZvckFuaW1hdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSAmJiBfLmN1cnJlbnRTbGlkZSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgICAgICB0YXJnZXRMZWZ0ID0gXy5nZXRMZWZ0KHRhcmdldFNsaWRlKTtcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gXy5zd2lwZUxlZnQgPT09IG51bGwgPyBzbGlkZUxlZnQgOiBfLnN3aXBlTGVmdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uZ2V0RG90Q291bnQoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiAoaW5kZXggPCAwIHx8IGluZGV4ID4gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKF8uYXV0b1BsYXlUaW1lcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0U2xpZGUgPCAwKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50IC0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IF8uc2xpZGVDb3VudCArIHRhcmdldFNsaWRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldFNsaWRlID49IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1TbGlkZSA9IHRhcmdldFNsaWRlIC0gXy5zbGlkZUNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGU7XG4gICAgICAgIH1cblxuICAgICAgICBfLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JlZm9yZUNoYW5nZScsIFtfLCBfLmN1cnJlbnRTbGlkZSwgYW5pbVNsaWRlXSk7XG5cbiAgICAgICAgb2xkU2xpZGUgPSBfLmN1cnJlbnRTbGlkZTtcbiAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBhbmltU2xpZGU7XG5cbiAgICAgICAgXy5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFzTmF2Rm9yICkge1xuXG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBfLmdldE5hdlRhcmdldCgpO1xuICAgICAgICAgICAgbmF2VGFyZ2V0ID0gbmF2VGFyZ2V0LnNsaWNrKCdnZXRTbGljaycpO1xuXG4gICAgICAgICAgICBpZiAoIG5hdlRhcmdldC5zbGlkZUNvdW50IDw9IG5hdlRhcmdldC5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgICAgICBuYXZUYXJnZXQuc2V0U2xpZGVDbGFzc2VzKF8uY3VycmVudFNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG4gICAgICAgIF8udXBkYXRlQXJyb3dzKCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlT3V0KG9sZFNsaWRlKTtcblxuICAgICAgICAgICAgICAgIF8uZmFkZVNsaWRlKGFuaW1TbGlkZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF8uYW5pbWF0ZUhlaWdodCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLnN3aXBpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5zY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCApID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdlZGdlJywgW18sIF8uc3dpcGVEaXJlY3Rpb24oKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+PSBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlICkge1xuXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiAhPSAndmVydGljYWwnICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zdGFydFggIT09IF8udG91Y2hPYmplY3QuY3VyWCApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBfLmN1cnJlbnRTbGlkZSApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKChfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSB8fCAoJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsIHN3aXBlRGlyZWN0aW9uLCBzd2lwZUxlbmd0aCwgcG9zaXRpb25PZmZzZXQsIHRvdWNoZXMsIHZlcnRpY2FsU3dpcGVMZW5ndGg7XG5cbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IF8uc2Nyb2xsaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcblxuICAgICAgICBpZiAoIV8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgJiYgIV8uc3dpcGluZyAmJiB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zd2lwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbk9mZnNldCA9IChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/IDEgOiAtMSkgKiAoXy50b3VjaE9iamVjdC5jdXJYID4gXy50b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQgPSBfLnRvdWNoT2JqZWN0LmN1clkgPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSAncmlnaHQnKSB8fCAoXy5jdXJyZW50U2xpZGUgPj0gXy5nZXREb3RDb3VudCgpICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogXy5vcHRpb25zLmVkZ2VGcmljdGlvbjtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyAoc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSkgKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMudG91Y2hNb3ZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldENTUyhfLnN3aXBlTGVmdCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgIT09IDEgfHwgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA9IF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRuZXh0QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsICcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5zbGljayA9IGZ1bmN0aW9uKGZyb21CcmVha3BvaW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xuICAgICAgICBfLmRlc3Ryb3koKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJlxuICAgICAgICAgICAgIV8ub3B0aW9ucy5pbmZpbml0ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoKTtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7XG4iLCIvKiFcbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE3IEljb01vb24uaW9cbiAqIEBsaWNlbnNlICAgTGljZW5zZWQgdW5kZXIgTUlUIGxpY2Vuc2VcbiAqICAgICAgICAgICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9LZXlhbW9vbi9zdmd4dXNlXG4gKiBAdmVyc2lvbiAgIDEuMi42XG4gKi9cbihmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7dmFyIGU9T2JqZWN0LmNyZWF0ZShudWxsKSxsLGQ9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQobCk7bD1zZXRUaW1lb3V0KG4sMTAwKX0sbT1mdW5jdGlvbigpe30sdD1mdW5jdGlvbigpe3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsZCwhMSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvcmllbnRhdGlvbmNoYW5nZVwiLGQsITEpO2lmKHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKXt2YXIgaz1uZXcgTXV0YXRpb25PYnNlcnZlcihkKTtrLm9ic2VydmUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHtjaGlsZExpc3Q6ITAsc3VidHJlZTohMCxhdHRyaWJ1dGVzOiEwfSk7bT1mdW5jdGlvbigpe3RyeXtrLmRpc2Nvbm5lY3QoKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGQsITEpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIixcbmQsITEpfWNhdGNoKHYpe319fWVsc2UgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01TdWJ0cmVlTW9kaWZpZWRcIixkLCExKSxtPWZ1bmN0aW9uKCl7ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJET01TdWJ0cmVlTW9kaWZpZWRcIixkLCExKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLGQsITEpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib3JpZW50YXRpb25jaGFuZ2VcIixkLCExKX19LHU9ZnVuY3Rpb24oayl7ZnVuY3Rpb24gZShhKXtpZih2b2lkIDAhPT1hLnByb3RvY29sKXZhciBjPWE7ZWxzZSBjPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLGMuaHJlZj1hO3JldHVybiBjLnByb3RvY29sLnJlcGxhY2UoLzovZyxcIlwiKStjLmhvc3R9aWYod2luZG93LlhNTEh0dHBSZXF1ZXN0KXt2YXIgZD1uZXcgWE1MSHR0cFJlcXVlc3Q7dmFyIG09ZShsb2NhdGlvbik7az1lKGspO2Q9dm9pZCAwPT09XG5kLndpdGhDcmVkZW50aWFscyYmXCJcIiE9PWsmJmshPT1tP1hEb21haW5SZXF1ZXN0fHx2b2lkIDA6WE1MSHR0cFJlcXVlc3R9cmV0dXJuIGR9O3ZhciBuPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZCgpey0tcTswPT09cSYmKG0oKSx0KCkpfWZ1bmN0aW9uIGwoYSl7cmV0dXJuIGZ1bmN0aW9uKCl7ITAhPT1lW2EuYmFzZV0mJihhLnVzZUVsLnNldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFwieGxpbms6aHJlZlwiLFwiI1wiK2EuaGFzaCksYS51c2VFbC5oYXNBdHRyaWJ1dGUoXCJocmVmXCIpJiZhLnVzZUVsLnNldEF0dHJpYnV0ZShcImhyZWZcIixcIiNcIithLmhhc2gpKX19ZnVuY3Rpb24gcChhKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1kb2N1bWVudC5ib2R5LGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInhcIik7YS5vbmxvYWQ9bnVsbDtiLmlubmVySFRNTD1hLnJlc3BvbnNlVGV4dDtpZihiPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdmdcIilbMF0pYi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLFxuXCJ0cnVlXCIpLGIuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiLGIuc3R5bGUud2lkdGg9MCxiLnN0eWxlLmhlaWdodD0wLGIuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixjLmluc2VydEJlZm9yZShiLGMuZmlyc3RDaGlsZCk7ZCgpfX1mdW5jdGlvbiBuKGEpe3JldHVybiBmdW5jdGlvbigpe2Eub25lcnJvcj1udWxsO2Eub250aW1lb3V0PW51bGw7ZCgpfX12YXIgYSxjLHE9MDttKCk7dmFyIGY9ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ1c2VcIik7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrPTEpe3RyeXt2YXIgZz1mW2NdLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfWNhdGNoKHcpe2c9ITF9dmFyIGg9KGE9ZltjXS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfHxmW2NdLmdldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFwiaHJlZlwiKXx8ZltjXS5nZXRBdHRyaWJ1dGUoXCJ4bGluazpocmVmXCIpKSYmYS5zcGxpdD9hLnNwbGl0KFwiI1wiKTpbXCJcIixcIlwiXTt2YXIgYj1cbmhbMF07aD1oWzFdO3ZhciByPWcmJjA9PT1nLmxlZnQmJjA9PT1nLnJpZ2h0JiYwPT09Zy50b3AmJjA9PT1nLmJvdHRvbTtnJiYwPT09Zy53aWR0aCYmMD09PWcuaGVpZ2h0JiYhcj8oZltjXS5oYXNBdHRyaWJ1dGUoXCJocmVmXCIpJiZmW2NdLnNldEF0dHJpYnV0ZU5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFwieGxpbms6aHJlZlwiLGEpLGIubGVuZ3RoJiYoYT1lW2JdLCEwIT09YSYmc2V0VGltZW91dChsKHt1c2VFbDpmW2NdLGJhc2U6YixoYXNoOmh9KSwwKSx2b2lkIDA9PT1hJiYoaD11KGIpLHZvaWQgMCE9PWgmJihhPW5ldyBoLGVbYl09YSxhLm9ubG9hZD1wKGEpLGEub25lcnJvcj1uKGEpLGEub250aW1lb3V0PW4oYSksYS5vcGVuKFwiR0VUXCIsYiksYS5zZW5kKCkscSs9MSkpKSk6cj9iLmxlbmd0aCYmZVtiXSYmc2V0VGltZW91dChsKHt1c2VFbDpmW2NdLGJhc2U6YixoYXNoOmh9KSwwKTp2b2lkIDA9PT1lW2JdP2VbYl09ITA6ZVtiXS5vbmxvYWQmJihlW2JdLmFib3J0KCksXG5kZWxldGUgZVtiXS5vbmxvYWQsZVtiXT0hMCl9Zj1cIlwiO3ErPTE7ZCgpfTt2YXIgcD1mdW5jdGlvbigpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLHAsITEpO2w9c2V0VGltZW91dChuLDApfTtcImNvbXBsZXRlXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlP3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLHAsITEpOnAoKX19KSgpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBqUXVlcnk7Il0sInNvdXJjZVJvb3QiOiIifQ==